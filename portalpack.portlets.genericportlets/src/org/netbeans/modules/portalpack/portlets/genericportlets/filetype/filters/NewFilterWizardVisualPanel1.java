/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.portlets.genericportlets.filetype.filters;

import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.FilterContext;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.codegen.CodeGenConstants;
import org.openide.WizardDescriptor;

public final class NewFilterWizardVisualPanel1 extends JPanel implements DocumentListener{
    
    private NewFilterWizardWizardPanel1 panel;
    /** Creates new form NewFilterWizardVisualPanel1 */
    public NewFilterWizardVisualPanel1(NewFilterWizardWizardPanel1 panel) {
        this.panel = panel;
        initComponents();
        initData();
        filterNameTxt.getDocument().addDocumentListener(this);
    }
    
    public String getName() {
        return "Step #1";
    }
    
    public void initData() {
        filterTypeCombo.addItem(CodeGenConstants.ACTION_FILTER_TYPE);
        filterTypeCombo.addItem(CodeGenConstants.EVENT_FILTER_TYPE);
        filterTypeCombo.addItem(CodeGenConstants.RENDER_FILTER_TYPE);
        filterTypeCombo.addItem(CodeGenConstants.RESOURCE_FILTER_TYPE);
        filterTypeCombo.addItem(CodeGenConstants.FRAGMENT_FILTER_TYPE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        filterTypeCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        filterNameTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        initParamTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        addParamButton = new javax.swing.JButton();
        deleteParamButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Filter Type");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Filter Name");

        initParamTableModel = new InitParamTableModel();
        initParamTable.setModel(initParamTableModel
        );
        jScrollPane2.setViewportView(initParamTable);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "Init Params");

        org.openide.awt.Mnemonics.setLocalizedText(addParamButton, "Add");
        addParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParamButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteParamButton, "Delete");
        deleteParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteParamButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2))
                        .add(57, 57, 57)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(filterNameTxt)
                            .add(filterTypeCombo, 0, 265, Short.MAX_VALUE)))
                    .add(jLabel3)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(24, 24, 24)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(deleteParamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .add(addParamButton, 0, 0, Short.MAX_VALUE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(filterTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(filterNameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(jLabel3)
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(addParamButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteParamButton)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
private void deleteParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteParamButtonActionPerformed
    // TODO add your handling code here:
    int row = initParamTable.getSelectedRow();
    if(row != -1)
        initParamTableModel.deleteRow(row);
}//GEN-LAST:event_deleteParamButtonActionPerformed

private void addParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParamButtonActionPerformed
    // TODO add your handling code here:
    initParamTableModel.addRow();
}//GEN-LAST:event_addParamButtonActionPerformed

public void read(WizardDescriptor wizardDescriptor) {
    
}
public void store(WizardDescriptor wizardDescriptor) {
     
    FilterContext context = (FilterContext)wizardDescriptor.getProperty("context");
    
    if(context == null)
    {
        context = new FilterContext();
        wizardDescriptor.putProperty("context", context);
    }
    
    context.setFilterName(filterNameTxt.getText());
    context.setInitParams((InitParam [])initParamTableModel.getInitParams().toArray(new InitParam[0]));
    context.setFilterType((String)filterTypeCombo.getSelectedItem());
        
}

public boolean valid(WizardDescriptor wd)
{
    if(wd == null)
        return true;
    String filterName = filterNameTxt.getText();
    if(filterName == null || filterName.trim().length() == 0)
    {
         wd.putProperty("WizardPanel_errorMessage",
                    "Invalid Filter Name");
            return false; 
    }else if(panel.getAvailableFilters().contains(filterName))
    {
        wd.putProperty("WizardPanel_errorMessage",
                    "A Filter with same name already present");
            return false; 
    }
    wd.putProperty("WizardPanel_errorMessage",
                    "");
    return true;
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParamButton;
    private javax.swing.JButton deleteParamButton;
    private javax.swing.JTextField filterNameTxt;
    private javax.swing.JComboBox filterTypeCombo;
    private javax.swing.JTable initParamTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private InitParamTableModel initParamTableModel;

    public void insertUpdate(DocumentEvent arg0) {
        panel.fireChangeEvent();
    }

    public void removeUpdate(DocumentEvent arg0) {
        panel.fireChangeEvent();
    }

    public void changedUpdate(DocumentEvent arg0) {
        panel.fireChangeEvent();
    }
    
    
}


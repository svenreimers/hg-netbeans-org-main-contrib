/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.jemmysupport.bundlelookup;

/*
 * BundleLookupPanel.java
 *
 * Created on December 3, 2001, 10:46 AM
 */
import java.awt.Dialog;
import java.awt.datatransfer.StringSelection;
import org.openide.windows.TopComponent;
import org.openide.TopManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.ImageIcon;
import javax.swing.JPopupMenu;
import javax.swing.event.PopupMenuListener;

/** Panel for Resource Bundle Lookup
 * @author <a href="mailto:adam.sotona@sun.com">Adam Sotona</a>
 * @version 0.1
 */
public class BundleLookupPanel extends TopComponent  {

    static BundleLookupPanel panel;
    
    static final String[] header={"Resource Bundle","Key","Text"};

    static class ResultTableModel extends DefaultTableModel {
        ResultTableModel() {
            super(header,0);
        }
        
        /** method returning Result Table column classes
         * @return String.class
         * @param columnIndex column index
         */        
        public Class getColumnClass(int columnIndex) {
            return String.class;
        }

        /** method preventing result table to be edited
         * @param rowIndex row index
         * @param columnIndex column index
         * @return boolean false
         */        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }        

    private static Dialog dialog;
    
    /** Creates new BundleLookupPanel
     */
    public BundleLookupPanel() {
        super();
        setName("Resource Bundle Lookup");
        try {
            setIcon(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/org/netbeans/modules/jemmysupport/bundlelookup/BundleLookupAction.gif")));
        } catch (Exception e){}
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        SearchTextField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        ResultTable = new javax.swing.JTable();
        BundleTextField = new javax.swing.JTextField();
        label = new javax.swing.JLabel();
        BundleCaseCheck = new javax.swing.JCheckBox();
        BundleSubstringCheck = new javax.swing.JCheckBox();
        TextCaseCheck = new javax.swing.JCheckBox();
        TextSubstringCheck = new javax.swing.JCheckBox();
        UseFilterCheck = new javax.swing.JCheckBox();
        StatusLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        SearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(SearchTextField, gridBagConstraints);

        SearchButton.setMnemonic('s');
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        add(SearchButton, gridBagConstraints);

        ScrollPane.setPreferredSize(new java.awt.Dimension(500, 300));
        ScrollPane.setAutoscrolls(true);
        ResultTable.setModel(new ResultTableModel());
        ResultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        ResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultTableMouseClicked(evt);
            }
        });

        ScrollPane.setViewportView(ResultTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(ScrollPane, gridBagConstraints);

        BundleTextField.setEnabled(false);
        BundleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BundleTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        add(BundleTextField, gridBagConstraints);

        label.setText(" Searched text: ");
        label.setForeground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Label.foreground"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(label, gridBagConstraints);

        BundleCaseCheck.setSelected(true);
        BundleCaseCheck.setText("Case Sensitive");
        BundleCaseCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 0);
        add(BundleCaseCheck, gridBagConstraints);

        BundleSubstringCheck.setSelected(true);
        BundleSubstringCheck.setText("Substring");
        BundleSubstringCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(BundleSubstringCheck, gridBagConstraints);

        TextCaseCheck.setSelected(true);
        TextCaseCheck.setForeground(new java.awt.Color(0, 0, 0));
        TextCaseCheck.setText("Case Sensitive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 0);
        add(TextCaseCheck, gridBagConstraints);

        TextSubstringCheck.setSelected(true);
        TextSubstringCheck.setText("Substring");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(TextSubstringCheck, gridBagConstraints);

        UseFilterCheck.setForeground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Label.foreground"));
        UseFilterCheck.setText("Use Resource Bundle Filter:");
        UseFilterCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseFilterCheckActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(UseFilterCheck, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(StatusLabel, gridBagConstraints);

    }//GEN-END:initComponents

    private void ResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResultTableMouseClicked
        if ((evt.getModifiers()==evt.BUTTON3_MASK)&&(ResultTable.getSelectedRow()>=0)) {
            JPopupMenu menu=new JPopupMenu();
            menu.add("Copy Lookup Code to Clipboard").addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ClipboardActionPerformed(evt);
                }
            });
            menu.show(ResultTable,evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_ResultTableMouseClicked

    private void ClipboardActionPerformed(java.awt.event.ActionEvent evt) {
        int i=ResultTable.getSelectedRow();
        if (i>=0) {
            TopManager.getDefault().getClipboard().setContents(new StringSelection("ResourceBundle.getBundle(\""+ResultTable.getValueAt(i,0).toString()+"\").getString(\""+ResultTable.getValueAt(i,1).toString()+"\")"),null);
        }
    }

    private void UseFilterCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseFilterCheckActionPerformed
        boolean state=UseFilterCheck.isSelected();
        BundleTextField.setEnabled(state);
        BundleCaseCheck.setEnabled(state);
        BundleSubstringCheck.setEnabled(state);
    }//GEN-LAST:event_UseFilterCheckActionPerformed

    private void BundleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BundleTextFieldActionPerformed
        SearchButtonActionPerformed(evt);
    }//GEN-LAST:event_BundleTextFieldActionPerformed

    
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        SearchButton.setEnabled(false);
        SearchTextField.setEnabled(false);
        TextCaseCheck.setEnabled(false);
        TextSubstringCheck.setEnabled(false);
        UseFilterCheck.setEnabled(false);
        BundleTextField.setEnabled(false);
        BundleCaseCheck.setEnabled(false);
        BundleSubstringCheck.setEnabled(false);
        StatusLabel.setText("Searching...");
        final DefaultTableModel table = new ResultTableModel();
        ResultTable.setModel(table);
        Thread t=new Thread(new Runnable() {
            public void run() {
                if (UseFilterCheck.isSelected()) {
                    BundleLookup.lookupText(table, SearchTextField.getText(), TextCaseCheck.isSelected(), TextSubstringCheck.isSelected(), BundleTextField.getText(), BundleCaseCheck.isSelected(), BundleSubstringCheck.isSelected());
                } else {
                    BundleLookup.lookupText(table, SearchTextField.getText(), TextCaseCheck.isSelected(), TextSubstringCheck.isSelected(), "", true, true);
                }
                StatusLabel.setText("Found "+String.valueOf(table.getRowCount())+" keys.");
                SearchButton.setEnabled(true);
                SearchTextField.setEnabled(true);
                TextCaseCheck.setEnabled(true);
                TextSubstringCheck.setEnabled(true);
                UseFilterCheck.setEnabled(true);
                boolean state=UseFilterCheck.isSelected();
                BundleTextField.setEnabled(state);
                BundleCaseCheck.setEnabled(state);
                BundleSubstringCheck.setEnabled(state);
            }
        },"SearchThread");
        t.setDaemon(true);
        t.start();
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void SearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTextFieldActionPerformed
        SearchButtonActionPerformed(evt);
    }//GEN-LAST:event_SearchTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox UseFilterCheck;
    private javax.swing.JCheckBox BundleCaseCheck;
    private javax.swing.JTextField BundleTextField;
    private javax.swing.JCheckBox TextCaseCheck;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTable ResultTable;
    private javax.swing.JCheckBox TextSubstringCheck;
    private javax.swing.JCheckBox BundleSubstringCheck;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JLabel label;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JTextField SearchTextField;
    // End of variables declaration//GEN-END:variables
                       
    /** opens panel for debugging purposes
     * @param args command line argument
     */    
    public static void main(String args[]) {
        new BundleLookupPanel().open();
    }
    
}

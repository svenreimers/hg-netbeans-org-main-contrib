/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.jemmysupport.generator;

/*
 * ComponentsEditorPanel.java
 *
 * Created on March 12, 2002, 11:16 AM
 */
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.openide.DialogDescriptor;
import org.openide.TopManager;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import org.openide.nodes.Node;
import org.openide.nodes.BeanNode;
import java.beans.IntrospectionException;
import javax.swing.JTree;
import javax.swing.ImageIcon;
import java.io.InputStream;
import javax.swing.tree.DefaultTreeCellRenderer;
import java.awt.event.KeyEvent;
import javax.swing.JPopupMenu;
import javax.swing.tree.TreePath;
import java.util.Collection;
import java.awt.Component;
import javax.swing.Icon;

/** class with panel used for edit found components before generation
 * @author <a href="mailto:adam.sotona@sun.com">Adam Sotona</a>
 * @version 0.1
 */
public class ComponentsEditorPanel extends javax.swing.JPanel {
    
    static ImageIcon rootIcon;
    static ImageIcon nodeIcon;
    
    static {
        try {
            InputStream in = TopManager.class.getClassLoader().getResourceAsStream("org/openide/resources/propertysheet/customize.gif");
            byte b[] = new byte[in.available()];
            in.read(b);
            in.close();
            rootIcon = new ImageIcon(b);
            in = TopManager.class.getClassLoader().getResourceAsStream("org/openide/resources/src/sourceOptions.gif");
            b = new byte[in.available()];
            in.read(b);
            in.close();
            nodeIcon = new ImageIcon(b);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    Collection nodes;

    static class MyCellRenderer extends DefaultTreeCellRenderer {
        public MyCellRenderer() {
            super();
        }

        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row,hasFocus);
            try {
                Icon icon = ((ComponentGenerator.ComponentRecord)((DefaultMutableTreeNode)value).getUserObject()).getIcon();
                if (icon!=null) 
                    setIcon(icon);
            } catch (Exception e) {};
            return this;
        }

    }
    
    /** Creates new form ComponentsEditorPanel */
    public ComponentsEditorPanel(Object root, Collection nodes) {
        this.nodes = nodes;
        initComponents();
        propertySheet.setDisplayWritableOnly(true);
        if ((rootIcon!=null)&&(nodeIcon!=null)) {
            MyCellRenderer rend = new MyCellRenderer();
            rend.setClosedIcon(rootIcon);
            rend.setOpenIcon(rootIcon);
            rend.setLeafIcon(nodeIcon);
            tree.setCellRenderer(rend);
        }
        DefaultMutableTreeNode rootNode = new JTree.DynamicUtilTreeNode(root, nodes.toArray());
        tree.getSelectionModel().setSelectionMode(javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION); 
        tree.setModel(new DefaultTreeModel(rootNode));
        tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                TreePath path = e.getNewLeadSelectionPath();
                if (path==null) {
                    propertySheet.setNodes(null);
                } else {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                    try {
                        propertySheet.setNodes(new Node[]{new BeanNode(node.getUserObject())});
                    } catch (IntrospectionException ex) {
                        propertySheet.setNodes(null);
                    }
                }
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        splitPane = new javax.swing.JSplitPane();
        scrollPane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        propertySheet = new org.openide.explorer.propertysheet.PropertySheet();

        setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(415);
        splitPane.setDividerSize(4);
        splitPane.setResizeWeight(0.5);
        splitPane.setPreferredSize(new java.awt.Dimension(800, 400));
        tree.setShowsRootHandles(true);
        tree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                treeKeyReleased(evt);
            }
        });

        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeMouseClicked(evt);
            }
        });

        scrollPane.setViewportView(tree);

        splitPane.setLeftComponent(scrollPane);

        splitPane.setRightComponent(propertySheet);

        add(splitPane, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void treeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyReleased
        if ((evt.getKeyCode()==KeyEvent.VK_DELETE)&&(evt.getModifiers()==0)&&(tree.getSelectionCount()==1)&&(tree.getSelectionRows()[0]>0)) {
            DeleteActionPerformed();
        }
    }//GEN-LAST:event_treeKeyReleased

    private void treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseClicked
        if ((evt.getModifiers()==evt.BUTTON3_MASK)&&(tree.getSelectionCount()==1)&&(tree.getSelectionRows()[0]>0)) {
            JPopupMenu menu=new JPopupMenu();
            menu.add("Delete").addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    DeleteActionPerformed();
                }
            });
            menu.show(tree,evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_treeMouseClicked
    
    void DeleteActionPerformed() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)tree.getSelectionPath().getLastPathComponent();
        ((DefaultTreeModel)tree.getModel()).removeNodeFromParent(node);
        nodes.remove(node.getUserObject());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane scrollPane;
    private org.openide.explorer.propertysheet.PropertySheet propertySheet;
    // End of variables declaration//GEN-END:variables
    
    public static boolean showDialog(Object root, Collection nodes) {
        DialogDescriptor desc = new DialogDescriptor(new ComponentsEditorPanel(root, nodes), "Components Editor", true, DialogDescriptor.OK_CANCEL_OPTION, DialogDescriptor.OK_OPTION, null);
        TopManager.getDefault().createDialog(desc).show();
        return desc.getValue()==DialogDescriptor.OK_OPTION;
    }
}

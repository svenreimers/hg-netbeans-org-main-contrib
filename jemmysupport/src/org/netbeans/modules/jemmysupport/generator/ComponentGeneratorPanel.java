/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.jemmysupport.generator;

/*
 * ComponentGeneratorPanel.java
 *
 * Created on February 7, 2002, 10:34 AM
 */
import java.util.ArrayList;
import java.util.Properties;
import java.lang.ref.*;
import java.beans.*;
import java.awt.event.ActionListener;
import java.awt.Dialog;
import javax.swing.JLabel;
import java.lang.reflect.UndeclaredThrowableException;

import org.openide.TopManager;
import org.openide.filesystems.Repository;
import org.openide.DialogDescriptor;
import org.openide.loaders.*;
import org.openide.nodes.*;
import org.openide.explorer.view.*;
import org.openide.explorer.ExplorerManager;
import org.openide.filesystems.*;

/** Component Generator panel
 * @author <a href="mailto:adam.sotona@sun.com">Adam Sotona</a>
 * @version 0.2
 */
public class ComponentGeneratorPanel extends javax.swing.JPanel implements DataFilter, VetoableChangeListener, PropertyChangeListener {

    /** root node */
    private Node rootNode;
    private static Dialog dialog;
    private String packageName;
    private String directory;
    private Thread thread;
    private Properties props;
    
    /** creates ans shows Component Generator dialog
     */    
    public static void showDialog(){
        if (dialog==null) {
            dialog = TopManager.getDefault().createDialog(new DialogDescriptor(new ComponentGeneratorPanel(), "Jemmy Component Generator", false, new Object[0], null, DialogDescriptor.BOTTOM_ALIGN, null, null));
        }
        dialog.show();
    }
    
    /** Creates new ComponentGeneratorPanel
     */
    public ComponentGeneratorPanel() {
        loadProperties();
        initComponents();
        rootNode = createPackagesNode();
        packagesPanel.getExplorerManager().setRootContext(rootNode);
        packagesPanel.getExplorerManager().addVetoableChangeListener(this);
        packagesPanel.getExplorerManager().addPropertyChangeListener(this);
    }
   
    /** Creates node that displays all packages.
    */
    private Node createPackagesNode () {
        Node orig = TopManager.getDefault().getPlaces().nodes ().repository(this);
        return orig;
    }

    void loadProperties() {
        props = new Properties();
        try {
            props.load( Repository.getDefault().getDefaultFileSystem().findResource("jemmysupport/ComponentGenerator.properties").getInputStream());
        } catch (Exception e1) {
            try {
                props.load( this.getClass().getClassLoader().getResourceAsStream("org/netbeans/modules/jemmysupport/generator/ComponentGenerator.properties"));
            } catch (Exception e) {
                e.printStackTrace();
                throw new UndeclaredThrowableException(e, "Properties file not loaded!");
            }
        }
    }
    
    void saveProperties() {
        try {
            FileObject fo=Repository.getDefault().getDefaultFileSystem().getRoot();
            FileObject fo2=fo.getFileObject("jemmysupport");
            if (fo2==null) {
                fo2=fo.createFolder("jemmysupport");
            }
            fo=fo2.getFileObject("ComponentGenerator","properties");
            if (fo==null) {
                fo=fo2.createData("ComponentGenerator","properties");
            }
            props.store(fo.getOutputStream(fo.lock()),"Jemmy Support Module - Component Generator - User Properties File");
        } catch (Exception e) {
                throw new UndeclaredThrowableException(e, "Properties file not saved!");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        packagesPanel = new org.openide.explorer.ExplorerPanel();
        packagesTreeView = new org.openide.explorer.view.BeanTreeView();
        selectLabel = new javax.swing.JLabel();
        helpLabel = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        customizeButton = new javax.swing.JButton();
        screenShot = new javax.swing.JCheckBox();
        showEditor = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setPreferredSize(new java.awt.Dimension(420, 300));
        packagesPanel.setName("");
        packagesTreeView.setPopupAllowed(false);
        packagesTreeView.setAutoscrolls(true);
        packagesPanel.add(packagesTreeView, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        add(packagesPanel, gridBagConstraints);

        selectLabel.setForeground(java.awt.Color.black);
        selectLabel.setText("Select destination package:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(selectLabel, gridBagConstraints);

        helpLabel.setFont(new java.awt.Font("Dialog", 2, 12));
        helpLabel.setForeground(java.awt.Color.black);
        helpLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        helpLabel.setText("Use Ctrl-F12 key to grab current focused component (Frame, Dialog).");
        helpLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        add(helpLabel, gridBagConstraints);

        stopButton.setMnemonic('t');
        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(stopButton, gridBagConstraints);

        startButton.setMnemonic('s');
        startButton.setText("Start");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(startButton, gridBagConstraints);

        closeButton.setMnemonic('c');
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(closeButton, gridBagConstraints);

        customizeButton.setFont(new java.awt.Font("Dialog", 3, 10));
        customizeButton.setText("Customize Settings");
        customizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customizeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        add(customizeButton, gridBagConstraints);

        screenShot.setSelected(true);
        screenShot.setText("add screenshot");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        add(screenShot, gridBagConstraints);

        showEditor.setSelected(true);
        showEditor.setText("show components editor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(showEditor, gridBagConstraints);

    }//GEN-END:initComponents

    private void customizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customizeButtonActionPerformed
        if (GeneratorPropertiesEditor.EditProperties(props)) {
            saveProperties();
        }
    }//GEN-LAST:event_customizeButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        stopButtonActionPerformed(evt);
        dialog.dispose();
        dialog=null;
    }//GEN-LAST:event_closeButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (thread!=null) {
            thread.interrupt();
            thread=null;
        }
        stopButton.setEnabled(false);
        helpLabel.setEnabled(false);
        packagesTreeView.setEnabled(true);
        startButton.setEnabled(true);
        customizeButton.setEnabled(true);
        screenShot.setEnabled(true);
        showEditor.setEnabled(true);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        packagesTreeView.setEnabled(false);
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        customizeButton.setEnabled(false);
        screenShot.setEnabled(false);
        showEditor.setEnabled(false);
        helpLabel.setEnabled(true);
        if (thread!=null) {
            thread.interrupt();
        }
        helpLabel.setText("Use Ctrl-F12 key to grab current focused component (Frame, Dialog).");
        thread = new Thread(new ComponentGeneratorRunnable(directory, packageName, this, props, screenShot.isSelected(), showEditor.isSelected()));
        thread.start();
    }//GEN-LAST:event_startButtonActionPerformed

    //
    // Filter to accept only folders
    //

    /** Should the data object be displayed or not?
    * @param obj the data object
    * @return <CODE>true</CODE> if the object should be displayed,
    *    <CODE>false</CODE> otherwise
    */
    public boolean acceptDataObject(DataObject obj) {
        Object o = obj.getCookie(DataFolder.class);
        if (o == null) {
            return false;
        }
        return true;
    }

    /** Allow only simple selection.
     * @param ev PropertyChangeEvent
     * @throws PropertyVetoException PropertyVetoException
     */
    public void vetoableChange(PropertyChangeEvent ev)
    throws PropertyVetoException {
        if (ExplorerManager.PROP_SELECTED_NODES.equals (ev.getPropertyName ())) {
            Node n[] = (Node[])ev.getNewValue();
            if (n.length > 1 ) {
                throw new PropertyVetoException ("Only single selection allowed", ev); // NOI18N
            } 
        }
    }
    
    /** Changes in selected node in packages.
     * @param ev PropertyChangeEvent
     */
    public void propertyChange (PropertyChangeEvent ev) {
        if (ExplorerManager.PROP_SELECTED_NODES.equals (ev.getPropertyName ())) {
            startButton.setEnabled(false);
            Node[] arr = packagesPanel.getExplorerManager ().getSelectedNodes ();
            if (arr.length == 1) {
                DataFolder df = (DataFolder)arr[0].getCookie (DataFolder.class);
                try {
                    if ((df != null) && (!df.getPrimaryFile().getFileSystem().isReadOnly())) {
                        startButton.setEnabled(true);
                        packageName = df.getPrimaryFile().getPackageName('.');
                        directory = FileUtil.toFile(df.getPrimaryFile()).getAbsolutePath();
                    }
                } catch (FileStateInvalidException e) {}
            }
        }
    }
    
    /** returns JLabel used as status line
     * @return JLabel used as status line
     */    
    public JLabel getHelpLabel() {
        return helpLabel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton startButton;
    private javax.swing.JLabel helpLabel;
    private org.openide.explorer.view.BeanTreeView packagesTreeView;
    private javax.swing.JLabel selectLabel;
    private org.openide.explorer.ExplorerPanel packagesPanel;
    private javax.swing.JButton customizeButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox showEditor;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox screenShot;
    // End of variables declaration//GEN-END:variables

    /** creates Component Generator dialog for debugging purposes
     * @param args command line arguments
     */    
    public static void main(String args[]) {
        showDialog();
    }
    
}

/* The following code was generated by JFlex 1.4.2 on 08/02/09 10.47 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.ada.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 08/02/09 10.47 from the specification file
 * <tt>C:/hg-repo/release65/contrib/ada.editor/src/org/netbeans/modules/ada/editor/lexer/resources/Ada95SyntaxLexer.flex</tt>
 */
public class Ada95SyntaxLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_HIGHLIGHTING_ERROR = 8;
  public static final int ST_LOOKING_FOR_PROPERTY = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_LINE_COMMENT = 6;
  public static final int ST_CHAR_LITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\2\0\1\17\22\0\1\46\1\62\1\14\1\10"+
    "\2\0\1\50\1\16\1\51\1\52\1\53\1\5\1\54\1\6\1\7"+
    "\1\55\12\1\1\11\1\56\1\57\1\60\1\61\2\0\1\20\1\21"+
    "\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\47\1\43\1\30"+
    "\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\44"+
    "\1\41\1\36\1\34\1\12\4\0\1\3\1\0\1\20\1\21\1\26"+
    "\1\32\1\4\1\2\1\35\1\42\1\31\1\47\1\43\1\30\1\40"+
    "\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\44\1\41"+
    "\1\36\1\34\1\12\1\0\1\62\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\10\1\1\1\11\21\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\3\30\1\31\1\32\5\0\7\3"+
    "\1\33\1\34\1\35\1\0\1\36\22\0\2\3\1\37"+
    "\5\3\1\40\1\41\22\3\1\42\1\43\1\44\1\3"+
    "\1\45\14\3\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\0\1\56\1\2\1\0\1\2\1\0"+
    "\1\3\1\57\4\3\1\60\2\3\1\61\56\0\1\3"+
    "\1\62\2\3\1\63\1\3\1\64\4\3\1\65\3\3"+
    "\1\66\32\3\1\67\1\70\3\3\1\71\1\72\1\3"+
    "\1\73\4\3\1\0\1\74\3\3\1\75\2\3\1\0"+
    "\1\3\1\76\5\0\1\77\32\0\1\77\13\0\1\77"+
    "\4\0\1\77\7\3\1\100\11\3\1\101\1\3\1\102"+
    "\1\103\1\104\3\3\1\105\7\3\1\106\6\3\1\107"+
    "\1\3\1\110\1\3\1\111\1\3\1\112\1\3\2\0"+
    "\1\113\1\114\1\3\1\115\1\116\3\0\1\3\32\0"+
    "\1\77\15\0\1\117\1\3\1\120\3\3\1\121\7\3"+
    "\1\122\1\123\17\3\1\124\1\125\2\3\1\126\1\0"+
    "\1\127\1\74\1\0\1\3\2\0\1\130\1\3\6\0"+
    "\1\77\23\0\1\77\3\0\1\3\1\131\1\132\2\3"+
    "\1\133\1\134\1\135\4\3\1\136\1\3\1\137\4\3"+
    "\1\140\6\3\1\141\3\3\2\0\1\3\30\0\1\3"+
    "\1\142\1\143\1\144\1\145\1\146\2\3\1\147\2\3"+
    "\1\150\2\3\1\151\1\152\1\153\1\154\1\155\1\3"+
    "\1\156\1\157\1\160\1\3\17\0\1\77\6\0\1\161"+
    "\1\3\1\162\1\163\4\3\1\164\20\0\1\165\1\166"+
    "\1\167\1\170\1\3\17\0\1\3\20\0\1\3\10\0"+
    "\1\3\5\0\1\3\3\0\1\171\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[692];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\146\0\377\0\u0132"+
    "\0\u0165\0\146\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\146\0\146\0\146\0\u0660\0\146\0\u0693"+
    "\0\146\0\u06c6\0\u06f9\0\u072c\0\146\0\146\0\u075f\0\u0792"+
    "\0\u07c5\0\146\0\u07f8\0\146\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\146\0\146\0\146\0\u0297\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0231\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0231\0\u0231\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u0231\0\u0231\0\u1386\0\u13b9"+
    "\0\u0231\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\146\0\146\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\u1650\0\146\0\u1683"+
    "\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u0231\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\u184e\0\u1881\0\u18b4\0\146\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u0231"+
    "\0\u22dd\0\u0231\0\u2310\0\u2343\0\u2376\0\u23a9\0\u0231\0\u23dc"+
    "\0\u240f\0\u2442\0\u0231\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u0231\0\u0231\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u0231\0\u0231\0\u2a3c\0\u0231\0\u2a6f\0\u2aa2"+
    "\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u0231"+
    "\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u0231\0\u2d06\0\u2d39\0\u2d6c"+
    "\0\u2d9f\0\u2dd2\0\146\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1"+
    "\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069"+
    "\0\u309c\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201"+
    "\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399"+
    "\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531"+
    "\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9"+
    "\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u0231\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6"+
    "\0\u0231\0\u39f9\0\u0231\0\u0231\0\u0231\0\u3a2c\0\u3a5f\0\u3a92"+
    "\0\u0231\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7"+
    "\0\u0231\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u3d29\0\u0231"+
    "\0\u3d5c\0\u0231\0\u3d8f\0\u0231\0\u3dc2\0\u0231\0\u3df5\0\u3e28"+
    "\0\u3e5b\0\u0231\0\u0231\0\u3e8e\0\u0231\0\u0231\0\u3ec1\0\u3ef4"+
    "\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c"+
    "\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224"+
    "\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389\0\u43bc"+
    "\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554"+
    "\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec"+
    "\0\u471f\0\u4752\0\u0231\0\u4785\0\u0231\0\u47b8\0\u47eb\0\u481e"+
    "\0\u0231\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983"+
    "\0\u0231\0\u0231\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5"+
    "\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d"+
    "\0\u4c80\0\u0231\0\u0231\0\u4cb3\0\u4ce6\0\u0231\0\u4d19\0\u0231"+
    "\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\146\0\u4e4b\0\u4e7e"+
    "\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u42f0\0\u4fb0\0\u4fe3"+
    "\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148\0\u517b"+
    "\0\u51ae\0\u51e1\0\u5214\0\u5247\0\u527a\0\u52ad\0\u52e0\0\u5313"+
    "\0\u5346\0\u5379\0\u53ac\0\u53df\0\u5412\0\u5445\0\u0231\0\u0231"+
    "\0\u5478\0\u54ab\0\u0231\0\u0231\0\u0231\0\u54de\0\u5511\0\u5544"+
    "\0\u5577\0\u0231\0\u55aa\0\u0231\0\u55dd\0\u5610\0\u5643\0\u5676"+
    "\0\u0231\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8\0\u0231"+
    "\0\u57db\0\u580e\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d\0\u5940"+
    "\0\u5973\0\u59a6\0\u59d9\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5\0\u5ad8"+
    "\0\u5b0b\0\u5b3e\0\u5b71\0\u5ba4\0\u5bd7\0\u5c0a\0\u5c3d\0\u5c70"+
    "\0\u5ca3\0\u5cd6\0\u5d09\0\u5d3c\0\u5d6f\0\u5da2\0\u5dd5\0\u0231"+
    "\0\u0231\0\u0231\0\u0231\0\u0231\0\u5e08\0\u5e3b\0\u0231\0\u5e6e"+
    "\0\u5ea1\0\u0231\0\u5ed4\0\u5f07\0\u0231\0\u0231\0\u0231\0\u0231"+
    "\0\u0231\0\u5f3a\0\u0231\0\146\0\146\0\u5f6d\0\u5fa0\0\u5fd3"+
    "\0\u6006\0\u6039\0\u606c\0\u609f\0\u60d2\0\u6105\0\u6138\0\u616b"+
    "\0\u619e\0\u61d1\0\u6204\0\u6237\0\u626a\0\u629d\0\u62d0\0\u6303"+
    "\0\u6336\0\u6369\0\u639c\0\u63cf\0\u0231\0\u6402\0\u0231\0\u0231"+
    "\0\u6435\0\u6468\0\u649b\0\u64ce\0\u0231\0\u6501\0\u6534\0\u6567"+
    "\0\u659a\0\u65cd\0\u6600\0\u6633\0\u6666\0\u6699\0\u66cc\0\u66ff"+
    "\0\u6732\0\u6765\0\u6798\0\u67cb\0\u67fe\0\u0231\0\u0231\0\u0231"+
    "\0\u0231\0\u6831\0\u6864\0\u6897\0\u68ca\0\u68fd\0\u6930\0\u6963"+
    "\0\u6996\0\u69c9\0\u69fc\0\u6a2f\0\u6a62\0\u6a95\0\u6ac8\0\u6afb"+
    "\0\u6b2e\0\u6b61\0\u6b94\0\u6bc7\0\u6bfa\0\u6c2d\0\u6c60\0\u6c93"+
    "\0\u6cc6\0\u6cf9\0\u6d2c\0\u6d5f\0\u6d92\0\u6dc5\0\u6df8\0\u6e2b"+
    "\0\u6e5e\0\u6e91\0\u6ec4\0\u6ef7\0\u6f2a\0\u6f5d\0\u6f90\0\u6fc3"+
    "\0\u6ff6\0\u7029\0\u705c\0\u708f\0\u70c2\0\u70f5\0\u7128\0\u715b"+
    "\0\u718e\0\u71c1\0\u71f4\0\u7227\0\u725a\0\u0231\0\u728d\0\u72c0"+
    "\0\u72f3\0\u7326\0\u7359\0\u738c\0\u73bf\0\u73f2\0\u7425\0\u7458"+
    "\0\u748b\0\u74be\0\u74f1\0\u7524";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[692];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\6\1\15\1\16\1\17\1\20\1\17\1\21\1\17"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\16\1\36\1\37\1\40"+
    "\1\41\1\42\4\16\1\17\1\16\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\2\56\1\57\1\56\1\57\2\56\1\60\2\56\1\57"+
    "\5\56\26\57\1\56\1\57\13\56\63\0\15\61\1\62"+
    "\1\61\1\63\43\61\13\64\1\65\1\64\1\65\1\64"+
    "\1\65\26\64\1\65\14\64\1\0\1\7\1\0\1\66"+
    "\1\67\2\0\1\70\2\71\52\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\1\73\1\16\1\74\5\16\1\75"+
    "\6\16\1\76\6\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\10\16\1\77\2\16\1\100"+
    "\2\16\1\101\7\16\1\0\1\16\21\0\1\102\63\0"+
    "\1\103\133\0\1\104\3\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\26\16\1\0\1\16\26\0\1\17\1\0"+
    "\1\17\1\0\1\17\26\0\1\17\14\0\14\105\1\106"+
    "\1\0\45\105\2\107\1\110\1\107\1\111\10\107\1\0"+
    "\2\107\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\4\107\1\125\1\126\1\127"+
    "\2\107\1\130\16\107\1\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\1\16\1\131\1\16\1\132\1\133\1\16"+
    "\1\134\1\16\1\135\2\16\1\136\12\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\137\5\0\1\16\5\0\2\16"+
    "\1\140\23\16\1\0\1\16\14\0\1\16\1\141\1\72"+
    "\1\16\5\0\1\16\5\0\3\16\1\142\1\143\12\16"+
    "\1\144\6\16\1\0\1\16\14\0\2\16\1\72\1\145"+
    "\5\0\1\16\5\0\1\146\25\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\147\5\0\1\16\5\0\1\150\2\16"+
    "\1\151\10\16\1\152\5\16\1\153\3\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\154\5\0\1\16\5\0\17\16"+
    "\1\155\6\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\1\156\1\16\1\157\17\16\1\160"+
    "\3\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\1\161\2\16\1\162\22\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\2\16"+
    "\1\163\6\16\1\164\14\16\1\0\1\16\14\0\1\16"+
    "\1\165\1\72\1\16\5\0\1\16\5\0\5\16\1\166"+
    "\5\16\1\167\12\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\170\5\0\1\16\5\0\2\16\1\171\6\16\1\172"+
    "\14\16\1\0\1\16\14\0\2\16\1\72\1\173\5\0"+
    "\1\16\5\0\2\16\1\174\14\16\1\175\6\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\176\5\0\1\16\5\0"+
    "\2\16\1\177\23\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\2\16\1\200\23\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\5\16\1\201\5\16\1\202\12\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\2\16\1\203"+
    "\23\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\11\16\1\204\10\16\1\205\3\16\1\0"+
    "\1\16\66\0\1\206\67\0\1\207\61\0\1\210\1\211"+
    "\1\212\62\0\1\213\61\0\1\214\1\215\2\0\2\57"+
    "\1\216\1\57\5\0\1\57\5\0\26\57\1\0\1\57"+
    "\22\0\1\217\53\0\15\61\1\62\1\61\1\62\43\61"+
    "\15\0\1\62\60\0\1\65\1\0\1\65\1\0\1\65"+
    "\26\0\1\65\15\0\1\7\62\0\1\220\3\0\2\221"+
    "\55\0\1\222\62\0\2\223\1\0\1\223\13\0\2\223"+
    "\4\0\1\223\3\0\1\223\31\0\2\16\1\0\1\16"+
    "\5\0\1\16\5\0\26\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\10\16\1\224\15\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\3\16\1\225\22\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\2\16\1\226\23\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\13\16\1\227\12\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\5\16\1\230\20\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\231\5\16\1\232\13\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\6\16"+
    "\1\233\2\16\1\234\14\16\1\0\1\16\27\0\1\105"+
    "\64\0\1\235\62\0\1\235\3\0\1\236\1\237\4\0"+
    "\1\240\1\241\47\0\1\235\17\0\1\242\26\0\1\243"+
    "\13\0\1\235\7\0\1\244\1\0\1\245\1\0\1\246"+
    "\46\0\1\235\1\0\1\247\1\0\1\250\6\0\1\251"+
    "\47\0\1\235\20\0\1\252\27\0\1\253\11\0\1\235"+
    "\1\0\1\254\1\0\1\255\44\0\1\256\11\0\1\235"+
    "\1\0\1\257\2\0\1\260\55\0\1\235\1\0\1\261"+
    "\3\0\1\262\1\0\1\263\2\0\1\264\5\0\1\265"+
    "\1\266\26\0\1\267\11\0\1\235\1\0\1\270\1\0"+
    "\1\271\5\0\1\272\50\0\1\235\1\0\1\273\1\0"+
    "\1\274\44\0\1\275\11\0\1\235\1\0\1\276\60\0"+
    "\1\235\13\0\1\277\1\300\4\0\1\301\26\0\1\302"+
    "\11\0\1\235\12\0\1\303\47\0\1\235\14\0\1\304"+
    "\45\0\1\235\1\0\1\305\1\0\1\306\6\0\1\307"+
    "\47\0\1\235\4\0\1\310\5\0\1\311\35\0\1\312"+
    "\11\0\1\235\1\0\1\313\43\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\2\16\1\314\2\16\1\315\20\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\3\16\1\316\22\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\6\16\1\317\17\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\10\16\1\320\1\321\14\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\12\16\1\322"+
    "\13\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\15\16\1\323\10\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\2\16\1\324"+
    "\7\16\1\325\13\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\22\16\1\326\3\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\4\16\1\327\21\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\4\16\1\330\1\16\1\331"+
    "\4\16\1\332\4\16\1\333\3\16\1\334\1\335\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\11\16\1\336\1\16\1\337\12\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\340"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\5\16\1\341\7\16\1\342\10\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\17\16\1\343\6\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\7\16\1\344\16\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\345\5\0\1\16\5\0"+
    "\26\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\7\16\1\346\1\347\15\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\1\16"+
    "\1\350\24\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\5\16\1\351\20\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\13\16"+
    "\1\352\12\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\1\353\25\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\6\16\1\354"+
    "\17\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\1\355\1\16\1\356\6\16\1\357\14\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\2\16\1\360\23\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\20\16\1\361\5\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\362\21\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\6\16\1\363\1\16"+
    "\1\364\15\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\15\16\1\365\10\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\21\16"+
    "\1\366\4\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\4\16\1\367\21\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\10\16"+
    "\1\370\15\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\13\16\1\371\12\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\4\16"+
    "\1\372\21\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\3\16\1\373\22\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\374\5\0\1\16\5\0\26\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\375\21\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\12\16\1\376\13\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\377\5\16\1\u0100\13\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\u0101\5\0\1\16\5\0\11\16"+
    "\1\u0102\14\16\1\0\1\16\14\0\2\57\1\0\1\57"+
    "\5\0\1\57\5\0\26\57\1\0\1\57\14\0\1\220"+
    "\1\0\1\221\60\0\1\220\62\0\1\222\1\0\1\70"+
    "\1\67\57\0\2\223\1\71\1\223\2\0\1\u0103\2\u0104"+
    "\6\0\2\223\4\0\1\223\3\0\1\223\31\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\5\16\1\u0105\20\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\1\u0106\25\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\6\16\1\u0107\17\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\u0108\5\0\1\16\5\0"+
    "\11\16\1\u0109\14\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\3\16\1\u010a\22\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\26\16\1\u010b\1\16\14\0\2\16\1\72\1\u010c\5\0"+
    "\1\16\5\0\26\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\4\16\1\u010d\21\16\1\0"+
    "\1\16\36\0\1\u010e\57\0\1\u010f\64\0\1\u0110\63\0"+
    "\1\276\63\0\1\u0111\2\0\1\u0112\57\0\1\u0113\64\0"+
    "\1\u0114\65\0\1\u0115\63\0\1\u0116\14\0\1\u0117\40\0"+
    "\1\u010e\67\0\1\u0118\54\0\1\u0119\62\0\1\300\56\0"+
    "\1\u011a\17\0\1\u011b\55\0\1\u011c\66\0\1\u011d\46\0"+
    "\1\u011e\74\0\1\u0113\64\0\1\u011f\25\0\1\u0120\102\0"+
    "\1\u0121\60\0\1\u0122\54\0\1\u010e\22\0\1\u0123\53\0"+
    "\1\u0124\54\0\1\u0125\73\0\1\u0126\61\0\1\u0127\61\0"+
    "\1\u0128\3\0\1\u0129\3\0\1\u012a\1\u012b\42\0\1\u012c"+
    "\65\0\1\u012d\64\0\1\u012e\55\0\1\u012f\12\0\1\u0130"+
    "\54\0\1\u0131\41\0\1\u0132\105\0\1\u0133\53\0\1\u011c"+
    "\72\0\1\u0134\2\0\1\u0135\64\0\1\u0136\46\0\1\u0137"+
    "\4\0\1\u0138\62\0\1\u0139\7\0\1\u013a\56\0\1\u013b"+
    "\63\0\1\u0113\60\0\1\u013c\63\0\1\u013d\53\0\1\u013e"+
    "\67\0\1\u013f\33\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\3\16\1\u0140\22\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\4\16\1\u0141\21\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\1\u0142\25\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\u0143\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\1\u0144\25\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\11\16\1\u0145\14\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\10\16\1\u0146\15\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\14\16\1\u0147\11\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\u0148\5\0\1\16\5\0\26\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\17\16"+
    "\1\u0149\6\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\2\16\1\u014a\23\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\1\u014b"+
    "\25\16\1\0\1\16\14\0\2\16\1\72\1\u014c\5\0"+
    "\1\16\5\0\26\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\17\16\1\u014d\6\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\5\16\1\u014e\20\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\15\16\1\u014f\10\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\20\16\1\u0150\5\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\23\16\1\u0151\2\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\15\16\1\u0152\10\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\u0153\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\u0154\5\0\1\16\5\0\26\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\13\16\1\u0155\12\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\1\u0156\25\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\u0157\5\0\1\16\5\0\26\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\u0158\21\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\u0159\5\0\1\16\5\0\26\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\5\16"+
    "\1\u015a\20\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\3\16\1\u015b\22\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\23\16"+
    "\1\u015c\2\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\15\16\1\u015d\10\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\4\16"+
    "\1\u015e\1\16\1\u015f\17\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\24\16\1\u0160\1\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\7\16\1\u0161\16\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\11\16\1\u0162\14\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\u0163\5\0\1\16"+
    "\5\0\26\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\10\16\1\u0164\15\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\1\u0165"+
    "\3\16\1\u0166\21\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\11\16\1\u0167\14\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\10\16\1\u0168\15\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\u0169\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\2\16\1\u016a"+
    "\23\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\11\16\1\u016b\14\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\22\16\1\u016c"+
    "\3\16\1\0\1\16\14\0\2\16\1\72\1\u016d\5\0"+
    "\1\16\5\0\26\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\13\16\1\u016e\12\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\10\16\1\u016f\15\16\1\0\1\16\14\0\2\u0170\1\0"+
    "\1\u0170\13\0\2\u0170\4\0\1\u0170\3\0\1\u0170\34\0"+
    "\1\u0171\57\0\2\16\1\72\1\u0172\5\0\1\16\5\0"+
    "\26\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\4\16\1\u0173\21\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\4\16\1\u0174"+
    "\21\16\1\0\1\16\14\0\1\16\1\u0175\1\72\1\16"+
    "\5\0\1\16\5\0\26\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\14\16\1\u0176\11\16"+
    "\1\0\1\16\41\0\1\u0177\1\0\1\u0178\1\u0179\32\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\7\16\1\u017a"+
    "\16\16\1\0\1\16\17\0\1\u0113\104\0\1\u017b\56\0"+
    "\1\u017c\44\0\1\u017d\100\0\1\u017e\44\0\1\u012c\113\0"+
    "\1\u017f\50\0\1\u0114\57\0\1\u0180\76\0\1\u0181\31\0"+
    "\1\u0182\111\0\1\u0113\50\0\1\u0183\77\0\1\u010e\60\0"+
    "\1\u0184\67\0\1\u0185\55\0\1\u0186\33\0\1\u0187\101\0"+
    "\1\u0188\67\0\1\u0189\65\0\1\u018a\55\0\1\u0113\64\0"+
    "\1\u018b\62\0\1\u018c\62\0\1\u018d\66\0\1\u018e\53\0"+
    "\1\u018f\70\0\1\243\56\0\1\u0190\60\0\1\u0191\61\0"+
    "\1\u0192\67\0\1\u017b\63\0\1\u0193\65\0\1\u0194\51\0"+
    "\1\u0195\71\0\1\u0196\66\0\1\243\47\0\1\u0197\60\0"+
    "\1\u0198\71\0\1\u0199\62\0\1\u019a\73\0\1\u019b\62\0"+
    "\1\u019c\23\0\1\u019d\63\0\1\u019e\32\0\1\u019f\47\0"+
    "\1\u010e\42\0\1\u01a0\17\0\1\u01a1\63\0\1\u01a2\66\0"+
    "\1\u011a\5\0\1\u010e\24\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\4\16\1\u01a3\21\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\u01a4"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\14\16\1\u01a5\11\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\5\16\1\u01a6"+
    "\1\16\1\u01a7\16\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\5\16\1\u01a8\20\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\13\16\1\u01a9\12\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\u01aa\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\u01ab"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\3\16\1\u01ac\22\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\u01ad"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\20\16\1\u01ae\5\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\u01af"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\u01b0\5\0"+
    "\1\16\5\0\26\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\u01b1\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\u01b2\5\0\1\16\5\0\26\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\11\16\1\u01b3\14\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\u01b4\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\u01b5"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\6\16\1\u01b6\17\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\14\16\1\u01b7"+
    "\11\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\4\16\1\u01b8\21\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\1\u01b9\25\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\1\u01ba\25\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\20\16\1\u01bb\5\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\u01bc\5\0\1\16\5\0"+
    "\26\16\1\0\1\16\14\0\2\16\1\72\1\u01bd\5\0"+
    "\1\16\5\0\26\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\1\u01be\25\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\4\16"+
    "\1\u01bf\21\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\15\16\1\u01c0\10\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\1\u01c1"+
    "\25\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\14\16\1\u01c2\11\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\1\u01c3\25\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\u01c4\21\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\3\16\1\u01c5\22\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\10\16\1\u01c6\15\16\1\0\1\16\14\0\2\16"+
    "\1\u01c7\1\16\5\0\1\16\5\0\26\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\u01c8\5\0\1\16\5\0\26\16"+
    "\1\0\1\16\14\0\2\u0170\1\u0103\1\u0170\3\0\2\u0104"+
    "\6\0\2\u0170\4\0\1\u0170\3\0\1\u0170\31\0\1\u01c9"+
    "\3\0\2\u01ca\55\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\11\16\1\u01cb\14\16\1\0\1\16\33\0\1\u01cc"+
    "\64\0\1\u01cd\42\0\1\u01ce\61\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\4\16\1\u01cf\21\16\1\0\1\16"+
    "\37\0\1\u01a2\61\0\1\u0113\62\0\1\u01d0\72\0\1\u01d1"+
    "\62\0\1\u01d2\55\0\1\u01d1\37\0\1\u01d3\101\0\1\u01d4"+
    "\71\0\1\u01d5\63\0\1\u01d6\61\0\1\u01d7\57\0\1\u01d8"+
    "\37\0\1\u01d9\77\0\1\u01da\46\0\1\u0113\24\0\1\u01db"+
    "\35\0\1\u01dc\106\0\1\u0113\63\0\1\u01db\35\0\1\u017c"+
    "\13\0\1\u01dd\45\0\1\u01de\103\0\1\u01df\60\0\1\u01e0"+
    "\65\0\1\u0113\66\0\1\u01e1\62\0\1\u01e2\55\0\1\u01a1"+
    "\41\0\1\u01e3\103\0\1\u01e4\56\0\1\u0113\65\0\1\u01e5"+
    "\63\0\1\u0191\56\0\1\u01e6\46\0\1\u01e7\107\0\1\u01e8"+
    "\56\0\1\u01e9\65\0\1\u01ea\62\0\1\u01eb\35\0\1\u01ec"+
    "\121\0\1\u0113\51\0\1\u01ed\32\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\1\u01ee\25\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\5\16\1\u01ef"+
    "\20\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\4\16\1\u01f0\21\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\u01f1\5\0\1\16\5\0\26\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\1\u01f2\25\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\5\16\1\u01f3\20\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\13\16"+
    "\1\u01f4\12\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\12\16\1\u01f5\13\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\u01f6\5\0\1\16\5\0\26\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\5\16\1\u01f7\20\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\17\16\1\u01f8\6\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\13\16\1\u01f9\12\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\12\16\1\u01fa\13\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\1\u01fb\25\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\4\16\1\u01fc\21\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\7\16\1\u01fd\16\16\1\0\1\16\14\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\1\u01fe\25\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\6\16"+
    "\1\u01ff\17\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\15\16\1\u0200\10\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\1\u0201"+
    "\25\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\6\16\1\u0202\17\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\12\16\1\u0203"+
    "\13\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\4\16\1\u0204\21\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\u0205\5\0\1\16\5\0\26\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\u0206\5\0\1\16\5\0"+
    "\26\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\3\16\1\u0207\22\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\5\16\1\u0208"+
    "\20\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\11\16\1\u0209\14\16\1\0\1\16\14\0"+
    "\2\16\1\0\1\16\5\0\1\16\5\0\6\16\1\u020a"+
    "\17\16\1\0\1\16\14\0\1\u01c9\1\0\1\u01ca\60\0"+
    "\1\u01c9\62\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\2\16\1\u020b\23\16\1\0\1\16\40\0\1\u020c\57\0"+
    "\1\u020d\41\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\11\16\1\u020e\14\16\1\0\1\16\46\0\1\u020f\33\0"+
    "\1\u012a\116\0\1\u01d1\66\0\1\u0210\41\0\1\u0211\72\0"+
    "\1\u0211\62\0\1\u0212\47\0\1\u017b\44\0\1\u0213\25\0"+
    "\1\u0214\67\0\1\u0215\60\0\1\257\61\0\1\u0216\51\0"+
    "\1\u0217\66\0\1\u0218\60\0\1\u0219\64\0\1\u010e\5\0"+
    "\1\u021a\53\0\1\u021b\71\0\1\u021c\50\0\1\u021d\72\0"+
    "\1\u021e\71\0\1\u0113\47\0\1\u021f\63\0\1\u0220\67\0"+
    "\1\u0221\60\0\1\u0222\34\0\1\u0223\116\0\1\u0191\54\0"+
    "\1\u0224\7\0\1\u0225\2\0\1\u0226\40\0\1\307\41\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\6\16\1\u0227"+
    "\17\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\12\16\1\u0228\13\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\13\16\1\u0229"+
    "\12\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\5\16\1\u022a\20\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\u022b\5\0\1\16\5\0\26\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\u022c\5\0\1\16\5\0"+
    "\26\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\1\u022d\25\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\4\16\1\u022e\21\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\u022f\5\0\1\16"+
    "\5\0\26\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\13\16\1\u0230\12\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\4\16"+
    "\1\u0231\21\16\1\0\1\16\14\0\2\16\1\72\1\u0232"+
    "\5\0\1\16\5\0\26\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\4\16\1\u0233\21\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\17\16\1\u0234\6\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\u0235\5\0\1\16\5\0\26\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\12\16"+
    "\1\u0236\13\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\3\16\1\u0237\22\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\u0238\5\0\1\16\5\0\26\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\6\16\1\u0239\17\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\22\16\1\u023a\3\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\13\16\1\u023b\12\16\1\0\1\16\17\0\1\u023c"+
    "\105\0\1\u023d\34\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\2\16\1\u023e\23\16\1\0\1\16\33\0\1\u023f"+
    "\46\0\1\312\110\0\1\u0240\50\0\1\u0241\73\0\1\u0242"+
    "\51\0\1\u0243\46\0\1\u0244\61\0\1\u0245\107\0\1\u010e"+
    "\63\0\1\u0246\51\0\1\u0247\46\0\1\u0248\107\0\1\u0249"+
    "\66\0\1\u024a\56\0\1\243\55\0\1\u024b\42\0\1\u024c"+
    "\121\0\1\u024d\23\0\1\u024e\70\0\1\u024f\54\0\1\u0250"+
    "\20\0\1\u0251\12\0\1\u0252\62\0\1\301\53\0\1\u0253"+
    "\51\0\1\u0254\43\0\2\16\1\72\1\16\5\0\1\16"+
    "\5\0\4\16\1\u0255\21\16\1\0\1\16\14\0\2\16"+
    "\1\72\1\16\5\0\1\16\5\0\4\16\1\u0256\21\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\u0257\5\0\1\16"+
    "\5\0\26\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\4\16\1\u0258\21\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\u0259\5\0\1\16\5\0\26\16"+
    "\1\0\1\16\14\0\2\16\1\72\1\u025a\5\0\1\16"+
    "\5\0\26\16\1\0\1\16\14\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\3\16\1\u025b\22\16\1\0\1\16"+
    "\14\0\2\16\1\72\1\16\5\0\1\16\5\0\1\u025c"+
    "\25\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\13\16\1\u025d\12\16\1\0\1\16\43\0"+
    "\1\u025e\36\0\1\u017c\102\0\1\u025f\61\0\1\u0243\64\0"+
    "\1\243\40\0\1\u0260\71\0\1\u0261\105\0\1\307\56\0"+
    "\1\u0262\64\0\1\u0263\51\0\1\u0264\43\0\1\u0265\113\0"+
    "\1\u0113\60\0\1\u0266\34\0\1\u0267\61\0\1\u0268\63\0"+
    "\1\u0269\105\0\1\u026a\10\0\1\u026b\62\0\1\266\42\0"+
    "\1\u026c\74\0\1\u0194\60\0\1\u026d\33\0\2\16\1\72"+
    "\1\u026e\5\0\1\16\5\0\26\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\3\16\1\u026f"+
    "\22\16\1\0\1\16\14\0\2\16\1\72\1\16\5\0"+
    "\1\16\5\0\12\16\1\u0270\13\16\1\0\1\16\14\0"+
    "\2\16\1\72\1\u0271\5\0\1\16\5\0\26\16\1\0"+
    "\1\16\14\0\2\16\1\72\1\16\5\0\1\16\5\0"+
    "\3\16\1\u0272\22\16\1\0\1\16\16\0\1\u0273\63\0"+
    "\1\u011a\103\0\1\u0274\1\0\1\u0275\37\0\1\u0276\111\0"+
    "\1\u025f\53\0\1\u0277\71\0\1\u0278\56\0\1\u0279\36\0"+
    "\1\u027a\111\0\1\u027b\34\0\1\u027c\15\0\1\u027d\1\u027e"+
    "\14\0\1\u0252\25\0\1\u027f\104\0\1\u0280\66\0\1\307"+
    "\64\0\1\u0281\66\0\1\u010e\24\0\2\16\1\72\1\16"+
    "\5\0\1\16\5\0\1\u0282\25\16\1\0\1\16\37\0"+
    "\1\u0283\67\0\1\u0284\53\0\1\u0285\63\0\1\u0286\42\0"+
    "\1\u0287\62\0\1\u0288\77\0\1\u0289\65\0\1\u028a\42\0"+
    "\1\u028b\117\0\1\u028c\66\0\1\u028d\36\0\1\u028e\1\0"+
    "\1\u028f\71\0\1\u0290\62\0\1\u0291\55\0\1\u0292\37\0"+
    "\2\16\1\72\1\16\5\0\1\16\5\0\6\16\1\u0293"+
    "\17\16\1\0\1\16\33\0\1\257\54\0\1\u010e\72\0"+
    "\1\u018b\62\0\1\u0191\65\0\1\u0274\66\0\1\u011a\54\0"+
    "\1\243\61\0\1\u0294\60\0\1\u0295\62\0\1\u0296\10\0"+
    "\1\307\35\0\1\u0297\110\0\1\u0298\67\0\1\u0299\56\0"+
    "\1\u029a\57\0\1\u01ed\63\0\1\u029b\32\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\4\16\1\u029c\21\16\1\0"+
    "\1\16\52\0\1\u029d\51\0\1\244\72\0\1\u0113\47\0"+
    "\1\u029e\70\0\1\u0296\64\0\1\u029f\32\0\1\u02a0\104\0"+
    "\1\u02a1\36\0\2\16\1\72\1\u02a2\5\0\1\16\5\0"+
    "\26\16\1\0\1\16\46\0\1\u02a3\31\0\1\u02a4\112\0"+
    "\1\u0191\55\0\1\u02a5\62\0\1\u0197\36\0\2\16\1\72"+
    "\1\16\5\0\1\16\5\0\3\16\1\u02a6\22\16\1\0"+
    "\1\16\45\0\1\u018c\60\0\1\u02a7\56\0\1\u02a8\60\0"+
    "\1\u02a9\62\0\1\u02aa\101\0\1\u0191\44\0\1\u02ab\57\0"+
    "\1\u02ac\77\0\1\u02ad\31\0\1\u02ae\61\0\1\u02af\63\0"+
    "\1\u02b0\106\0\1\u02b1\36\0\1\u02b2\116\0\1\u02b3\26\0"+
    "\1\u02b4\111\0\1\u0199\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30039];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\2\0\1\11\3\1\1\11\30\1\3\11"+
    "\1\1\1\11\1\1\1\11\3\1\2\11\3\1\1\11"+
    "\1\1\1\11\1\1\5\0\7\1\3\11\1\0\1\1"+
    "\22\0\55\1\10\11\1\0\1\11\1\1\1\0\1\1"+
    "\1\0\11\1\1\11\56\0\67\1\1\0\7\1\1\0"+
    "\2\1\5\0\1\11\32\0\1\1\13\0\1\1\4\0"+
    "\61\1\2\0\5\1\3\0\1\1\32\0\1\1\15\0"+
    "\44\1\1\0\2\1\1\0\1\1\2\0\1\11\1\1"+
    "\6\0\1\1\23\0\1\1\3\0\36\1\2\0\1\1"+
    "\30\0\25\1\2\11\1\1\17\0\1\1\6\0\11\1"+
    "\20\0\5\1\17\0\1\1\20\0\1\1\10\0\1\1"+
    "\5\0\1\1\3\0\1\1\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[692];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    private LexerInput input;
    
    public Ada95SyntaxLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState (StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                    return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                    return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.stack.hashCode();
            return hash;
        }
    }
        
    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Ada95SyntaxLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Ada95SyntaxLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public AdaTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 49: 
          { return AdaTokenId.CHAR_LITERAL;
          }
        case 122: break;
        case 42: 
          { return AdaTokenId.BOX;
          }
        case 123: break;
        case 51: 
          { return AdaTokenId.ALL;
          }
        case 124: break;
        case 61: 
          { return AdaTokenId.ELSE;
          }
        case 125: break;
        case 73: 
          { return AdaTokenId.WITH;
          }
        case 126: break;
        case 13: 
          { return AdaTokenId.STAR;
          }
        case 127: break;
        case 79: 
          { return AdaTokenId.ABORT;
          }
        case 128: break;
        case 110: 
          { return AdaTokenId.FUNCTION;
          }
        case 129: break;
        case 72: 
          { return AdaTokenId.GOTO;
          }
        case 130: break;
        case 68: 
          { return AdaTokenId.THEN;
          }
        case 131: break;
        case 47: 
          { return AdaTokenId.FOR;
          }
        case 132: break;
        case 8: 
          { return  AdaTokenId.WHITESPACE;
          }
        case 133: break;
        case 14: 
          { return AdaTokenId.COMMA;
          }
        case 134: break;
        case 69: 
          { return AdaTokenId.CASE;
          }
        case 135: break;
        case 70: 
          { return AdaTokenId.LOOP;
          }
        case 136: break;
        case 118: 
          { return AdaTokenId.CHARACTER;
          }
        case 137: break;
        case 88: 
          { return AdaTokenId.END_IF;
          }
        case 138: break;
        case 120: 
          { return AdaTokenId.PROCEDURE;
          }
        case 139: break;
        case 82: 
          { return AdaTokenId.RAISE;
          }
        case 140: break;
        case 100: 
          { return AdaTokenId.RENAMES;
          }
        case 141: break;
        case 90: 
          { return AdaTokenId.ACCEPT;
          }
        case 142: break;
        case 115: 
          { return AdaTokenId.CONSTANT;
          }
        case 143: break;
        case 113: 
          { return AdaTokenId.ABSTRACT;
          }
        case 144: break;
        case 50: 
          { return AdaTokenId.ABS;
          }
        case 145: break;
        case 104: 
          { return AdaTokenId.PACKAGE;
          }
        case 146: break;
        case 116: 
          { return AdaTokenId.EXCEPTION;
          }
        case 147: break;
        case 62: 
          { return AdaTokenId.EXIT;
          }
        case 148: break;
        case 12: 
          { return AdaTokenId.RPAREN;
          }
        case 149: break;
        case 1: 
          { yypushback(1);
    pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 150: break;
        case 11: 
          { return AdaTokenId.LPAREN;
          }
        case 151: break;
        case 89: 
          { return AdaTokenId.ACCESS;
          }
        case 152: break;
        case 52: 
          { return AdaTokenId.AND;
          }
        case 153: break;
        case 93: 
          { return AdaTokenId.RECORD;
          }
        case 154: break;
        case 6: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
                      return AdaTokenId.DOT;
          }
        case 155: break;
        case 66: 
          { return AdaTokenId.TRUE;
          }
        case 156: break;
        case 18: 
          { return AdaTokenId.EQ;
          }
        case 157: break;
        case 60: 
          { return AdaTokenId.BASED_LITERAL;
          }
        case 158: break;
        case 10: 
          { return AdaTokenId.AMP;
          }
        case 159: break;
        case 108: 
          { return AdaTokenId.DECLARE;
          }
        case 160: break;
        case 44: 
          { return AdaTokenId.GTEQ;
          }
        case 161: break;
        case 75: 
          { return AdaTokenId.FALSE;
          }
        case 162: break;
        case 48: 
          { return AdaTokenId.END;
          }
        case 163: break;
        case 96: 
          { return AdaTokenId.PRAGMA;
          }
        case 164: break;
        case 41: 
          { return AdaTokenId.LTEQ;
          }
        case 165: break;
        case 28: 
          { return AdaTokenId.DOT_DOT;
          }
        case 166: break;
        case 20: 
          { return AdaTokenId.BAR;
          }
        case 167: break;
        case 102: 
          { return AdaTokenId.REQUEUE;
          }
        case 168: break;
        case 58: 
          { return AdaTokenId.USE;
          }
        case 169: break;
        case 30: 
          { return AdaTokenId.STRING_LITERAL;
          }
        case 170: break;
        case 77: 
          { return AdaTokenId.ELSIF;
          }
        case 171: break;
        case 114: 
          { return AdaTokenId.SEPARATE;
          }
        case 172: break;
        case 91: 
          { return AdaTokenId.OTHERS;
          }
        case 173: break;
        case 2: 
          { return AdaTokenId.DECIMAL_LITERAL;
          }
        case 174: break;
        case 76: 
          { return AdaTokenId.FLOAT;
          }
        case 175: break;
        case 107: 
          { return AdaTokenId.INTEGER;
          }
        case 176: break;
        case 27: 
          { pushState(ST_LINE_COMMENT);
    return AdaTokenId.COMMENT;
          }
        case 177: break;
        case 74: 
          { return AdaTokenId.WHEN;
          }
        case 178: break;
        case 54: 
          { return AdaTokenId.REM;
          }
        case 179: break;
        case 26: 
          { popState();
        return AdaTokenId.WHITESPACE;
          }
        case 180: break;
        case 25: 
          { return AdaTokenId.UNKNOWN_TOKEN;
          }
        case 181: break;
        case 59: 
          { return AdaTokenId.MOD;
          }
        case 182: break;
        case 3: 
          { return  AdaTokenId.IDENTIFIER;
          }
        case 183: break;
        case 15: 
          { return AdaTokenId.SLASH;
          }
        case 184: break;
        case 57: 
          { return AdaTokenId.XOR;
          }
        case 185: break;
        case 19: 
          { return AdaTokenId.LT;
          }
        case 186: break;
        case 106: 
          { return AdaTokenId.LIMITED;
          }
        case 187: break;
        case 92: 
          { return AdaTokenId.RETURN;
          }
        case 188: break;
        case 16: 
          { return AdaTokenId.SEMICOLON;
          }
        case 189: break;
        case 84: 
          { return AdaTokenId.DELAY;
          }
        case 190: break;
        case 103: 
          { return AdaTokenId.SUBTYPE;
          }
        case 191: break;
        case 4: 
          { return AdaTokenId.PLUS;
          }
        case 192: break;
        case 67: 
          { return AdaTokenId.TYPE;
          }
        case 193: break;
        case 38: 
          { return AdaTokenId.EXPON;
          }
        case 194: break;
        case 105: 
          { return AdaTokenId.PRIVATE;
          }
        case 195: break;
        case 21: 
          { yypushback(1);
    popState();
          }
        case 196: break;
        case 101: 
          { return AdaTokenId.REVERSE;
          }
        case 197: break;
        case 86: 
          { return AdaTokenId.UNTIL;
          }
        case 198: break;
        case 9: 
          { return AdaTokenId.TICK;
          }
        case 199: break;
        case 24: 
          { popState();
    return AdaTokenId.COMMENT;
          }
        case 200: break;
        case 71: 
          { return AdaTokenId.NULL;
          }
        case 201: break;
        case 37: 
          { return AdaTokenId.DO;
          }
        case 202: break;
        case 36: 
          { return AdaTokenId.IN;
          }
        case 203: break;
        case 5: 
          { return AdaTokenId.MINUS;
          }
        case 204: break;
        case 83: 
          { return AdaTokenId.RANGE;
          }
        case 205: break;
        case 121: 
          { return AdaTokenId.WIDE_CHARECTER;
          }
        case 206: break;
        case 22: 
          { popState();
    return AdaTokenId.IDENTIFIER;
          }
        case 207: break;
        case 81: 
          { return AdaTokenId.BEGIN;
          }
        case 208: break;
        case 94: 
          { return AdaTokenId.TAGGED;
          }
        case 209: break;
        case 40: 
          { return AdaTokenId.LTLT;
          }
        case 210: break;
        case 23: 
          { return AdaTokenId.DOT;
          }
        case 211: break;
        case 43: 
          { return AdaTokenId.ARROW;
          }
        case 212: break;
        case 78: 
          { return AdaTokenId.ENTRY;
          }
        case 213: break;
        case 46: 
          { popState();
    return AdaTokenId.DOT_DOT;
          }
        case 214: break;
        case 63: 
          { return AdaTokenId.ATTRIBUTE;
          }
        case 215: break;
        case 17: 
          { return AdaTokenId.GT;
          }
        case 216: break;
        case 99: 
          { return AdaTokenId.BOOLEAN;
          }
        case 217: break;
        case 32: 
          { return AdaTokenId.OF;
          }
        case 218: break;
        case 55: 
          { return AdaTokenId.NEW;
          }
        case 219: break;
        case 45: 
          { return AdaTokenId.GTGT;
          }
        case 220: break;
        case 53: 
          { return AdaTokenId.OUT;
          }
        case 221: break;
        case 98: 
          { return AdaTokenId.ALIASED;
          }
        case 222: break;
        case 33: 
          { return AdaTokenId.OR;
          }
        case 223: break;
        case 39: 
          { return AdaTokenId.INEQ;
          }
        case 224: break;
        case 80: 
          { return AdaTokenId.ARRAY;
          }
        case 225: break;
        case 35: 
          { return AdaTokenId.IS;
          }
        case 226: break;
        case 119: 
          { return AdaTokenId.PROTECTED;
          }
        case 227: break;
        case 87: 
          { return AdaTokenId.WHILE;
          }
        case 228: break;
        case 111: 
          { return AdaTokenId.END_CASE;
          }
        case 229: break;
        case 112: 
          { return AdaTokenId.END_LOOP;
          }
        case 230: break;
        case 97: 
          { return AdaTokenId.DIGITS;
          }
        case 231: break;
        case 64: 
          { return AdaTokenId.BODY;
          }
        case 232: break;
        case 109: 
          { return AdaTokenId.GENERIC;
          }
        case 233: break;
        case 85: 
          { return AdaTokenId.DELTA;
          }
        case 234: break;
        case 7: 
          { return AdaTokenId.COLON;
          }
        case 235: break;
        case 95: 
          { return AdaTokenId.SELECT;
          }
        case 236: break;
        case 31: 
          { return AdaTokenId.AT;
          }
        case 237: break;
        case 65: 
          { return AdaTokenId.TASK;
          }
        case 238: break;
        case 29: 
          { return AdaTokenId.ASSIGNMENT;
          }
        case 239: break;
        case 34: 
          { return AdaTokenId.IF;
          }
        case 240: break;
        case 117: 
          { return AdaTokenId.TERMINATE;
          }
        case 241: break;
        case 56: 
          { return AdaTokenId.NOT;
          }
        case 242: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return AdaTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

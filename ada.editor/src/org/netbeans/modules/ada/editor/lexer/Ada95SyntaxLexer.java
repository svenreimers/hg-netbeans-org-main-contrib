/* The following code was generated by JFlex 1.4.2 on 13/12/08 16.35 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.ada.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 13/12/08 16.35 from the specification file
 * <tt>C:/hg-repo/release65/contrib/ada.editor/src/org/netbeans/modules/ada/editor/lexer/resources/Ada95SyntaxLexer.flex</tt>
 */
public class Ada95SyntaxLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_HIGHLIGHTING_ERROR = 6;
  public static final int ST_LOOKING_FOR_PROPERTY = 2;
  public static final int ST_COMMENT = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\17\2\0\1\15\22\0\1\46\1\63\1\14\1\10"+
    "\2\0\1\50\1\16\1\51\1\52\1\53\1\5\1\54\1\6\1\7"+
    "\1\55\12\1\1\56\1\57\1\60\1\61\1\62\2\0\1\20\1\21"+
    "\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\47\1\43\1\30"+
    "\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\44"+
    "\1\41\1\36\1\34\1\11\1\0\1\13\2\0\1\3\1\0\1\20"+
    "\1\21\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\47\1\43"+
    "\1\30\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37"+
    "\1\44\1\41\1\36\1\34\1\11\1\0\1\63\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\11\21\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\0\3\26\1\27\1\30\5\0\7\3\1\31\1\32"+
    "\1\10\1\33\22\0\2\3\1\34\5\3\1\35\1\36"+
    "\22\3\1\37\1\40\1\41\1\3\1\42\14\3\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\2\1\0\1\2\1\0\1\3\1\54\4\3"+
    "\1\55\2\3\1\10\1\33\60\0\1\3\1\56\2\3"+
    "\1\57\1\3\1\60\4\3\1\61\3\3\1\62\32\3"+
    "\1\63\1\64\3\3\1\65\1\66\1\3\1\67\4\3"+
    "\1\70\1\0\1\71\3\3\1\72\2\3\1\0\1\3"+
    "\1\73\5\0\1\10\1\74\32\0\1\74\13\0\1\74"+
    "\4\0\1\74\7\3\1\75\11\3\1\76\1\3\1\77"+
    "\1\100\1\101\3\3\1\102\7\3\1\103\6\3\1\104"+
    "\1\3\1\105\1\3\1\106\1\3\1\107\1\3\2\0"+
    "\1\110\1\111\1\3\1\112\1\113\3\0\1\3\4\0"+
    "\1\114\26\0\1\74\15\0\1\115\1\3\1\116\3\3"+
    "\1\117\7\3\1\120\1\121\17\3\1\122\1\123\2\3"+
    "\1\124\1\0\1\125\1\71\1\0\1\3\2\0\1\126"+
    "\1\3\6\0\1\74\23\0\1\74\3\0\1\3\1\127"+
    "\1\130\2\3\1\131\1\132\1\133\4\3\1\134\1\3"+
    "\1\135\4\3\1\136\6\3\1\137\3\3\2\0\1\3"+
    "\30\0\1\3\1\140\1\141\1\142\1\143\1\144\2\3"+
    "\1\145\2\3\1\146\2\3\1\147\1\150\1\151\1\152"+
    "\1\153\1\3\1\154\1\155\1\156\1\3\17\0\1\74"+
    "\6\0\1\157\1\3\1\160\1\161\4\3\1\162\20\0"+
    "\1\163\1\164\1\165\1\166\1\3\17\0\1\3\20\0"+
    "\1\3\10\0\1\3\5\0\1\3\3\0\1\167\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\320\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\320\0\320\0\320\0\u064c\0\320\0\u0680\0\u06b4\0\320"+
    "\0\u06e8\0\u071c\0\u0750\0\320\0\u0784\0\u07b8\0\u07ec\0\320"+
    "\0\320\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\320\0\320"+
    "\0\u0ac4\0\320\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0208\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u0208\0\u0208\0\u100c\0\u1040"+
    "\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0"+
    "\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u0208\0\u0208\0\u13b4\0\u13e8\0\u0208\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\320\0\320\0\320\0\320\0\320\0\320\0\320"+
    "\0\320\0\320\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u0208\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u0270\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288"+
    "\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u0208\0\u23f4"+
    "\0\u0208\0\u2428\0\u245c\0\u2490\0\u24c4\0\u0208\0\u24f8\0\u252c"+
    "\0\u2560\0\u0208\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838"+
    "\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8"+
    "\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u0208\0\u0208\0\u2adc\0\u2b10"+
    "\0\u2b44\0\u0208\0\u0208\0\u2b78\0\u0208\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u2c48\0\320\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u0208"+
    "\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u0208\0\u2e50\0\u2e84\0\u2eb8"+
    "\0\u2eec\0\u2f20\0\u2f54\0\320\0\u2f88\0\u2fbc\0\u2ff0\0\u3024"+
    "\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4"+
    "\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364"+
    "\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504"+
    "\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4"+
    "\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844"+
    "\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c\0\u39b0\0\u0208"+
    "\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50"+
    "\0\u3b84\0\u0208\0\u3bb8\0\u0208\0\u0208\0\u0208\0\u3bec\0\u3c20"+
    "\0\u3c54\0\u0208\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c"+
    "\0\u3dc0\0\u0208\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8"+
    "\0\u0208\0\u3f2c\0\u0208\0\u3f60\0\u0208\0\u3f94\0\u0208\0\u3fc8"+
    "\0\u3ffc\0\u4030\0\u0208\0\u0208\0\u4064\0\u0208\0\u0208\0\u4098"+
    "\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\320"+
    "\0\u4238\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4"+
    "\0\u43d8\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc\0\u4510\0\u4544"+
    "\0\u4578\0\u45ac\0\u45e0\0\u4614\0\u4648\0\u467c\0\u46b0\0\u46e4"+
    "\0\u4718\0\u474c\0\u4780\0\u47b4\0\u47e8\0\u481c\0\u4850\0\u4884"+
    "\0\u48b8\0\u48ec\0\u4920\0\u4954\0\u0208\0\u4988\0\u0208\0\u49bc"+
    "\0\u49f0\0\u4a24\0\u0208\0\u4a58\0\u4a8c\0\u4ac0\0\u4af4\0\u4b28"+
    "\0\u4b5c\0\u4b90\0\u0208\0\u0208\0\u4bc4\0\u4bf8\0\u4c2c\0\u4c60"+
    "\0\u4c94\0\u4cc8\0\u4cfc\0\u4d30\0\u4d64\0\u4d98\0\u4dcc\0\u4e00"+
    "\0\u4e34\0\u4e68\0\u4e9c\0\u0208\0\u0208\0\u4ed0\0\u4f04\0\u0208"+
    "\0\u4f38\0\u0208\0\u4f6c\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\320"+
    "\0\u5070\0\u50a4\0\u50d8\0\u510c\0\u5140\0\u5174\0\u51a8\0\u44dc"+
    "\0\u51dc\0\u5210\0\u5244\0\u5278\0\u52ac\0\u52e0\0\u5314\0\u5348"+
    "\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c\0\u5480\0\u54b4\0\u54e8"+
    "\0\u551c\0\u5550\0\u5584\0\u55b8\0\u55ec\0\u5620\0\u5654\0\u5688"+
    "\0\u0208\0\u0208\0\u56bc\0\u56f0\0\u0208\0\u0208\0\u0208\0\u5724"+
    "\0\u5758\0\u578c\0\u57c0\0\u0208\0\u57f4\0\u0208\0\u5828\0\u585c"+
    "\0\u5890\0\u58c4\0\u0208\0\u58f8\0\u592c\0\u5960\0\u5994\0\u59c8"+
    "\0\u59fc\0\u0208\0\u5a30\0\u5a64\0\u5a98\0\u5acc\0\u5b00\0\u5b34"+
    "\0\u5b68\0\u5b9c\0\u5bd0\0\u5c04\0\u5c38\0\u5c6c\0\u5ca0\0\u5cd4"+
    "\0\u5d08\0\u5d3c\0\u5d70\0\u5da4\0\u5dd8\0\u5e0c\0\u5e40\0\u5e74"+
    "\0\u5ea8\0\u5edc\0\u5f10\0\u5f44\0\u5f78\0\u5fac\0\u5fe0\0\u6014"+
    "\0\u6048\0\u0208\0\u0208\0\u0208\0\u0208\0\u0208\0\u607c\0\u60b0"+
    "\0\u0208\0\u60e4\0\u6118\0\u0208\0\u614c\0\u6180\0\u0208\0\u0208"+
    "\0\u0208\0\u0208\0\u0208\0\u61b4\0\u0208\0\320\0\320\0\u61e8"+
    "\0\u621c\0\u6250\0\u6284\0\u62b8\0\u62ec\0\u6320\0\u6354\0\u6388"+
    "\0\u63bc\0\u63f0\0\u6424\0\u6458\0\u648c\0\u64c0\0\u64f4\0\u6528"+
    "\0\u655c\0\u6590\0\u65c4\0\u65f8\0\u662c\0\u6660\0\u0208\0\u6694"+
    "\0\u0208\0\u0208\0\u66c8\0\u66fc\0\u6730\0\u6764\0\u0208\0\u6798"+
    "\0\u67cc\0\u6800\0\u6834\0\u6868\0\u689c\0\u68d0\0\u6904\0\u6938"+
    "\0\u696c\0\u69a0\0\u69d4\0\u6a08\0\u6a3c\0\u6a70\0\u6aa4\0\u0208"+
    "\0\u0208\0\u0208\0\u0208\0\u6ad8\0\u6b0c\0\u6b40\0\u6b74\0\u6ba8"+
    "\0\u6bdc\0\u6c10\0\u6c44\0\u6c78\0\u6cac\0\u6ce0\0\u6d14\0\u6d48"+
    "\0\u6d7c\0\u6db0\0\u6de4\0\u6e18\0\u6e4c\0\u6e80\0\u6eb4\0\u6ee8"+
    "\0\u6f1c\0\u6f50\0\u6f84\0\u6fb8\0\u6fec\0\u7020\0\u7054\0\u7088"+
    "\0\u70bc\0\u70f0\0\u7124\0\u7158\0\u718c\0\u71c0\0\u71f4\0\u7228"+
    "\0\u725c\0\u7290\0\u72c4\0\u72f8\0\u732c\0\u7360\0\u7394\0\u73c8"+
    "\0\u73fc\0\u7430\0\u7464\0\u7498\0\u74cc\0\u7500\0\u7534\0\u0208"+
    "\0\u7568\0\u759c\0\u75d0\0\u7604\0\u7638\0\u766c\0\u76a0\0\u76d4"+
    "\0\u7708\0\u773c\0\u7770\0\u77a4\0\u77d8\0\u780c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\5\1\10\1\11\1\12\1\13"+
    "\1\5\1\14\1\15\1\5\1\16\1\15\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\14\1\34\1\35\1\36"+
    "\1\37\1\40\4\14\1\15\1\14\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\16\0\1\55\45\0\15\56\1\57\1\56\1\60"+
    "\44\56\12\61\1\62\2\61\1\62\1\61\1\62\26\61"+
    "\1\62\15\61\65\0\1\6\1\0\1\63\1\64\2\0"+
    "\1\65\1\66\54\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\1\70\1\14\1\71\5\14\1\72\6\14\1\73"+
    "\6\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\10\14\1\74\2\14\1\75\2\14\1\76"+
    "\7\14\1\0\1\14\22\0\1\77\64\0\1\100\55\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\26\0\1\15\2\0\1\15\1\0\1\15\26\0"+
    "\1\15\15\0\13\16\1\101\1\102\1\0\1\16\1\0"+
    "\44\16\2\0\1\103\1\0\1\104\11\0\1\105\1\0"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\4\0\1\121\1\122\1\123\2\0"+
    "\1\124\20\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\1\14\1\125\1\14\1\126\1\127\1\14\1\130\1\14"+
    "\1\131\2\14\1\132\12\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\133\4\0\1\14\6\0\2\14\1\134\23\14"+
    "\1\0\1\14\15\0\1\14\1\135\1\67\1\14\4\0"+
    "\1\14\6\0\3\14\1\136\1\137\12\14\1\140\6\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\141\4\0\1\14"+
    "\6\0\1\142\25\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\143\4\0\1\14\6\0\1\144\2\14\1\145\10\14"+
    "\1\146\5\14\1\147\3\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\150\4\0\1\14\6\0\17\14\1\151\6\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\1\152\1\14\1\153\17\14\1\154\3\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\1\155\2\14\1\156\22\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\2\14\1\157\6\14"+
    "\1\160\14\14\1\0\1\14\15\0\1\14\1\161\1\67"+
    "\1\14\4\0\1\14\6\0\5\14\1\162\5\14\1\163"+
    "\12\14\1\0\1\14\15\0\2\14\1\67\1\164\4\0"+
    "\1\14\6\0\2\14\1\165\6\14\1\166\14\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\167\4\0\1\14\6\0"+
    "\2\14\1\170\14\14\1\171\6\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\172\4\0\1\14\6\0\2\14\1\173"+
    "\23\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\2\14\1\174\23\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\5\14\1\175"+
    "\5\14\1\176\12\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\2\14\1\177\23\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\11\14\1\200\10\14\1\201\3\14\1\0\1\14\67\0"+
    "\1\202\71\0\1\203\63\0\1\204\62\0\1\205\1\206"+
    "\1\207\63\0\1\210\62\0\1\211\1\212\1\0\17\213"+
    "\1\0\44\213\15\56\1\60\1\56\1\60\44\56\17\0"+
    "\1\60\56\0\1\62\2\0\1\62\1\0\1\62\26\0"+
    "\1\62\16\0\1\6\63\0\1\214\3\0\2\215\56\0"+
    "\1\216\63\0\2\217\1\0\1\217\13\0\2\217\4\0"+
    "\1\217\3\0\1\217\32\0\2\14\1\0\1\14\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\10\14\1\220\15\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\3\14\1\221\22\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\2\14\1\222\23\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\13\14\1\223\12\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\5\14\1\224\20\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\4\14\1\225\5\14\1\226\13\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\6\14\1\227"+
    "\2\14\1\230\14\14\1\0\1\14\14\0\12\16\1\231"+
    "\1\101\1\232\1\233\1\16\1\233\26\16\1\231\15\16"+
    "\22\0\1\234\1\235\4\0\1\236\1\237\70\0\1\240"+
    "\25\0\17\241\1\0\44\241\2\0\1\242\23\0\1\243"+
    "\1\0\1\244\1\0\1\245\51\0\1\246\1\0\1\247"+
    "\6\0\1\250\71\0\1\251\30\0\1\252\13\0\1\253"+
    "\1\0\1\254\45\0\1\255\13\0\1\256\2\0\1\257"+
    "\60\0\1\260\3\0\1\261\1\0\1\262\2\0\1\263"+
    "\5\0\1\264\1\265\27\0\1\266\13\0\1\267\1\0"+
    "\1\270\5\0\1\271\53\0\1\272\1\0\1\273\45\0"+
    "\1\274\13\0\1\275\75\0\1\276\1\277\4\0\1\300"+
    "\27\0\1\301\24\0\1\302\65\0\1\303\50\0\1\304"+
    "\1\0\1\305\6\0\1\306\55\0\1\307\5\0\1\310"+
    "\36\0\1\311\13\0\1\312\44\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\2\14\1\313\2\14\1\314\20\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\3\14\1\315\22\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\6\14\1\316\17\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\10\14\1\317\1\320\14\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\12\14\1\321"+
    "\13\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\15\14\1\322\10\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\2\14\1\323"+
    "\7\14\1\324\13\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\22\14\1\325\3\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\4\14\1\326\21\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\4\14\1\327\1\14\1\330"+
    "\4\14\1\331\4\14\1\332\3\14\1\333\1\334\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\11\14\1\335\1\14\1\336\12\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\337"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\5\14\1\340\7\14\1\341\10\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\17\14\1\342\6\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\7\14\1\343\16\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\344\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\7\14\1\345\1\346\15\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\1\14"+
    "\1\347\24\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\5\14\1\350\20\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\13\14"+
    "\1\351\12\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\1\352\25\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\6\14\1\353"+
    "\17\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\1\354\1\14\1\355\6\14\1\356\14\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\2\14\1\357\23\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\20\14\1\360\5\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\4\14\1\361\21\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\6\14\1\362\1\14"+
    "\1\363\15\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\15\14\1\364\10\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\21\14"+
    "\1\365\4\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\4\14\1\366\21\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\10\14"+
    "\1\367\15\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\13\14\1\370\12\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\4\14"+
    "\1\371\21\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\3\14\1\372\22\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\373\4\0\1\14\6\0\26\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\4\14\1\374\21\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\12\14\1\375\13\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\4\14\1\376\5\14\1\377\13\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\u0100\4\0\1\14\6\0\11\14"+
    "\1\u0101\14\14\1\0\1\14\32\0\1\u0102\46\0\1\214"+
    "\1\0\1\215\61\0\1\214\63\0\1\216\1\0\1\65"+
    "\1\64\60\0\2\217\1\66\1\217\2\0\1\u0103\1\u0104"+
    "\7\0\2\217\4\0\1\217\3\0\1\217\32\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\5\14\1\u0105\20\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\1\u0106\25\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\6\14\1\u0107\17\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\u0108\4\0\1\14\6\0"+
    "\11\14\1\u0109\14\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\3\14\1\u010a\22\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\26\14\1\u010b\1\14\15\0\2\14\1\67\1\u010c\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\4\14\1\u010d\21\14\1\0"+
    "\1\14\14\0\12\16\1\231\1\101\1\102\1\233\1\16"+
    "\1\233\26\16\1\231\15\16\12\0\1\233\1\16\1\0"+
    "\1\233\1\0\1\233\26\0\1\233\40\0\1\u010e\60\0"+
    "\1\u010f\65\0\1\u0110\64\0\1\275\64\0\1\u0111\2\0"+
    "\1\u0112\52\0\1\u0113\71\0\1\u0114\65\0\1\u0115\66\0"+
    "\1\u0116\64\0\1\u0117\14\0\1\u0118\41\0\1\u010e\70\0"+
    "\1\u0119\55\0\1\u011a\63\0\1\277\57\0\1\u011b\17\0"+
    "\1\u011c\56\0\1\u011d\67\0\1\u011e\47\0\1\u011f\75\0"+
    "\1\u0114\65\0\1\u0120\26\0\1\u0121\103\0\1\u0122\61\0"+
    "\1\u0123\54\0\1\u010e\23\0\1\u0124\54\0\1\u0125\55\0"+
    "\1\u0126\74\0\1\u0127\62\0\1\u0128\62\0\1\u0129\3\0"+
    "\1\u012a\3\0\1\u012b\1\u012c\43\0\1\u012d\66\0\1\u012e"+
    "\65\0\1\u012f\56\0\1\u0130\12\0\1\u0131\55\0\1\u0132"+
    "\42\0\1\u0133\106\0\1\u0134\54\0\1\u011d\73\0\1\u0135"+
    "\2\0\1\u0136\65\0\1\u0137\47\0\1\u0138\4\0\1\u0139"+
    "\63\0\1\u013a\7\0\1\u013b\57\0\1\u013c\64\0\1\u0114"+
    "\61\0\1\u013d\64\0\1\u013e\54\0\1\u013f\70\0\1\u0140"+
    "\34\0\2\14\1\67\1\14\4\0\1\14\6\0\3\14"+
    "\1\u0141\22\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\4\14\1\u0142\21\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\1\u0143"+
    "\25\14\1\0\1\14\15\0\2\14\1\67\1\u0144\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\1\u0145\25\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\11\14"+
    "\1\u0146\14\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\10\14\1\u0147\15\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\14\14"+
    "\1\u0148\11\14\1\0\1\14\15\0\2\14\1\67\1\u0149"+
    "\4\0\1\14\6\0\26\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\17\14\1\u014a\6\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\2\14\1\u014b\23\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\1\u014c\25\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\u014d\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\17\14\1\u014e\6\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\5\14\1\u014f"+
    "\20\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\15\14\1\u0150\10\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\20\14\1\u0151"+
    "\5\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\23\14\1\u0152\2\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\15\14\1\u0153"+
    "\10\14\1\0\1\14\15\0\2\14\1\67\1\u0154\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\u0155\4\0\1\14\6\0\26\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\13\14\1\u0156"+
    "\12\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\1\u0157\25\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\u0158\4\0\1\14\6\0\26\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\4\14"+
    "\1\u0159\21\14\1\0\1\14\15\0\2\14\1\67\1\u015a"+
    "\4\0\1\14\6\0\26\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\5\14\1\u015b\20\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\3\14\1\u015c\22\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\23\14\1\u015d\2\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\15\14\1\u015e\10\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\4\14\1\u015f\1\14"+
    "\1\u0160\17\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\24\14\1\u0161\1\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\7\14"+
    "\1\u0162\16\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\11\14\1\u0163\14\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\u0164\4\0\1\14\6\0\26\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\10\14\1\u0165\15\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\1\u0166\3\14\1\u0167"+
    "\21\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\11\14\1\u0168\14\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\10\14\1\u0169"+
    "\15\14\1\0\1\14\15\0\2\14\1\67\1\u016a\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\2\14\1\u016b\23\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\11\14\1\u016c\14\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\22\14\1\u016d\3\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\u016e\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\13\14\1\u016f\12\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\10\14\1\u0170"+
    "\15\14\1\0\1\14\15\0\2\u0171\1\0\1\u0171\13\0"+
    "\2\u0171\4\0\1\u0171\3\0\1\u0171\35\0\1\u0172\60\0"+
    "\2\14\1\67\1\u0173\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\4\14\1\u0174\21\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\4\14\1\u0175\21\14\1\0"+
    "\1\14\15\0\1\14\1\u0176\1\67\1\14\4\0\1\14"+
    "\6\0\26\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\14\14\1\u0177\11\14\1\0\1\14"+
    "\42\0\1\u0178\1\0\1\u0179\1\u017a\33\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\7\14\1\u017b\16\14\1\0"+
    "\1\14\20\0\1\u0114\105\0\1\u017c\57\0\1\u017d\45\0"+
    "\1\u017e\101\0\1\u017f\57\0\1\u0180\51\0\1\u012d\114\0"+
    "\1\u0181\51\0\1\u0115\60\0\1\u0182\77\0\1\u0183\32\0"+
    "\1\u0184\112\0\1\u0114\51\0\1\u0185\100\0\1\u010e\61\0"+
    "\1\u0186\70\0\1\u0187\56\0\1\u0188\34\0\1\u0189\102\0"+
    "\1\u018a\70\0\1\u018b\66\0\1\u018c\56\0\1\u0114\65\0"+
    "\1\u018d\63\0\1\u018e\63\0\1\u018f\67\0\1\u0190\54\0"+
    "\1\u0191\71\0\1\242\57\0\1\u0192\61\0\1\u0193\62\0"+
    "\1\u0194\70\0\1\u017c\64\0\1\u0195\66\0\1\u0196\52\0"+
    "\1\u0197\72\0\1\u0198\67\0\1\242\50\0\1\u0199\61\0"+
    "\1\u019a\72\0\1\u019b\63\0\1\u019c\74\0\1\u019d\63\0"+
    "\1\u019e\24\0\1\u019f\64\0\1\u01a0\32\0\1\u01a1\50\0"+
    "\1\u010e\43\0\1\u01a2\17\0\1\u01a3\64\0\1\u01a4\67\0"+
    "\1\u011b\5\0\1\u010e\25\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\4\14\1\u01a5\21\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\u01a6"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\14\14\1\u01a7\11\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\5\14\1\u01a8"+
    "\1\14\1\u01a9\16\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\5\14\1\u01aa\20\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\13\14\1\u01ab\12\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\u01ac\4\0\1\14\6\0\26\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\u01ad"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\3\14\1\u01ae\22\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\u01af"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\20\14\1\u01b0\5\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\u01b1"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\u01b2\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\u01b3\4\0\1\14\6\0\26\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\u01b4\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\11\14\1\u01b5\14\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\u01b6\4\0\1\14\6\0\26\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\u01b7"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\6\14\1\u01b8\17\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\14\14\1\u01b9"+
    "\11\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\4\14\1\u01ba\21\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\1\u01bb\25\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\1\u01bc\25\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\20\14\1\u01bd\5\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\u01be\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\15\0\2\14\1\67\1\u01bf\4\0"+
    "\1\14\6\0\26\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\1\u01c0\25\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\4\14"+
    "\1\u01c1\21\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\15\14\1\u01c2\10\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\1\u01c3"+
    "\25\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\14\14\1\u01c4\11\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\1\u01c5\25\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\4\14\1\u01c6\21\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\3\14\1\u01c7\22\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\10\14\1\u01c8\15\14\1\0\1\14\15\0\2\14"+
    "\1\u01c9\1\14\4\0\1\14\6\0\26\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\u01ca\4\0\1\14\6\0\26\14"+
    "\1\0\1\14\15\0\2\u0171\1\u0103\1\u0171\3\0\1\u0104"+
    "\7\0\2\u0171\4\0\1\u0171\3\0\1\u0171\32\0\1\u01cb"+
    "\3\0\2\u01cc\56\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\11\14\1\u01cd\14\14\1\0\1\14\34\0\1\u01ce"+
    "\65\0\1\u01cf\43\0\1\u01d0\62\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\4\14\1\u01d1\21\14\1\0\1\14"+
    "\40\0\1\u01a4\62\0\1\u0114\63\0\1\u01d2\73\0\1\u01d3"+
    "\63\0\1\u01d4\56\0\1\u01d3\40\0\1\u01d5\102\0\1\u01d6"+
    "\72\0\1\u01d7\64\0\1\u01d8\62\0\1\u01d9\60\0\1\u01da"+
    "\40\0\1\u01db\100\0\1\u01dc\47\0\1\u0114\24\0\1\u01dd"+
    "\36\0\1\u01de\107\0\1\u0114\64\0\1\u01dd\36\0\1\u017d"+
    "\13\0\1\u01df\46\0\1\u01e0\104\0\1\u01e1\61\0\1\u01e2"+
    "\66\0\1\u0114\67\0\1\u01e3\63\0\1\u01e4\56\0\1\u01a3"+
    "\42\0\1\u01e5\104\0\1\u01e6\57\0\1\u0114\66\0\1\u01e7"+
    "\64\0\1\u0193\57\0\1\u01e8\47\0\1\u01e9\110\0\1\u01ea"+
    "\57\0\1\u01eb\66\0\1\u01ec\63\0\1\u01ed\36\0\1\u01ee"+
    "\122\0\1\u0114\52\0\1\u01ef\33\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\1\u01f0\25\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\5\14\1\u01f1"+
    "\20\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\4\14\1\u01f2\21\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\u01f3\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\1\u01f4\25\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\5\14\1\u01f5\20\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\13\14"+
    "\1\u01f6\12\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\12\14\1\u01f7\13\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\u01f8\4\0\1\14\6\0\26\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\5\14\1\u01f9\20\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\17\14\1\u01fa\6\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\13\14\1\u01fb\12\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\12\14\1\u01fc\13\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\1\u01fd\25\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\4\14\1\u01fe\21\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\7\14\1\u01ff\16\14\1\0\1\14\15\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\1\u0200\25\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\6\14"+
    "\1\u0201\17\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\15\14\1\u0202\10\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\1\u0203"+
    "\25\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\6\14\1\u0204\17\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\12\14\1\u0205"+
    "\13\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\4\14\1\u0206\21\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\u0207\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\u0208\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\3\14\1\u0209\22\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\5\14\1\u020a"+
    "\20\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\11\14\1\u020b\14\14\1\0\1\14\15\0"+
    "\2\14\1\0\1\14\4\0\1\14\6\0\6\14\1\u020c"+
    "\17\14\1\0\1\14\15\0\1\u01cb\1\0\1\u01cc\61\0"+
    "\1\u01cb\63\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\2\14\1\u020d\23\14\1\0\1\14\41\0\1\u020e\60\0"+
    "\1\u020f\42\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\11\14\1\u0210\14\14\1\0\1\14\47\0\1\u0211\34\0"+
    "\1\u012b\117\0\1\u01d3\67\0\1\u0212\42\0\1\u0213\73\0"+
    "\1\u0213\63\0\1\u0214\50\0\1\u017c\45\0\1\u0215\25\0"+
    "\1\u0216\70\0\1\u0217\61\0\1\256\62\0\1\u0218\52\0"+
    "\1\u0219\67\0\1\u021a\61\0\1\u021b\65\0\1\u010e\5\0"+
    "\1\u021c\54\0\1\u021d\72\0\1\u021e\51\0\1\u021f\73\0"+
    "\1\u0220\72\0\1\u0114\50\0\1\u0221\64\0\1\u0222\70\0"+
    "\1\u0223\61\0\1\u0224\35\0\1\u0225\117\0\1\u0193\55\0"+
    "\1\u0226\7\0\1\u0227\2\0\1\u0228\41\0\1\306\42\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\6\14\1\u0229"+
    "\17\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\12\14\1\u022a\13\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\13\14\1\u022b"+
    "\12\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\5\14\1\u022c\20\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\u022d\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\u022e\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\1\u022f\25\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\4\14\1\u0230\21\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\u0231\4\0\1\14"+
    "\6\0\26\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\13\14\1\u0232\12\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\4\14"+
    "\1\u0233\21\14\1\0\1\14\15\0\2\14\1\67\1\u0234"+
    "\4\0\1\14\6\0\26\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\4\14\1\u0235\21\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\17\14\1\u0236\6\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\u0237\4\0\1\14\6\0\26\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\12\14"+
    "\1\u0238\13\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\3\14\1\u0239\22\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\u023a\4\0\1\14\6\0\26\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\6\14\1\u023b\17\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\22\14\1\u023c\3\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\13\14\1\u023d\12\14\1\0\1\14\20\0\1\u023e"+
    "\106\0\1\u023f\35\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\2\14\1\u0240\23\14\1\0\1\14\34\0\1\u0241"+
    "\47\0\1\311\111\0\1\u0242\51\0\1\u0243\74\0\1\u0244"+
    "\52\0\1\u0245\47\0\1\u0246\62\0\1\u0247\110\0\1\u010e"+
    "\64\0\1\u0248\52\0\1\u0249\47\0\1\u024a\110\0\1\u024b"+
    "\67\0\1\u024c\57\0\1\242\56\0\1\u024d\43\0\1\u024e"+
    "\122\0\1\u024f\24\0\1\u0250\70\0\1\u0251\56\0\1\u0252"+
    "\20\0\1\u0253\12\0\1\u0254\63\0\1\300\54\0\1\u0255"+
    "\52\0\1\u0256\44\0\2\14\1\67\1\14\4\0\1\14"+
    "\6\0\4\14\1\u0257\21\14\1\0\1\14\15\0\2\14"+
    "\1\67\1\14\4\0\1\14\6\0\4\14\1\u0258\21\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\u0259\4\0\1\14"+
    "\6\0\26\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\4\14\1\u025a\21\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\u025b\4\0\1\14\6\0\26\14"+
    "\1\0\1\14\15\0\2\14\1\67\1\u025c\4\0\1\14"+
    "\6\0\26\14\1\0\1\14\15\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\3\14\1\u025d\22\14\1\0\1\14"+
    "\15\0\2\14\1\67\1\14\4\0\1\14\6\0\1\u025e"+
    "\25\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\13\14\1\u025f\12\14\1\0\1\14\44\0"+
    "\1\u0260\37\0\1\u017d\103\0\1\u0261\62\0\1\u0245\65\0"+
    "\1\242\41\0\1\u0262\71\0\1\u0263\107\0\1\306\57\0"+
    "\1\u0264\65\0\1\u0265\52\0\1\u0266\44\0\1\u0267\114\0"+
    "\1\u0114\61\0\1\u0268\35\0\1\u0269\62\0\1\u026a\64\0"+
    "\1\u026b\106\0\1\u026c\10\0\1\u026d\63\0\1\265\43\0"+
    "\1\u026e\75\0\1\u0196\61\0\1\u026f\34\0\2\14\1\67"+
    "\1\u0270\4\0\1\14\6\0\26\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\3\14\1\u0271"+
    "\22\14\1\0\1\14\15\0\2\14\1\67\1\14\4\0"+
    "\1\14\6\0\12\14\1\u0272\13\14\1\0\1\14\15\0"+
    "\2\14\1\67\1\u0273\4\0\1\14\6\0\26\14\1\0"+
    "\1\14\15\0\2\14\1\67\1\14\4\0\1\14\6\0"+
    "\3\14\1\u0274\22\14\1\0\1\14\17\0\1\u0275\64\0"+
    "\1\u011b\104\0\1\u0276\1\0\1\u0277\40\0\1\u0278\112\0"+
    "\1\u0261\54\0\1\u0279\72\0\1\u027a\57\0\1\u027b\37\0"+
    "\1\u027c\112\0\1\u027d\35\0\1\u027e\15\0\1\u027f\1\u0280"+
    "\14\0\1\u0254\26\0\1\u0281\105\0\1\u0282\67\0\1\306"+
    "\65\0\1\u0283\67\0\1\u010e\25\0\2\14\1\67\1\14"+
    "\4\0\1\14\6\0\1\u0284\25\14\1\0\1\14\40\0"+
    "\1\u0285\70\0\1\u0286\54\0\1\u0287\64\0\1\u0288\43\0"+
    "\1\u0289\63\0\1\u028a\100\0\1\u028b\66\0\1\u028c\43\0"+
    "\1\u028d\120\0\1\u028e\67\0\1\u028f\37\0\1\u0290\1\0"+
    "\1\u0291\72\0\1\u0292\63\0\1\u0293\56\0\1\u0294\40\0"+
    "\2\14\1\67\1\14\4\0\1\14\6\0\6\14\1\u0295"+
    "\17\14\1\0\1\14\34\0\1\256\54\0\1\u010e\74\0"+
    "\1\u018d\63\0\1\u0193\66\0\1\u0276\67\0\1\u011b\55\0"+
    "\1\242\62\0\1\u0296\61\0\1\u0297\63\0\1\u0298\10\0"+
    "\1\306\36\0\1\u0299\111\0\1\u029a\70\0\1\u029b\57\0"+
    "\1\u029c\60\0\1\u01ef\64\0\1\u029d\33\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\4\14\1\u029e\21\14\1\0"+
    "\1\14\53\0\1\u029f\52\0\1\243\73\0\1\u0114\50\0"+
    "\1\u02a0\71\0\1\u0298\65\0\1\u02a1\33\0\1\u02a2\105\0"+
    "\1\u02a3\37\0\2\14\1\67\1\u02a4\4\0\1\14\6\0"+
    "\26\14\1\0\1\14\47\0\1\u02a5\32\0\1\u02a6\113\0"+
    "\1\u0193\56\0\1\u02a7\63\0\1\u0199\37\0\2\14\1\67"+
    "\1\14\4\0\1\14\6\0\3\14\1\u02a8\22\14\1\0"+
    "\1\14\46\0\1\u018e\61\0\1\u02a9\57\0\1\u02aa\61\0"+
    "\1\u02ab\63\0\1\u02ac\102\0\1\u0193\45\0\1\u02ad\60\0"+
    "\1\u02ae\100\0\1\u02af\32\0\1\u02b0\62\0\1\u02b1\64\0"+
    "\1\u02b2\107\0\1\u02b3\37\0\1\u02b4\117\0\1\u02b5\27\0"+
    "\1\u02b6\112\0\1\u019b\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\27\1\3\11\1\1\1\11"+
    "\2\1\1\11\3\1\1\11\1\0\2\1\2\11\1\1"+
    "\5\0\7\1\2\11\1\1\1\11\22\0\55\1\11\11"+
    "\1\0\1\1\1\0\1\1\1\0\13\1\60\0\67\1"+
    "\1\11\1\0\7\1\1\0\2\1\5\0\1\1\1\11"+
    "\32\0\1\1\13\0\1\1\4\0\61\1\2\0\5\1"+
    "\3\0\1\1\4\0\1\11\26\0\1\1\15\0\44\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\11\1\1\6\0"+
    "\1\1\23\0\1\1\3\0\36\1\2\0\1\1\30\0"+
    "\25\1\2\11\1\1\17\0\1\1\6\0\11\1\20\0"+
    "\5\1\17\0\1\1\20\0\1\1\10\0\1\1\5\0"+
    "\1\1\3\0\1\1\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[694];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    private LexerInput input;
    
    public Ada95SyntaxLexer(LexerRestartInfo info) {
        this.input = info.input();

        if(info.state() != null) {
            //reset state
            setState((LexerState)info.state());
        } else {
            //initial state
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState  {
        final StateStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState (StateStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                    return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                    return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            hash = 31 * hash + this.stack.hashCode();
            return hash;
        }
    }
        
    public LexerState getState() {
        return new LexerState(stack.createClone(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Ada95SyntaxLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Ada95SyntaxLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public AdaTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 76: 
          { return AdaTokenId.CHAR_LITERAL;
          }
        case 120: break;
        case 40: 
          { return AdaTokenId.BOX;
          }
        case 121: break;
        case 47: 
          { return AdaTokenId.ALL;
          }
        case 122: break;
        case 58: 
          { return AdaTokenId.ELSE;
          }
        case 123: break;
        case 70: 
          { return AdaTokenId.WITH;
          }
        case 124: break;
        case 13: 
          { return AdaTokenId.STAR;
          }
        case 125: break;
        case 77: 
          { return AdaTokenId.ABORT;
          }
        case 126: break;
        case 108: 
          { return AdaTokenId.FUNCTION;
          }
        case 127: break;
        case 69: 
          { return AdaTokenId.GOTO;
          }
        case 128: break;
        case 65: 
          { return AdaTokenId.THEN;
          }
        case 129: break;
        case 44: 
          { return AdaTokenId.FOR;
          }
        case 130: break;
        case 7: 
          { return  AdaTokenId.WHITESPACE;
          }
        case 131: break;
        case 14: 
          { return AdaTokenId.COMMA;
          }
        case 132: break;
        case 66: 
          { return AdaTokenId.CASE;
          }
        case 133: break;
        case 67: 
          { return AdaTokenId.LOOP;
          }
        case 134: break;
        case 116: 
          { return AdaTokenId.CHARACTER;
          }
        case 135: break;
        case 86: 
          { return AdaTokenId.END_IF;
          }
        case 136: break;
        case 118: 
          { return AdaTokenId.PROCEDURE;
          }
        case 137: break;
        case 80: 
          { return AdaTokenId.RAISE;
          }
        case 138: break;
        case 98: 
          { return AdaTokenId.RENAMES;
          }
        case 139: break;
        case 88: 
          { return AdaTokenId.ACCEPT;
          }
        case 140: break;
        case 113: 
          { return AdaTokenId.CONSTANT;
          }
        case 141: break;
        case 111: 
          { return AdaTokenId.ABSTRACT;
          }
        case 142: break;
        case 46: 
          { return AdaTokenId.ABS;
          }
        case 143: break;
        case 8: 
          { pushState(ST_HIGHLIGHTING_ERROR);
    return  AdaTokenId.UNKNOWN_TOKEN;
          }
        case 144: break;
        case 102: 
          { return AdaTokenId.PACKAGE;
          }
        case 145: break;
        case 114: 
          { return AdaTokenId.EXCEPTION;
          }
        case 146: break;
        case 59: 
          { return AdaTokenId.EXIT;
          }
        case 147: break;
        case 12: 
          { return AdaTokenId.RPAREN;
          }
        case 148: break;
        case 1: 
          { yypushback(1);
    pushState(ST_HIGHLIGHTING_ERROR);
          }
        case 149: break;
        case 11: 
          { return AdaTokenId.LPAREN;
          }
        case 150: break;
        case 87: 
          { return AdaTokenId.ACCESS;
          }
        case 151: break;
        case 48: 
          { return AdaTokenId.AND;
          }
        case 152: break;
        case 91: 
          { return AdaTokenId.RECORD;
          }
        case 153: break;
        case 63: 
          { return AdaTokenId.TRUE;
          }
        case 154: break;
        case 19: 
          { return AdaTokenId.EQ;
          }
        case 155: break;
        case 57: 
          { return AdaTokenId.BASED_LITERAL;
          }
        case 156: break;
        case 10: 
          { return AdaTokenId.AMP;
          }
        case 157: break;
        case 106: 
          { return AdaTokenId.DECLARE;
          }
        case 158: break;
        case 42: 
          { return AdaTokenId.GTEQ;
          }
        case 159: break;
        case 72: 
          { return AdaTokenId.FALSE;
          }
        case 160: break;
        case 45: 
          { return AdaTokenId.END;
          }
        case 161: break;
        case 94: 
          { return AdaTokenId.PRAGMA;
          }
        case 162: break;
        case 39: 
          { return AdaTokenId.LTEQ;
          }
        case 163: break;
        case 26: 
          { return AdaTokenId.DOT_DOT;
          }
        case 164: break;
        case 21: 
          { return AdaTokenId.BAR;
          }
        case 165: break;
        case 100: 
          { return AdaTokenId.REQUEUE;
          }
        case 166: break;
        case 54: 
          { return AdaTokenId.USE;
          }
        case 167: break;
        case 27: 
          { return AdaTokenId.STRING_LITERAL;
          }
        case 168: break;
        case 74: 
          { return AdaTokenId.ELSIF;
          }
        case 169: break;
        case 112: 
          { return AdaTokenId.SEPARATE;
          }
        case 170: break;
        case 89: 
          { return AdaTokenId.OTHERS;
          }
        case 171: break;
        case 2: 
          { return AdaTokenId.DECIMAL_LITERAL;
          }
        case 172: break;
        case 73: 
          { return AdaTokenId.FLOAT;
          }
        case 173: break;
        case 105: 
          { return AdaTokenId.INTEGER;
          }
        case 174: break;
        case 71: 
          { return AdaTokenId.WHEN;
          }
        case 175: break;
        case 50: 
          { return AdaTokenId.REM;
          }
        case 176: break;
        case 24: 
          { popState();
        return AdaTokenId.WHITESPACE;
          }
        case 177: break;
        case 23: 
          { return AdaTokenId.UNKNOWN_TOKEN;
          }
        case 178: break;
        case 55: 
          { return AdaTokenId.MOD;
          }
        case 179: break;
        case 3: 
          { return  AdaTokenId.IDENTIFIER;
          }
        case 180: break;
        case 15: 
          { return AdaTokenId.SLASH;
          }
        case 181: break;
        case 53: 
          { return AdaTokenId.XOR;
          }
        case 182: break;
        case 20: 
          { return AdaTokenId.LT;
          }
        case 183: break;
        case 104: 
          { return AdaTokenId.LIMITED;
          }
        case 184: break;
        case 90: 
          { return AdaTokenId.RETURN;
          }
        case 185: break;
        case 17: 
          { return AdaTokenId.SEMICOLON;
          }
        case 186: break;
        case 82: 
          { return AdaTokenId.DELAY;
          }
        case 187: break;
        case 101: 
          { return AdaTokenId.SUBTYPE;
          }
        case 188: break;
        case 4: 
          { return AdaTokenId.PLUS;
          }
        case 189: break;
        case 64: 
          { return AdaTokenId.TYPE;
          }
        case 190: break;
        case 35: 
          { return AdaTokenId.EXPON;
          }
        case 191: break;
        case 6: 
          { /*pushState(ST_LOOKING_FOR_PROPERTY);*/
                        return AdaTokenId.DOT;
          }
        case 192: break;
        case 103: 
          { return AdaTokenId.PRIVATE;
          }
        case 193: break;
        case 56: 
          { yypushback(1);
    popState();
          }
        case 194: break;
        case 99: 
          { return AdaTokenId.REVERSE;
          }
        case 195: break;
        case 84: 
          { return AdaTokenId.UNTIL;
          }
        case 196: break;
        case 9: 
          { return AdaTokenId.TICK;
          }
        case 197: break;
        case 22: 
          { popState();
    return AdaTokenId.COMMENT;
          }
        case 198: break;
        case 68: 
          { return AdaTokenId.NULL;
          }
        case 199: break;
        case 34: 
          { return AdaTokenId.DO;
          }
        case 200: break;
        case 33: 
          { return AdaTokenId.IN;
          }
        case 201: break;
        case 5: 
          { return AdaTokenId.MINUS;
          }
        case 202: break;
        case 81: 
          { return AdaTokenId.RANGE;
          }
        case 203: break;
        case 119: 
          { return AdaTokenId.WIDE_CHARECTER;
          }
        case 204: break;
        case 79: 
          { return AdaTokenId.BEGIN;
          }
        case 205: break;
        case 92: 
          { return AdaTokenId.TAGGED;
          }
        case 206: break;
        case 38: 
          { return AdaTokenId.LTLT;
          }
        case 207: break;
        case 41: 
          { return AdaTokenId.ARROW;
          }
        case 208: break;
        case 75: 
          { return AdaTokenId.ENTRY;
          }
        case 209: break;
        case 60: 
          { return AdaTokenId.ATTRIBUTE;
          }
        case 210: break;
        case 18: 
          { return AdaTokenId.GT;
          }
        case 211: break;
        case 97: 
          { return AdaTokenId.BOOLEAN;
          }
        case 212: break;
        case 29: 
          { return AdaTokenId.OF;
          }
        case 213: break;
        case 51: 
          { return AdaTokenId.NEW;
          }
        case 214: break;
        case 43: 
          { return AdaTokenId.GTGT;
          }
        case 215: break;
        case 49: 
          { return AdaTokenId.OUT;
          }
        case 216: break;
        case 96: 
          { return AdaTokenId.ALIASED;
          }
        case 217: break;
        case 30: 
          { return AdaTokenId.OR;
          }
        case 218: break;
        case 36: 
          { return AdaTokenId.INEQ;
          }
        case 219: break;
        case 78: 
          { return AdaTokenId.ARRAY;
          }
        case 220: break;
        case 32: 
          { return AdaTokenId.IS;
          }
        case 221: break;
        case 117: 
          { return AdaTokenId.PROTECTED;
          }
        case 222: break;
        case 85: 
          { return AdaTokenId.WHILE;
          }
        case 223: break;
        case 109: 
          { return AdaTokenId.END_CASE;
          }
        case 224: break;
        case 110: 
          { return AdaTokenId.END_LOOP;
          }
        case 225: break;
        case 95: 
          { return AdaTokenId.DIGITS;
          }
        case 226: break;
        case 61: 
          { return AdaTokenId.BODY;
          }
        case 227: break;
        case 107: 
          { return AdaTokenId.GENERIC;
          }
        case 228: break;
        case 83: 
          { return AdaTokenId.DELTA;
          }
        case 229: break;
        case 16: 
          { return AdaTokenId.COLON;
          }
        case 230: break;
        case 93: 
          { return AdaTokenId.SELECT;
          }
        case 231: break;
        case 28: 
          { return AdaTokenId.AT;
          }
        case 232: break;
        case 62: 
          { return AdaTokenId.TASK;
          }
        case 233: break;
        case 25: 
          { pushState(ST_COMMENT);
    return AdaTokenId.COMMENT;
          }
        case 234: break;
        case 37: 
          { return AdaTokenId.ASSIGNMENT;
          }
        case 235: break;
        case 31: 
          { return AdaTokenId.IF;
          }
        case 236: break;
        case 115: 
          { return AdaTokenId.TERMINATE;
          }
        case 237: break;
        case 52: 
          { return AdaTokenId.NOT;
          }
        case 238: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return AdaTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/* The following code was generated by JFlex 1.4.2 on 08/02/09 0.16 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.ada.editor.lexer;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.modules.ada.editor.AdaVersion;
import org.netbeans.modules.ada.editor.parser.Ada95ASTSymbols;
import org.netbeans.modules.ada.editor.ast.nodes.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 08/02/09 0.16 from the specification file
 * <tt>C:/hg-repo/release65/contrib/ada.editor/src/org/netbeans/modules/ada/editor/lexer/resources/Ada95ASTLexer.flex</tt>
 */
public class Ada95ASTLexer implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_LOOKING_FOR_PROPERTY = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_LINE_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\2\0\1\17\22\0\1\13\1\60\1\14\1\10"+
    "\2\0\1\46\1\16\1\47\1\50\1\51\1\5\1\52\1\6\1\7"+
    "\1\53\12\1\1\11\1\54\1\55\1\56\1\57\2\0\1\20\1\21"+
    "\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\12\1\43\1\30"+
    "\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\44"+
    "\1\41\1\36\1\34\1\12\4\0\1\3\1\0\1\20\1\21\1\26"+
    "\1\32\1\4\1\2\1\35\1\42\1\31\1\12\1\43\1\30\1\40"+
    "\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\44\1\41"+
    "\1\36\1\34\1\12\1\0\1\60\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\10\1\1\1\11\21\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\30\6\0\5\3\1\31\1\32"+
    "\1\33\1\0\1\34\1\0\2\3\1\35\5\3\1\36"+
    "\1\37\20\3\1\40\1\41\1\42\1\3\1\43\13\3"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\54\1\0\1\2\1\0\1\2\1\0\1\55"+
    "\3\3\1\56\2\3\1\57\1\3\1\60\2\3\1\61"+
    "\1\3\1\62\3\3\1\63\3\3\1\64\26\3\1\65"+
    "\1\66\3\3\1\67\1\70\1\3\1\71\3\3\2\0"+
    "\1\72\1\3\1\73\3\3\1\74\6\3\1\75\11\3"+
    "\1\76\1\3\1\77\1\100\3\3\1\101\6\3\1\102"+
    "\4\3\1\103\1\3\1\104\1\3\1\105\1\106\1\3"+
    "\3\0\1\3\1\107\1\110\1\3\1\111\1\3\1\112"+
    "\3\3\1\113\6\3\1\114\1\115\15\3\1\116\1\117"+
    "\1\3\1\120\1\121\1\0\1\72\1\0\3\3\1\122"+
    "\1\123\1\3\1\124\1\125\1\126\4\3\1\127\1\3"+
    "\1\130\3\3\1\131\6\3\1\0\3\3\1\132\1\133"+
    "\1\134\1\135\2\3\1\136\1\3\1\137\2\3\1\140"+
    "\1\141\1\142\1\143\1\0\1\144\1\3\1\145\1\3"+
    "\1\146\1\147\2\3\1\30\1\150\1\151\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\223"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\223\0\223\0\223\0\u05ef\0\223\0\u0620\0\223\0\u0651"+
    "\0\u0682\0\u06b3\0\223\0\223\0\u06e4\0\u0715\0\223\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\223\0\223\0\223\0\u024c\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u01ea\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u01ea\0\u01ea\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u01ea\0\u01ea\0\u01ea\0\u0e5b\0\u01ea"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\223\0\223\0\223\0\223\0\223"+
    "\0\223\0\223\0\223\0\u10a7\0\223\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u01ea\0\u11cd\0\u11fe\0\u122f\0\u01ea\0\u1260"+
    "\0\u1291\0\223\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u01ea\0\u1386"+
    "\0\u01ea\0\u13b7\0\u13e8\0\u1419\0\u01ea\0\u144a\0\u147b\0\u14ac"+
    "\0\u01ea\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u01ea"+
    "\0\u01ea\0\u1913\0\u1944\0\u1975\0\u01ea\0\u01ea\0\u19a6\0\u01ea"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u01ea"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u01ea\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u01ea\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u01ea\0\u1ea0\0\u01ea\0\u01ea"+
    "\0\u1ed1\0\u1f02\0\u1f33\0\u01ea\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u01ea\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u01ea"+
    "\0\u214e\0\u01ea\0\u217f\0\u01ea\0\u01ea\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\u2274\0\u01ea\0\u01ea\0\u22a5\0\u01ea\0\u22d6\0\u01ea"+
    "\0\u2307\0\u2338\0\u2369\0\u01ea\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u01ea\0\u01ea\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u01ea\0\u01ea\0\u273d\0\u01ea\0\u01ea\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u01ea\0\u01ea\0\u2894\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u01ea\0\u2989"+
    "\0\u01ea\0\u29ba\0\u29eb\0\u2a1c\0\u01ea\0\u2a4d\0\u2a7e\0\u2aaf"+
    "\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u2c37\0\u2c68\0\u01ea\0\u2c99\0\u01ea"+
    "\0\u2cca\0\u2cfb\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u2d2c\0\u01ea"+
    "\0\u2d5d\0\u01ea\0\u2d8e\0\u01ea\0\u01ea\0\u2dbf\0\u2df0\0\142"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\15\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\14\1\34\1\35\1\36"+
    "\1\37\1\40\4\14\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\54\1\55"+
    "\1\54\1\55\2\54\1\56\2\54\1\55\5\54\26\55"+
    "\13\54\15\3\1\57\1\3\1\60\1\61\40\3\62\0"+
    "\1\5\1\0\1\62\1\63\2\0\1\64\2\65\50\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\2\14\1\67"+
    "\14\14\1\70\6\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\10\14\1\71\2\14\1\72\2\14\1\73"+
    "\7\14\21\0\1\74\61\0\1\75\127\0\1\76\3\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\26\14\26\0"+
    "\1\15\1\0\1\15\1\0\1\15\41\0\14\77\1\100"+
    "\1\0\43\77\15\101\1\0\43\101\1\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\1\14\1\102\1\14\1\103"+
    "\1\104\1\14\1\105\1\14\1\106\2\14\1\107\12\14"+
    "\14\0\2\14\1\66\1\110\5\0\1\14\5\0\2\14"+
    "\1\111\23\14\14\0\1\14\1\112\1\66\1\14\5\0"+
    "\1\14\5\0\3\14\1\113\1\114\12\14\1\115\6\14"+
    "\14\0\2\14\1\66\1\116\5\0\1\14\5\0\1\117"+
    "\25\14\14\0\2\14\1\66\1\120\5\0\1\14\5\0"+
    "\1\121\13\14\1\122\5\14\1\123\3\14\14\0\2\14"+
    "\1\66\1\124\5\0\1\14\5\0\17\14\1\125\6\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\1\126"+
    "\1\14\1\127\23\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\130\2\14\1\131\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\2\14\1\132\6\14"+
    "\1\133\14\14\14\0\1\14\1\134\1\66\1\14\5\0"+
    "\1\14\5\0\5\14\1\135\5\14\1\136\12\14\14\0"+
    "\2\14\1\66\1\137\5\0\1\14\5\0\2\14\1\140"+
    "\23\14\14\0\2\14\1\66\1\141\5\0\1\14\5\0"+
    "\2\14\1\142\14\14\1\143\6\14\14\0\2\14\1\66"+
    "\1\144\5\0\1\14\5\0\2\14\1\145\23\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\2\14\1\146"+
    "\23\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\5\14\1\147\5\14\1\150\12\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\2\14\1\151\23\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\152"+
    "\10\14\1\153\3\14\64\0\1\154\65\0\1\155\57\0"+
    "\1\156\1\157\1\160\60\0\1\161\57\0\1\162\1\163"+
    "\2\0\2\55\1\164\1\55\5\0\1\55\5\0\26\55"+
    "\22\0\1\165\66\0\1\57\43\0\15\3\1\57\1\3"+
    "\1\60\1\61\12\3\1\166\25\3\1\0\1\5\60\0"+
    "\1\167\3\0\2\170\53\0\1\171\60\0\2\172\1\0"+
    "\1\172\13\0\2\172\4\0\1\172\3\0\1\172\27\0"+
    "\2\14\1\0\1\14\5\0\1\14\5\0\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\3\14\1\173"+
    "\22\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\13\14\1\174\12\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\5\14\1\175\20\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\4\14\1\176\5\14\1\177"+
    "\13\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\6\14\1\200\2\14\1\201\14\14\27\0\1\77\62\0"+
    "\1\202\43\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\2\14\1\203\2\14\1\204\20\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\3\14\1\205\22\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\6\14\1\206"+
    "\17\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\10\14\1\207\1\210\14\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\12\14\1\211\13\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\15\14\1\212\10\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\12\14"+
    "\1\213\13\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\22\14\1\214\3\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\215\21\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\216\1\14"+
    "\1\217\4\14\1\220\4\14\1\221\3\14\1\222\1\223"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\11\14"+
    "\1\224\1\14\1\225\12\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\226\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\5\14\1\227\7\14"+
    "\1\230\10\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\7\14\1\231\16\14\14\0\2\14\1\66\1\232"+
    "\5\0\1\14\5\0\26\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\7\14\1\233\1\234\15\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\1\14\1\235"+
    "\24\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\5\14\1\236\20\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\13\14\1\237\12\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\6\14\1\240\17\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\1\241\1\14"+
    "\1\242\6\14\1\243\14\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\2\14\1\244\23\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\20\14\1\245\5\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\6\14"+
    "\1\246\1\14\1\247\15\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\21\14\1\250\4\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\251\21\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\10\14"+
    "\1\252\15\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\13\14\1\253\12\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\254\21\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\3\14\1\255\22\14"+
    "\14\0\2\14\1\66\1\256\5\0\1\14\5\0\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\4\14"+
    "\1\257\21\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\12\14\1\260\13\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\261\21\14\14\0\2\14"+
    "\1\66\1\262\5\0\1\14\5\0\11\14\1\263\14\14"+
    "\14\0\2\55\1\0\1\55\5\0\1\55\5\0\26\55"+
    "\13\0\15\3\1\57\1\3\1\60\1\61\13\3\1\264"+
    "\24\3\1\0\1\167\1\0\1\170\56\0\1\167\60\0"+
    "\1\171\1\0\1\64\1\63\55\0\2\172\1\65\1\172"+
    "\2\0\1\265\2\266\6\0\2\172\4\0\1\172\3\0"+
    "\1\172\27\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\6\14\1\267\17\14\14\0\2\14\1\66\1\270\5\0"+
    "\1\14\5\0\11\14\1\271\14\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\3\14\1\272\22\14\14\0"+
    "\2\14\1\66\1\273\5\0\1\14\5\0\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\274"+
    "\21\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\3\14\1\275\22\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\4\14\1\276\21\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\1\277\25\14\14\0\2\14"+
    "\1\66\1\300\5\0\1\14\5\0\26\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\301\25\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\302"+
    "\14\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\14\14\1\303\11\14\14\0\2\14\1\66\1\304\5\0"+
    "\1\14\5\0\26\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\17\14\1\305\6\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\2\14\1\306\23\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\1\307\25\14"+
    "\14\0\2\14\1\66\1\310\5\0\1\14\5\0\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\17\14"+
    "\1\311\6\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\5\14\1\312\20\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\15\14\1\313\10\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\20\14\1\314\5\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\23\14"+
    "\1\315\2\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\15\14\1\316\10\14\14\0\2\14\1\66\1\317"+
    "\5\0\1\14\5\0\26\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\13\14\1\320\12\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\321\25\14\14\0"+
    "\2\14\1\66\1\322\5\0\1\14\5\0\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\323"+
    "\21\14\14\0\2\14\1\66\1\324\5\0\1\14\5\0"+
    "\26\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\5\14\1\325\20\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\23\14\1\326\2\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\15\14\1\327\10\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\330"+
    "\1\14\1\331\17\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\24\14\1\332\1\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\7\14\1\333\16\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\334"+
    "\14\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\10\14\1\335\15\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\336\3\14\1\337\21\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\10\14\1\340\15\14"+
    "\14\0\2\14\1\66\1\341\5\0\1\14\5\0\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\2\14"+
    "\1\342\23\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\11\14\1\343\14\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\22\14\1\344\3\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\13\14\1\345\12\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\10\14"+
    "\1\346\15\14\13\0\3\3\1\347\11\3\1\57\1\3"+
    "\1\60\1\61\40\3\1\0\2\350\1\0\1\350\13\0"+
    "\2\350\4\0\1\350\3\0\1\350\32\0\1\351\55\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\352"+
    "\21\14\14\0\1\14\1\353\1\66\1\14\5\0\1\14"+
    "\5\0\26\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\14\14\1\354\11\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\7\14\1\355\16\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\356\21\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\3\14"+
    "\1\357\22\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\14\14\1\360\11\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\5\14\1\361\1\14\1\362\16\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\5\14"+
    "\1\363\20\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\13\14\1\364\12\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\365\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\3\14\1\366\22\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\3\14"+
    "\1\367\22\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\20\14\1\370\5\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\371\22\14\14\0\2\14"+
    "\1\66\1\372\5\0\1\14\5\0\26\14\14\0\2\14"+
    "\1\66\1\373\5\0\1\14\5\0\26\14\14\0\2\14"+
    "\1\66\1\374\5\0\1\14\5\0\26\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\11\14\1\375\14\14"+
    "\14\0\2\14\1\66\1\376\5\0\1\14\5\0\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\3\14"+
    "\1\377\22\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\6\14\1\u0100\17\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\14\14\1\u0101\11\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\u0102\21\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\1\u0103"+
    "\25\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\20\14\1\u0104\5\14\14\0\2\14\1\66\1\u0105\5\0"+
    "\1\14\5\0\26\14\14\0\2\14\1\66\1\u0106\5\0"+
    "\1\14\5\0\26\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\u0107\25\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\u0108\21\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\u0109\25\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\14\14\1\u010a"+
    "\11\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\1\u010b\25\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\3\14\1\u010c\22\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\10\14\1\u010d\15\14\14\0\2\14"+
    "\1\66\1\u010e\5\0\1\14\5\0\26\14\13\0\15\3"+
    "\1\57\1\3\1\60\1\61\5\3\1\u010f\32\3\1\0"+
    "\2\350\1\265\1\350\3\0\2\266\6\0\2\350\4\0"+
    "\1\350\3\0\1\350\27\0\1\u0110\3\0\2\u0111\53\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\u0112"+
    "\14\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\u0113\21\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\u0114\25\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\5\14\1\u0115\20\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\u0116\21\14"+
    "\14\0\2\14\1\66\1\u0117\5\0\1\14\5\0\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\5\14"+
    "\1\u0118\20\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\13\14\1\u0119\12\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\12\14\1\u011a\13\14\14\0\2\14"+
    "\1\66\1\u011b\5\0\1\14\5\0\26\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\5\14\1\u011c\20\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\17\14"+
    "\1\u011d\6\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\13\14\1\u011e\12\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\12\14\1\u011f\13\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\u0120\25\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\u0121"+
    "\21\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\7\14\1\u0122\16\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\u0123\25\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\15\14\1\u0124\10\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\u0125\25\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\6\14\1\u0126"+
    "\17\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\12\14\1\u0127\13\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\4\14\1\u0128\21\14\14\0\2\14\1\66"+
    "\1\u0129\5\0\1\14\5\0\26\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\3\14\1\u012a\22\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\u012b"+
    "\14\14\13\0\15\3\1\57\1\3\1\60\1\61\21\3"+
    "\1\u012c\16\3\1\0\1\u0110\1\0\1\u0111\56\0\1\u0110"+
    "\60\0\2\14\1\66\1\14\5\0\1\14\5\0\2\14"+
    "\1\u012d\23\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\11\14\1\u012e\14\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\6\14\1\u012f\17\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\12\14\1\u0130\13\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\5\14"+
    "\1\u0131\20\14\14\0\2\14\1\66\1\u0132\5\0\1\14"+
    "\5\0\26\14\14\0\2\14\1\66\1\u0133\5\0\1\14"+
    "\5\0\26\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\1\u0134\25\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\4\14\1\u0135\21\14\14\0\2\14\1\66"+
    "\1\u0136\5\0\1\14\5\0\26\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\13\14\1\u0137\12\14\14\0"+
    "\2\14\1\66\1\u0138\5\0\1\14\5\0\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\u0139"+
    "\21\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\17\14\1\u013a\6\14\14\0\2\14\1\66\1\u013b\5\0"+
    "\1\14\5\0\26\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\12\14\1\u013c\13\14\14\0\2\14\1\66"+
    "\1\u013d\5\0\1\14\5\0\26\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\6\14\1\u013e\17\14\13\0"+
    "\15\3\1\57\1\3\1\60\1\u013f\40\3\1\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\13\14\1\u0140\12\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\2\14"+
    "\1\u0141\23\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\4\14\1\u0142\21\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\u0143\21\14\14\0\2\14"+
    "\1\66\1\u0144\5\0\1\14\5\0\26\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\u0145\21\14"+
    "\14\0\2\14\1\66\1\u0146\5\0\1\14\5\0\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\3\14"+
    "\1\u0147\22\14\13\0\15\3\1\57\1\3\1\60\1\61"+
    "\2\3\1\u0148\7\3\1\166\25\3\1\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\13\14\1\u0149\12\14\14\0"+
    "\2\14\1\66\1\u014a\5\0\1\14\5\0\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\12\14\1\u014b"+
    "\13\14\14\0\2\14\1\66\1\u014c\5\0\1\14\5\0"+
    "\26\14\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11809];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\30\1\3\11\1\1\1\11"+
    "\1\1\1\11\3\1\2\11\2\1\1\11\1\1\6\0"+
    "\5\1\3\11\1\0\1\1\1\0\52\1\10\11\1\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\7\1\1\11"+
    "\61\1\2\0\61\1\3\0\45\1\1\0\1\1\1\0"+
    "\32\1\1\0\22\1\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final List commentList = new LinkedList();
    private String comment = null;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;

    public AdaVersion getAdaVersion() {
            return AdaVersion.ADA_95;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void resetCommentList() {
            commentList.clear();
    }

    public List getCommentList() {
            return commentList;
    }
	
    protected void addComment(Comment.Type type) {
            int leftPosition = getTokenStartPosition();
            Comment comm;
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength());
            commentList.add(comm);
    }
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }
	
    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
            this.zzReader = reader;
            this.zzBuffer = buffer;
            this.zzMarkedPos = parameters[0];
            this.zzPushbackPos = parameters[1];
            this.zzCurrentPos = parameters[2];
            this.zzStartRead = parameters[3];
            this.zzEndRead = parameters[4];
            this.yyline = parameters[5];
            this.yychar = this.zzStartRead - this.zzPushbackPos;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Ada95ASTLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Ada95ASTLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 85: 
          { return createSymbol(Ada95ASTSymbols.RETURN);
          }
        case 108: break;
        case 32: 
          { return createSymbol(Ada95ASTSymbols.IF);
          }
        case 109: break;
        case 36: 
          { return createSymbol(Ada95ASTSymbols.EXPON);
          }
        case 110: break;
        case 96: 
          { return createSymbol(Ada95ASTSymbols.PRIVATE);
          }
        case 111: break;
        case 10: 
          { return createSymbol(Ada95ASTSymbols.AMP);
          }
        case 112: break;
        case 45: 
          { return createSymbol(Ada95ASTSymbols.FOR);
          }
        case 113: break;
        case 105: 
          { return createSymbol(Ada95ASTSymbols.TERMINATE);
          }
        case 114: break;
        case 100: 
          { return createSymbol(Ada95ASTSymbols.FUNCTION);
          }
        case 115: break;
        case 30: 
          { return createSymbol(Ada95ASTSymbols.OF);
          }
        case 116: break;
        case 27: 
          { return createSymbol(Ada95ASTSymbols.ASSIGNMENT);
          }
        case 117: break;
        case 103: 
          { return createSymbol(Ada95ASTSymbols.CONSTANT);
          }
        case 118: break;
        case 65: 
          { return createSymbol(Ada95ASTSymbols.CASE);
          }
        case 119: break;
        case 94: 
          { return createSymbol(Ada95ASTSymbols.SUBTYPE);
          }
        case 120: break;
        case 49: 
          { return createSymbol(Ada95ASTSymbols.ALL);
          }
        case 121: break;
        case 41: 
          { return createSymbol(Ada95ASTSymbols.ARROW);
          }
        case 122: break;
        case 53: 
          { return createSymbol(Ada95ASTSymbols.NEW);
          }
        case 123: break;
        case 75: 
          { return createSymbol(Ada95ASTSymbols.BEGIN);
          }
        case 124: break;
        case 95: 
          { return createSymbol(Ada95ASTSymbols.PACKAGE);
          }
        case 125: break;
        case 13: 
          { return createSymbol(Ada95ASTSymbols.STAR);
          }
        case 126: break;
        case 63: 
          { return createSymbol(Ada95ASTSymbols.TYPE);
          }
        case 127: break;
        case 104: 
          { return createSymbol(Ada95ASTSymbols.EXCEPTION);
          }
        case 128: break;
        case 47: 
          { return createFullSymbol(Ada95ASTSymbols.CHAR_LITERAL);
          }
        case 129: break;
        case 57: 
          { return createSymbol(Ada95ASTSymbols.MOD);
          }
        case 130: break;
        case 39: 
          { return createSymbol(Ada95ASTSymbols.LTEQ);
          }
        case 131: break;
        case 90: 
          { return createSymbol(Ada95ASTSymbols.ALIASED);
          }
        case 132: break;
        case 87: 
          { return createSymbol(Ada95ASTSymbols.TAGGED);
          }
        case 133: break;
        case 21: 
          { yypushback(yylength());
    popState();
          }
        case 134: break;
        case 12: 
          { return createSymbol(Ada95ASTSymbols.RPAREN);
          }
        case 135: break;
        case 16: 
          { return createSymbol(Ada95ASTSymbols.SEMICOLON);
          }
        case 136: break;
        case 58: 
          { return createFullSymbol(Ada95ASTSymbols.BASED_LITERAL);
          }
        case 137: break;
        case 29: 
          { return createSymbol(Ada95ASTSymbols.AT);
          }
        case 138: break;
        case 78: 
          { return createSymbol(Ada95ASTSymbols.DELAY);
          }
        case 139: break;
        case 26: 
          { return createSymbol(Ada95ASTSymbols.DOT_DOT);
          }
        case 140: break;
        case 24: 
          { handleLineCommentEnd();
    yybegin(YYINITIAL);
          }
        case 141: break;
        case 70: 
          { return createSymbol(Ada95ASTSymbols.WHEN);
          }
        case 142: break;
        case 38: 
          { return createSymbol(Ada95ASTSymbols.LTLT);
          }
        case 143: break;
        case 61: 
          { return createSymbol(Ada95ASTSymbols.BODY);
          }
        case 144: break;
        case 97: 
          { return createSymbol(Ada95ASTSymbols.LIMITED);
          }
        case 145: break;
        case 22: 
          { popState();
    return createFullSymbol(Ada95ASTSymbols.IDENTIFIER);
          }
        case 146: break;
        case 73: 
          { return createSymbol(Ada95ASTSymbols.ABORT);
          }
        case 147: break;
        case 106: 
          { return createSymbol(Ada95ASTSymbols.PROTECTED);
          }
        case 148: break;
        case 102: 
          { return createSymbol(Ada95ASTSymbols.SEPARATE);
          }
        case 149: break;
        case 59: 
          { return createSymbol(Ada95ASTSymbols.ELSE);
          }
        case 150: break;
        case 60: 
          { return createSymbol(Ada95ASTSymbols.EXIT);
          }
        case 151: break;
        case 43: 
          { return createSymbol(Ada95ASTSymbols.GTGT);
          }
        case 152: break;
        case 23: 
          { return createSymbol(Ada95ASTSymbols.DOT);
          }
        case 153: break;
        case 42: 
          { return createSymbol(Ada95ASTSymbols.GTEQ);
          }
        case 154: break;
        case 17: 
          { return createSymbol(Ada95ASTSymbols.GT);
          }
        case 155: break;
        case 50: 
          { return createSymbol(Ada95ASTSymbols.AND);
          }
        case 156: break;
        case 11: 
          { return createSymbol(Ada95ASTSymbols.LPAREN);
          }
        case 157: break;
        case 66: 
          { return createSymbol(Ada95ASTSymbols.LOOP);
          }
        case 158: break;
        case 83: 
          { return createSymbol(Ada95ASTSymbols.ACCEPT);
          }
        case 159: break;
        case 20: 
          { return createSymbol(Ada95ASTSymbols.BAR);
          }
        case 160: break;
        case 51: 
          { return createSymbol(Ada95ASTSymbols.OUT);
          }
        case 161: break;
        case 18: 
          { return createSymbol(Ada95ASTSymbols.EQ);
          }
        case 162: break;
        case 6: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
                      return createSymbol(Ada95ASTSymbols.DOT);
          }
        case 163: break;
        case 72: 
          { return createSymbol(Ada95ASTSymbols.ENTRY);
          }
        case 164: break;
        case 54: 
          { return createSymbol(Ada95ASTSymbols.NOT);
          }
        case 165: break;
        case 35: 
          { return createSymbol(Ada95ASTSymbols.DO);
          }
        case 166: break;
        case 33: 
          { return createSymbol(Ada95ASTSymbols.IS);
          }
        case 167: break;
        case 79: 
          { return createSymbol(Ada95ASTSymbols.DELTA);
          }
        case 168: break;
        case 77: 
          { return createSymbol(Ada95ASTSymbols.RANGE);
          }
        case 169: break;
        case 2: 
          { return createFullSymbol(Ada95ASTSymbols.DECIMAL_LITERAL);
          }
        case 170: break;
        case 3: 
          { return createFullSymbol(Ada95ASTSymbols.IDENTIFIER);
          }
        case 171: break;
        case 19: 
          { return createSymbol(Ada95ASTSymbols.LT);
          }
        case 172: break;
        case 82: 
          { return createSymbol(Ada95ASTSymbols.ACCESS);
          }
        case 173: break;
        case 93: 
          { return createSymbol(Ada95ASTSymbols.REQUEUE);
          }
        case 174: break;
        case 101: 
          { return createSymbol(Ada95ASTSymbols.ABSTRACT);
          }
        case 175: break;
        case 44: 
          { popState();
    return createSymbol(Ada95ASTSymbols.DOT_DOT);
          }
        case 176: break;
        case 5: 
          { return createSymbol(Ada95ASTSymbols.MINUS);
          }
        case 177: break;
        case 62: 
          { return createSymbol(Ada95ASTSymbols.TASK);
          }
        case 178: break;
        case 107: 
          { return createSymbol(Ada95ASTSymbols.PROCEDURE);
          }
        case 179: break;
        case 88: 
          { return createSymbol(Ada95ASTSymbols.SELECT);
          }
        case 180: break;
        case 40: 
          { return createSymbol(Ada95ASTSymbols.BOX);
          }
        case 181: break;
        case 48: 
          { return createSymbol(Ada95ASTSymbols.ABS);
          }
        case 182: break;
        case 89: 
          { return createSymbol(Ada95ASTSymbols.PRAGMA);
          }
        case 183: break;
        case 34: 
          { return createSymbol(Ada95ASTSymbols.IN);
          }
        case 184: break;
        case 92: 
          { return createSymbol(Ada95ASTSymbols.REVERSE);
          }
        case 185: break;
        case 9: 
          { return createSymbol(Ada95ASTSymbols.TICK);
          }
        case 186: break;
        case 46: 
          { return createSymbol(Ada95ASTSymbols.END);
          }
        case 187: break;
        case 67: 
          { return createSymbol(Ada95ASTSymbols.NULL);
          }
        case 188: break;
        case 55: 
          { return createSymbol(Ada95ASTSymbols.XOR);
          }
        case 189: break;
        case 69: 
          { return createSymbol(Ada95ASTSymbols.WITH);
          }
        case 190: break;
        case 91: 
          { return createSymbol(Ada95ASTSymbols.RENAMES);
          }
        case 191: break;
        case 7: 
          { return createSymbol(Ada95ASTSymbols.COLON);
          }
        case 192: break;
        case 74: 
          { return createSymbol(Ada95ASTSymbols.ARRAY);
          }
        case 193: break;
        case 4: 
          { return createSymbol(Ada95ASTSymbols.PLUS);
          }
        case 194: break;
        case 31: 
          { return createSymbol(Ada95ASTSymbols.OR);
          }
        case 195: break;
        case 52: 
          { return createSymbol(Ada95ASTSymbols.REM);
          }
        case 196: break;
        case 71: 
          { return createSymbol(Ada95ASTSymbols.ELSIF);
          }
        case 197: break;
        case 28: 
          { return createFullSymbol(Ada95ASTSymbols.STRING_LITERAL);
          }
        case 198: break;
        case 99: 
          { return createSymbol(Ada95ASTSymbols.GENERIC);
          }
        case 199: break;
        case 56: 
          { return createSymbol(Ada95ASTSymbols.USE);
          }
        case 200: break;
        case 80: 
          { return createSymbol(Ada95ASTSymbols.UNTIL);
          }
        case 201: break;
        case 98: 
          { return createSymbol(Ada95ASTSymbols.DECLARE);
          }
        case 202: break;
        case 86: 
          { return createSymbol(Ada95ASTSymbols.RECORD);
          }
        case 203: break;
        case 76: 
          { return createSymbol(Ada95ASTSymbols.RAISE);
          }
        case 204: break;
        case 15: 
          { return createSymbol(Ada95ASTSymbols.SLASH);
          }
        case 205: break;
        case 81: 
          { return createSymbol(Ada95ASTSymbols.WHILE);
          }
        case 206: break;
        case 64: 
          { return createSymbol(Ada95ASTSymbols.THEN);
          }
        case 207: break;
        case 68: 
          { return createSymbol(Ada95ASTSymbols.GOTO);
          }
        case 208: break;
        case 1: 
          { // do nothing
          }
        case 209: break;
        case 14: 
          { return createSymbol(Ada95ASTSymbols.COMMA);
          }
        case 210: break;
        case 37: 
          { return createSymbol(Ada95ASTSymbols.INEQ);
          }
        case 211: break;
        case 84: 
          { return createSymbol(Ada95ASTSymbols.OTHERS);
          }
        case 212: break;
        case 25: 
          { handleCommentStart();
	yybegin(ST_LINE_COMMENT);
          }
        case 213: break;
        case 8: 
          { 
          }
        case 214: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(Ada95ASTSymbols.EOF);
              }
            }
            case 333: break;
            default:
              {     return createSymbol(Ada95ASTSymbols.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

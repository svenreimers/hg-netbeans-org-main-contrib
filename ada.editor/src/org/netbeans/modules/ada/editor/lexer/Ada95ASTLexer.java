/* The following code was generated by JFlex 1.4.2 on 29/11/08 23.10 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.ada.editor.lexer;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.modules.ada.editor.AdaVersion;
import org.netbeans.modules.ada.editor.parser.Ada95ASTSymbols;
import org.netbeans.modules.ada.editor.ast.nodes.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 29/11/08 23.10 from the specification file
 * <tt>C:/hg-repo/main/contrib/ada.editor/src/org/netbeans/modules/ada/editor/lexer/resources/Ada95ASTLexer.flex</tt>
 */
public class Ada95ASTLexer implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_LOOKING_FOR_PROPERTY = 2;
  public static final int ST_COMMENT = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\17\2\0\1\15\22\0\1\12\1\61\1\14\1\10"+
    "\2\0\1\46\1\16\1\47\1\50\1\51\1\5\1\52\1\6\1\7"+
    "\1\53\12\1\1\54\1\55\1\56\1\57\1\60\2\0\1\20\1\21"+
    "\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\11\1\43\1\30"+
    "\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\44"+
    "\1\41\1\36\1\34\1\11\1\0\1\13\2\0\1\3\1\0\1\20"+
    "\1\21\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\11\1\43"+
    "\1\30\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37"+
    "\1\44\1\41\1\36\1\34\1\11\1\0\1\61\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\1\1\10\21\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\2\27\5\0\5\3\1\30\1\31"+
    "\2\0\1\32\1\0\2\3\1\33\5\3\1\34\1\35"+
    "\20\3\1\36\1\37\1\40\1\3\1\41\13\3\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\2\0\1\2\1\0\1\2\1\0\1\53\3\3\1\54"+
    "\2\3\1\0\1\32\2\0\1\3\1\55\2\3\1\56"+
    "\1\3\1\57\3\3\1\60\3\3\1\61\26\3\1\62"+
    "\1\63\3\3\1\64\1\65\1\3\1\66\3\3\1\67"+
    "\1\0\1\70\1\3\1\71\3\3\1\72\1\0\6\3"+
    "\1\73\11\3\1\74\1\3\1\75\1\76\3\3\1\77"+
    "\6\3\1\100\4\3\1\101\1\3\1\102\1\3\1\103"+
    "\1\104\1\3\2\0\1\3\1\105\1\106\1\3\1\107"+
    "\1\110\1\3\1\111\3\3\1\112\6\3\1\113\1\114"+
    "\15\3\1\115\1\116\1\3\1\117\1\120\1\70\1\0"+
    "\3\3\1\121\1\122\1\3\1\123\1\124\1\125\4\3"+
    "\1\126\1\3\1\127\3\3\1\130\11\3\1\131\1\132"+
    "\1\133\1\134\2\3\1\135\1\3\1\136\2\3\1\137"+
    "\1\140\1\141\1\142\1\143\1\3\1\144\1\3\1\145"+
    "\1\146\2\3\1\147\1\150\1\151\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\226"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\226"+
    "\0\226\0\226\0\u05dc\0\226\0\u060e\0\u0640\0\226\0\u0672"+
    "\0\u06a4\0\u06d6\0\226\0\u0708\0\226\0\u073a\0\144\0\226"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\226\0\226\0\u0226\0\u0960\0\226\0\u0992"+
    "\0\u09c4\0\u09f6\0\u01c2\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u01c2\0\u01c2\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u01c2\0\u01c2\0\u01c2\0\u0e42\0\u01c2\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u01c2\0\u11c6\0\u11f8\0\u122a\0\u01c2\0\u125c\0\u128e"+
    "\0\u12c0\0\u0226\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u01c2\0\u141e\0\u01c2\0\u1450\0\u1482\0\u14b4\0\u01c2\0\u14e6"+
    "\0\u1518\0\u154a\0\u01c2\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u01c2\0\u01c2\0\u19c8\0\u19fa\0\u1a2c\0\u01c2\0\u01c2"+
    "\0\u1a5e\0\u01c2\0\u1a90\0\u1ac2\0\u1af4\0\226\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u01c2\0\u1bbc\0\u1bee\0\u1c20\0\u01c2\0\u1c52\0\u1c84"+
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u01c2\0\u1db0\0\u1de2"+
    "\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u01c2"+
    "\0\u1f72\0\u01c2\0\u01c2\0\u1fa4\0\u1fd6\0\u2008\0\u01c2\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u01c2\0\u2166\0\u2198"+
    "\0\u21ca\0\u21fc\0\u01c2\0\u222e\0\u01c2\0\u2260\0\u01c2\0\u01c2"+
    "\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u01c2\0\u01c2\0\u235a\0\226"+
    "\0\u01c2\0\u238c\0\u01c2\0\u23be\0\u23f0\0\u2422\0\u01c2\0\u2454"+
    "\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u01c2\0\u01c2\0\u2580"+
    "\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u01c2\0\u01c2\0\u280a\0\u01c2"+
    "\0\u01c2\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u01c2\0\u01c2"+
    "\0\u2936\0\u01c2\0\u01c2\0\u01c2\0\u2968\0\u299a\0\u29cc\0\u29fe"+
    "\0\u01c2\0\u2a30\0\u01c2\0\u2a62\0\u2a94\0\u2ac6\0\u01c2\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u2cba\0\u2cec\0\u01c2\0\u2d1e"+
    "\0\u01c2\0\u2d50\0\u2d82\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u2db4\0\u01c2\0\u2de6\0\u01c2\0\u01c2\0\u2e18\0\u2e4a\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u01c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\4\1\15\1\14\1\16\1\14"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\13\1\33\1\34\1\35"+
    "\1\36\1\37\4\13\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\2\0"+
    "\1\54\1\0\1\54\2\0\1\55\1\0\1\54\4\0"+
    "\1\56\1\0\26\54\14\0\15\57\1\60\1\57\1\60"+
    "\42\57\63\0\1\5\1\0\1\61\1\62\2\0\1\63"+
    "\1\64\52\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\2\13\1\66\14\13\1\67\6\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\10\13\1\70\2\13\1\71"+
    "\2\13\1\72\7\13\22\0\1\73\62\0\1\74\53\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\26\13\26\0"+
    "\1\14\2\0\1\14\1\0\1\14\42\0\13\75\1\76"+
    "\1\77\1\0\1\75\1\0\42\75\16\0\1\100\44\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\1\13\1\101"+
    "\1\13\1\102\1\103\1\13\1\104\1\13\1\105\2\13"+
    "\1\106\12\13\15\0\2\13\1\65\1\107\4\0\1\13"+
    "\6\0\2\13\1\110\23\13\15\0\1\13\1\111\1\65"+
    "\1\13\4\0\1\13\6\0\3\13\1\112\1\113\12\13"+
    "\1\114\6\13\15\0\2\13\1\65\1\115\4\0\1\13"+
    "\6\0\1\116\25\13\15\0\2\13\1\65\1\117\4\0"+
    "\1\13\6\0\1\120\13\13\1\121\5\13\1\122\3\13"+
    "\15\0\2\13\1\65\1\123\4\0\1\13\6\0\17\13"+
    "\1\124\6\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\1\125\1\13\1\126\23\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\1\127\2\13\1\130\22\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\2\13"+
    "\1\131\6\13\1\132\14\13\15\0\1\13\1\133\1\65"+
    "\1\13\4\0\1\13\6\0\5\13\1\134\5\13\1\135"+
    "\12\13\15\0\2\13\1\65\1\136\4\0\1\13\6\0"+
    "\2\13\1\137\23\13\15\0\2\13\1\65\1\140\4\0"+
    "\1\13\6\0\2\13\1\141\14\13\1\142\6\13\15\0"+
    "\2\13\1\65\1\143\4\0\1\13\6\0\2\13\1\144"+
    "\23\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\2\13\1\145\23\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\5\13\1\146\5\13\1\147\12\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\2\13\1\150"+
    "\23\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\11\13\1\151\10\13\1\152\3\13\65\0\1\153\67\0"+
    "\1\154\61\0\1\155\60\0\1\156\1\157\1\160\61\0"+
    "\1\161\60\0\1\162\1\163\2\0\2\54\1\164\1\54"+
    "\4\0\1\54\6\0\26\54\14\0\17\165\1\0\42\165"+
    "\1\0\1\5\61\0\1\166\3\0\2\167\54\0\1\170"+
    "\61\0\2\171\1\0\1\171\13\0\2\171\4\0\1\171"+
    "\3\0\1\171\30\0\2\13\1\0\1\13\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\3\13\1\172\22\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\13\13\1\173\12\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\5\13\1\174\20\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\4\13"+
    "\1\175\5\13\1\176\13\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\6\13\1\177\2\13\1\200\14\13"+
    "\14\0\12\75\1\201\1\76\1\202\1\203\1\75\1\203"+
    "\42\75\17\204\1\0\42\204\1\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\2\13\1\205\2\13\1\206\20\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\3\13"+
    "\1\207\22\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\6\13\1\210\17\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\10\13\1\211\1\212\14\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\12\13\1\213"+
    "\13\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\15\13\1\214\10\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\12\13\1\215\13\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\22\13\1\216\3\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\4\13\1\217"+
    "\21\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\4\13\1\220\1\13\1\221\4\13\1\222\4\13\1\223"+
    "\3\13\1\224\1\225\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\11\13\1\226\1\13\1\227\12\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\3\13\1\230"+
    "\22\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\5\13\1\231\7\13\1\232\10\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\7\13\1\233\16\13\15\0"+
    "\2\13\1\65\1\234\4\0\1\13\6\0\26\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\7\13\1\235"+
    "\1\236\15\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\1\13\1\237\24\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\5\13\1\240\20\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\13\13\1\241\12\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\6\13"+
    "\1\242\17\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\1\243\1\13\1\244\6\13\1\245\14\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\2\13\1\246"+
    "\23\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\20\13\1\247\5\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\6\13\1\250\1\13\1\251\15\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\21\13\1\252"+
    "\4\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\4\13\1\253\21\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\10\13\1\254\15\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\13\13\1\255\12\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\4\13\1\256"+
    "\21\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\3\13\1\257\22\13\15\0\2\13\1\65\1\260\4\0"+
    "\1\13\6\0\26\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\4\13\1\261\21\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\12\13\1\262\13\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\4\13\1\263"+
    "\21\13\15\0\2\13\1\65\1\264\4\0\1\13\6\0"+
    "\11\13\1\265\14\13\15\0\2\54\1\0\1\54\4\0"+
    "\1\54\6\0\26\54\32\0\1\266\44\0\1\166\1\0"+
    "\1\167\57\0\1\166\61\0\1\170\1\0\1\63\1\62"+
    "\56\0\2\171\1\64\1\171\2\0\1\267\1\270\7\0"+
    "\2\171\4\0\1\171\3\0\1\171\30\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\6\13\1\271\17\13\15\0"+
    "\2\13\1\65\1\272\4\0\1\13\6\0\11\13\1\273"+
    "\14\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\3\13\1\274\22\13\15\0\2\13\1\65\1\275\4\0"+
    "\1\13\6\0\26\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\4\13\1\276\21\13\14\0\12\75\1\201"+
    "\1\76\1\77\1\203\1\75\1\203\42\75\12\0\1\203"+
    "\1\75\1\0\1\203\1\0\1\203\60\0\1\277\44\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\3\13\1\300"+
    "\22\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\4\13\1\301\21\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\1\302\25\13\15\0\2\13\1\65\1\303"+
    "\4\0\1\13\6\0\26\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\1\304\25\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\11\13\1\305\14\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\14\13\1\306"+
    "\11\13\15\0\2\13\1\65\1\307\4\0\1\13\6\0"+
    "\26\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\17\13\1\310\6\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\2\13\1\311\23\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\1\312\25\13\15\0\2\13"+
    "\1\65\1\313\4\0\1\13\6\0\26\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\17\13\1\314\6\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\5\13"+
    "\1\315\20\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\15\13\1\316\10\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\20\13\1\317\5\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\23\13\1\320\2\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\15\13"+
    "\1\321\10\13\15\0\2\13\1\65\1\322\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\13\13\1\323\12\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\1\324\25\13\15\0\2\13\1\65"+
    "\1\325\4\0\1\13\6\0\26\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\4\13\1\326\21\13\15\0"+
    "\2\13\1\65\1\327\4\0\1\13\6\0\26\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\5\13\1\330"+
    "\20\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\23\13\1\331\2\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\15\13\1\332\10\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\4\13\1\333\1\13\1\334"+
    "\17\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\24\13\1\335\1\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\7\13\1\336\16\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\11\13\1\337\14\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\10\13\1\340"+
    "\15\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\1\341\3\13\1\342\21\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\10\13\1\343\15\13\15\0\2\13"+
    "\1\65\1\344\4\0\1\13\6\0\26\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\2\13\1\345\23\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\11\13"+
    "\1\346\14\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\22\13\1\347\3\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\13\13\1\350\12\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\10\13\1\351\15\13"+
    "\15\0\2\352\1\0\1\352\13\0\2\352\4\0\1\352"+
    "\3\0\1\352\33\0\1\353\56\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\4\13\1\354\21\13\15\0\1\13"+
    "\1\355\1\65\1\13\4\0\1\13\6\0\26\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\14\13\1\356"+
    "\11\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\7\13\1\357\16\13\32\0\1\360\44\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\4\13\1\361\21\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\3\13\1\362"+
    "\22\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\14\13\1\363\11\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\5\13\1\364\1\13\1\365\16\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\5\13\1\366"+
    "\20\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\13\13\1\367\12\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\3\13\1\370\22\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\3\13\1\371\22\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\3\13\1\372"+
    "\22\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\20\13\1\373\5\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\3\13\1\374\22\13\15\0\2\13\1\65"+
    "\1\375\4\0\1\13\6\0\26\13\15\0\2\13\1\65"+
    "\1\376\4\0\1\13\6\0\26\13\15\0\2\13\1\65"+
    "\1\377\4\0\1\13\6\0\26\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\11\13\1\u0100\14\13\15\0"+
    "\2\13\1\65\1\u0101\4\0\1\13\6\0\26\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\3\13\1\u0102"+
    "\22\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\6\13\1\u0103\17\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\14\13\1\u0104\11\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\4\13\1\u0105\21\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\1\u0106\25\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\20\13"+
    "\1\u0107\5\13\15\0\2\13\1\65\1\u0108\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\u0109\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\1\u010a\25\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\4\13\1\u010b\21\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\1\u010c\25\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\14\13\1\u010d\11\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\1\u010e"+
    "\25\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\3\13\1\u010f\22\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\10\13\1\u0110\15\13\15\0\2\13\1\65"+
    "\1\u0111\4\0\1\13\6\0\26\13\15\0\2\352\1\267"+
    "\1\352\3\0\1\270\7\0\2\352\4\0\1\352\3\0"+
    "\1\352\30\0\1\u0112\3\0\2\u0113\54\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\11\13\1\u0114\14\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\4\13\1\u0115"+
    "\21\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\1\u0116\25\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\5\13\1\u0117\20\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\4\13\1\u0118\21\13\15\0\2\13"+
    "\1\65\1\u0119\4\0\1\13\6\0\26\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\5\13\1\u011a\20\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\13\13"+
    "\1\u011b\12\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\12\13\1\u011c\13\13\15\0\2\13\1\65\1\u011d"+
    "\4\0\1\13\6\0\26\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\5\13\1\u011e\20\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\17\13\1\u011f\6\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\13\13"+
    "\1\u0120\12\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\12\13\1\u0121\13\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\1\u0122\25\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\4\13\1\u0123\21\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\7\13\1\u0124"+
    "\16\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\1\u0125\25\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\15\13\1\u0126\10\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\1\u0127\25\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\6\13\1\u0128\17\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\12\13\1\u0129"+
    "\13\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\4\13\1\u012a\21\13\15\0\2\13\1\65\1\u012b\4\0"+
    "\1\13\6\0\26\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\3\13\1\u012c\22\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\11\13\1\u012d\14\13\15\0"+
    "\1\u0112\1\0\1\u0113\57\0\1\u0112\61\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\2\13\1\u012e\23\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\11\13\1\u012f"+
    "\14\13\15\0\2\13\1\65\1\13\4\0\1\13\6\0"+
    "\6\13\1\u0130\17\13\15\0\2\13\1\65\1\13\4\0"+
    "\1\13\6\0\12\13\1\u0131\13\13\15\0\2\13\1\65"+
    "\1\13\4\0\1\13\6\0\5\13\1\u0132\20\13\15\0"+
    "\2\13\1\65\1\u0133\4\0\1\13\6\0\26\13\15\0"+
    "\2\13\1\65\1\u0134\4\0\1\13\6\0\26\13\15\0"+
    "\2\13\1\65\1\13\4\0\1\13\6\0\1\u0135\25\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\4\13"+
    "\1\u0136\21\13\15\0\2\13\1\65\1\u0137\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\13\13\1\u0138\12\13\15\0\2\13\1\65\1\u0139"+
    "\4\0\1\13\6\0\26\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\4\13\1\u013a\21\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\17\13\1\u013b\6\13"+
    "\15\0\2\13\1\65\1\u013c\4\0\1\13\6\0\26\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\12\13"+
    "\1\u013d\13\13\15\0\2\13\1\65\1\u013e\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\6\13\1\u013f\17\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\13\13\1\u0140\12\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\2\13\1\u0141\23\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\4\13"+
    "\1\u0142\21\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\4\13\1\u0143\21\13\15\0\2\13\1\65\1\u0144"+
    "\4\0\1\13\6\0\26\13\15\0\2\13\1\65\1\13"+
    "\4\0\1\13\6\0\4\13\1\u0145\21\13\15\0\2\13"+
    "\1\65\1\u0146\4\0\1\13\6\0\26\13\15\0\2\13"+
    "\1\65\1\13\4\0\1\13\6\0\3\13\1\u0147\22\13"+
    "\15\0\2\13\1\65\1\13\4\0\1\13\6\0\13\13"+
    "\1\u0148\12\13\15\0\2\13\1\65\1\u0149\4\0\1\13"+
    "\6\0\26\13\15\0\2\13\1\65\1\13\4\0\1\13"+
    "\6\0\12\13\1\u014a\13\13\15\0\2\13\1\65\1\u014b"+
    "\4\0\1\13\6\0\26\13\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\27\1\3\11\1\1\1\11"+
    "\2\1\1\11\3\1\1\11\1\1\1\11\1\0\1\1"+
    "\1\11\5\0\5\1\2\11\2\0\1\11\1\0\52\1"+
    "\11\11\2\0\1\1\1\0\1\1\1\0\7\1\1\0"+
    "\1\1\2\0\61\1\1\11\1\0\7\1\1\0\52\1"+
    "\2\0\4\1\1\11\42\1\1\0\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final List commentList = new LinkedList();
    private String comment = null;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;

    public AdaVersion getAdaVersion() {
            return AdaVersion.ADA_95;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void resetCommentList() {
            commentList.clear();
    }

    public List getCommentList() {
            return commentList;
    }
	
    protected void addComment(Comment.Type type) {
            int leftPosition = getTokenStartPosition();
            Comment comm;
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength());
            commentList.add(comm);
    }
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }
	
    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
            this.zzReader = reader;
            this.zzBuffer = buffer;
            this.zzMarkedPos = parameters[0];
            this.zzPushbackPos = parameters[1];
            this.zzCurrentPos = parameters[2];
            this.zzStartRead = parameters[3];
            this.zzEndRead = parameters[4];
            this.yyline = parameters[5];
            this.yychar = this.zzStartRead - this.zzPushbackPos;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Ada95ASTLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Ada95ASTLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { return createSymbol(Ada95ASTSymbols.RETURN);
          }
        case 107: break;
        case 30: 
          { return createSymbol(Ada95ASTSymbols.IF);
          }
        case 108: break;
        case 24: 
          { handleCommentStart();
	yybegin(ST_COMMENT);
          }
        case 109: break;
        case 95: 
          { return createSymbol(Ada95ASTSymbols.PRIVATE);
          }
        case 110: break;
        case 9: 
          { return createSymbol(Ada95ASTSymbols.AMP);
          }
        case 111: break;
        case 43: 
          { return createSymbol(Ada95ASTSymbols.FOR);
          }
        case 112: break;
        case 104: 
          { return createSymbol(Ada95ASTSymbols.TERMINATE);
          }
        case 113: break;
        case 99: 
          { return createSymbol(Ada95ASTSymbols.FUNCTION);
          }
        case 114: break;
        case 28: 
          { return createSymbol(Ada95ASTSymbols.OF);
          }
        case 115: break;
        case 36: 
          { return createSymbol(Ada95ASTSymbols.ASSIGNMENT);
          }
        case 116: break;
        case 102: 
          { return createSymbol(Ada95ASTSymbols.CONSTANT);
          }
        case 117: break;
        case 63: 
          { return createSymbol(Ada95ASTSymbols.CASE);
          }
        case 118: break;
        case 93: 
          { return createSymbol(Ada95ASTSymbols.SUBTYPE);
          }
        case 119: break;
        case 46: 
          { return createSymbol(Ada95ASTSymbols.ALL);
          }
        case 120: break;
        case 40: 
          { return createSymbol(Ada95ASTSymbols.ARROW);
          }
        case 121: break;
        case 50: 
          { return createSymbol(Ada95ASTSymbols.NEW);
          }
        case 122: break;
        case 74: 
          { return createSymbol(Ada95ASTSymbols.BEGIN);
          }
        case 123: break;
        case 94: 
          { return createSymbol(Ada95ASTSymbols.PACKAGE);
          }
        case 124: break;
        case 12: 
          { return createSymbol(Ada95ASTSymbols.STAR);
          }
        case 125: break;
        case 61: 
          { return createSymbol(Ada95ASTSymbols.TYPE);
          }
        case 126: break;
        case 103: 
          { return createSymbol(Ada95ASTSymbols.EXCEPTION);
          }
        case 127: break;
        case 71: 
          { return createFullSymbol(Ada95ASTSymbols.CHAR_LITERAL);
          }
        case 128: break;
        case 54: 
          { return createSymbol(Ada95ASTSymbols.MOD);
          }
        case 129: break;
        case 38: 
          { return createSymbol(Ada95ASTSymbols.LTEQ);
          }
        case 130: break;
        case 89: 
          { return createSymbol(Ada95ASTSymbols.ALIASED);
          }
        case 131: break;
        case 86: 
          { return createSymbol(Ada95ASTSymbols.TAGGED);
          }
        case 132: break;
        case 55: 
          { yypushback(yylength());
    popState();
          }
        case 133: break;
        case 11: 
          { return createSymbol(Ada95ASTSymbols.RPAREN);
          }
        case 134: break;
        case 16: 
          { return createSymbol(Ada95ASTSymbols.SEMICOLON);
          }
        case 135: break;
        case 56: 
          { return createFullSymbol(Ada95ASTSymbols.BASED_LITERAL);
          }
        case 136: break;
        case 27: 
          { return createSymbol(Ada95ASTSymbols.AT);
          }
        case 137: break;
        case 77: 
          { return createSymbol(Ada95ASTSymbols.DELAY);
          }
        case 138: break;
        case 25: 
          { return createSymbol(Ada95ASTSymbols.DOT_DOT);
          }
        case 139: break;
        case 68: 
          { return createSymbol(Ada95ASTSymbols.WHEN);
          }
        case 140: break;
        case 37: 
          { return createSymbol(Ada95ASTSymbols.LTLT);
          }
        case 141: break;
        case 59: 
          { return createSymbol(Ada95ASTSymbols.BODY);
          }
        case 142: break;
        case 23: 
          { handleLineCommentEnd();
        yybegin(YYINITIAL);
          }
        case 143: break;
        case 96: 
          { return createSymbol(Ada95ASTSymbols.LIMITED);
          }
        case 144: break;
        case 21: 
          { popState();
    return createFullSymbol(Ada95ASTSymbols.IDENTIFIER);
          }
        case 145: break;
        case 72: 
          { return createSymbol(Ada95ASTSymbols.ABORT);
          }
        case 146: break;
        case 105: 
          { return createSymbol(Ada95ASTSymbols.PROTECTED);
          }
        case 147: break;
        case 101: 
          { return createSymbol(Ada95ASTSymbols.SEPARATE);
          }
        case 148: break;
        case 57: 
          { return createSymbol(Ada95ASTSymbols.ELSE);
          }
        case 149: break;
        case 34: 
          { return createSymbol(Ada95ASTSymbols.EXPONENT);
          }
        case 150: break;
        case 58: 
          { return createSymbol(Ada95ASTSymbols.EXIT);
          }
        case 151: break;
        case 42: 
          { return createSymbol(Ada95ASTSymbols.GTGT);
          }
        case 152: break;
        case 22: 
          { return createSymbol(Ada95ASTSymbols.DOT);
          }
        case 153: break;
        case 6: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
                        return createSymbol(Ada95ASTSymbols.DOT);
          }
        case 154: break;
        case 41: 
          { return createSymbol(Ada95ASTSymbols.GTEQ);
          }
        case 155: break;
        case 17: 
          { return createSymbol(Ada95ASTSymbols.GT);
          }
        case 156: break;
        case 47: 
          { return createSymbol(Ada95ASTSymbols.AND);
          }
        case 157: break;
        case 10: 
          { return createSymbol(Ada95ASTSymbols.LPAREN);
          }
        case 158: break;
        case 64: 
          { return createSymbol(Ada95ASTSymbols.LOOP);
          }
        case 159: break;
        case 82: 
          { return createSymbol(Ada95ASTSymbols.ACCEPT);
          }
        case 160: break;
        case 20: 
          { return createSymbol(Ada95ASTSymbols.BAR);
          }
        case 161: break;
        case 48: 
          { return createSymbol(Ada95ASTSymbols.OUT);
          }
        case 162: break;
        case 18: 
          { return createSymbol(Ada95ASTSymbols.EQ);
          }
        case 163: break;
        case 70: 
          { return createSymbol(Ada95ASTSymbols.ENTRY);
          }
        case 164: break;
        case 51: 
          { return createSymbol(Ada95ASTSymbols.NOT);
          }
        case 165: break;
        case 33: 
          { return createSymbol(Ada95ASTSymbols.DO);
          }
        case 166: break;
        case 31: 
          { return createSymbol(Ada95ASTSymbols.IS);
          }
        case 167: break;
        case 78: 
          { return createSymbol(Ada95ASTSymbols.DELTA);
          }
        case 168: break;
        case 76: 
          { return createSymbol(Ada95ASTSymbols.RANGE);
          }
        case 169: break;
        case 2: 
          { return createFullSymbol(Ada95ASTSymbols.DECIMAL_LITERAL);
          }
        case 170: break;
        case 3: 
          { return createFullSymbol(Ada95ASTSymbols.IDENTIFIER);
          }
        case 171: break;
        case 19: 
          { return createSymbol(Ada95ASTSymbols.LT);
          }
        case 172: break;
        case 81: 
          { return createSymbol(Ada95ASTSymbols.ACCESS);
          }
        case 173: break;
        case 92: 
          { return createSymbol(Ada95ASTSymbols.REQUEUE);
          }
        case 174: break;
        case 100: 
          { return createSymbol(Ada95ASTSymbols.ABSTRACT);
          }
        case 175: break;
        case 5: 
          { return createSymbol(Ada95ASTSymbols.MINUS);
          }
        case 176: break;
        case 60: 
          { return createSymbol(Ada95ASTSymbols.TASK);
          }
        case 177: break;
        case 106: 
          { return createSymbol(Ada95ASTSymbols.PROCEDURE);
          }
        case 178: break;
        case 87: 
          { return createSymbol(Ada95ASTSymbols.SELECT);
          }
        case 179: break;
        case 39: 
          { return createSymbol(Ada95ASTSymbols.BOX);
          }
        case 180: break;
        case 45: 
          { return createSymbol(Ada95ASTSymbols.ABS);
          }
        case 181: break;
        case 88: 
          { return createSymbol(Ada95ASTSymbols.PRAGMA);
          }
        case 182: break;
        case 32: 
          { return createSymbol(Ada95ASTSymbols.IN);
          }
        case 183: break;
        case 91: 
          { return createSymbol(Ada95ASTSymbols.REVERSE);
          }
        case 184: break;
        case 8: 
          { return createSymbol(Ada95ASTSymbols.TICK);
          }
        case 185: break;
        case 44: 
          { return createSymbol(Ada95ASTSymbols.END);
          }
        case 186: break;
        case 65: 
          { return createSymbol(Ada95ASTSymbols.NULL);
          }
        case 187: break;
        case 52: 
          { return createSymbol(Ada95ASTSymbols.XOR);
          }
        case 188: break;
        case 67: 
          { return createSymbol(Ada95ASTSymbols.WITH);
          }
        case 189: break;
        case 90: 
          { return createSymbol(Ada95ASTSymbols.RENAMES);
          }
        case 190: break;
        case 15: 
          { return createSymbol(Ada95ASTSymbols.COLON);
          }
        case 191: break;
        case 73: 
          { return createSymbol(Ada95ASTSymbols.ARRAY);
          }
        case 192: break;
        case 4: 
          { return createSymbol(Ada95ASTSymbols.PLUS);
          }
        case 193: break;
        case 29: 
          { return createSymbol(Ada95ASTSymbols.OR);
          }
        case 194: break;
        case 49: 
          { return createSymbol(Ada95ASTSymbols.REM);
          }
        case 195: break;
        case 69: 
          { return createSymbol(Ada95ASTSymbols.ELSIF);
          }
        case 196: break;
        case 26: 
          { return createFullSymbol(Ada95ASTSymbols.STRING_LITERAL);
          }
        case 197: break;
        case 98: 
          { return createSymbol(Ada95ASTSymbols.GENERIC);
          }
        case 198: break;
        case 53: 
          { return createSymbol(Ada95ASTSymbols.USE);
          }
        case 199: break;
        case 79: 
          { return createSymbol(Ada95ASTSymbols.UNTIL);
          }
        case 200: break;
        case 97: 
          { return createSymbol(Ada95ASTSymbols.DECLARE);
          }
        case 201: break;
        case 85: 
          { return createSymbol(Ada95ASTSymbols.RECORD);
          }
        case 202: break;
        case 75: 
          { return createSymbol(Ada95ASTSymbols.RAISE);
          }
        case 203: break;
        case 14: 
          { return createSymbol(Ada95ASTSymbols.SLASH);
          }
        case 204: break;
        case 80: 
          { return createSymbol(Ada95ASTSymbols.WHILE);
          }
        case 205: break;
        case 62: 
          { return createSymbol(Ada95ASTSymbols.THEN);
          }
        case 206: break;
        case 66: 
          { return createSymbol(Ada95ASTSymbols.GOTO);
          }
        case 207: break;
        case 1: 
          { // do nothing
          }
        case 208: break;
        case 13: 
          { return createSymbol(Ada95ASTSymbols.COMMA);
          }
        case 209: break;
        case 35: 
          { return createSymbol(Ada95ASTSymbols.INEQ);
          }
        case 210: break;
        case 83: 
          { return createSymbol(Ada95ASTSymbols.OTHERS);
          }
        case 211: break;
        case 7: 
          { 
          }
        case 212: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(Ada95ASTSymbols.EOF);
              }
            }
            case 332: break;
            default:
              {     return createSymbol(Ada95ASTSymbols.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/* The following code was generated by JFlex 1.4.3 on 23/09/10 23.54 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.ada.editor.lexer;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.modules.ada.editor.parser.AdaASTSymbols;
import org.netbeans.modules.ada.editor.ast.nodes.*;
import java_cup.runtime.*;
import org.netbeans.modules.ada.project.api.AdaLanguageOptions;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/09/10 23.54 from the specification file
 * <tt>C:/hg-repo/release691/contrib/ada.editor/src/org/netbeans/modules/ada/editor/lexer/resources/AdaASTLexer.flex</tt>
 */
public class AdaASTLexer implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_LOOKING_FOR_PROPERTY = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_LINE_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\2\0\1\17\22\0\1\13\1\61\1\14\1\10"+
    "\2\0\1\47\1\16\1\50\1\51\1\52\1\5\1\53\1\6\1\7"+
    "\1\54\12\1\1\11\1\55\1\56\1\57\1\60\2\0\1\20\1\21"+
    "\1\26\1\32\1\4\1\2\1\35\1\42\1\31\1\12\1\44\1\30"+
    "\1\40\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\43"+
    "\1\41\1\36\1\34\1\46\4\0\1\3\1\0\1\20\1\21\1\26"+
    "\1\32\1\4\1\2\1\35\1\42\1\31\1\12\1\44\1\30\1\40"+
    "\1\33\1\22\1\27\1\45\1\23\1\25\1\24\1\37\1\43\1\41"+
    "\1\36\1\34\1\46\1\0\1\61\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\10\1\1\1\11\21\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\30\6\0\5\3\1\31\1\32"+
    "\1\33\1\0\1\34\1\0\2\3\1\35\5\3\1\36"+
    "\1\37\23\3\1\40\1\41\1\42\1\3\1\43\13\3"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\54\1\0\1\2\1\0\1\2\1\0\1\55"+
    "\3\3\1\56\2\3\1\57\1\3\1\60\2\3\1\61"+
    "\1\3\1\62\3\3\1\63\4\3\1\64\31\3\1\65"+
    "\1\66\3\3\1\67\1\70\1\3\1\71\3\3\2\0"+
    "\1\72\1\3\1\73\3\3\1\74\6\3\1\75\12\3"+
    "\1\76\1\3\1\77\1\100\2\3\1\101\2\3\1\102"+
    "\6\3\1\103\5\3\1\104\1\3\1\105\1\3\1\106"+
    "\1\107\1\3\3\0\1\3\1\110\1\111\1\3\1\112"+
    "\1\3\1\113\3\3\1\114\7\3\1\115\1\116\17\3"+
    "\1\117\1\120\1\3\1\121\1\122\1\0\1\72\1\0"+
    "\3\3\1\123\1\124\1\3\1\125\1\3\1\126\1\127"+
    "\4\3\1\130\1\3\1\131\4\3\1\132\7\3\1\0"+
    "\3\3\1\133\1\3\1\134\1\135\1\136\3\3\1\137"+
    "\1\3\1\140\2\3\1\141\1\142\1\3\1\143\1\144"+
    "\1\0\1\145\1\3\1\146\2\3\1\147\1\3\1\150"+
    "\3\3\1\30\1\151\1\3\1\152\1\3\1\153\1\154"+
    "\1\155\1\156\2\3\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\226"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\226\0\226\0\226\0\u060e\0\226\0\u0640\0\226\0\u0672"+
    "\0\u06a4\0\u06d6\0\226\0\226\0\u0708\0\u073a\0\226\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\226\0\226\0\226\0\u0258\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u01f4\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u01f4\0\u01f4\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u01f4\0\u01f4"+
    "\0\u0f3c\0\u0f6e\0\u01f4\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\u11c6\0\226"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u01f4\0\u12f2\0\u1324"+
    "\0\u1356\0\u01f4\0\u1388\0\u13ba\0\226\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u01f4\0\u14b4\0\u01f4\0\u14e6\0\u1518\0\u154a\0\u01f4"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u01f4\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u01f4\0\u01f4"+
    "\0\u1b26\0\u1b58\0\u1b8a\0\u01f4\0\u01f4\0\u1bbc\0\u01f4\0\u1bee"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u01f4\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u01f4\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u1edc\0\u01f4\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008"+
    "\0\u203a\0\u206c\0\u209e\0\u20d0\0\u01f4\0\u2102\0\u01f4\0\u01f4"+
    "\0\u2134\0\u2166\0\u01f4\0\u2198\0\u21ca\0\u01f4\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u01f4\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u01f4\0\u2422\0\u01f4\0\u2454\0\u01f4\0\u01f4"+
    "\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u01f4\0\u01f4\0\u2580"+
    "\0\u01f4\0\u25b2\0\u01f4\0\u25e4\0\u2616\0\u2648\0\u01f4\0\u267a"+
    "\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u01f4\0\u01f4"+
    "\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u01f4"+
    "\0\u01f4\0\u2ac6\0\u01f4\0\u01f4\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e"+
    "\0\u2bc0\0\u2bf2\0\u01f4\0\u01f4\0\u2c24\0\u01f4\0\u2c56\0\u01f4"+
    "\0\u01f4\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u01f4\0\u2d50\0\u01f4"+
    "\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u01f4\0\u2e4a\0\u2e7c\0\u2eae"+
    "\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e"+
    "\0\u01f4\0\u3070\0\u01f4\0\u01f4\0\u01f4\0\u30a2\0\u30d4\0\u3106"+
    "\0\u01f4\0\u3138\0\u01f4\0\u316a\0\u319c\0\u01f4\0\u01f4\0\u31ce"+
    "\0\u01f4\0\u01f4\0\u3200\0\u01f4\0\u3232\0\u01f4\0\u3264\0\u3296"+
    "\0\u01f4\0\u32c8\0\u01f4\0\u32fa\0\u332c\0\u335e\0\144\0\u01f4"+
    "\0\u3390\0\u01f4\0\u33c2\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u33f4"+
    "\0\u3426\0\u01f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\15\1\17\1\15"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\14\1\34\1\35\1\36"+
    "\1\37\1\40\5\14\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\54\1\55"+
    "\1\54\1\55\2\54\1\56\2\54\1\55\5\54\27\55"+
    "\13\54\15\3\1\57\1\3\1\60\1\61\41\3\63\0"+
    "\1\5\1\0\1\62\1\63\2\0\1\64\2\65\51\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\2\14\1\67"+
    "\14\14\1\70\7\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\10\14\1\71\2\14\1\72\2\14\1\73"+
    "\10\14\21\0\1\74\62\0\1\75\131\0\1\76\3\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\27\14\26\0"+
    "\1\15\1\0\1\15\1\0\1\15\42\0\14\77\1\100"+
    "\1\0\44\77\15\101\1\0\44\101\1\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\1\14\1\102\1\14\1\103"+
    "\1\104\1\14\1\105\1\14\1\106\2\14\1\107\13\14"+
    "\14\0\2\14\1\66\1\110\5\0\1\14\5\0\2\14"+
    "\1\111\24\14\14\0\1\14\1\112\1\66\1\14\5\0"+
    "\1\14\5\0\3\14\1\113\1\114\12\14\1\115\3\14"+
    "\1\116\3\14\14\0\2\14\1\66\1\117\5\0\1\14"+
    "\5\0\1\120\26\14\14\0\2\14\1\66\1\121\5\0"+
    "\1\14\5\0\1\122\13\14\1\123\5\14\1\124\4\14"+
    "\14\0\2\14\1\66\1\125\5\0\1\14\5\0\2\14"+
    "\1\126\11\14\1\127\2\14\1\130\7\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\131\1\14\1\132"+
    "\24\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\1\133\2\14\1\134\23\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\2\14\1\135\6\14\1\136\15\14"+
    "\14\0\1\14\1\137\1\66\1\14\5\0\1\14\5\0"+
    "\5\14\1\140\5\14\1\141\13\14\14\0\2\14\1\66"+
    "\1\142\5\0\1\14\5\0\2\14\1\143\24\14\14\0"+
    "\2\14\1\66\1\144\5\0\1\14\5\0\2\14\1\145"+
    "\14\14\1\146\7\14\14\0\2\14\1\66\1\147\5\0"+
    "\1\14\5\0\2\14\1\150\24\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\2\14\1\151\24\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\5\14\1\152"+
    "\5\14\1\153\13\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\2\14\1\154\24\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\11\14\1\155\10\14\1\156"+
    "\4\14\65\0\1\157\66\0\1\160\60\0\1\161\1\162"+
    "\1\163\61\0\1\164\60\0\1\165\1\166\2\0\2\55"+
    "\1\167\1\55\5\0\1\55\5\0\27\55\22\0\1\170"+
    "\67\0\1\57\44\0\15\3\1\57\1\3\1\60\1\61"+
    "\12\3\1\171\26\3\1\0\1\5\61\0\1\172\3\0"+
    "\2\173\54\0\1\174\61\0\2\175\1\0\1\175\13\0"+
    "\2\175\4\0\1\175\3\0\1\175\30\0\2\14\1\0"+
    "\1\14\5\0\1\14\5\0\27\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\3\14\1\176\23\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\13\14\1\177"+
    "\13\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\5\14\1\200\21\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\4\14\1\201\5\14\1\202\14\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\6\14\1\203"+
    "\2\14\1\204\15\14\27\0\1\77\63\0\1\205\44\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\2\14\1\206"+
    "\2\14\1\207\21\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\3\14\1\210\23\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\6\14\1\211\20\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\10\14\1\212"+
    "\1\213\15\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\12\14\1\214\14\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\15\14\1\215\11\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\12\14\1\216\14\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\22\14"+
    "\1\217\4\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\4\14\1\220\22\14\14\0\2\14\1\66\1\221"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\222\1\14\1\223\4\14"+
    "\1\224\4\14\1\225\2\14\1\226\1\14\1\227\1\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\11\14"+
    "\1\230\1\14\1\231\13\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\232\23\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\5\14\1\233\7\14"+
    "\1\234\11\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\7\14\1\235\17\14\14\0\2\14\1\66\1\236"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\7\14\1\237\1\240\16\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\20\14\1\241"+
    "\6\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\13\14\1\242\13\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\14\1\243\25\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\5\14\1\244\21\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\13\14\1\245"+
    "\13\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\6\14\1\246\20\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\247\1\14\1\250\6\14\1\251\15\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\2\14"+
    "\1\252\24\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\20\14\1\253\6\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\254\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\6\14\1\255\1\14"+
    "\1\256\16\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\21\14\1\257\5\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\260\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\10\14\1\261\16\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\13\14"+
    "\1\262\13\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\4\14\1\263\22\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\264\23\14\14\0\2\14"+
    "\1\66\1\265\5\0\1\14\5\0\27\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\266\22\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\12\14"+
    "\1\267\14\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\4\14\1\270\22\14\14\0\2\14\1\66\1\271"+
    "\5\0\1\14\5\0\11\14\1\272\15\14\14\0\2\55"+
    "\1\0\1\55\5\0\1\55\5\0\27\55\13\0\15\3"+
    "\1\57\1\3\1\60\1\61\13\3\1\273\25\3\1\0"+
    "\1\172\1\0\1\173\57\0\1\172\61\0\1\174\1\0"+
    "\1\64\1\63\56\0\2\175\1\65\1\175\2\0\1\274"+
    "\2\275\6\0\2\175\4\0\1\175\3\0\1\175\30\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\6\14\1\276"+
    "\20\14\14\0\2\14\1\66\1\277\5\0\1\14\5\0"+
    "\11\14\1\300\15\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\3\14\1\301\23\14\14\0\2\14\1\66"+
    "\1\302\5\0\1\14\5\0\27\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\4\14\1\303\22\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\3\14\1\304"+
    "\23\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\305\22\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\306\26\14\14\0\2\14\1\66\1\307"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\1\310\26\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\11\14\1\311\15\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\14\14\1\312"+
    "\12\14\14\0\2\14\1\66\1\313\5\0\1\14\5\0"+
    "\27\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\3\14\1\314\23\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\17\14\1\315\7\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\2\14\1\316\24\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\1\317\26\14"+
    "\14\0\2\14\1\66\1\320\5\0\1\14\5\0\27\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\17\14"+
    "\1\321\7\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\5\14\1\322\21\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\15\14\1\323\11\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\20\14\1\324\6\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\24\14"+
    "\1\325\2\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\15\14\1\326\11\14\14\0\2\14\1\66\1\327"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\13\14\1\330\13\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\331\26\14\14\0"+
    "\2\14\1\66\1\332\5\0\1\14\5\0\27\14\14\0"+
    "\2\14\1\66\1\333\5\0\1\14\5\0\27\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\6\14\1\334"+
    "\20\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\335\22\14\14\0\2\14\1\66\1\336\5\0"+
    "\1\14\5\0\27\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\5\14\1\337\21\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\24\14\1\340\2\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\15\14\1\341"+
    "\11\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\342\1\14\1\343\20\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\23\14\1\344\3\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\7\14\1\345"+
    "\17\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\11\14\1\346\15\14\14\0\2\14\1\66\1\347\5\0"+
    "\1\14\5\0\27\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\10\14\1\350\16\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\1\351\3\14\1\352\22\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\10\14"+
    "\1\353\16\14\14\0\2\14\1\66\1\354\5\0\1\14"+
    "\5\0\27\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\2\14\1\355\24\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\11\14\1\356\15\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\22\14\1\357\4\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\13\14"+
    "\1\360\13\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\10\14\1\361\16\14\13\0\3\3\1\362\11\3"+
    "\1\57\1\3\1\60\1\61\41\3\1\0\2\363\1\0"+
    "\1\363\13\0\2\363\4\0\1\363\3\0\1\363\33\0"+
    "\1\364\56\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\365\22\14\14\0\1\14\1\366\1\66\1\14"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\14\14\1\367\12\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\7\14\1\370\17\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\4\14"+
    "\1\371\22\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\3\14\1\372\23\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\14\14\1\373\12\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\5\14\1\374\1\14"+
    "\1\375\17\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\5\14\1\376\21\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\13\14\1\377\13\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\3\14\1\u0100\23\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\3\14"+
    "\1\u0101\23\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\3\14\1\u0102\23\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\u0103\23\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\20\14\1\u0104\6\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\3\14"+
    "\1\u0105\23\14\14\0\2\14\1\66\1\u0106\5\0\1\14"+
    "\5\0\27\14\14\0\2\14\1\66\1\u0107\5\0\1\14"+
    "\5\0\27\14\14\0\2\14\1\66\1\u0108\5\0\1\14"+
    "\5\0\27\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\11\14\1\u0109\15\14\14\0\2\14\1\66\1\u010a"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\u010b\23\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\6\14\1\u010c\20\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\22\14"+
    "\1\u010d\4\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\14\14\1\u010e\12\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\u010f\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\u0110\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\20\14\1\u0111"+
    "\6\14\14\0\2\14\1\66\1\u0112\5\0\1\14\5\0"+
    "\27\14\14\0\2\14\1\66\1\u0113\5\0\1\14\5\0"+
    "\27\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\1\u0114\26\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\4\14\1\u0115\22\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\3\14\1\u0116\23\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\u0117\26\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\14\14\1\u0118"+
    "\12\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\1\u0119\26\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\3\14\1\u011a\23\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\10\14\1\u011b\16\14\14\0\2\14"+
    "\1\66\1\u011c\5\0\1\14\5\0\27\14\13\0\15\3"+
    "\1\57\1\3\1\60\1\61\5\3\1\u011d\33\3\1\0"+
    "\2\363\1\274\1\363\3\0\2\275\6\0\2\363\4\0"+
    "\1\363\3\0\1\363\30\0\1\u011e\3\0\2\u011f\54\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\u0120"+
    "\15\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\u0121\22\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\1\u0122\26\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\5\14\1\u0123\21\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\4\14\1\u0124\22\14"+
    "\14\0\2\14\1\66\1\u0125\5\0\1\14\5\0\27\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\5\14"+
    "\1\u0126\21\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\11\14\1\u0127\15\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\13\14\1\u0128\13\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\12\14\1\u0129\14\14"+
    "\14\0\2\14\1\66\1\u012a\5\0\1\14\5\0\27\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\5\14"+
    "\1\u012b\21\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\17\14\1\u012c\7\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\13\14\1\u012d\13\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\12\14\1\u012e\14\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\1\u012f"+
    "\26\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\4\14\1\u0130\22\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\3\14\1\u0131\23\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\7\14\1\u0132\17\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\1\u0133\26\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\15\14"+
    "\1\u0134\11\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\1\u0135\26\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\6\14\1\u0136\20\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\12\14\1\u0137\14\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\4\14\1\u0138"+
    "\22\14\14\0\2\14\1\66\1\u0139\5\0\1\14\5\0"+
    "\27\14\14\0\1\14\1\u013a\1\66\1\14\5\0\1\14"+
    "\5\0\27\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\3\14\1\u013b\23\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\11\14\1\u013c\15\14\13\0\15\3"+
    "\1\57\1\3\1\60\1\61\21\3\1\u013d\17\3\1\0"+
    "\1\u011e\1\0\1\u011f\57\0\1\u011e\61\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\2\14\1\u013e\24\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\11\14\1\u013f"+
    "\15\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\6\14\1\u0140\20\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\12\14\1\u0141\14\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\12\14\1\u0142\14\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\5\14\1\u0143"+
    "\21\14\14\0\2\14\1\66\1\u0144\5\0\1\14\5\0"+
    "\27\14\14\0\2\14\1\66\1\u0145\5\0\1\14\5\0"+
    "\27\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\1\u0146\26\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\4\14\1\u0147\22\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\2\14\1\u0148\24\14\14\0\2\14"+
    "\1\66\1\u0149\5\0\1\14\5\0\27\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\13\14\1\u014a\13\14"+
    "\14\0\2\14\1\66\1\u014b\5\0\1\14\5\0\27\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\4\14"+
    "\1\u014c\22\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\17\14\1\u014d\7\14\14\0\2\14\1\66\1\u014e"+
    "\5\0\1\14\5\0\27\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\12\14\1\u014f\14\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\1\u0150\26\14\14\0"+
    "\2\14\1\66\1\u0151\5\0\1\14\5\0\27\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\6\14\1\u0152"+
    "\20\14\13\0\15\3\1\57\1\3\1\60\1\u0153\41\3"+
    "\1\0\2\14\1\66\1\14\5\0\1\14\5\0\13\14"+
    "\1\u0154\13\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\2\14\1\u0155\24\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\u0156\22\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\11\14\1\u0157\15\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\4\14"+
    "\1\u0158\22\14\14\0\2\14\1\66\1\u0159\5\0\1\14"+
    "\5\0\27\14\14\0\2\14\1\66\1\14\5\0\1\14"+
    "\5\0\13\14\1\u015a\13\14\14\0\2\14\1\66\1\14"+
    "\5\0\1\14\5\0\4\14\1\u015b\22\14\14\0\2\14"+
    "\1\66\1\u015c\5\0\1\14\5\0\27\14\14\0\2\14"+
    "\1\66\1\14\5\0\1\14\5\0\3\14\1\u015d\23\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\6\14"+
    "\1\u015e\20\14\13\0\15\3\1\57\1\3\1\60\1\61"+
    "\2\3\1\u015f\7\3\1\171\26\3\1\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\13\14\1\u0160\13\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\13\14\1\u0161"+
    "\13\14\14\0\2\14\1\66\1\u0162\5\0\1\14\5\0"+
    "\27\14\14\0\2\14\1\66\1\14\5\0\1\14\5\0"+
    "\11\14\1\u0163\15\14\14\0\2\14\1\66\1\14\5\0"+
    "\1\14\5\0\12\14\1\u0164\14\14\14\0\2\14\1\66"+
    "\1\u0165\5\0\1\14\5\0\27\14\14\0\2\14\1\66"+
    "\1\u0166\5\0\1\14\5\0\27\14\14\0\2\14\1\66"+
    "\1\14\5\0\1\14\5\0\15\14\1\u0167\11\14\14\0"+
    "\2\14\1\66\1\14\5\0\1\14\5\0\26\14\1\u0168"+
    "\14\0\2\14\1\66\1\u0169\5\0\1\14\5\0\27\14"+
    "\14\0\2\14\1\66\1\14\5\0\1\14\5\0\12\14"+
    "\1\u016a\14\14\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\30\1\3\11\1\1\1\11"+
    "\1\1\1\11\3\1\2\11\2\1\1\11\1\1\6\0"+
    "\5\1\3\11\1\0\1\1\1\0\55\1\10\11\1\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\7\1\1\11"+
    "\65\1\2\0\65\1\3\0\50\1\1\0\1\1\1\0"+
    "\35\1\1\0\25\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final List commentList = new LinkedList();
    private String comment = null;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private AdaLanguageOptions.AdaVersion adaVersion = AdaLanguageOptions.AdaVersion.ADA_95;

    public AdaASTLexer(java.io.Reader in, AdaLanguageOptions.AdaVersion adaVersion) {
        this(in);
        this.adaVersion = adaVersion;
    }

    public AdaLanguageOptions.AdaVersion getAdaVersion() {
            return this.adaVersion;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void resetCommentList() {
            commentList.clear();
    }

    public List getCommentList() {
            return commentList;
    }
	
    protected void addComment(Comment.Type type) {
            int leftPosition = getTokenStartPosition();
            Comment comm;
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength());
            commentList.add(comm);
    }
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }
	
    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
            this.zzReader = reader;
            this.zzBuffer = buffer;
            this.zzMarkedPos = parameters[0];
            this.zzPushbackPos = parameters[1];
            this.zzCurrentPos = parameters[2];
            this.zzStartRead = parameters[3];
            this.zzEndRead = parameters[4];
            this.yyline = parameters[5];
            this.yychar = this.zzStartRead - this.zzPushbackPos;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AdaASTLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AdaASTLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { return createFullSymbol(AdaASTSymbols.BASED_LITERAL);
          }
        case 112: break;
        case 15: 
          { return createSymbol(AdaASTSymbols.SLASH);
          }
        case 113: break;
        case 47: 
          { return createFullSymbol(AdaASTSymbols.CHAR_LITERAL);
          }
        case 114: break;
        case 19: 
          { return createSymbol(AdaASTSymbols.LT);
          }
        case 115: break;
        case 101: 
          { return createSymbol(AdaASTSymbols.FUNCTION);
          }
        case 116: break;
        case 85: 
          { return createSymbol(AdaASTSymbols.OTHERS);
          }
        case 117: break;
        case 82: 
          { return createSymbol(AdaASTSymbols.WHILE);
          }
        case 118: break;
        case 2: 
          { return createFullSymbol(AdaASTSymbols.DECIMAL_LITERAL);
          }
        case 119: break;
        case 59: 
          { return createSymbol(AdaASTSymbols.ELSE);
          }
        case 120: break;
        case 60: 
          { return createSymbol(AdaASTSymbols.EXIT);
          }
        case 121: break;
        case 27: 
          { return createSymbol(AdaASTSymbols.ASSIGNMENT);
          }
        case 122: break;
        case 104: 
          { return createSymbol(AdaASTSymbols.CONSTANT);
          }
        case 123: break;
        case 43: 
          { return createSymbol(AdaASTSymbols.GTGT);
          }
        case 124: break;
        case 97: 
          { return createSymbol(AdaASTSymbols.PRIVATE);
          }
        case 125: break;
        case 14: 
          { return createSymbol(AdaASTSymbols.COMMA);
          }
        case 126: break;
        case 40: 
          { return createSymbol(AdaASTSymbols.BOX);
          }
        case 127: break;
        case 81: 
          { if (adaVersion != AdaLanguageOptions.AdaVersion.ADA_83) {
            return createSymbol(AdaASTSymbols.UNTIL);
        }
        else {
            return createSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 128: break;
        case 48: 
          { return createSymbol(AdaASTSymbols.ABS);
          }
        case 129: break;
        case 61: 
          { return createSymbol(AdaASTSymbols.BODY);
          }
        case 130: break;
        case 42: 
          { return createSymbol(AdaASTSymbols.GTEQ);
          }
        case 131: break;
        case 96: 
          { return createSymbol(AdaASTSymbols.PACKAGE);
          }
        case 132: break;
        case 105: 
          { return createSymbol(AdaASTSymbols.EXCEPTION);
          }
        case 133: break;
        case 46: 
          { return createSymbol(AdaASTSymbols.END);
          }
        case 134: break;
        case 67: 
          { return createSymbol(AdaASTSymbols.LOOP);
          }
        case 135: break;
        case 55: 
          { return createSymbol(AdaASTSymbols.XOR);
          }
        case 136: break;
        case 34: 
          { return createSymbol(AdaASTSymbols.IN);
          }
        case 137: break;
        case 52: 
          { return createSymbol(AdaASTSymbols.REM);
          }
        case 138: break;
        case 28: 
          { return createFullSymbol(AdaASTSymbols.STRING_LITERAL);
          }
        case 139: break;
        case 86: 
          { return createSymbol(AdaASTSymbols.RETURN);
          }
        case 140: break;
        case 31: 
          { return createSymbol(AdaASTSymbols.OR);
          }
        case 141: break;
        case 16: 
          { return createSymbol(AdaASTSymbols.SEMICOLON);
          }
        case 142: break;
        case 95: 
          { return createSymbol(AdaASTSymbols.SUBTYPE);
          }
        case 143: break;
        case 36: 
          { return createSymbol(AdaASTSymbols.EXPON);
          }
        case 144: break;
        case 56: 
          { return createSymbol(AdaASTSymbols.USE);
          }
        case 145: break;
        case 26: 
          { return createSymbol(AdaASTSymbols.DOT_DOT);
          }
        case 146: break;
        case 3: 
          { return createFullSymbol(AdaASTSymbols.IDENTIFIER);
          }
        case 147: break;
        case 98: 
          { return createSymbol(AdaASTSymbols.LIMITED);
          }
        case 148: break;
        case 91: 
          { if (adaVersion != AdaLanguageOptions.AdaVersion.ADA_83) {
            return createSymbol(AdaASTSymbols.ALIASED);
        }
        else {
            return createSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 149: break;
        case 62: 
          { return createSymbol(AdaASTSymbols.TASK);
          }
        case 150: break;
        case 103: 
          { return createSymbol(AdaASTSymbols.SEPARATE);
          }
        case 151: break;
        case 41: 
          { return createSymbol(AdaASTSymbols.ARROW);
          }
        case 152: break;
        case 21: 
          { yypushback(yylength());
    popState();
          }
        case 153: break;
        case 109: 
          { if (adaVersion == AdaLanguageOptions.AdaVersion.ADA_2005 ||
            adaVersion == AdaLanguageOptions.AdaVersion.ADA_2012) {
            return createSymbol(AdaASTSymbols.INTERFACE);
        }
        else {
            return createFullSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 154: break;
        case 68: 
          { return createSymbol(AdaASTSymbols.NULL);
          }
        case 155: break;
        case 9: 
          { return createSymbol(AdaASTSymbols.TICK);
          }
        case 156: break;
        case 76: 
          { return createSymbol(AdaASTSymbols.BEGIN);
          }
        case 157: break;
        case 70: 
          { return createSymbol(AdaASTSymbols.WITH);
          }
        case 158: break;
        case 88: 
          { if (adaVersion != AdaLanguageOptions.AdaVersion.ADA_83) {
            return createSymbol(AdaASTSymbols.TAGGED);
        }
        else {
            return createSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 159: break;
        case 4: 
          { return createSymbol(AdaASTSymbols.PLUS);
          }
        case 160: break;
        case 12: 
          { return createSymbol(AdaASTSymbols.RPAREN);
          }
        case 161: break;
        case 32: 
          { return createSymbol(AdaASTSymbols.IF);
          }
        case 162: break;
        case 94: 
          { if (adaVersion != AdaLanguageOptions.AdaVersion.ADA_83) {
            return createSymbol(AdaASTSymbols.REQUEUE);
        }
        else {
            return createSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 163: break;
        case 24: 
          { handleLineCommentEnd();
    yybegin(YYINITIAL);
          }
        case 164: break;
        case 10: 
          { return createSymbol(AdaASTSymbols.AMP);
          }
        case 165: break;
        case 22: 
          { popState();
    return createFullSymbol(AdaASTSymbols.IDENTIFIER);
          }
        case 166: break;
        case 79: 
          { return createSymbol(AdaASTSymbols.DELAY);
          }
        case 167: break;
        case 64: 
          { return createSymbol(AdaASTSymbols.THEN);
          }
        case 168: break;
        case 69: 
          { return createSymbol(AdaASTSymbols.GOTO);
          }
        case 169: break;
        case 107: 
          { if (adaVersion != AdaLanguageOptions.AdaVersion.ADA_83) {
            return createSymbol(AdaASTSymbols.PROTECTED);
        }
        else {
            return createSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 170: break;
        case 45: 
          { return createSymbol(AdaASTSymbols.FOR);
          }
        case 171: break;
        case 110: 
          { if (adaVersion == AdaLanguageOptions.AdaVersion.ADA_2005 ||
            adaVersion == AdaLanguageOptions.AdaVersion.ADA_2012) {
            return createSymbol(AdaASTSymbols.OVERRIDING);
        }
        else {
            return createFullSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 172: break;
        case 108: 
          { return createSymbol(AdaASTSymbols.PROCEDURE);
          }
        case 173: break;
        case 30: 
          { return createSymbol(AdaASTSymbols.OF);
          }
        case 174: break;
        case 37: 
          { return createSymbol(AdaASTSymbols.INEQ);
          }
        case 175: break;
        case 74: 
          { return createSymbol(AdaASTSymbols.ABORT);
          }
        case 176: break;
        case 49: 
          { return createSymbol(AdaASTSymbols.ALL);
          }
        case 177: break;
        case 53: 
          { return createSymbol(AdaASTSymbols.NEW);
          }
        case 178: break;
        case 11: 
          { return createSymbol(AdaASTSymbols.LPAREN);
          }
        case 179: break;
        case 102: 
          { if (adaVersion != AdaLanguageOptions.AdaVersion.ADA_83) {
            return createSymbol(AdaASTSymbols.ABSTRACT);
        }
        else {
            return createSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 180: break;
        case 84: 
          { return createSymbol(AdaASTSymbols.ACCEPT);
          }
        case 181: break;
        case 92: 
          { return createSymbol(AdaASTSymbols.RENAMES);
          }
        case 182: break;
        case 57: 
          { return createSymbol(AdaASTSymbols.MOD);
          }
        case 183: break;
        case 6: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
                      return createSymbol(AdaASTSymbols.DOT);
          }
        case 184: break;
        case 111: 
          { if (adaVersion == AdaLanguageOptions.AdaVersion.ADA_2005 ||
            adaVersion == AdaLanguageOptions.AdaVersion.ADA_2012) {
            return createSymbol(AdaASTSymbols.SYNCHRONIZED);
        }
        else {
            return createFullSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 185: break;
        case 73: 
          { return createSymbol(AdaASTSymbols.ENTRY);
          }
        case 186: break;
        case 83: 
          { return createSymbol(AdaASTSymbols.ACCESS);
          }
        case 187: break;
        case 93: 
          { return createSymbol(AdaASTSymbols.REVERSE);
          }
        case 188: break;
        case 29: 
          { return createSymbol(AdaASTSymbols.AT);
          }
        case 189: break;
        case 80: 
          { return createSymbol(AdaASTSymbols.DELTA);
          }
        case 190: break;
        case 78: 
          { return createSymbol(AdaASTSymbols.RANGE);
          }
        case 191: break;
        case 44: 
          { popState();
    return createSymbol(AdaASTSymbols.DOT_DOT);
          }
        case 192: break;
        case 89: 
          { return createSymbol(AdaASTSymbols.SELECT);
          }
        case 193: break;
        case 100: 
          { return createSymbol(AdaASTSymbols.GENERIC);
          }
        case 194: break;
        case 90: 
          { return createSymbol(AdaASTSymbols.PRAGMA);
          }
        case 195: break;
        case 5: 
          { return createSymbol(AdaASTSymbols.MINUS);
          }
        case 196: break;
        case 23: 
          { return createSymbol(AdaASTSymbols.DOT);
          }
        case 197: break;
        case 99: 
          { return createSymbol(AdaASTSymbols.DECLARE);
          }
        case 198: break;
        case 13: 
          { return createSymbol(AdaASTSymbols.STAR);
          }
        case 199: break;
        case 63: 
          { return createSymbol(AdaASTSymbols.TYPE);
          }
        case 200: break;
        case 50: 
          { return createSymbol(AdaASTSymbols.AND);
          }
        case 201: break;
        case 39: 
          { return createSymbol(AdaASTSymbols.LTEQ);
          }
        case 202: break;
        case 17: 
          { return createSymbol(AdaASTSymbols.GT);
          }
        case 203: break;
        case 7: 
          { return createSymbol(AdaASTSymbols.COLON);
          }
        case 204: break;
        case 20: 
          { return createSymbol(AdaASTSymbols.BAR);
          }
        case 205: break;
        case 75: 
          { return createSymbol(AdaASTSymbols.ARRAY);
          }
        case 206: break;
        case 66: 
          { return createSymbol(AdaASTSymbols.CASE);
          }
        case 207: break;
        case 51: 
          { return createSymbol(AdaASTSymbols.OUT);
          }
        case 208: break;
        case 87: 
          { return createSymbol(AdaASTSymbols.RECORD);
          }
        case 209: break;
        case 18: 
          { return createSymbol(AdaASTSymbols.EQ);
          }
        case 210: break;
        case 72: 
          { return createSymbol(AdaASTSymbols.ELSIF);
          }
        case 211: break;
        case 54: 
          { return createSymbol(AdaASTSymbols.NOT);
          }
        case 212: break;
        case 1: 
          { // do nothing
          }
        case 213: break;
        case 71: 
          { return createSymbol(AdaASTSymbols.WHEN);
          }
        case 214: break;
        case 35: 
          { return createSymbol(AdaASTSymbols.DO);
          }
        case 215: break;
        case 38: 
          { return createSymbol(AdaASTSymbols.LTLT);
          }
        case 216: break;
        case 33: 
          { return createSymbol(AdaASTSymbols.IS);
          }
        case 217: break;
        case 65: 
          { if (adaVersion == AdaLanguageOptions.AdaVersion.ADA_2012) {
            return createSymbol(AdaASTSymbols.SOME);
        }
        else {
            return createFullSymbol(AdaASTSymbols.IDENTIFIER);
        }
          }
        case 218: break;
        case 25: 
          { handleCommentStart();
	yybegin(ST_LINE_COMMENT);
          }
        case 219: break;
        case 106: 
          { return createSymbol(AdaASTSymbols.TERMINATE);
          }
        case 220: break;
        case 77: 
          { return createSymbol(AdaASTSymbols.RAISE);
          }
        case 221: break;
        case 8: 
          { 
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(AdaASTSymbols.EOF);
              }
            }
            case 363: break;
            default:
              {     return createSymbol(AdaASTSymbols.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

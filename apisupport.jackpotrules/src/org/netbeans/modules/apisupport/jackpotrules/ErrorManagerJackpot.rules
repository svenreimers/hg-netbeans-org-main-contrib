/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */


/*

Uses http://jackpot.netbeans.org to convert certain usages of ErrorManager
to logging. Still requires additional manual touches, but most of the work
is done automatically.

*/

$err.getDefault().getInstance($name) => Logger.getLogger($name)
    :: $err instanceof org.openide.ErrorManager;
// XXX should rather use Logger.getLogger(ThisClass.class.getName()).log(...)
// If that is impossible, should use
// Logger.getLogger(getClass().getName()).log(...)
// as a fallback (and print a warning).
$err.getDefault().notify($err.INFORMATIONAL, $throwable) =>
        Logger.getLogger("global").log(Level.WARNING, null, $throwable)
    :: $err instanceof org.openide.ErrorManager;

// "un-convert" the ErrorManager API that is still in use.
$err.attachAnnotations($t, $arr) => ErrorManager.getDefault().attachAnnotations($t, $arr)
    :: $err instanceof org.openide.ErrorManager;
$err.annotate($t, $msg) => ErrorManager.getDefault().annotate($t, $msg)
    :: $err instanceof org.openide.ErrorManager && $msg instanceof java.lang.String;
$err.annotate($t, $throwable) => ErrorManager.getDefault().annotate($t, $throwable)
    :: $err instanceof org.openide.ErrorManager && $throwable instanceof java.lang.Throwable;
$err.annotate($t, $severity, $msg, $locMsg, $throwable, $date) =>
        ErrorManager.getDefault().annotate($t, $severity, $msg, $locMsg, $throwable, $date)
    :: $err instanceof org.openide.ErrorManager;
$err.copyAnnotation($t, $throwable) => ErrorManager.getDefault().copyAnnotation($t, $throwable)
    :: $err instanceof org.openide.ErrorManager && $throwable instanceof java.lang.Throwable;
$err.findAnnotations($t) => ErrorManager.getDefault().findAnnotations($t)
    :: $err instanceof org.openide.ErrorManager;
$err.notify($throwable) => ErrorManager.getDefault().notify($throwable)
    :: $err instanceof org.openide.ErrorManager && $throwable instanceof java.lang.Throwable;


/*
$err.getDefault() => Logger.getLogger("global") :: $err instanceof java.util.logging.Logger;
$err.notify($err.INFORMATIONAL, $ex) => $err.log(Level.WARNING, null, $ex) :: $err instanceof java.util.logging.Logger;

$err.INFORMATIONAL => java.util.logging.Level.WARNING :: $err instanceof java.util.logging.Logger;
$err.USER => java.util.logging.Level.USER :: $err instanceof java.util.logging.Logger;
$err.UNKNOWN => java.util.logging.Level.UNKNOWN :: $err instanceof java.util.logging.Logger;
$err.EXCEPTION => java.util.logging.Level.SEVERE :: $err instanceof java.util.logging.Logger;
$err.ERROR => java.util.logging.Level.SEVERE :: $err instanceof java.util.logging.Logger;
*/

$err.log($msg) => Logger.getLogger("global").log(Level.FINE, $msg)
    :: $err instanceof org.openide.ErrorManager;

$err.log($err.INFORMATIONAL, $msg) => Logger.getLogger("global").log(Level.FINE, $msg)
    :: $err instanceof org.openide.ErrorManager;
$err.log($err.USER, $msg) => Logger.getLogger("global").log(Level.INFO, $msg)
    :: $err instanceof org.openide.ErrorManager;
$err.log($err.EXCEPTION, $msg) => Logger.getLogger("global").log(Level.WARNING, $msg)
    :: $err instanceof org.openide.ErrorManager;
$err.log($err.ERROR, $msg) => Logger.getLogger("global").log(Level.SEVERE, $msg)
    :: $err instanceof org.openide.ErrorManager;

$err.isLoggable(org.openide.ErrorManager.INFORMATIONAL) => Logger.getLogger("global").isLoggable(Level.FINE)
    :: $err instanceof org.openide.ErrorManager;
$err.isLoggable(org.openide.ErrorManager.USER) => Logger.getLogger("global").isLoggable(Level.INFO)
    :: $err instanceof org.openide.ErrorManager;
$err.isLoggable(org.openide.ErrorManager.EXCEPTION) => Logger.getLogger("global").isLoggable(Level.WARNING)
    :: $err instanceof org.openide.ErrorManager;
$err.isLoggable(org.openide.ErrorManager.ERROR) => Logger.getLogger("global").isLoggable(Level.SEVERE)
    :: $err instanceof org.openide.ErrorManager;

// XXX should also convert
// if ($err.isLoggable(INFORMATIONAL)) $err.log("message: " + param);
// =>
// $err.log(Level.FINE, "message: {0}", param);

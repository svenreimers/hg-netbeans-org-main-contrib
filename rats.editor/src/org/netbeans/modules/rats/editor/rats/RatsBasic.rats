/*
 * xtc - The eXTensible Compiler
 * Copyright (C) 2004-2008 Robert Grimm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
 * USA.
 */

/**
 * Basic elements for <i>Rats!</i>' own grammars.
 *
 * @author Robert Grimm
 * @author Caoyuan Deng
 * @version $Revision: 1.30 $
 */ 
module org.netbeans.modules.rats.editor.rats.RatsBasic;

body {
  static {
    add(RATS_KEYWORDS, new String[] {
      "public",
      "protected",
      "private",
      "generic",
      "void",
      "null",
      "import",
      "module",
      "instantiate",
      "header",
      "body",
      "footer",
      "option",
      "transient"
    });
  }
}

option setOfString(RATS_KEYWORDS);


// ------------------------------------------------------------- Node Markers

generic NodeMarker =
  "@":Separator Word
;

// ------------------------------------------------------------- Actions

generic Action = &'{' Separator ActionBody &'}' Separator ;
generic ActionBody = actionText ;

transient String actionText =
  ( '{' actionText '}'
  / nl
  / ws
  / ![}\n\r \t\f] _
  )*
;

generic CharacterRange = characterRange ;
String  characterRange = '[' characterRangeBody* ']' ;
String  characterRangeBody =
  classChar '-' classChar
/ classChar
;

// ------------------------------------------------------------- Identifiers

/*
generic TypeName = typeName
String  typeName = typeNameCharacters Spacing ;

String typeNameCharacters =
  name
  ( SimpleSpacing '<':Separator SimpleSpacing
    typeNameCharacters SimpleSpacing
    ( ',':Separator SimpleSpacing typeNameCharacters SimpleSpacing )*
    '>':Separator
  )?
;
*/

//String name = name Spacing ;
//String word = word Spacing ;

generic Name = name ;
String  name = word ( '.' word )* ;

generic Word = word ;
//String  word = [a-zA-Z] ( [_]+ [a-zA-Z0-9] / [a-zA-Z0-9] )* ;
String  word = [a-zA-Z] [a-zA-Z0-9]* ;
String  idrest = [a-zA-Z0-9]+ ;

// ------------------------------------------------------------- Keyword

generic Keyword =
  "public"      :keyword @Public
/ "protected"   :keyword @Protected
/ "private"     :keyword @Private
/ "generic"     :keyword @Generic
/ "void"        :keyword @Void
/ "null"        :keyword @Null
/ "import"      :keyword @Import
/ "module"      :keyword @Module
/ "instantiate" :keyword @Instantiate
/ "header"      :keyword @Header
/ "body"        :keyword @Body
/ "footer"      :keyword @Footer
/ "option"      :keyword @Option
/ "transient"   :keyword @Transient
;

String  keyword =
  "public"      !( idrest )
/ "protected"   !( idrest )
/ "private"     !( idrest )
/ "generic"     !( idrest )
/ "void"        !( idrest )
/ "null"        !( idrest )
/ "import"      !( idrest )
/ "module"      !( idrest )
/ "instantiate" !( idrest )
/ "header"      !( idrest )
/ "body"        !( idrest )
/ "footer"      !( idrest )
/ "option"      !( idrest )
/ "transient"   !( idrest )
;

// ------------------------------------------------------------- Literals

generic Literal =
  CharacterLiteral
/ StringLiteral
/ IntegerLiteral
/ NullLiteral
;

generic NullLiteral = "null":Keyword ;

generic CharacterLiteral = characterLiteral ;
String  characterLiteral = ['] ( escapeSequence / !['\\] _ )  ['] ;

generic StringLiteral    = stringLiteral ;
String  stringLiteral    = ["] ( escapeSequence / !["\\] _ )* ["] ;

String  classChar        = escapeSequence / ![\\\-\]] _ ;

transient String escapeSequence =
  '\\' [btnfr"'\-\[\\\]] / unicodeEscape / octalEscape
;

transient String unicodeEscape = '\\' 'u' hexQuad ;

transient String octalEscape =
  '\\' [0-3] octalDigit octalDigit
/ '\\' octalDigit octalDigit
/ '\\' octalDigit
;

generic IntegerLiteral = integerLiteral ;
String  integerLiteral =
  hexNumeral
/ octalNumeral
/ decimalNumeral
;

transient String hexNumeral     = '0' [xX] hexDigit+ ;
transient String hexQuad        = hexDigit hexDigit hexDigit hexDigit ;
transient String hexDigit       = [0-9a-fA-F] ;
transient String octalNumeral   = '0' octalDigit+ ;
transient String octalDigit     = [0-7] ;
transient String decimalNumeral = '0' / nonZeroDigit digit* ;
transient String nonZeroDigit   = [1-9] ;
transient String digit          = [0-9] ;

// ------------------------------------------------------------- Punctuation

generic Separator =
  "..." :separator @Ellipsis
/ "+="  :separator @PlusEqual
/ "-="  :separator @MinusEqual
/ ":="  :separator @ColonEqual
/ ","   :separator @Comma
/ "."   :separator @Dot
/ "="   :separator @Eq
/ "/"   :separator @Slash
/ "&"   :separator @And
/ "!"   :separator @Not
/ "^"   :separator @Caret
/ ":"   :separator @Colon
/ "?"   :separator @Question
/ "*"   :separator @Star
/ "+"   :separator @Plus
/ "("   :separator @LParen
/ ")"   :separator @RParen
/ "{"   :separator @LBrace
/ "}"   :separator @RBrace
/ ";"   :separator @Semicolon
/ "<"   :separator @Lt
/ ">"   :separator @Gt
/ "@"   :separator @At
/ "_"   :separator @Underscore
;

String separator =
  "..."
/ "+="
/ "-="
/ ":="
/ ","
/ "."
/ "="
/ "/" ![/*]
/ "&"
/ "!"
/ "^"
/ ":"
/ "?"
/ "*"
/ "+"
/ "("
/ ")"
/ "{"
/ "}"
/ ";"
/ "<"
/ ">"
/ "@"
/ "_"
;

// ------------------------------------------------------------- Spacing


transient generic DocComment =
  DocCommentStart
  ( DocComment / BlockComment / CommentTag / DocCommentBody / Nl )*
  DocCommentEnd
;

transient generic DocCommentStart = "/**" ;
transient generic DocCommentEnd   = "*/" ;
transient generic DocCommentBody  = commentBody ;

transient generic BlockComment =
  BlockCommentStart
  ( DocComment / BlockComment / CommentTag / BlockCommentBody / Nl )*
  BlockCommentEnd
;

transient generic BlockCommentStart = "/*" ![*] ;
transient generic BlockCommentEnd   = "*/" ;
transient generic BlockCommentBody  = commentBody ;

/* We'll split blocked comment to lines */
transient String commentBody =
  ( !( commentTag
     / "*/"
     / "/*"
     / [\r\n]
     ) _
  )+
;

transient generic CommentTag = commentTag ;
transient String  commentTag = '@' [a-zA-Z]+ ;

transient generic LineComment = lineComment ;
transient String  lineComment = "//" ( ![\r\n] _ )* nl ;


transient generic Spacing =
  ( Ws
  / Nl
  / BlockComment
  / LineComment
  )*
;

transient genetic SimpleSpacing = ( Nl / Ws )* ;
transient String  simpleSpacing = ( nl / ws )* ;


transient generic Ws = ws ;
transient String  ws = ' ' / '\t' / '\f' ;

transient generic Nl = nl ;
transient String  nl =
  '\r' '\n' 
/ '\r'
/ '\n'
;

transient generic Error = error ;
transient String  error = _+ ;

transient void EOF = !_ ;

// ============================================================================

Index: compiler/scala/tools/nsc/Global.scala
===================================================================
--- compiler/scala/tools/nsc/Global.scala	(revision 20977)
+++ compiler/scala/tools/nsc/Global.scala	(working copy)
@@ -57,6 +57,7 @@
   def rootLoader: LazyType = platform.rootLoader
 
   // sub-components --------------------------------------------------
+  var qualToRecoveredType: Map[Tree, Type] = Map()
 
   /** Print tree in detailed form */
   object nodePrinters extends {
Index: compiler/scala/tools/nsc/typechecker/Namers.scala
===================================================================
--- compiler/scala/tools/nsc/typechecker/Namers.scala	(revision 20977)
+++ compiler/scala/tools/nsc/typechecker/Namers.scala	(working copy)
@@ -1188,11 +1188,13 @@
               }
               def checkSelectors(selectors: List[ImportSelector]): Unit = selectors match {
                 case ImportSelector(from, _, to, _) :: rest =>
-                  if (from != nme.WILDCARD && base != ErrorType) {                    
+                  if (from != nme.WILDCARD && base != ErrorType) {
                     if (base.nonLocalMember(from) == NoSymbol && 
                         base.nonLocalMember(from.toTypeName) == NoSymbol) {
                       if (currentRun.compileSourceFor(expr, from))
                         return typeSig(tree)  
+                      global.qualToRecoveredType += (tree -> base)
+                      global.qualToRecoveredType += (expr -> base)
                       context.error(tree.pos, from.decode + " is not a member of " + expr)
                     }
 
Index: compiler/scala/tools/nsc/typechecker/Typers.scala
===================================================================
--- compiler/scala/tools/nsc/typechecker/Typers.scala	(revision 20977)
+++ compiler/scala/tools/nsc/typechecker/Typers.scala	(working copy)
@@ -3517,11 +3517,16 @@
           if (settings.debug.value) Console.err.println("qual = "+qual+":"+qual.tpe+"\nSymbol="+qual.tpe.termSymbol+"\nsymbol-info = "+qual.tpe.termSymbol.info+"\nscope-id = "+qual.tpe.termSymbol.info.decls.hashCode()+"\nmembers = "+qual.tpe.members+"\nname = "+name+"\nfound = "+sym+"\nowner = "+context.enclClass.owner)
           
           def makeErrorTree = {
+            if (!qual.tpe.widen.isErroneous) {
+              global.qualToRecoveredType += (tree -> qual.tpe.widen)
+              global.qualToRecoveredType += (qual -> qual.tpe.widen)
+            }
+
             val tree1 = tree match {
               case Select(_, _) => treeCopy.Select(tree, qual, name)
               case SelectFromTypeTree(_, _) => treeCopy.SelectFromTypeTree(tree, qual, name)
             }
-            setError(tree1)
+            setError(tree)
           }
           
           if (name == nme.ERROR && onlyPresentation)
@@ -3540,7 +3545,7 @@
                   "\npossible cause: maybe a semicolon is missing before `"+decode(name)+"'?"
                  else ""))
           }
-          if (onlyPresentation) makeErrorTree else setError(tree) 
+          if (onlyPresentation) makeErrorTree else setError(tree)
         } else {
           val tree1 = tree match {
             case Select(_, _) => treeCopy.Select(tree, qual, name)
Index: compiler/scala/tools/nsc/ast/parser/Parsers.scala
===================================================================
--- compiler/scala/tools/nsc/ast/parser/Parsers.scala	(revision 20977)
+++ compiler/scala/tools/nsc/ast/parser/Parsers.scala	(working copy)
@@ -425,7 +425,7 @@
           t =>
             val dd = DocDef(doc, t)
             val defnPos = t.pos
-            val pos = doc.pos.withEnd(defnPos.endOrPoint)
+            val pos = if (defnPos.isDefined) doc.pos.withEnd(defnPos.endOrPoint) else doc.pos
             dd setPos (if (defnPos.isOpaqueRange) pos else pos.makeTransparent)
         }
         joined.find(_.pos.isOpaqueRange) foreach {

/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.tasklist.usertasks;

import java.beans.PropertyEditor;
import java.text.MessageFormat;
import java.text.ParseException;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.netbeans.modules.tasklist.usertasks.model.Duration;
import org.netbeans.modules.tasklist.usertasks.util.DurationFormat;

/**
 * Panel for duration
 *
 * @author tl
 */
public class DurationPanel extends javax.swing.JPanel implements
        ChangeListener {
    private static final long serialVersionUID = 1;
    
    private PropertyEditor pe;
    private DurationFormat short_ = new DurationFormat(
            DurationFormat.Type.SHORT);
    private DurationFormat long_ = new DurationFormat(DurationFormat.Type.LONG);
    private Duration dur;
    
    /**
     * Creates new form DurationPanel
     */
    public DurationPanel() {
        initComponents();
        setOpaque(false);
        jTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                stateChanged(null);
            }
            public void insertUpdate(DocumentEvent e) {
                stateChanged(null);
            }
            public void removeUpdate(DocumentEvent e) {
                stateChanged(null);
            }
        });
    }
    
    public void setEnabled(boolean b) {
        super.setEnabled(b);
        jTextField.setEnabled(b);
    }
    
    /**
     * Sets new property editor.
     *
     * @param pe a property editor or null
     */
    public void setPropertyEditor(PropertyEditor pe) {
        this.pe = pe;
        if (pe != null) {
            Integer v = (Integer) pe.getValue();
            setDuration(v == null ? 0 : v.intValue());
        }
    }
    
    /**
     * Sets the duration shown in this panel
     *
     * @param minutes new duration in minutes
     */
    public void setDuration(int minutes) {
        dur = new Duration(minutes,
                Settings.getDefault().getHoursPerDay(),
                Integer.MAX_VALUE);
        
        jTextField.setText(short_.format(dur));
    }
    
    /**
     * Returns choosed duration in minutes
     *
     * @return duration in minutes
     */
    public int getDuration() {
        Duration d = null;
        try {
            d = short_.parse(jTextField.getText());
        } catch (ParseException ex) {
            // ignore
        }
        if (d == null) {
            try {
                d = long_.parse(jTextField.getText());
            } catch (ParseException ex) {
                // ignore
            }
        }
        if (d == null)
            d = dur;
        if (d == null)
            return 0;
        
        int hpd = Settings.getDefault().getHoursPerDay();
        int dpw = Settings.getDefault().getDaysPerWeek();
        return ((d.weeks * dpw + d.days) * hpd + d.hours) * 60 +
                d.minutes;
    }
    
    public void stateChanged(javax.swing.event.ChangeEvent e) {
        if (pe != null) {
            pe.setValue(new Integer(getDuration()));
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTextField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jTextField.setColumns(10);
        add(jTextField, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField;
    // End of variables declaration//GEN-END:variables
    
}

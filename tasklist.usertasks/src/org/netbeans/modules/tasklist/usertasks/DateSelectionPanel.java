/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.tasklist.usertasks;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.table.AbstractTableModel;
import javax.swing.ListSelectionModel;

/**
 * This is a small panel to allow the user to select a full date. When I
 * started the implementation of the Alarm functionality I had the user to
 * write the complete time/date, and I pretty soon realized that noone will
 * remember the format each time.... Well, the panel "works for me now" so I
 * move on to the next phase in my project, but one should really:
 *
 * @todo Make sure todays day is selected when the dialog is opened
 * @todo There should <UL>always</UL> be one selected day
 * @todo The panel is too big...
 * @todo I should have a constructor that initializes the panel to show a
 *       given date...
 * @todo +++
 *
 * @author  Trond Norbye
 */
public class DateSelectionPanel extends javax.swing.JPanel {
    GregorianCalendar calendar;
    SimpleDateFormat  format;
    
    /** Creates new form DateSelectionPanel */
    public DateSelectionPanel() {
        initComponents();
        
        calendar = new GregorianCalendar();
        yearFld.setText("" + calendar.get(calendar.YEAR));
        
        format = new SimpleDateFormat("HH:mm:ss");
        timeFld.setText("" + format.format(calendar.getTime()));
        
        format.applyPattern("MMMM");
        
        int curr = calendar.get(calendar.MONTH);
        calendar.set(calendar.MONTH,
        calendar.getActualMinimum(calendar.MONTH));
        
        int no = calendar.getActualMaximum(calendar.MONTH) - calendar.getActualMinimum(calendar.MONTH);
        
        for (int ii = 0; ii <= no; ++ii) {
            monthNameCmb.insertItemAt(format.format(calendar.getTime()), ii);
            calendar.roll(calendar.MONTH, 1);
        }
        monthNameCmb.setSelectedIndex(curr);
        
        calendarTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    /**
     * Returns the selected date
     */
    public Date getDate() {
        Date ret;
        try {
            format.applyPattern("HH:mm:ss");
            calendar.setTime(format.parse(timeFld.getText()));
            calendar.set(calendar.MONTH, monthNameCmb.getSelectedIndex());
            calendar.set(calendar.YEAR, Integer.parseInt(yearFld.getText()));
            
            DateSelectionTableModel dm;
            dm = (DateSelectionTableModel)calendarTable.getModel();
            
            int x = calendarTable.getSelectedColumn();
            int y = calendarTable.getSelectedRow();
            int day = Integer.parseInt((String)dm.getValueAt(y, x));
            calendar.set(calendar.DAY_OF_MONTH, day);
            
            ret = calendar.getTime();
        } catch (Exception e) {
            // When I'm done, this should never happen....
            ret = null;
        }
        
        return ret;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        monthNameCmb = new javax.swing.JComboBox();
        prevYearBtn = new javax.swing.JButton();
        yearFld = new javax.swing.JTextField();
        nextYearBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        timeFld = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        calendarTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        monthNameCmb.setMaximumRowCount(12);
        monthNameCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthNameCmbActionPerformed(evt);
            }
        });

        jPanel1.add(monthNameCmb);

        prevYearBtn.setText("<");
        prevYearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevYearBtnActionPerformed(evt);
            }
        });

        jPanel1.add(prevYearBtn);

        yearFld.setColumns(4);
        yearFld.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        yearFld.setInputVerifier(new javax.swing.InputVerifier() {
            public boolean verify(javax.swing.JComponent obj) {
                boolean ret;
                try {
                    Integer.parseInt(((javax.swing.JTextField)obj).getText());
                    ret = true;
                } catch (Exception e) {
                    ret = false;
                }
                return ret;
            }
        });
        yearFld.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                yearFldFocusLost(evt);
            }
        });

        jPanel1.add(yearFld);

        nextYearBtn.setText(">");
        nextYearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextYearBtnActionPerformed(evt);
            }
        });

        jPanel1.add(nextYearBtn);

        jLabel1.setText("@");
        jPanel1.add(jLabel1);

        timeFld.setColumns(8);
        timeFld.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeFld.setInputVerifier(new javax.swing.InputVerifier() {
            public boolean verify(javax.swing.JComponent obj) {
                boolean ret;
                try {
                    format.applyPattern("HH:mm:ss");
                    format.parse(((javax.swing.JTextField)obj).getText());
                    ret = true;
                } catch (Exception e) {
                    ret = false;
                }
                return ret;
            }
        });
        jPanel1.add(timeFld);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.GridLayout(1, 1));

        calendarTable.setModel(new DateSelectionTableModel());
        calendarTable.setCellSelectionEnabled(true);
        calendarTable.setPreferredScrollableViewportSize(new java.awt.Dimension(450, 150));
        calendarTable.setShowHorizontalLines(false);
        calendarTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(calendarTable);

        jPanel2.add(jScrollPane1);

        add(jPanel2, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    /**
     * This is probably not the "correct" place to do this, but it works as
     * intended...
     * @param evt not used
     */
    private void yearFldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearFldFocusLost
        int year = Integer.parseInt(yearFld.getText());
        DateSelectionTableModel dm;
        dm = (DateSelectionTableModel)calendarTable.getModel();
        dm.setYear(year);
    }//GEN-LAST:event_yearFldFocusLost
    
    /**
     * The user pressed the "&lt;" button.. The year field should be decremented
     * @param evt the event
     */
    private void prevYearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevYearBtnActionPerformed
        if (evt.getID() == evt.ACTION_PERFORMED) {
            int year = Integer.parseInt(yearFld.getText()) - 1;
            yearFld.setText("" + year);
            DateSelectionTableModel dm;
            dm = (DateSelectionTableModel)calendarTable.getModel();
            dm.setYear(year);
        }
    }//GEN-LAST:event_prevYearBtnActionPerformed

    /**
     * The user pressed the "&gt;" button.. The year field should be incremented
     * @param evt the event
     */
    private void nextYearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextYearBtnActionPerformed
        if (evt.getID() == evt.ACTION_PERFORMED) {
            int year = Integer.parseInt(yearFld.getText()) + 1;
            yearFld.setText("" + year);
            DateSelectionTableModel dm;
            dm = (DateSelectionTableModel)calendarTable.getModel();
            dm.setYear(year);
        }
    }//GEN-LAST:event_nextYearBtnActionPerformed
    
    /**
     * The user changed the month combo..
     * @param evt not used
     */
    private void monthNameCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthNameCmbActionPerformed
        if (evt.getID() == evt.ACTION_PERFORMED) {
            DateSelectionTableModel dm;
            dm = (DateSelectionTableModel)calendarTable.getModel();
            int idx = monthNameCmb.getSelectedIndex();
            dm.setMonth(idx);
        }
    }//GEN-LAST:event_monthNameCmbActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable calendarTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField timeFld;
    private javax.swing.JButton prevYearBtn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField yearFld;
    private javax.swing.JComboBox monthNameCmb;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton nextYearBtn;
    // End of variables declaration//GEN-END:variables
    
    /**
     * An inner class used by the table
     */
    private class DateSelectionTableModel extends AbstractTableModel {
        private Object            columnNames[];
        private GregorianCalendar calendar;
        private Object            days[][];
        
        /**
         * Create a new table model
         */
        public DateSelectionTableModel() {
            columnNames = new Object[7];
            calendar = new GregorianCalendar();
            SimpleDateFormat format = new SimpleDateFormat("EEEE");
            
            calendar.set(calendar.DAY_OF_WEEK,             
                         calendar.getFirstDayOfWeek());
            
            
            for (int ii = 0; ii < 7; ++ii) {
                columnNames[ii] = format.format(calendar.getTime());
                calendar.roll(calendar.DAY_OF_WEEK, 1);
            }
            
            // Reset the calendar since I might have changed the current month
            calendar.setTime(new Date());
            
            days = new Object[6][7];
            updateDays();
        }
        
        /**
         * Lay out all of the day number correctly
         */
        public void updateDays() {
            calendar.set(calendar.DAY_OF_MONTH,
            calendar.getActualMinimum(calendar.DAY_OF_MONTH));
            
            int start = 0;
            
            switch (calendar.get(calendar.DAY_OF_WEEK)) {
                case Calendar.SATURDAY : ++start;
                case Calendar.FRIDAY   : ++start;
                case Calendar.THURSDAY : ++start;
                case Calendar.WEDNESDAY: ++start;
                case Calendar.TUESDAY  : ++start;
                default:
                    // Empty
            }
            
            // Ok.. If sunday is the first day of the week I must add 1
            if (calendar.getFirstDayOfWeek() == calendar.SUNDAY) {
                ++start;
            } else if (calendar.get(calendar.DAY_OF_WEEK) == calendar.SUNDAY) {
                ++start;
            }
            
            // Reset the data:
            for (int i = 0; i < days.length; ++i) {
                for (int j = 0; j < days[i].length; ++j) {
                    days[i][j] = null;
                }
            }            
            
            int x = start, y = 0;
            int noDays = calendar.getActualMaximum(calendar.DAY_OF_MONTH);
            
            for (int i = calendar.getActualMinimum(calendar.DAY_OF_MONTH); i <= noDays; ++i) {
                days[y][x] = Integer.toString(i);
                ++x;
                if (x == 7) {
                    x = 0;
                    ++y;
                }
            }
            fireTableDataChanged();
        }
        
        /**
         * Set the current month
         * @param month the new month
         */
        public void setMonth(int month) {
            if (month >= calendar.getActualMinimum(calendar.MONTH) && month <= calendar.getActualMaximum(calendar.MONTH)) {
                calendar.set(calendar.MONTH, month);
                updateDays();
            }
        }
        
        /**
         * Set the current year
         * @param year the new year
         */
        public void setYear(int year) {
            if (year >= calendar.getActualMinimum(calendar.YEAR) && year <= calendar.getActualMaximum(calendar.YEAR)) {
                calendar.set(calendar.YEAR, year);
                updateDays();
            }
        }
        
        /**
         * Get the name of the column..
         * @param col The column to get the name for
         * @return The column name
         */
        public String getColumnName(int col) {
            return columnNames[col].toString();
        }
        
        /**
         * Get the total number of elements in the data model
         * @return the number of elements...
         */
        public int getRowCount() {
            return 6;
        }
        
        /**
         * Get the number of columns
         * @return the number of columns
         */
        public int getColumnCount() {
            return columnNames.length;
        }
        
        /**
         * Get the value stored at a given position inside the table
         * @param row the row number
         * @param col the column number
         * @return the object stored at [row,col]
         */
        public Object getValueAt(int row, int col) {
            return days[row][col];
        }
        
        /**
         * Is a given cell editable?
         * @param row the row number
         * @param col the column number
         * @return true if the cell can be edited, false otherwise
         */
        public boolean isCellEditable(int row, int col) {
            return false;
        }
        
        /**
         * Get the object class used in a column
         * @param c the column number
         * @return Boolean for column 0, string otherwise...
         */
        public Class getColumnClass(int c) {
            return String.class;
        }
    }

     /**
      * A "main method" if you would like to test the panel...
      * @param argv not used
      */
//    public static void main(String argv[]) {
//        javax.swing.JFrame frm = new javax.swing.JFrame();
//        frm.getContentPane().add(new DateSelectionPanel());
//        frm.pack();
//        frm.setVisible(true);
//        frm.addWindowListener(new WindowAdapter() {
//            public void windowClosing(WindowEvent e) {
//                System.exit(0);
//            }
//        });
//    }
}

package @PKG@;

import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.util.Duration;
import javafx.scene.Parent;
import javafx.scene.Group;
//import javafx.scene.media.AudioClip;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;

final class RippleGenerator extends Parent {

//    private static String dropletName = "water-droplet-1.aiff";
//    private static String dropletURL = "http://reavers.us.oracle.com/fish/" + dropletName;

    private double generatorCenterX;
    private double generatorCenterY;
    private Group content;
    private Timeline generate;
//    private AudioClip dropletSound;

    public RippleGenerator() {
        generate = new Timeline();
        generate.setCycleCount(Timeline.INDEFINITE);
        final KeyFrame kf = new KeyFrame(Duration.millis(500),
                new EventHandler<ActionEvent>() {
                    public void handle(ActionEvent event) {
                        createRipple();
                    }
                });
        generate.getKeyFrames().add(kf);
        generatorCenterX = 100f;
        generatorCenterY = 100f;
        content = new Group();
        getChildren().add(content);

        if (Main.hasSound) {
//            dropletSound = new AudioClip(Main.useURL ? dropletURL : RippleGenerator.class.getResource(dropletName).toExternalForm());
//            dropletSound.setRate(0.5);
        }
    }

    public double getGeneratorCenterX() {
        return generatorCenterX;
    }

    public void setGeneratorCenterX(double generatorCenterX) {
        this.generatorCenterX = generatorCenterX;
    }

    public double getGeneratorCenterY() {
        return generatorCenterY;
    }

    public void setGeneratorCenterY(double generatorCenterY) {
        this.generatorCenterY = generatorCenterY;
    }

    public void generate() {
        generate.play();
    }

    public void stopGenerator() {
        generate.stop();
    }

    public void createRipple() {
        final Ripple rip = new Ripple();
        rip.setCenterX(generatorCenterX);
        rip.setCenterY(generatorCenterY);
        content.getChildren().add(rip);
        rip.playAnim();

        // play a sound effect to go with it
//        dropletSound.play();

        Timeline remover = new Timeline();
        final KeyFrame kf = new KeyFrame(Duration.seconds(3),
                new EventHandler<ActionEvent>() {
                    public void handle(ActionEvent event) {
                        content.getChildren().remove(rip);
                        rip.stopAnim();
                    }
                });
        remover.getKeyFrames().add(kf);
        remover.play();
    }

    private class Ripple extends Circle {

        private Timeline anim;

        private void playAnim() {
            anim.play();
        }

        private void stopAnim() {
            anim.stop();
        }

        private Ripple() {
            setStroke(Color.rgb(200,200,255));
            setFill(null);
            setCenterX(100);
            setCenterY(100);
            anim = new Timeline();
            final KeyFrame kf1 = new KeyFrame(Duration.ZERO, new KeyValue(this.radiusProperty(), 0f));
            final KeyFrame kf2 = new KeyFrame(Duration.seconds(1), new KeyValue(this.opacityProperty(), 1f));
            final KeyFrame kf3 = new KeyFrame(Duration.seconds(3), new KeyValue[] {
                new KeyValue(this.radiusProperty(), 100f),
                new KeyValue(this.opacityProperty(), 0f)
            });
            anim.getKeyFrames().addAll(kf1, kf2, kf3);
        }

    }

}



    ${access}<#if static >static </#if><#if final >final </#if>${type}<#if indexed >[]</#if> ${name}<#if final > = /* initializer */</#if>;
<#if bound >

    public static final String ${PROP_NAME} = "${name}";
</#if>
<#if generateGetter >

<#if generateJavadoc >
    /**
     * Get the value of ${name}
     *
     * @return the value of ${name}
     */
</#if>
    public <#if static >static </#if>${type}<#if indexed >[]</#if> <#if type = "boolean" >is<#else>get</#if>${capitalizedName}() {
        return <#if !static >this.</#if>${name};
    }
</#if>
<#if generateSetter >
<#if !final >

<#if generateJavadoc >
    /**
     * Set the value of ${name}
     *
     * @param new value of ${name}
     */
</#if>
    public <#if static >static </#if>void set${capitalizedName}(${type}<#if indexed >[]</#if> new${name})<#if vetoable> throws java.beans.PropertyVetoException</#if> {
<#if bound >
        ${type}<#if indexed >[]</#if> old${name} = ${name};
<#if vetoable> 
        vetoableChangeSupport.fireVetoableChange(${PROP_NAME}, old${name}, new${name});
</#if>
</#if>
        <#if !static >this.</#if>${name} = new${name};
<#if bound >
        propertyChangeSupport.firePropertyChange(${PROP_NAME}, old${name}, new${name});
</#if>
    }
</#if>
</#if>
<#if indexed >
<#if generateGetter >

<#if generateJavadoc >
    /**
     * Get the value of ${name} at specified index
     *
     * @parame index
     * @return the value of ${name} at specified index
     */
</#if>
    public <#if static >static </#if>${type} <#if type = "boolean" >is<#else>get</#if>${capitalizedName}(int index) {
        return <#if !static >this.</#if>${name}[index];
    }
</#if>
<#if generateSetter >
<#if generateJavadoc >
    /**
     * Set the value of ${name} at specified index.
     *
     * @param index
     * @param new value of ${name} at specified index
     */
</#if>
    public <#if static >static </#if>void set${capitalizedName}(int index, ${type} new${name})<#if vetoable> throws java.beans.PropertyVetoException</#if> {
<#if bound >
        ${type} old${name} = ${name}[index];
<#if vetoable> 
        vetoableChangeSupport.fireVetoableChange(${PROP_NAME}, old${name}, new${name});
</#if>
</#if>
        <#if !static >this.</#if>${name}[index] = new${name};
<#if bound >
        propertyChangeSupport.fireIndexedPropertyChange(${PROP_NAME}, index, old${name}, new${name});
</#if>
    }
</#if>
</#if>
<#if generatePropertyChangeSupport >

    private java.beans.PropertyChangeSupport propertyChangeSupport = new java.beans.PropertyChangeSupport(this);

    public void addPropertyChangeListener(java.beans.PropertyChangeListener listener )
    {
        propertyChangeSupport.addPropertyChangeListener( listener );
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener listener )
    {
        propertyChangeSupport.removePropertyChangeListener( listener );
    }
</#if>
<#if generateVetoablePropertyChangeSupport >

    private java.beans.VetoableChangeSupport vetoableChangeSupport = new java.beans.VetoableChangeSupport(this);

    public void addVetoableChangeListener(java.beans.VetoableChangeListener listener )
    {
        vetoableChangeSupport.addVetoableChangeListener( listener );
    }

    public void removeVetoableChangeListener(java.beans.VetoableChangeListener listener )
    {
        vetoableChangeSupport.removeVetoableChangeListener( listener );
    }
</#if>
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

CTL_NAME=ORBacus for Java 3.x for Windows (unsupported)

SERVER_IMPORT=\
import org.omg.CORBA.*;\n\
import java.io.*;\n\
import java.util.*;\n

CLIENT_IMPORT=\
import org.omg.CORBA.*;\n\
import java.io.*;\n\
import java.util.*;\n

SERVER_IMPORT_NS=\
import org.omg.CORBA.*;\n\
import java.io.*;\n\
import java.util.*;\n\
import org.omg.CosNaming.*;\n\
import org.omg.CosNaming.NamingContextPackage.*;\n

CLIENT_IMPORT_NS=\
import org.omg.CORBA.*;\n\
import java.io.*;\n\
import java.util.*;\n\
import org.omg.CosNaming.*;\n\
import org.omg.CosNaming.NamingContextPackage.*;\n

SETTINGS_ORB_PROPERTIES=\
    // setting system properties is necessary in Java 1.2\n\
    Properties props = System.getProperties ();\n\
    props.put ("org.omg.CORBA.ORBClass", "com.ooc.CORBA.ORB");\n\
    props.put ("org.omg.CORBA.ORBSingletonClass", "com.ooc.CORBA.ORBSingleton");\n\
    System.setProperties (props);\n

ORB_SERVER_INIT=\
    // create ORB and BOA\n\
    ORB orb = ORB.init (args, props);\n\
    BOA boa = ((com.ooc.CORBA.ORB)orb).BOA_init (args, props);\n\n\
    //\n\
    // add code to instantiate your object implementation here\n

ORB_CLIENT_INIT=\
    // create ORB\n\
    ORB orb = ORB.init (args, props);\n

ORB_OBJECT_ACTIVATION=//ORBacus object activation

ORB_SERVER_RUN=\
    boa.impl_is_ready (null);\n

SERVER_NS=\
   //this server will use Naming Service\n\
    org.omg.CORBA.Object o1 = null;\n\
    try {\n\
      o1 = orb.resolve_initial_references("NameService");\n\
    } catch (org.omg.CORBA.ORBPackage.InvalidName ex) {\n\
        System.out.println ("Can't binding to NameService");\n\
        System.exit (1);\n\
    }\n\
    NamingContext nc = NamingContextHelper.narrow(o1);\n\n\
    if (nc == null) {\n\
      System.out.println ("Naming Context is null!!!");\n\
      System.exit (1);\n\
    }\n\n\
    try {\n\
      //\n\
      // Create and bind Naming Contexts\n\
      //\n\
      //paste code retrieved using the Copy Server Code action (on a context node in the Naming Service Browser) here \n\
      boolean already_bound = false;\n\
      NameComponent[] nc1Name = new NameComponent[1];\n\
      NamingContext nc1 = null;\n\
      for (int i=0; i<hierarchy_of_contexts.length / 2; i++) {\n\
	 nc1Name[0] = new NameComponent();\n\
	 nc1Name[0].id = hierarchy_of_contexts[i*2];\n\
	 nc1Name[0].kind = hierarchy_of_contexts[i*2+1];\n\
	 try {\n\
	    nc1 = nc.bind_new_context (nc1Name);\n\
	    nc = nc1;\n\
	 } catch (org.omg.CosNaming.NamingContextPackage.AlreadyBound e) {\n\
	    already_bound = true;\n\
	 }\n\
	 if (already_bound) {\n\
	    try {\n\
	       org.omg.CORBA.Object o = nc.resolve (nc1Name);\n\
	       nc1 = NamingContextHelper.narrow (o);\n\
	       if (nc1 != null)\n\
		  nc = nc1;\n\
	       already_bound = false;\n\
	    } catch (Exception e) {\n\
	       e.printStackTrace ();\n\
	    }\n\
	 }\n\
      }\n\n\
      //\n\
      // Bind names with the Naming Service\n\
      //\n\
      NameComponent[] aName = new NameComponent[1];\n\
      aName[0] = new NameComponent ();\n\
      aName[0].id = name_of_server[0];\n\
      aName[0].kind = name_of_server[1];\n\
      nc.bind(aName, /* place here name of servant variable */);\n\
    } catch (Exception e) {\n\
        e.printStackTrace ();\n\
    }\n

SERVER_IOR_TO_FILE=\
    // IOR will be written to file <file_name>\n\
    String ior = orb.object_to_string (/* add your object implementation here */);\n\
    try {\n\
      FileWriter file = new java.io.FileWriter("<file_name>");\n\
      PrintWriter pfile=new java.io.PrintWriter(file);\n\
      pfile.println (ior);\n\
      pfile.flush();\n\
      pfile.close();\n\
     } catch (IOException ex) {\n\
      System.out.println("file error");\n\
    }\n

SERVER_IOR_TO_OUTPUT=\
    //IOR will be written to standard output\n\
    System.out.println (orb.object_to_string (/* place here your object implementation */));\n

SERVER_BINDER=\
    //ORBacus for Java 3.x proprietary binding\n\
    ((com.ooc.CORBA.ORB)orb).connect(/* place your object implementation here */, "<name of your server>");\n
    

CLIENT_NS=\
    //client will use Naming Service\n\
    org.omg.CORBA.Object o1 = null;\n\
    try {\n\
      o1 = orb.resolve_initial_references("NameService");\n\
    } catch (org.omg.CORBA.ORBPackage.InvalidName ex) {\n\
      System.err.println("Can't bind to Naming Service");\n\
      System.exit(0);\n\
    }\n\
    if (o1 == null) {\n\
      System.err.println("Naming Service is a nil object reference");\n\
      System.exit(0);\n\
    }\n\
    NamingContext nc = NamingContextHelper.narrow (o1);\n\
    if (nc == null) {\n\
      System.err.println("Naming Service is not a NamingContext object reference");\n\
      System.exit(0);\n\
    }\n\
    org.omg.CORBA.Object obj = null;\n\
    try {\n\
      //\n\
      // Resolve names with the Naming Service\n\
      //\n\
      // paste code retrieved using the Copy Client Code action (on an object node in the Naming Service Browser) here \n\
      NameComponent[] aName = new NameComponent[client_name_hierarchy.length / 2];\n\
      for (int i=0; i<(client_name_hierarchy.length / 2); i++) {\n\
	 aName[i] = new NameComponent();\n\
	 aName[i].id = client_name_hierarchy[i*2];\n\
	 aName[i].kind = client_name_hierarchy[i*2+1];\n\
	 }\n\
      obj = nc.resolve (aName);\n\
   } catch (Exception e) {\n\
       e.printStackTrace ();\n\
   }\n\
   // place narrowing of your object here\n\
   // something like:  <class> <name> = <class>Helper.narrow (obj);\n\
   //                  if (<name> == null) throw new RuntimeException ();\n



CLIENT_IOR_FROM_FILE=\
    //IOR will be read from file <file_name>\n\
    org.omg.CORBA.Object obj = null;\n\
    try {\n\
      FileReader file = new java.io.FileReader("<file_name>");\n\
      BufferedReader input = new java.io.BufferedReader(file);\n\
      String target = input.readLine();\n\
      input.close();\n\
      obj = orb.string_to_object(target);\n\
    } catch (IOException ex) {\n\
      System.out.println("file error");\n\
      System.exit(0);\n\
    }\n\
    // add your code narrowing here\n\
    // something like:  <class> <name> = <class>Helper.narrow (obj);\n\
    //                  if (<name> == null) throw new RuntimeException ();\n


CLIENT_IOR_FROM_INPUT=\
    //IOR will be read from standard input\n\
    String ior = null;\n\
    try {\n\
      InputStreamReader dataIn = new InputStreamReader(System.in);\n\
      BufferedReader in = new BufferedReader(dataIn);\n\
      ior = in.readLine();\n\
    } catch (IOException e) {\n\
      System.out.println (e);\n\
    }\n\
    org.omg.CORBA.Object obj = orb.string_to_object (ior);\n\
    if (obj == null)\n\
       throw new RuntimeException ();\n\
    // add your code here\n\
    // something like:  <class> <name> = <class>Helper.narrow (obj);\n\
    //                  if (<name> == null) throw new RuntimeException ();\n



CLIENT_BINDER=\
    //ORBacus for Java 3.x proprietary client binding\n\
    // get server object from URL\n\
    //\n\
    String url = "iiop://<host where server runs>:<port where server listens>/<name of your object implementation>";\n\
    org.omg.CORBA.Object obj = orb.string_to_object (url);\n\
    if (obj == null)\n\
      throw new RuntimeException();\n\
    // add your code here\n\
    // something like:  <class> <name> = <class>Helper.narrow (obj);\n\
    //                  if (<name> == null) throw RuntimeException ();\n



TIE_PARAM=--tie
DIR_PARAM=--output-dir 
PACKAGE_PARAM=--package 
COMPILER=jidl {params} {dir_param} {package_root} {package_param} {package} {files}
PACKAGE_DELIMITER=.
##ERROR_EXPRESSION=^([^ ]+):([0-9]+): (.*)
ERROR_EXPRESSION=^([^ ]+)\\(([0-9]+)\\): (.*)
FILE_POSITION=1
LINE_POSITION=2
COLUMN_POSITION=-1
MESSAGE_POSITION=3


# added for implementation generator

#ImplBase aproach

IMPLBASE_IMPL_PREFIX=
IMPLBASE_IMPL_POSTFIX=Impl
EXT_CLASS_PREFIX=_
EXT_CLASS_POSTFIX=ImplBase

#TIE aproach
TIE_IMPL_PREFIX=
TIE_IMPL_POSTFIX=ImplTIE
IMPL_INT_PREFIX=
IMPL_INT_POSTFIX=Operations





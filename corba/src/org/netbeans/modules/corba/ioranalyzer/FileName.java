/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

/*
 * FileName.java
 *
 * Created on November 8, 2000, 5:30 PM
 */

package org.netbeans.modules.corba.ioranalyzer;

import java.util.ResourceBundle;
import java.awt.event.FocusListener;
import java.awt.event.FocusEvent;
import javax.swing.JTextField;
import org.openide.*;
import org.openide.explorer.*;
import org.openide.explorer.view.*;
import org.openide.loaders.*;
import org.openide.filesystems.*;
import org.openide.nodes.*;
import org.openide.util.NbBundle;

/**
 *
 * @author  Tomas Zezula
 * @version 
 */
public class FileName extends javax.swing.JPanel implements java.beans.PropertyChangeListener, DataFilter, java.beans.VetoableChangeListener {
    
    private BeanTreeView btv;

    /** Creates new form FileName */
    public FileName() {
        initComponents ();
        postInitComponents();
    }
    
    public String getName () {
        return this.name.getText();
    }
    
    
    public void setName (String name) {
        this.name.setText (name);
        this.name.setSelectionStart(0);
        this.name.setSelectionEnd (name.length());
    }
    
    public DataObject getPackage () {
        Node[] nodes = this.explorer.getExplorerManager().getSelectedNodes();
        if (nodes != null && nodes.length == 1) 
            return (DataFolder) nodes[0].getCookie (DataFolder.class);
        else
            return null;
    }
    
    public void setPackage (Node node) {
        try {
            this.explorer.getExplorerManager().setSelectedNodes (new Node[]{node});
        }catch (java.beans.PropertyVetoException pve) {}
    }
    
    private void postInitComponents () {
        this.pkgName.addFocusListener ( new FocusListener () {
            
            public void focusGained (FocusEvent event) {
                ((JTextField)event.getSource()).selectAll();
            }
            
            public void focusLost (FocusEvent event) {
            }
        });
        this.btv = new BeanTreeView();
        this.explorer.add (btv);
        ExplorerManager mgr = this.explorer.getExplorerManager();
        mgr.setRootContext (TopManager.getDefault().getPlaces().nodes().repository(this));
        mgr.addPropertyChangeListener (this);
        mgr.addVetoableChangeListener (this);
        ResourceBundle b = NbBundle.getBundle (FileName.class);
        this.jLabel1.setDisplayedMnemonic (b.getString ("TXT_NewFileName_MNE").charAt(0));
        this.pkg.setDisplayedMnemonic (b.getString("TXT_Package_MNE").charAt(0));
        this.getAccessibleContext().setAccessibleDescription (b.getString("AD_FileName"));
        this.pkgName.getAccessibleContext().setAccessibleDescription (b.getString("AD_Package"));
        this.name.getAccessibleContext().setAccessibleDescription (b.getString("AD_NewFileName"));
        this.explorer.getAccessibleContext().setAccessibleName (b.getString("AN_PackageChooser"));
        this.explorer.getAccessibleContext().setAccessibleDescription (b.getString("AD_PackageChooser"));
    }
    
    public boolean acceptDataObject (DataObject obj) {
        FileObject fobj = obj.getPrimaryFile();
        if (obj.isValid() && fobj.isFolder())
            return true;
        else
            return false;
    }
    
    
    public void propertyChange (java.beans.PropertyChangeEvent event) {
        try {
            Node[] nodes = (Node[])event.getNewValue();
            if (nodes == null || nodes.length !=1)
                return;
            Node node = nodes[0];
                String selection ="";
                while (true) {
                    Node parent = node.getParentNode();
                    if (parent == null || parent == TopManager.getDefault().getPlaces().nodes().repository(this)){
                        String path = node.getDisplayName()+"/" + selection.replace('.','/');
                        if (selection.endsWith ("."))
                            selection = selection.substring (0, selection.length() -1);
                        selection = java.text.MessageFormat.format("{0} [{1}]", new Object[] {selection,path});
                        break;
                    }
                    selection = node.getDisplayName()+"."+selection;
                    node = parent;
                }

            this.pkgName.setText(selection);
        }catch (ClassCastException cce) {}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        explorer = new org.openide.explorer.ExplorerPanel();
        pkg = new javax.swing.JLabel();
        pkgName = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(400, 320));
        jLabel1.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/corba/ioranalyzer/Bundle").getString("TXT_NewFileName"));
        jLabel1.setLabelFor(name);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 4);
        add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 8, 8);
        add(name, gridBagConstraints);

        explorer.setToolTipText(java.util.ResourceBundle.getBundle("org/netbeans/modules/corba/ioranalyzer/Bundle").getString("TIP_PackageBrowser"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 8);
        add(explorer, gridBagConstraints);

        pkg.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/corba/ioranalyzer/Bundle").getString("TXT_Package"));
        pkg.setLabelFor(pkgName);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 4);
        add(pkg, gridBagConstraints);

        pkgName.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 8, 8);
        add(pkgName, gridBagConstraints);

    }//GEN-END:initComponents

    public void vetoableChange(final java.beans.PropertyChangeEvent event) throws java.beans.PropertyVetoException {
        try {
            Node[] nodes = (Node[]) event.getNewValue();
            if (nodes == null || nodes.length!= 1)
                throw new java.beans.PropertyVetoException ("",event);
            if (nodes[0] == this.explorer.getExplorerManager().getRootContext())
                throw new java.beans.PropertyVetoException ("",event);
        }catch (ClassCastException cce) {}
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField pkgName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField name;
    private javax.swing.JLabel pkg;
    private org.openide.explorer.ExplorerPanel explorer;
    // End of variables declaration//GEN-END:variables

}

<?xml version="1.0" encoding='ISO-8859-1'?>

<local-bundle value='org.netbeans.modules.corba.resources.impls.ResourcePointer'/>


<java-template-code>
  
  <template-code name='SERVER_IMPORT'>
    <![CDATA[import org.omg.CORBA.ORB;
    import org.omg.CORBA.ORBPackage.InvalidName;
    import org.omg.CORBA.SystemException;
    
    import java.util.Properties;]]>
  </template-code>
  
  
  <template-code name='CLIENT_IMPORT'>
    <![CDATA[import org.omg.CORBA.ORB;
    import org.omg.CORBA.ORBPackage.InvalidName;
    import org.omg.CORBA.SystemException;
    
    import java.util.Properties;]]>
  </template-code>

<!--  
  <template-code name='ORB_PROPERTIES'>
    <![CDATA[// setting system properties is necessary for using other ORB than JDK's
    Properties props = System.getProperties ();
    //props.put ("org.omg.CORBA.ORBClass", "<enter your ORB class>");
    //props.put ("org.omg.CORBA.ORBSingletonClass", "<enter your ORBSingleton class");
    System.setProperties (props);]]>
  </template-code>
-->

  <template-code name='ORB_INIT'>
    <![CDATA[ORB orb = ORB.init (args, props);]]>
  </template-code>

  <template-code name='POA_INIT'>
    <![CDATA[]]>
  </template-code>
  
  <template-code name='SERVANTS_INIT'>
    <![CDATA[//
    // add your creating of object implementation here]]>
  </template-code>
  
  <template-code name='SERVANTS_ACTIVATION'>
    <![CDATA[orb.connect (/* add your object implementation here */);]]>
  </template-code>
  
  <template-code name='POA_ACTIVATION'>
    <![CDATA[]]>
  </template-code>
  
  <template-code name='ORB_SERVER_RUN'>
    <![CDATA[java.lang.Object sync = new java.lang.Object ();
    synchronized (sync) {
    sync.wait ();
    }]]>
  </template-code>

</java-template-code>

<!--
<idl-template-code>
  <template-code name='COPYRIGHT'>
    <![CDATA[
//
//
// This code has Sun's (c) Copyright
//
//]]>
  </template-code>
</idl-template-code>
-->

<server-binding name='Naming Service' template-tag='SERVER_BINDING' local-tag='ns-server'> 
  <import>
    <![CDATA[
    import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextHelper;
    import org.omg.CosNaming.NameComponent;
    import org.omg.CosNaming.NamingContextPackage.AlreadyBound;]]>
  </import>
  <code>
    <![CDATA[//this server will use Naming Service
    org.omg.CORBA.Object o1 = null;
    try {
    o1 = orb.resolve_initial_references("NameService");
    } catch (org.omg.CORBA.ORBPackage.InvalidName ex) {
    System.out.println ("Can't binding to NameService");
    System.exit (1);
    }
    NamingContext nc = NamingContextHelper.narrow(o1);
    if (nc == null) {
    System.out.println ("Naming Context is null!!!");
    System.exit (1);
    }
    try {
    //
    // Create and bind Naming Contexts
    //
    // paste code retrieved using the Copy Server Code action (on a context node in the Naming Service Browser) here
    boolean already_bound = false;
    NameComponent[] nc1Name = new NameComponent[1];
    NamingContext nc1 = null;
    for (int i=0; i<hierarchy_of_contexts.length / 2; i++) {
    nc1Name[0] = new NameComponent();
    nc1Name[0].id = hierarchy_of_contexts[i*2];
    nc1Name[0].kind = hierarchy_of_contexts[i*2+1];
    try {
    nc1 = nc.bind_new_context (nc1Name);
    nc = nc1;
    } catch (org.omg.CosNaming.NamingContextPackage.AlreadyBound e) {
    already_bound = true;
    }
    if (already_bound) {
    try {
    org.omg.CORBA.Object o = nc.resolve (nc1Name);
    nc1 = NamingContextHelper.narrow (o);
    if (nc1 != null)
    nc = nc1;
    already_bound = false;
    } catch (Exception e) {
    e.printStackTrace ();
    }
    }
    }
    //
    // Bind names with the Naming Service
    //
    NameComponent[] aName = new NameComponent[1];
    aName[0] = new NameComponent ();
    aName[0].id = name_of_server[0];
    aName[0].kind = name_of_server[1];
    nc.bind (aName, /* place here name of servant variable */);
    } catch (org.omg.CosNaming.NamingContextPackage.AlreadyBound e) {
    e.printStackTrace ();
    } catch (org.omg.CosNaming.NamingContextPackage.InvalidName e) {
    e.printStackTrace ();
    } catch (org.omg.CosNaming.NamingContextPackage.CannotProceed e) {
    e.printStackTrace ();
    } catch (org.omg.CosNaming.NamingContextPackage.NotFound e) {
    e.printStackTrace ();
    }]]>
  </code>
</server-binding>

<server-binding name='IOR to file' template-tag='SERVER_BINDING' local-tag='ior_to_file'>
  <import>
    <![CDATA[import java.io.PrintWriter;
    import java.io.FileWriter;
    import java.io.FileReader;
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    import java.io.IOException;]]>
  </import>
  <code>
    <![CDATA[// IOR will be written to file <file_name>
    try {
    String ior = orb.object_to_string (/* add your object implementation here */);
    FileWriter file = new java.io.FileWriter("<file_name>");
    PrintWriter pfile=new java.io.PrintWriter(file);
    pfile.println (ior);
    pfile.flush();
    pfile.close();
    } catch (IOException e) {
    e.printStackTrace ();
    }]]>
  </code>
</server-binding>

<server-binding name='IOR to standard output' template-tag='SERVER_BINDING'
		local-tag='ior_to_output'>
  <code>
    <![CDATA[//IOR will be written to standard output
    System.out.println (orb.object_to_string (/* place here your object implementation */));]]>
  </code>
</server-binding>

<client-binding name='Naming Service' template-tag='CLIENT_BINDING' local-tag='ns-client'>
  <import>
    <![CDATA[import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextHelper;
    import org.omg.CosNaming.NameComponent;
    import org.omg.CosNaming.NamingContextPackage.AlreadyBound;]]>
  </import>
  <code>
    <![CDATA[//client will use Naming Service
    org.omg.CORBA.Object o1 = null;
    try {
    o1 = orb.resolve_initial_references("NameService");
    } catch (org.omg.CORBA.ORBPackage.InvalidName ex) {
    System.err.println("Can't bind to Naming Service");
    System.exit(0);
    }
    if (o1 == null) {
    System.err.println ("Naming Service is a nil object reference");
    System.exit(0);
    }
    NamingContext nc = NamingContextHelper.narrow (o1);
    if (nc == null) {
    System.err.println("Naming Service is not a NamingContext object reference");
    System.exit(0);
    }
    org.omg.CORBA.Object obj = null;
    try {
    //
    // Resolve names with the Naming Service
    //
    // paste code retrieved using the Copy Client Code action (on an object node in the Naming Service Browser) here 
    NameComponent[] aName = new NameComponent[client_name_hierarchy.length / 2];
    for (int i=0; i<(client_name_hierarchy.length / 2); i++) {
    aName[i] = new NameComponent();
    aName[i].id = client_name_hierarchy[i*2];
    aName[i].kind = client_name_hierarchy[i*2+1];
    }
    obj = nc.resolve (aName);
    } catch (Exception e) {
    e.printStackTrace ();
    }
    // place narrowing of your object here
    // something like:  <class> <name> = <class>Helper.narrow (obj);
    //                  if (<name> == null) throw new RuntimeException ();]]>
  </code>
</client-binding>

<client-binding name='IOR from file' template-tag='CLIENT_BINDING'
		local-tag='ior_from_file'>
  <import>
    <![CDATA[import java.io.PrintWriter;
    import java.io.FileWriter;
    import java.io.FileReader;
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    import java.io.IOException;]]>
  </import>
  <code>
    <![CDATA[//IOR will be read from file <file_name>
    org.omg.CORBA.Object obj = null;
    try {
    FileReader file = new java.io.FileReader ("<file_name>");
    BufferedReader input = new java.io.BufferedReader (file);
    String ior = input.readLine ();
    input.close ();
    obj = orb.string_to_object (ior);
    } catch (IOException ex) {
    System.out.println ("file error");
    System.exit (0);
    }
    // add your code narrowing here
    // something like:  <class> <name> = <class>Helper.narrow (obj);
    //                  if (<name> == null) throw new RuntimeException ();]]>
  </code>
</client-binding>

<client-binding name='IOR from standard input' template-tag='CLIENT_BINDING'
		local-tag='ior_from_input'>
  <code>
    <![CDATA[//IOR will be read from standard input
    String ior = null;
    try {
    InputStreamReader dataIn = new InputStreamReader (System.in);
    BufferedReader in = new BufferedReader (dataIn);
    ior = in.readLine ();
    } catch (IOException e) {
    System.out.println (e);
    }
    org.omg.CORBA.Object obj = orb.string_to_object (ior);
    if (obj == null)
    throw new RuntimeException ();
    // add your code here
    // something like:  <class> <name> = <class>Helper.narrow (obj);
    //                  if (<name> == null) throw new RuntimeException ();]]>
  </code>
</client-binding>

<impl-generator-settings>

  <implbase-impl-prefix value=''/>
  <implbase-impl-postfix value='Impl'/>
  <ext-class-prefix value='_'/>
  <ext-class-postfix value='ImplBase'/>

  <tie-impl-prefix value=''/>
  <tie-impl-postfix value='ImplTIE'/>
  <impl-int-prefix value='_'/>
  <impl-int-postfix value='Operations'/>

  <value-impl-prefix value=''/>
  <value-impl-postfix value='Impl'/>
  <valuefactory-impl-prefix value=''/>
  <valuefactory-impl-postfix value='ValueFactoryImpl'/>

</impl-generator-settings>


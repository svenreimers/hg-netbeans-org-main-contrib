<?xml version="1.0" encoding='ISO-8859-1'?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
Microsystems, Inc. All Rights Reserved.
-->


<!DOCTYPE orb-settings PUBLIC "-//Forte for Java//DTD ORBSettings 1.0//EN" "ORBSettings.dtd"[
<!ENTITY corba23-poa SYSTEM "corba23-poa.ent">
<!ENTITY corba23-generic-impl SYSTEM "corba23-generic-impl.ent">
<!ENTITY orbacus4-generic SYSTEM "orbacus4-generic.ent">
]>

<orb-settings name='JDK 1.4 ORB' tag='JDK1.4' supported='true'>

<poa-settings>

<!--

	Define POA policies from CORBA 2.3 specification

-->

  <poa-policy name='Thread' mnemonic_character='T'>
    <value name='ORB_CTRL_MODEL'>
    </value>
    <value name='SINGLE_THREAD_MODEL'>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_thread_policy(ThreadPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_thread_policy\s*\(ThreadPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>


  <poa-policy name='Lifespan' mnemonic_character='L'>
    <value name='TRANSIENT'>
    </value>
    <value name='PERSISTENT'>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_lifespan_policy(LifespanPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_lifespan_policy\s*\(LifespanPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>


  <poa-policy name='Id Uniqueness' mnemonic_character='U'>
    <value name='UNIQUE_ID'>
      <conflicts-with-policy name='Servant Retention' value='NON_RETAIN'/>
    </value>
    <value name='MULTIPLE_ID'>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_id_uniqueness_policy(IdUniquenessPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_id_uniqueness_policy\s*\(IdUniquenessPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>

  <poa-policy name='Id Assignment' mnemonic_character='A'>
    <value name='SYSTEM_ID'>
      <disable-action name='servant-with-user-id'/>
    </value>
    <value name='USER_ID'>
      <disable-action name='servant-with-system-id'/>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_id_assignment_policy(IdAssignmentPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_id_assignment_policy\s*\(IdAssignmentPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>

  <poa-policy name='Servant Retention' mnemonic_character='S'>
    <value name='RETAIN'>
    </value>
    <value name='NON_RETAIN'>
      <conflicts-with-policy name='ID Uniqueness' value='UNIQUE_ID'/>
      <disable-action name='all-servants'/>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_servant_retention_policy(ServantRetentionPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_servant_retention_policy\s*\(ServantRetentionPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>


  <poa-policy name='Request Processing' mnemonic_character='R'>
    <value name='USE_ACTIVE_OBJECT_MAP_ONLY'>
      <require-policy name='Servant Retention' value='RETAIN'/>
      <disable-action name='servant-manager'/>
      <disable-action name='default-servant'/>
    </value>
    <value name='USE_DEFAULT_SERVANT'>
      <require-policy name='Id Uniqueness' value='MULTIPLE_ID'/>
      <disable-action name='servant-manager'/>
    </value>
    <value name='USE_SERVANT_MANAGER'>
      <disable-action name='default-servant'/>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_request_processing_policy(RequestProcessingPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_request_processing_policy\s*\(RequestProcessingPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>



  <poa-policy name='Implicit Activation' mnemonic_character='I'>
    <value name='IMPLICIT_ACTIVATION'>
      <require-policy name='Id Assignment' value='SYSTEM_ID'/>
      <require-policy name='Servant Retention' value='RETAIN'/>
    </value>
    <value name='NO_IMPLICIT_ACTIVATION'>
    </value>
    <create-code><![CDATA[__ROOT_POA_VAR_NAME__.create_implicit_activation_policy(ImplicitActivationPolicyValue.__POLICY_VALUE__)]]></create-code>
    <create-code-pattern value='[:javastart:][:javapart:]*.create_implicit_activation_policy\s*\(ImplicitActivationPolicyValue.([:javastart:][:javapart:]*)\),?'/>
  </poa-policy>



  <section-init-poas value='poa_section'/>
  <section-activate-poas value='poa_activate_section'/>
  <section-init-servants value='servant_section'/>
  <root-poa-init value='POA __ROOT_POA_VAR_NAME__ = (POA)__ORB_VAR_NAME__.resolve_initial_references("RootPOA");\n\n'/>
  <create-poa value='POA __POA_VAR_NAME__ = __PARENT_POA_VAR_NAME__.create_POA("__POA_NAME__", __POA_MANAGER__, _policies);\n'/>
  <activate-poa value='.the_POAManager().activate();\n'/>
  <policies-declaration value='Policy[] _policies;\n'/>
  <policies-header value='_policies = new Policy[] {\n'/>
  <policies-footer value='};\n'/>
  <policies-separator value=','/>
  <unrecognized-policy value='__Unrecognized__'/>
  <get-poa-manager value='.the_POAManager()'/>
  <servant-class value='org.omg.PortableServer.Servant'/>
  
  <activate-servant-with-system-id value='byte[] __ID_VAR_NAME__ = __PARENT_POA_VAR_NAME__.activate_object(__SERVANT_VAR_NAME__);\n'/>
  <activate-servant-with-user-id value='__PARENT_POA_VAR_NAME__.activate_object_with_id("__ID__".getBytes(), __SERVANT_VAR_NAME__);\n'/>
  <create-servant-instance value='__SERVANT_TYPE_NAME__ __SERVANT_VAR_NAME__ = new __SERVANT_CONSTRUCTOR__;\n'/>
  <set-default-servant value='__PARENT_POA_VAR_NAME__.set_servant(__SERVANT_VAR_NAME__._this());\n'/>
  <set-servant-manager value='__PARENT_POA_VAR_NAME__.set_servant_manager(__SERVANT_VAR_NAME__._this());\n'/>
  <set-poa-activator value='__PARENT_POA_VAR_NAME__.the_activator(__SERVANT_VAR_NAME__._this());\n'/>
  
  <get-root-poa-pattern value='resolve_initial_references\s*\(\s*"RootPOA"\s*\)'/>
  
  <root-poa-pattern value='POA ([:javastart:][:javapart:]*) = (POA)\s*\(([:javastart:][:javapart:]*).resolve_initial_references\s*\("RootPOA"\)\);'/>
  
  <poa-pattern value='POA ([:javastart:][:javapart:]*) = ([:javastart:][:javapart:]*).create_POA\s*\("(.*)", ([:javastart:][:javapart:]*)(.the_POAManager\s*\(\))?, _policies\);'/>
  
  <policies-declaration-pattern value='Policy\[\] _policies;\n'/>
  <policies-header-pattern value='_policies = new Policy\[\]\s*\n?\{\n'/>
  <policies-footer-pattern value='\};\n'/>
  
  <servant-instance-pattern value='(\S*) [:javastart:][:javapart:]* = new (.*);\n'/>
  
  <servant-pattern value='byte\[\] ([:javastart:][:javapart:]*) = ([:javastart:][:javapart:]*).activate_object\s*\(([:javastart:][:javapart:]*)\);\n|([:javastart:][:javapart:]*).activate_object_with_id\s*\("(.*)".getBytes\s*\(\), ([:javastart:][:javapart:]*)\);\n'/>
  
  <default-servant-pattern value='([:javastart:][:javapart:]*).set_servant\s*\(([:javastart:][:javapart:]*)._this\s*\(\)\);\n'/>
  
  <servant-manager-pattern value='([:javastart:][:javapart:]*).set_servant_manager\s*\(([:javastart:][:javapart:]*)._this\s*\(\)\);\n'/>
  
  <poa-activator-pattern value='([:javastart:][:javapart:]*).the_activator\s*\(([:javastart:][:javapart:]*)._this\s*\(\)\);\n'/>
  


  <default-default-servant-var-name value='myDefaultServant'/>
  <default-poa-activator-var-name value='myPOAActivator'/>
  <default-poa-name value='MyPOA'/>
  <default-poa-var-name value='myPOA'/>
  <default-servant-id value='MyServant'/>
  <default-servant-id-var-name value='myServantID'/>
  <default-servant-var-name value='myServant'/>
  <default-servant-manager-var-name value='myServantManager'/>

</poa-settings>  
 

<local-bundle value='org.netbeans.modules.corba.resources.impls.ResourcePointer'/>


<java-template-code>
  
  <patch-code value='/*FFJ_CORBA_TODO_OA_VAR_NAME*/'><![CDATA[poa]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_INTERFACE_NAME*/'><![CDATA[/*interface_name*/]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/'><![CDATA[/*servant_variable*/]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_FILE_NAME*/'><![CDATA[<file_name>]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_CODE_FROM_NS*/'><![CDATA[// paste code retrieved using the Copy Client/Server Code action
    // (on the corresponding node in the Naming Service Browser) here]]></patch-code>
  
  <template-code name='SERVER_IMPORT'><![CDATA[import org.omg.CORBA.ORB;
    import org.omg.CORBA.Policy;
    import org.omg.PortableServer.POA;
    import org.omg.PortableServer.IdAssignmentPolicyValue;
    import org.omg.PortableServer.IdUniquenessPolicyValue;
    import org.omg.PortableServer.ImplicitActivationPolicyValue;
    import org.omg.PortableServer.LifespanPolicyValue;
    import org.omg.PortableServer.RequestProcessingPolicyValue;
    import org.omg.PortableServer.ServantRetentionPolicyValue;
    import org.omg.PortableServer.ThreadPolicyValue;
    
    import java.util.Properties;]]></template-code>
  
  
  <template-code name='CLIENT_IMPORT'><![CDATA[import org.omg.CORBA.ORB;
   
    import java.util.Properties;]]></template-code>
  
  <template-code name='ORB_PROPERTIES'><![CDATA[// setting system properties is necessary in order to use this ORB in JDK
    Properties props = System.getProperties ();
    props.put ("org.omg.CORBA.ORBClass", "<enter your ORB class>");
    props.put ("org.omg.CORBA.ORBSingletonClass", "<enter your ORBSingleton class");
    System.setProperties (props);]]>
  </template-code>
  
  <template-code name='HANDLER_INIT_DEF'>
    <![CDATA[private ORB orb;

    public void init (ORB _orb) {
        orb = _orb;
    }]]>
  </template-code>

  <template-code name='HANDLER_INIT'><![CDATA[handler.init(orb);]]></template-code>

  <template-code name='ORB_INIT'><![CDATA[ORB orb = ORB.init (args, props);]]>
  </template-code>

  <template-code name='POA_INIT'><![CDATA[POA poa = (POA)orb.resolve_initial_references ("RootPOA");//GEN-LINE:poa_section]]>
  </template-code>
  
  <template-code name='SERVANTS_INIT'><![CDATA[// add your creating of object implementation here]]></template-code>
  
  <template-code name='SERVANTS_ACTIVATION'><![CDATA[//GEN-LINE:servant_section]]>
  </template-code>
  
  <template-code name='POA_ACTIVATION'><![CDATA[poa.the_POAManager ().activate ();//GEN-LINE:poa_activate_section]]>
  </template-code>
  
  <template-code name='ORB_SERVER_RUN'><![CDATA[orb.run ();]]></template-code>

</java-template-code>

<!--
<idl-template-code>
  <template-code name='COPYRIGHT'>
    <![CDATA[
//
//
// This code has Sun's (c) Copyright
//
//]]>
  </template-code>
</idl-template-code>
-->

<server-binding name='Naming Service' template-tag='SERVER_BINDING' local-tag='ns-server'> 
  <wizard-requires value='/*FFJ_CORBA_TODO_CODE_FROM_NS*/' title=''
		   type='ns_code'/>
  <import><![CDATA[import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextHelper;
    import org.omg.CosNaming.NameComponent;]]></import>
  <code><![CDATA[// the server will use Naming Service
    org.omg.CORBA.Object ns = orb.resolve_initial_references("NameService");
    if (ns == null)
    throw new RuntimeException ();
    NamingContext nc = NamingContextHelper.narrow(ns);
    if (nc == null)
    throw new RuntimeException ();

    // create and bind Naming Contexts
    /*FFJ_CORBA_TODO_CODE_FROM_NS*/
    NameComponent[] nc1Name = new NameComponent[1];
    NamingContext nc1 = null;
    for (int i=0; i<hierarchy_of_contexts.length / 2; i++) {
    nc1Name[0] = new NameComponent();
    nc1Name[0].id = hierarchy_of_contexts[i*2];
    nc1Name[0].kind = hierarchy_of_contexts[i*2+1];
    try {
    nc1 = nc.bind_new_context (nc1Name);
    nc = nc1;
    } catch (org.omg.CosNaming.NamingContextPackage.AlreadyBound e) {
    org.omg.CORBA.Object o = nc.resolve (nc1Name);
    if (o == null)
    throw new RuntimeException ();
    nc1 = NamingContextHelper.narrow (o);
    if (nc1 == null)
    throw new RuntimeException ();
    nc = nc1;
    }
    }

    // bind names with the Naming Service
    NameComponent[] aName = new NameComponent[1];
    aName[0] = new NameComponent ();
    aName[0].id = name_of_server[0];
    aName[0].kind = name_of_server[1];
    nc.bind(aName, /*FFJ_CORBA_TODO_OA_VAR_NAME*/.servant_to_reference (/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/));]]>
  </code>
</server-binding>

<server-binding name='IOR to file' template-tag='SERVER_BINDING' local-tag='ior_to_file'>
  <wizard-requires value='/*FFJ_CORBA_TODO_FILE_NAME*/' title='IOR File Name:'
		   type='file_name'/>
  <import><![CDATA[import java.io.PrintWriter;
    import java.io.FileWriter;]]></import>
  <code><![CDATA[// IOR will be written to file
    String ior = orb.object_to_string (/*FFJ_CORBA_TODO_OA_VAR_NAME*/.servant_to_reference (/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/));
    FileWriter file = new java.io.FileWriter("/*FFJ_CORBA_TODO_FILE_NAME*/");
    PrintWriter pfile = new java.io.PrintWriter(file);
    pfile.println (ior);
    pfile.flush();
    pfile.close();]]>
  </code>
</server-binding>

<server-binding name='IOR to standard output' template-tag='SERVER_BINDING'
		local-tag='ior_to_output'>
  <code><![CDATA[// IOR will be written to standard output
    System.out.println (orb.object_to_string (/*FFJ_CORBA_TODO_OA_VAR_NAME*/.servant_to_reference (/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/)));]]>
  </code>
</server-binding>

<client-binding name='Naming Service' template-tag='CLIENT_BINDING' local-tag='ns-client'>
  <wizard-requires value='/*FFJ_CORBA_TODO_CODE_FROM_NS*/' title=''
		   type='ns_code'/>
  <import><![CDATA[import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextHelper;
    import org.omg.CosNaming.NameComponent;]]></import>
  <code><![CDATA[// the client will use Naming Service
    org.omg.CORBA.Object ns = orb.resolve_initial_references("NameService");
    if (ns == null)
    throw new RuntimeException ();
    NamingContext nc = NamingContextHelper.narrow (ns);
    if (nc == null)
    throw new RuntimeException ();

    // resolve names with the Naming Service
    /*FFJ_CORBA_TODO_CODE_FROM_NS*/
    NameComponent[] aName = new NameComponent[client_name_hierarchy.length / 2];
    for (int i=0; i<(client_name_hierarchy.length / 2); i++) {
    aName[i] = new NameComponent();
    aName[i].id = client_name_hierarchy[i*2];
    aName[i].kind = client_name_hierarchy[i*2+1];
    }
    org.omg.CORBA.Object obj = nc.resolve (aName);
    /*FFJ_CORBA_TODO_INTERFACE_NAME*/ srv = /*FFJ_CORBA_TODO_INTERFACE_NAME*/Helper.narrow (obj);
    if (srv == null)
    throw new RuntimeException ();

    // add your client code here]]>
  </code>
</client-binding>

<client-binding name='IOR from file' template-tag='CLIENT_BINDING'
		local-tag='ior_from_file'>
  <wizard-requires value='/*FFJ_CORBA_TODO_FILE_NAME*/' title='IOR File Name:'
		   type='file_name'/>
  <import><![CDATA[import java.io.FileReader;
    import java.io.BufferedReader;]]></import>
  <code><![CDATA[// IOR will be read from file
    FileReader file = new java.io.FileReader("/*FFJ_CORBA_TODO_FILE_NAME*/");
    BufferedReader input = new java.io.BufferedReader(file);
    String ior = input.readLine();
    input.close();

    org.omg.CORBA.Object obj = orb.string_to_object (ior);
    if (obj == null)
    throw new RuntimeException ();
    /*FFJ_CORBA_TODO_INTERFACE_NAME*/ srv = /*FFJ_CORBA_TODO_INTERFACE_NAME*/Helper.narrow (obj);
    if (srv == null)
    throw new RuntimeException ();

    // add your client code here]]>
  </code>
</client-binding>

<client-binding name='IOR from standard input' template-tag='CLIENT_BINDING'
		local-tag='ior_from_input'>
  <import><![CDATA[import java.io.InputStreamReader;
    import java.io.BufferedReader;]]></import>
  <code><![CDATA[// IOR will be read from standard input
    InputStreamReader dataIn = new InputStreamReader(System.in);
    BufferedReader input = new BufferedReader(dataIn);
    String ior = input.readLine();

    org.omg.CORBA.Object obj = orb.string_to_object (ior);
    if (obj == null)
    throw new RuntimeException ();
    /*FFJ_CORBA_TODO_INTERFACE_NAME*/ srv = /*FFJ_CORBA_TODO_INTERFACE_NAME*/Helper.narrow (obj);
    if (srv == null)
    throw new RuntimeException ();

    // add your client code here]]>
  </code>
</client-binding>

<impl-generator-settings>

  <implbase-impl-prefix value=''/>
  <implbase-impl-postfix value='Impl'/>
  <ext-class-prefix value=''/>
  <ext-class-postfix value='POA'/>

  <tie-impl-prefix value=''/>
  <tie-impl-postfix value='Impl'/>
  <impl-int-prefix value=''/>
  <impl-int-postfix value='Operations'/>
  
  <value-impl-prefix value=''/>
  <value-impl-postfix value='Impl'/>
  <valuefactory-impl-prefix value=''/>
  <valuefactory-impl-postfix value='ValueFactoryImpl'/>

  <tie-class-prefix value=''/>
  <tie-class-postfix value='POATie'/>
  
</impl-generator-settings>

  <idl-compiler-settings>
    <tie-param value='--tie'/>
    <dir-param value='--directory'/>
    <package-param value='--package'/>
    <compiler value='java -classpath {classpath}{:}{library} org.netbeans.modules.corba.idl.compiler.jdk14.Compiler {cpp_params} {params} {dir_param} {package_root} {package_param} {package} {files}'/>
    <package-delimiter value='.'/>
    <error-expression value='^([^ \n]+) \(line ([0-9]+)\): (.*)'/>
    <file-position value='1'/>
    <line-position value='2'/>
    <column-position value='-1'/>
    <message-position value='3'/>

  </idl-compiler-settings>
	
</orb-settings>


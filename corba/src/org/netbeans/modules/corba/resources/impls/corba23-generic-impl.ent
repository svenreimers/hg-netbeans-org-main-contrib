<?xml version="1.0" encoding='ISO-8859-1'?>

<local-bundle value='org.netbeans.modules.corba.resources.impls.ResourcePointer'/>


<java-template-code>
  
  <patch-code value='/*FFJ_CORBA_TODO_OA_VAR_NAME*/'><![CDATA[poa]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_INTERFACE_NAME*/'><![CDATA[/*interface_name*/]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/'><![CDATA[/*servant_variable*/]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_FILE_NAME*/'><![CDATA[<file_name>]]></patch-code>
  <patch-code value='/*FFJ_CORBA_TODO_CODE_FROM_NS*/'><![CDATA[// paste code retrieved using the Copy Client/Server Code action
    // (on the corresponding node in the Naming Service Browser) here]]></patch-code>
  
  <template-code name='SERVER_IMPORT'><![CDATA[import org.omg.CORBA.ORB;
    import org.omg.CORBA.Policy;
    import org.omg.PortableServer.POA;
    import org.omg.PortableServer.POAHelper;
    import org.omg.PortableServer.IdAssignmentPolicyValue;
    import org.omg.PortableServer.IdUniquenessPolicyValue;
    import org.omg.PortableServer.ImplicitActivationPolicyValue;
    import org.omg.PortableServer.LifespanPolicyValue;
    import org.omg.PortableServer.RequestProcessingPolicyValue;
    import org.omg.PortableServer.ServantRetentionPolicyValue;
    import org.omg.PortableServer.ThreadPolicyValue;
    
    import java.util.Properties;]]></template-code>
  
  
  <template-code name='CLIENT_IMPORT'><![CDATA[import org.omg.CORBA.ORB;
   
    import java.util.Properties;]]></template-code>
  
  <template-code name='ORB_PROPERTIES'><![CDATA[// setting system properties is necessary in order to use this ORB in JDK
    Properties props = System.getProperties ();
    props.put ("org.omg.CORBA.ORBClass", "<enter your ORB class>");
    props.put ("org.omg.CORBA.ORBSingletonClass", "<enter your ORBSingleton class");
    System.setProperties (props);]]>
  </template-code>
  
  <template-code name='HANDLER_INIT_DEF'>
    <![CDATA[private ORB orb;

    public void init (ORB _orb) {
        orb = _orb;
    }]]>
  </template-code>

  <template-code name='HANDLER_INIT'><![CDATA[handler.init(orb);]]></template-code>

  <template-code name='ORB_INIT'><![CDATA[ORB orb = ORB.init (args, props);]]>
  </template-code>

  <template-code name='POA_INIT'><![CDATA[POA poa = POAHelper.narrow (orb.resolve_initial_references ("RootPOA"));//GEN-LINE:poa_section]]>
  </template-code>
  
  <template-code name='SERVANTS_INIT'><![CDATA[// add your creating of object implementation here]]></template-code>
  
  <template-code name='SERVANTS_ACTIVATION'><![CDATA[//GEN-LINE:servant_section]]>
  </template-code>
  
  <template-code name='POA_ACTIVATION'><![CDATA[poa.the_POAManager ().activate ();//GEN-LINE:poa_activate_section]]>
  </template-code>
  
  <template-code name='ORB_SERVER_RUN'><![CDATA[orb.run ();]]></template-code>

</java-template-code>

<!--
<idl-template-code>
  <template-code name='COPYRIGHT'>
    <![CDATA[
//
//
// This code has Sun's (c) Copyright
//
//]]>
  </template-code>
</idl-template-code>
-->

<server-binding name='Naming Service' template-tag='SERVER_BINDING' local-tag='ns-server'> 
  <wizard-requires value='/*FFJ_CORBA_TODO_CODE_FROM_NS*/' title=''
		   type='ns_code'/>
  <import><![CDATA[import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextHelper;
    import org.omg.CosNaming.NameComponent;]]></import>
  <code><![CDATA[// the server will use Naming Service
    org.omg.CORBA.Object ns = orb.resolve_initial_references("NameService");
    if (ns == null)
    throw new RuntimeException ();
    NamingContext nc = NamingContextHelper.narrow(ns);
    if (nc == null)
    throw new RuntimeException ();

    // create and bind Naming Contexts
    /*FFJ_CORBA_TODO_CODE_FROM_NS*/
    NameComponent[] nc1Name = new NameComponent[1];
    NamingContext nc1 = null;
    for (int i=0; i<hierarchy_of_contexts.length / 2; i++) {
    nc1Name[0] = new NameComponent();
    nc1Name[0].id = hierarchy_of_contexts[i*2];
    nc1Name[0].kind = hierarchy_of_contexts[i*2+1];
    try {
    nc1 = nc.bind_new_context (nc1Name);
    nc = nc1;
    } catch (org.omg.CosNaming.NamingContextPackage.AlreadyBound e) {
    org.omg.CORBA.Object o = nc.resolve (nc1Name);
    if (o == null)
    throw new RuntimeException ();
    nc1 = NamingContextHelper.narrow (o);
    if (nc1 == null)
    throw new RuntimeException ();
    nc = nc1;
    }
    }

    // bind names with the Naming Service
    NameComponent[] aName = new NameComponent[1];
    aName[0] = new NameComponent ();
    aName[0].id = name_of_server[0];
    aName[0].kind = name_of_server[1];
    nc.bind(aName, /*FFJ_CORBA_TODO_OA_VAR_NAME*/.servant_to_reference (/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/));]]>
  </code>
</server-binding>

<server-binding name='IOR to file' template-tag='SERVER_BINDING' local-tag='ior_to_file'>
  <wizard-requires value='/*FFJ_CORBA_TODO_FILE_NAME*/' title='IOR File Name:'
		   type='file_name'/>
  <import><![CDATA[import java.io.PrintWriter;
    import java.io.FileWriter;]]></import>
  <code><![CDATA[// IOR will be written to file
    String ior = orb.object_to_string (/*FFJ_CORBA_TODO_OA_VAR_NAME*/.servant_to_reference (/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/));
    FileWriter file = new java.io.FileWriter("/*FFJ_CORBA_TODO_FILE_NAME*/");
    PrintWriter pfile = new java.io.PrintWriter(file);
    pfile.println (ior);
    pfile.flush();
    pfile.close();]]>
  </code>
</server-binding>

<server-binding name='IOR to standard output' template-tag='SERVER_BINDING'
		local-tag='ior_to_output'>
  <code><![CDATA[// IOR will be written to standard output
    System.out.println (orb.object_to_string (/*FFJ_CORBA_TODO_OA_VAR_NAME*/.servant_to_reference (/*FFJ_CORBA_TODO_SERVANT_VAR_NAME*/)));]]>
  </code>
</server-binding>

<client-binding name='Naming Service' template-tag='CLIENT_BINDING' local-tag='ns-client'>
  <wizard-requires value='/*FFJ_CORBA_TODO_CODE_FROM_NS*/' title=''
		   type='ns_code'/>
  <import><![CDATA[import org.omg.CosNaming.NamingContext;
    import org.omg.CosNaming.NamingContextHelper;
    import org.omg.CosNaming.NameComponent;]]></import>
  <code><![CDATA[// the client will use Naming Service
    org.omg.CORBA.Object ns = orb.resolve_initial_references("NameService");
    if (ns == null)
    throw new RuntimeException ();
    NamingContext nc = NamingContextHelper.narrow (ns);
    if (nc == null)
    throw new RuntimeException ();

    // resolve names with the Naming Service
    /*FFJ_CORBA_TODO_CODE_FROM_NS*/
    NameComponent[] aName = new NameComponent[client_name_hierarchy.length / 2];
    for (int i=0; i<(client_name_hierarchy.length / 2); i++) {
    aName[i] = new NameComponent();
    aName[i].id = client_name_hierarchy[i*2];
    aName[i].kind = client_name_hierarchy[i*2+1];
    }
    org.omg.CORBA.Object obj = nc.resolve (aName);
    /*FFJ_CORBA_TODO_INTERFACE_NAME*/ srv = /*FFJ_CORBA_TODO_INTERFACE_NAME*/Helper.narrow (obj);
    if (srv == null)
    throw new RuntimeException ();

    // add your client code here]]>
  </code>
</client-binding>

<client-binding name='IOR from file' template-tag='CLIENT_BINDING'
		local-tag='ior_from_file'>
  <wizard-requires value='/*FFJ_CORBA_TODO_FILE_NAME*/' title='IOR File Name:'
		   type='file_name'/>
  <import><![CDATA[import java.io.FileReader;
    import java.io.BufferedReader;]]></import>
  <code><![CDATA[// IOR will be read from file
    FileReader file = new java.io.FileReader("/*FFJ_CORBA_TODO_FILE_NAME*/");
    BufferedReader input = new java.io.BufferedReader(file);
    String ior = input.readLine();
    input.close();

    org.omg.CORBA.Object obj = orb.string_to_object (ior);
    if (obj == null)
    throw new RuntimeException ();
    /*FFJ_CORBA_TODO_INTERFACE_NAME*/ srv = /*FFJ_CORBA_TODO_INTERFACE_NAME*/Helper.narrow (obj);
    if (srv == null)
    throw new RuntimeException ();

    // add your client code here]]>
  </code>
</client-binding>

<client-binding name='IOR from standard input' template-tag='CLIENT_BINDING'
		local-tag='ior_from_input'>
  <import><![CDATA[import java.io.InputStreamReader;
    import java.io.BufferedReader;]]></import>
  <code><![CDATA[// IOR will be read from standard input
    InputStreamReader dataIn = new InputStreamReader(System.in);
    BufferedReader input = new BufferedReader(dataIn);
    String ior = input.readLine();

    org.omg.CORBA.Object obj = orb.string_to_object (ior);
    if (obj == null)
    throw new RuntimeException ();
    /*FFJ_CORBA_TODO_INTERFACE_NAME*/ srv = /*FFJ_CORBA_TODO_INTERFACE_NAME*/Helper.narrow (obj);
    if (srv == null)
    throw new RuntimeException ();

    // add your client code here]]>
  </code>
</client-binding>

<impl-generator-settings>

  <implbase-impl-prefix value=''/>
  <implbase-impl-postfix value='Impl'/>
  <ext-class-prefix value=''/>
  <ext-class-postfix value='POA'/>

  <tie-impl-prefix value=''/>
  <tie-impl-postfix value='Impl'/>
  <impl-int-prefix value=''/>
  <impl-int-postfix value='Operations'/>
  
  <value-impl-prefix value=''/>
  <value-impl-postfix value='Impl'/>
  <valuefactory-impl-prefix value=''/>
  <valuefactory-impl-postfix value='ValueFactoryImpl'/>

  <tie-class-prefix value=''/>
  <tie-class-postfix value='POATie'/>
  
</impl-generator-settings>

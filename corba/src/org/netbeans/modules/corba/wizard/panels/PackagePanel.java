/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.corba.wizard.panels;

import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.awt.Dimension;
import java.awt.BorderLayout;
import javax.swing.border.EtchedBorder;
import org.openide.TopManager;
import org.openide.nodes.Node;
import org.openide.filesystems.FileObject;
import org.openide.explorer.view.BeanTreeView;
import org.openide.loaders.DataFilter;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataFolder;
import org.netbeans.modules.corba.wizard.CorbaWizardData;

/** 
 *
 * @author  tzezula
 * @version 
 */
public class PackagePanel extends AbstractWizardPanel implements PropertyChangeListener, VetoableChangeListener, DataFilter {
  
  private Node root;

  /** Creates new form PackagePanel */
  public PackagePanel() {
    initComponents ();
    BeanTreeView tv = new BeanTreeView();
    this.tree.setMinimumSize ( new Dimension (400,250));
    this.tree.setPreferredSize ( new Dimension (400,250));
    this.tree.setBorder (new EtchedBorder());
    this.tree.add (tv, BorderLayout.CENTER);
    this.root = TopManager.getDefault().getPlaces().nodes().repository(this);
    this.tree.getExplorerManager().setRootContext (this.root);
    this.tree.getExplorerManager().addPropertyChangeListener (this);
    this.tree.getExplorerManager().addVetoableChangeListener (this);
    this.packageName.setEditable (false);
  }
  
  public void readCorbaSettings (CorbaWizardData data) {
    DataFolder pcg = data.getDestinationPackage();
    if (pcg != null) {
      Node node = pcg.getNodeDelegate();
      if (node != null) {
        try{
          this.tree.getExplorerManager().setSelectedNodes (new Node[]{node});
        }catch (PropertyVetoException ve){}
      }
    }
  }
  
  public void storeCorbaSettings (CorbaWizardData data) {
    Node[] nodes = this.tree.getExplorerManager ().getSelectedNodes ();
    if (nodes == null || nodes.length != 1)
      return;
    DataFolder pcg = (DataFolder) nodes[0].getCookie (DataFolder.class);
    data.setDestinationPackage (pcg);
  }
  
  public void propertyChange (PropertyChangeEvent event) {
    Object newValue = event.getNewValue();
    if (newValue != null && (newValue instanceof Node[])){
      Node[] nodes = (Node[]) newValue;
      if (nodes.length == 1) {
        Node node = nodes[0];
        String selection = node.getName();
        node = node.getParentNode();
        while (node != this.root && node != null){
          selection = node.getName()+"."+selection;
          node = node.getParentNode();
        }
        this.packageName.setText (selection);
      }
    }
  }
  
  public void vetoableChange (PropertyChangeEvent event) throws PropertyVetoException {
    Object newValue = event.getNewValue();
    if (newValue != null && (newValue instanceof Node[])){
      Node[] nodes = (Node[]) newValue;
      if (nodes.length != 1)
        throw new PropertyVetoException ("", event);
    }
  }
  
  
  

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    tree = new org.openide.explorer.ExplorerPanel ();
    jLabel1 = new javax.swing.JLabel ();
    jLabel2 = new javax.swing.JLabel ();
    packageName = new javax.swing.JTextField ();
    jPanel1 = new javax.swing.JPanel ();
    setLayout (new java.awt.GridBagLayout ());
    java.awt.GridBagConstraints gridBagConstraints1;
    setPreferredSize (new java.awt.Dimension(480, 320));
    setMinimumSize (new java.awt.Dimension(480, 320));



    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 1;
    gridBagConstraints1.gridwidth = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets (4, 8, 8, 8);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints1.weightx = 1.0;
    add (tree, gridBagConstraints1);

    jLabel1.setText (java.util.ResourceBundle.getBundle("org/netbeans/modules/corba/wizard/panels/Bundle").getString("TXT_Package"));
    jLabel1.setFont (new java.awt.Font ("Dialog", 0, 18));


    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 0;
    gridBagConstraints1.gridwidth = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets (8, 8, 4, 8);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints1.weightx = 1.0;
    add (jLabel1, gridBagConstraints1);

    jLabel2.setText (java.util.ResourceBundle.getBundle("org/netbeans/modules/corba/wizard/panels/Bundle").getString("TXT_PackageName"));


    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 2;
    gridBagConstraints1.insets = new java.awt.Insets (0, 8, 8, 8);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    add (jLabel2, gridBagConstraints1);



    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridx = 1;
    gridBagConstraints1.gridy = 2;
    gridBagConstraints1.gridwidth = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets (0, 0, 8, 8);
    gridBagConstraints1.weightx = 1.0;
    add (packageName, gridBagConstraints1);



    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridwidth = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 1.0;
    add (jPanel1, gridBagConstraints1);

  }//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private org.openide.explorer.ExplorerPanel tree;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JTextField packageName;
  private javax.swing.JPanel jPanel1;
  // End of variables declaration//GEN-END:variables

  
  /** Should the data object be displayed or not?
   * @param obj the data object
   * @return <CODE>true</CODE> if the object should be displayed,
   *    <CODE>false</CODE> otherwise
   */
  public boolean acceptDataObject (DataObject obj) {
      FileObject fobj = obj.getPrimaryFile();
      if (obj.isValid() && fobj.isFolder())
        return true;
      else
        return false;
  }
}
/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.corba.wizard.nodes.gui;

import javax.swing.event.DocumentListener;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.corba.wizard.nodes.utils.IdlUtilities;
/** 
 *
 * @author  root
 * @version 
 */
public class InterfacePanel extends ExPanel implements DocumentListener, ChangeListener {

    /** Creates new form Interfacepanel */
    public InterfacePanel() {
        initComponents ();
        postInitComponents ();
    }
  
    public String getName () {
        return this.name.getText().trim();
    }
    
    public void setName (String name) {
	this.name.setText (name);
    }
  
    public String getBase () {
        return this.base.getText ().trim();
    }
    
    public void setBase (String base) {
	this.base.setText (base);
    }
    
    public boolean isAbstract () {
        return this.abst.isSelected();
    }
    
    public void setAbstract (boolean abst) {
        this.abst.setSelected (abst);
    }

    private void postInitComponents () {
        this.name.getDocument().addDocumentListener (this);
        this.base.getDocument().addDocumentListener (this);
        this.abst.addChangeListener (this);
        this.jLabel1.setDisplayedMnemonic (this.bundle.getString("TXT_ModuleName_MNE").charAt(0));
        this.jLabel2.setDisplayedMnemonic (this.bundle.getString("TXT_BaseInterfaces_MNE").charAt(0));
        this.abst.setMnemonic (this.bundle.getString("TXT_Abstract_MNE").charAt(0));
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        base = new javax.swing.JTextField();
        abst = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(250, 90));
        jLabel1.setText(bundle.getString("TXT_ModuleName"));
        jLabel1.setLabelFor(name);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 4, 4);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText(bundle.getString("TXT_BaseInterfaces"));
        jLabel2.setLabelFor(base);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 8, 8);
        add(jLabel2, gridBagConstraints);

        name.setToolTipText(bundle.getString("TIP_Name"));
        name.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 4, 8);
        add(name, gridBagConstraints);

        base.setToolTipText(bundle.getString("TIP_BaseInterfaces"));
        base.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 8, 8);
        add(base, gridBagConstraints);

        abst.setToolTipText(bundle.getString("TIP_InterfaceAbstract"));
        abst.setText(bundle.getString("TXT_Abstract"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 8, 8);
        add(abst, gridBagConstraints);

    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox abst;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField base;
    // End of variables declaration//GEN-END:variables

    private static final java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/netbeans/modules/corba/wizard/nodes/gui/Bundle");    

    public void removeUpdate(final javax.swing.event.DocumentEvent p1) {
        checkState ();
    }

    public void changedUpdate(final javax.swing.event.DocumentEvent p1) {
        checkState ();
    }

    public void insertUpdate(final javax.swing.event.DocumentEvent p1) {
        checkState ();
    }
    
    public void stateChanged (final javax.swing.event.ChangeEvent event) {
        checkState();
    }

    private void checkState () {
        if (IdlUtilities.isValidIDLIdentifier(this.name.getText())) {
            enableOk();
        }
        else {
            disableOk();
        }
    }
}

/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.j2ee.blueprints.ui;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.ResourceBundle;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLEditorKit;
import org.netbeans.modules.j2ee.blueprints.catalog.SolutionsCatalog;
import org.netbeans.modules.j2ee.blueprints.catalog.demoxmlparser.Category;
import org.netbeans.modules.j2ee.blueprints.catalog.demoxmlparser.Demo;
import org.netbeans.modules.j2ee.blueprints.catalog.demoxmlparser.Example;
import org.openide.ErrorManager;
import org.openide.awt.HtmlBrowser;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;
import org.openide.filesystems.FileObject;
import org.openide.loaders.DataObject;
import org.openide.filesystems.Repository;
import org.openide.cookies.InstanceCookie;
import javax.swing.Action;


/**
 * Browser for BluePrints Solutions Catalog Entries.
 *
 * The user can browse categories and articles, design documents and
 * launch a wizard to create new projects from a template.
 *
 * @author Mark Roth
 * @author Yutaka Yoshida
 * @author Ludo
 * @author Richard Gregor
 */
public class BluePrintsPanel extends javax.swing.JPanel {
    private static final String UI_RESOURCES_URL = 
        "/org/netbeans/modules/j2ee/blueprints/ui/resources"; // NOI18N
    private static final String ICON_CATEGORY = 
        UI_RESOURCES_URL + "/category.gif"; // NOI18N
    private static final String ICON_ARTICLE = 
        UI_RESOURCES_URL + "/article.gif"; // NOI18N
    private static ResourceBundle bundle = ResourceBundle.getBundle(
        "org/netbeans/modules/j2ee/blueprints/ui/Bundle"); // NOI18N
    private static final String CATALOG_RESOURCES_URL = 
        "/org/netbeans/modules/j2ee/blueprints/catalog/resources"; // NOI18N
    
    private HtmlBrowser.URLDisplayer displayer = HtmlBrowser.URLDisplayer.getDefault();
    private static final String OPEN_SAMPLE_ACTION = 
        "org-netbeans-modules-project-ui-WelcomeScreenHack/" + // NOI18N
        "org-netbeans-modules-project-ui-NewSample.instance";  // NOI18N
    private URL url;
    private SolutionsCatalog solutionsCatalog = SolutionsCatalog.getInstance();
   
    /** Creates new form TitlePanel */
    public BluePrintsPanel() {
        initComponents();
        tabbedPnl.removeAll();
        initComboBox();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        titlePanel = new javax.swing.JPanel();
        sunLogoLbl = new javax.swing.JLabel();
        titleSubPnl = new javax.swing.JPanel();
        titleLbl = new AntialiasedJLabel();
        titleSubLbl = new AntialiasedJLabel();
        toolbarPanel = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();
        forwardBtn = new javax.swing.JButton();
        entryCbx = new javax.swing.JComboBox();
        tabbedPnl = new javax.swing.JTabbedPane();
        categoryScroll = new javax.swing.JScrollPane();
        categoryText = new javax.swing.JTextPane();
        solutionBrowser = new HtmlBrowser(false, false);
        designBrowser = new HtmlBrowser(false, false);
        examplePnl = new javax.swing.JPanel();
        launchExampleText = new javax.swing.JTextPane();
        installBtn = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        titlePanel.setLayout(new java.awt.GridBagLayout());

        titlePanel.setOpaque(false);
        sunLogoLbl.setBackground(new java.awt.Color(89, 79, 191));
        sunLogoLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/j2ee/blueprints/ui/resources/logo_sun.gif")));
        sunLogoLbl.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        titlePanel.add(sunLogoLbl, gridBagConstraints);

        titleSubPnl.setLayout(new java.awt.GridBagLayout());

        titleLbl.setBackground(new java.awt.Color(251, 226, 73));
        titleLbl.setFont(new java.awt.Font("Dialog", 1, 24));
        titleLbl.setForeground(new java.awt.Color(89, 79, 191));
        titleLbl.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("NB_title"));
        titleLbl.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 12, 1, 1)));
        titleLbl.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        titleSubPnl.add(titleLbl, gridBagConstraints);

        titleSubLbl.setBackground(new java.awt.Color(251, 226, 73));
        titleSubLbl.setForeground(new java.awt.Color(89, 79, 191));
        titleSubLbl.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("NB_subtitle"));
        titleSubLbl.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 12, 1, 1)));
        titleSubLbl.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        titleSubPnl.add(titleSubLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        titlePanel.add(titleSubPnl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 7, 12);
        add(titlePanel, gridBagConstraints);

        toolbarPanel.setLayout(new java.awt.GridBagLayout());

        toolbarPanel.setOpaque(false);
        backBtn.setFont(new java.awt.Font("Dialog", 0, 12));
        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/j2ee/blueprints/ui/resources/back.gif")));
        backBtn.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("backBtn"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolbarPanel.add(backBtn, gridBagConstraints);

        forwardBtn.setFont(new java.awt.Font("Dialog", 0, 12));
        forwardBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/j2ee/blueprints/ui/resources/forward.gif")));
        forwardBtn.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("forwardBtn"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        toolbarPanel.add(forwardBtn, gridBagConstraints);

        entryCbx.setFont(new java.awt.Font("Dialog", 0, 12));
        entryCbx.setMaximumRowCount(16);
        entryCbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                entryCbxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        toolbarPanel.add(entryCbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 1, 7);
        add(toolbarPanel, gridBagConstraints);

        tabbedPnl.setFont(new java.awt.Font("Dialog", 0, 12));
        categoryText.setEditable(false);
        categoryText.setEditorKit(new HTMLEditorKit());
        categoryText.setMargin(new java.awt.Insets(12, 12, 12, 12));
        categoryScroll.setViewportView(categoryText);

        tabbedPnl.addTab(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("categoryPnl"), categoryScroll);

        tabbedPnl.addTab(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("solutionPnl"), solutionBrowser);

        tabbedPnl.addTab(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("designPnl"), designBrowser);

        examplePnl.setLayout(new java.awt.GridBagLayout());

        examplePnl.setBackground(new java.awt.Color(255, 255, 255));
        launchExampleText.setEditable(false);
        launchExampleText.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("launchExampleText"));
        launchExampleText.setEnabled(false);
        launchExampleText.setMargin(new java.awt.Insets(12, 12, 12, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        examplePnl.add(launchExampleText, gridBagConstraints);

        installBtn.setFont(new java.awt.Font("Dialog", 0, 12));
        installBtn.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("launchBtn"));
        installBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installBtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        examplePnl.add(installBtn, gridBagConstraints);

        tabbedPnl.addTab(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/blueprints/ui/Bundle").getString("examplePnl"), examplePnl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 12, 12);
        add(tabbedPnl, gridBagConstraints);

    }//GEN-END:initComponents

    private void entryCbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_entryCbxItemStateChanged
        selectNewEntry();
    }//GEN-LAST:event_entryCbxItemStateChanged

    private void installBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installBtnActionPerformed
        installExample();
    }//GEN-LAST:event_installBtnActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JScrollPane categoryScroll;
    private javax.swing.JTextPane categoryText;
    private javax.swing.JPanel designBrowser;
    private javax.swing.JComboBox entryCbx;
    private javax.swing.JPanel examplePnl;
    private javax.swing.JButton forwardBtn;
    private javax.swing.JButton installBtn;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextPane launchExampleText;
    private javax.swing.JPanel solutionBrowser;
    private javax.swing.JLabel sunLogoLbl;
    private javax.swing.JTabbedPane tabbedPnl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel titleSubLbl;
    private javax.swing.JPanel titleSubPnl;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
    
    public Category getSelectedCategory() {
        Object entry = entryCbx.getSelectedItem();
        if(!(entry instanceof Category)) {
            // Scan up the list until we hit a category
            int index = entryCbx.getSelectedIndex();
            do {
                index--;
                entry = entryCbx.getItemAt(index);
            } while((index > 0) && !(entry instanceof Category));
        }
        return (Category)entry;
    }
    
    public Example getSelectedArticle() {
        Object entry = entryCbx.getSelectedItem();
        return (entry instanceof Example) ? (Example)entry : null;
    }
    
    private void initComboBox() {
        // Set up combo boxes:
        entryCbx.setRenderer(new EntryListCellRenderer());
        entryCbx.setModel(new EntryComboBoxModel());
        entryCbx.setSelectedIndex(0);
        updateTabs();
    }
    
    private void selectNewEntry() {
        updateTabs();
    }
    
    private void updateTabs() {
        Category category = getSelectedCategory();
        Example example = getSelectedArticle();

        // Ensure the category panel is visible when no example is selected
        // and the other panels are visible when an example is selected.
        if(example == null) {
            tabbedPnl.removeAll();
            tabbedPnl.addTab(bundle.getString("categoryPnl"), // NOI18N
                categoryScroll); 
        }
        else {
            tabbedPnl.removeAll();
            tabbedPnl.addTab(bundle.getString("solutionPnl"), // NOI18N
                solutionBrowser); 
            tabbedPnl.addTab(bundle.getString("designPnl"),   // NOI18N
                designBrowser);
            tabbedPnl.addTab(bundle.getString("examplePnl"),  // NOI18N
                examplePnl);   
        }
        
        updateCategoryTab();
        updateSolutionTab();
        updateDesignTab();
        updateExamplesTab();
    }
    
    private void updateCategoryTab() {
        Category category = getSelectedCategory();
        Example example = getSelectedArticle();
        if(example == null) {
            categoryText.setText(
                "<h1><font face=\"Dialog\">" + category.getName(0) // NOI18N
                + "</font></h1>" + "<font face=\"Dialog\">"        // NOI18N
                + category.getDescription(0) + "</font>"           // NOI18N
            );
        }
    }
    
    private void updateSolutionTab() {
        Category category = getSelectedCategory();
        Example example = getSelectedArticle();
        if(example != null) {
            String articleURLString = CATALOG_RESOURCES_URL 
                + "/web/" + example.getDoc(0); // NOI18N
            URL articleURL = getClass().getResource(articleURLString);
            ((HtmlBrowser)solutionBrowser).setURL(articleURL);
        }
    }
    
    private void updateDesignTab() {
        Category category = getSelectedCategory();
        Example example = getSelectedArticle();
        if(example != null) {
            if(example.getDesigndoc().length == 0) {
                tabbedPnl.remove(designBrowser);
            }
            else {
                String designURLString = CATALOG_RESOURCES_URL
                    + "/web/" + example.getDesigndoc(0); // NOI18N
                URL designURL = getClass().getResource(designURLString);
                ((HtmlBrowser)designBrowser).setURL(designURL);
            }
        }
    }
    
    private void updateExamplesTab() {
        Category category = getSelectedCategory();
        Example example = getSelectedArticle();
        String examplePath = getExamplePath();
        if(example != null) {
            if(examplePath == null) {
                tabbedPnl.remove(examplePnl);
            }
        }
    }
    
    private void installExample() {
        String path = getExamplePath();
        performAction(OPEN_SAMPLE_ACTION, path);
    }
    
    private String getExamplePath() {
        String result = null;
        Example example = getSelectedArticle();
        if(example != null) {
            // Guess the name of the zip from the <path> element
            // (not always accurate, but this is the best we can do)
            String[] paths = example.getPath();
            if(paths.length > 0) {
                result = paths[0];
                if(result.indexOf('.') != -1) {
                    // there's a filename in the path. Strip it.
                    result = result.substring(0, result.lastIndexOf('/'));
                }
                if(result.indexOf('/') != -1) {
                    // Strip all slashes before the example path
                    result = result.substring(result.lastIndexOf('/') + 1);
                }
            }
        }
        return result;
    }
    
    private void showURL(String s) {
        URL url;
        try {
            url = new URL(NbBundle.getMessage(getClass(),s));
            displayer.showURL(url);
        } catch (java.net.MalformedURLException ex) {
            ErrorManager.getDefault().notify(ex);
        }
    }
    
    private Action findAction (String key) {
        FileObject fo = 
            Repository.getDefault().getDefaultFileSystem().findResource(key);
        
        if (fo != null && fo.isValid()) {
            try {
                DataObject dob = DataObject.find (fo);
                InstanceCookie ic = 
                    (InstanceCookie) dob.getCookie(InstanceCookie.class);
                
                if (ic != null) {
                    Object instance = ic.instanceCreate();
                    if (instance instanceof Action) {
                        return (Action) instance;
                    }
                }
            } catch (Exception e) {
                ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
                return null;
            }
        }
        return null;
    }
    
    private boolean performAction(String key, String command) {
        Action a = findAction (key);
        if (a == null) {
            return false;
        }
        ActionEvent ae = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, 
            command);
        try {
            a.actionPerformed(ae);
            return true;
        } catch (Exception e) {
            ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            return false;
        }
    }
    
    /**
     * Backing model for the entry drop-down.
     * Gets its data from demo.xml.
     */
    private class EntryComboBoxModel
        extends DefaultComboBoxModel
    {
        private Demo demo;
        private ArrayList entries = new ArrayList();
        
        public EntryComboBoxModel() {
            this.demo = solutionsCatalog.getDemoXml();
            Category[] categories = demo.getCategory();
            for(int categoryNum = 0; categoryNum < categories.length; 
                categoryNum++) 
            {
                entries.add(categories[categoryNum]);
                Example[] examples = categories[categoryNum].getExample();
                for(int exampleNum = 0; exampleNum < examples.length; 
                    exampleNum++) 
                {
                    entries.add(examples[exampleNum]);
                }
            }
        }
        
        public int getSize() {
            return entries.size();
        }
        
        public Object getElementAt(int index) {
            return entries.get(index);
        }
    }
    
    /**
     * Cell renderer for the entry drop-down
     *
     * Adds an icon and changes the text of the cell to match the name of
     * the category or article.
     */
    private static class EntryListCellRenderer 
        extends DefaultListCellRenderer
    {
        private ImageIcon categoryIcon;
        private ImageIcon articleIcon;

        public EntryListCellRenderer() {
            this.categoryIcon = new ImageIcon(getClass().getResource(
                ICON_CATEGORY));
            this.articleIcon = new ImageIcon(getClass().getResource(
                ICON_ARTICLE));
        }

        public Component getListCellRendererComponent(JList list,
            Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            Component result = super.getListCellRendererComponent(list, value,
                index, isSelected, cellHasFocus);
            JLabel label = (JLabel)result;
            if(value instanceof Category) {
                Category category = (Category)value;
                label.setIcon(categoryIcon);
                label.setText(category.getName(0));
            }
            else if(value instanceof Example) {
                Example example = (Example)value;
                label.setIcon(articleIcon);
                label.setText(example.getName(0));
                // Tab the articles so they look like they're in the category
                label.setBorder(new EmptyBorder(0, 19, 0, 0));
            }
            return result;
        }
    }
}



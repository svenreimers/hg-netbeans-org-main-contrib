/*
 * FormConfigPanel.java
 *
 * Created on August 29, 2008, 1:09 PM
 */
package org.netbeans.modules.portalpack.portlets.spring.handlers.form;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.PortletContext;
import org.netbeans.modules.portalpack.portlets.spring.api.ConfigPanel;
import org.openide.WizardDescriptor;
import org.openide.windows.WindowManager;

/**
 *
 * @author  satyaranjan
 */
public class FormConfigPanel extends ConfigPanel implements ItemListener {

    private DataType[] types = TypesHelper.getDefaultDataTypes();
    private String[] componentTypes = TypesHelper.getDefaultComponentTypes();

    /** Creates new form FormConfigPanel */
    public FormConfigPanel() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        uploadTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputParamTableModel = new InputParamTableModel();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        successPage = new javax.swing.JTextField();
        changeButton = new javax.swing.JButton();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.jLabel1.text")); // NOI18N

        uploadTf.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.uploadTf.text_1")); // NOI18N
        uploadTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadTfActionPerformed(evt);
            }
        });

        jTable1.setModel(inputParamTableModel);
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.jLabel2.text")); // NOI18N

        addButton.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        removeButton.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                removeButtonAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.jLabel3.text")); // NOI18N

        successPage.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.successPage.text")); // NOI18N

        changeButton.setText(org.openide.util.NbBundle.getMessage(FormConfigPanel.class, "FormConfigPanel.changeButton.text")); // NOI18N
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                        .add(24, 24, 24))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                        .add(25, 25, 25)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(uploadTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, successPage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                                .add(92, 92, 92)))
                        .add(91, 91, 91))
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 462, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .add(changeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(removeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(uploadTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel3)
                    .add(successPage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21)
                .add(jLabel2)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(changeButton))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
// TODO add your handling code here:
   // inputParamTableModel.addRow();
    FormParamInputGUI fpGUI = 
            new FormParamInputGUI(WindowManager.getDefault().getMainWindow(),jTable1,inputParamTableModel);
    
//inputParamTableModel.fireTableDataChanged();
}//GEN-LAST:event_addButtonActionPerformed

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
// TODO add your handling code here:
    int selectedRow = jTable1.getSelectedRow();
    inputParamTableModel.deleteRow(selectedRow);
    inputParamTableModel.fireTableRowsDeleted(selectedRow, selectedRow);
}//GEN-LAST:event_removeButtonActionPerformed

private void removeButtonAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_removeButtonAncestorMoved

    // TODO add your handling code here:
}//GEN-LAST:event_removeButtonAncestorMoved

private void uploadTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadTfActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_uploadTfActionPerformed

private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
// TODO add your handling code here:
    int selectedRow = jTable1.getSelectedRow();
    if(selectedRow == -1)
        return;
    
    InputParam ip = inputParamTableModel.getRowValue(selectedRow);
    if(ip == null) return;
     FormParamInputGUI fpGUI =//GEN-LAST:event_changeButtonActionPerformed
            new FormParamInputGUI(WindowManager.getDefault().getMainWindow(),jTable1,inputParamTableModel,ip,selectedRow);
   
}                                            

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField successPage;
    private javax.swing.JTextField uploadTf;
    // End of variables declaration//GEN-END:variables
    private InputParamTableModel inputParamTableModel;

    @Override
    public void read(WizardDescriptor wizardDescriptor) {
        PortletContext pc = (PortletContext) wizardDescriptor.getProperty("context");
        if (pc != null) {
            String portlet = pc.getPortletName();
            uploadTf.setText(portlet + "CmdBean");
            
            String sPage = successPage.getText();
            if(sPage == null || sPage.trim().length() == 0) {
                sPage = (portlet + "_success.jsp");
                successPage.setText(sPage);
            }
        }
    //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void store(WizardDescriptor wizardDescriptor) {
        /// throw new UnsupportedOperationException("Not supported yet.");
        wizardDescriptor.putProperty("command_class", uploadTf.getText().trim());
        
        String sp = successPage.getText().trim();
        if(sp != null && sp.trim().length() != 0 && !sp.endsWith(".jsp") && !sp.endsWith(".JSP"))
            sp += ".jsp";
        wizardDescriptor.putProperty("success_page",sp);
        List<InputParam> inputParams = inputParamTableModel.getInitParams();
        wizardDescriptor.putProperty("input_params", inputParams);
    }

    @Override
    public boolean validate(Object wizardDescriptor) {
        return true;
    }

    @Override
    public String getDescription() {
        return "Form Submission Panel";
    //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void itemStateChanged(ItemEvent e) {
        
        Object obj = e.getSource();
        if(!(obj instanceof MyComboBoxRenderer))
            return;
        
        MyComboBoxRenderer mc = (MyComboBoxRenderer)obj;
        DataType type = (DataType) mc.getSelectedItem();
        
        if(type.equals(TypesHelper.FILE_TYPE)) {
            int row = mc.getRow();
            int col = mc.getColumn();
            inputParamTableModel.setValueAt("text", row, InputParamTableModel.COMP_TYPE_COL);
            MyComboBoxRenderer mc1 = (MyComboBoxRenderer) jTable1.getCellRenderer(row, InputParamTableModel.COMP_TYPE_COL);
            mc1.setEnabled(false);
            mc1.setEditable(false);
        } else {
            int row = mc.getRow();
            MyComboBoxRenderer mc1 = (MyComboBoxRenderer) jTable1.getCellRenderer(row, InputParamTableModel.COMP_TYPE_COL);
            mc1.setEnabled(true);
            mc1.setEditable(true);
        }
    }

    public class MyComboBoxRenderer extends JComboBox implements TableCellRenderer {

        private int row;
        private int col;

        public MyComboBoxRenderer(DataType[] items) {
            super(items);
          //  addItemListener(FormConfigPanel.this);
        }

        public MyComboBoxRenderer(String[] items) {
            super(items);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                super.setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }

            this.row = row;
            this.col = column;

            // Select the current value
            setSelectedItem(value);
            return this;
        }
        
        public int getRow() {
            return row;
        }
        
        public int getColumn() {
            return col;
        }
    }

    public class MyComboBoxEditor extends DefaultCellEditor {

        public MyComboBoxEditor(DataType[] items) {
            super(new JComboBox(items));
        }

        public MyComboBoxEditor(String[] items) {
            super(new JComboBox(items));
        }
    }
}

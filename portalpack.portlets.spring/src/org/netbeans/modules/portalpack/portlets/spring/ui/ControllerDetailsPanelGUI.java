/*
 * ControllerDetailsPanelGUI.java
 *
 * Created on August 29, 2008, 10:29 PM
 */
package org.netbeans.modules.portalpack.portlets.spring.ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.PortletContext;
import org.netbeans.modules.portalpack.portlets.spring.api.ConfigPanel;
import org.netbeans.modules.portalpack.portlets.spring.api.ControllerType;
import org.netbeans.modules.portalpack.portlets.spring.api.ControllerTypeFactory;
import org.openide.WizardDescriptor;

/**
 *
 * @author  satyaranjan
 */
public class ControllerDetailsPanelGUI extends javax.swing.JPanel implements DocumentListener, ChangeListener {

    private final List/*<ChangeListener>*/ listeners = new ArrayList();
    private Map bottomPanels;

    /** Creates new form ControllerDetailsPanelGUI */
    public ControllerDetailsPanelGUI() {
        initComponents();
        bottomPanels = new HashMap();
        initData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        controllerTypeCB = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        cardPanel = new javax.swing.JPanel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ControllerDetailsPanelGUI.class, "ControllerDetailsPanelGUI.jLabel1.text")); // NOI18N

        controllerTypeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                controllerTypeCBItemStateChanged(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ControllerDetailsPanelGUI.class, "LBL_ADD_CONFIG"))); // NOI18N

        cardPanel.setLayout(new java.awt.CardLayout());
        jScrollPane1.setViewportView(cardPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(64, 64, 64)
                        .add(controllerTypeCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(211, 211, 211)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(controllerTypeCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void initData() {

        ControllerType abController = new ControllerType(ControllerType.ABSTRACT_CONTROLLER);
        ControllerType uploadController = new ControllerType(ControllerType.SIMPLE_FORM_CONTROLLER);


        controllerTypeCB.addItem(abController);
        controllerTypeCB.addItem(uploadController);

        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();

        ConfigPanel abPanel = ControllerTypeFactory.getControllerTypeHandler(abController).getConfigPanel();
        ConfigPanel uploadPanel = ControllerTypeFactory.getControllerTypeHandler(uploadController).getConfigPanel();

        abPanel.addChangeListener(this);
        uploadPanel.addChangeListener(this);

        cardPanel.add(abPanel, abController.getType());
        cardPanel.add(uploadPanel, uploadController.getType());

        bottomPanels.put(abController.getType(), abPanel);
        bottomPanels.put(uploadController.getType(), uploadPanel);

        cardLayout.show(cardPanel, abController.getType());
    }
private void controllerTypeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_controllerTypeCBItemStateChanged
// TODO add your handling code here:

    ControllerType controllerType = (ControllerType) controllerTypeCB.getSelectedItem();
    CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
    cardLayout.show(cardPanel, controllerType.getType());

    fireChange();
}//GEN-LAST:event_controllerTypeCBItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cardPanel;
    private javax.swing.JComboBox controllerTypeCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public boolean valid(WizardDescriptor wizardDescriptor) {
        return true;
    }

    public void readSettings(WizardDescriptor wizardDescriptor) {

        for (int i = 0; i < controllerTypeCB.getItemCount(); i++) {

            ControllerType selectedController =
                    (ControllerType) controllerTypeCB.getItemAt(i);

            ConfigPanel configPanel = (ConfigPanel) bottomPanels.get(selectedController.getType());

            if (configPanel != null) {
                configPanel.read(wizardDescriptor);
            }
        }


    }

    public void store(WizardDescriptor wizardDescriptor) {

        wizardDescriptor.putProperty("controller-type", controllerTypeCB.getSelectedItem());

        ControllerType selectedController =
                (ControllerType) controllerTypeCB.getSelectedItem();

        ConfigPanel configPanel = (ConfigPanel) bottomPanels.get(selectedController.getType());

        if (configPanel != null) {
            configPanel.store(wizardDescriptor);
        }
    }


    // Implementation of DocumentListener --------------------------------------
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {

        Document doc = e.getDocument();
        fireChange();

    }

    public synchronized void addChangeListener(ChangeListener l) {
        listeners.add(l);
    }

    public synchronized void removeChangeListener(ChangeListener l) {
        listeners.remove(l);
    }

    private void fireChange() {
        ChangeEvent e = new ChangeEvent(this);
        List templist;
        synchronized (this) {
            templist = new ArrayList(listeners);
        }
        Iterator it = templist.iterator();
        while (it.hasNext()) {
            ((ChangeListener) it.next()).stateChanged(e);
        }
    }

    public void stateChanged(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}

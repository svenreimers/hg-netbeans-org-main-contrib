/*
 * SpringDetailsPanelGUI.java
 *
 * Created on August 19, 2008, 6:12 PM
 */
package org.netbeans.modules.portalpack.portlets.spring.ui;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.project.SourceGroup;
import org.netbeans.api.project.Sources;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.PortletContext;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.actions.util.PortletProjectUtils;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.util.CoreUtil;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

/**
 *
 * @author  satyaranjan
 * @author  chetan
 */
public class SpringDetailsPanelGUI extends javax.swing.JPanel implements DocumentListener, ChangeListener {

    private final List/*<ChangeListener>*/ listeners = new ArrayList();
    private boolean isView;
    private boolean isEdit;
    private boolean isHelp;
    private Project project;
    private SourceGroup[] folders;

    /** Creates new form SpringDetailsPanelGUI */
    public SpringDetailsPanelGUI(Project project) {
        initComponents();
        initData();
        this.project = project;
        
        configFileTf.getDocument().addDocumentListener(this);
        configFolderTextField.getDocument().addDocumentListener(this);
        viewJspTf.getDocument().addDocumentListener(this);
        editJspTf.getDocument().addDocumentListener(this);
        helpJspTf.getDocument().addDocumentListener(this);
        Sources sources = ProjectUtils.getSources(project);
        
        folders = sources.getSourceGroups(Sources.TYPE_GENERIC);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configLabel = new javax.swing.JLabel();
        configFileTf = new javax.swing.JTextField();
        lblView = new javax.swing.JLabel();
        lblEdit = new javax.swing.JLabel();
        lblHelp = new javax.swing.JLabel();
        viewJspTf = new javax.swing.JTextField();
        editJspTf = new javax.swing.JTextField();
        helpJspTf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        configFolderTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jspFolderLabel = new javax.swing.JLabel();
        jspFolderTf = new javax.swing.JTextField();
        jspFolderBrowse = new javax.swing.JButton();

        configLabel.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.configLabel.text")); // NOI18N

        configFileTf.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.configFileTf.text")); // NOI18N
        configFileTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configFileTfActionPerformed(evt);
            }
        });

        lblView.setText(org.openide.util.NbBundle.getBundle(SpringDetailsPanelGUI.class).getString("SpringDetailsPanelGUI.lblView.text")); // NOI18N

        lblEdit.setText(org.openide.util.NbBundle.getBundle(SpringDetailsPanelGUI.class).getString("SpringDetailsPanelGUI.lblEdit.text")); // NOI18N

        lblHelp.setText(org.openide.util.NbBundle.getBundle(SpringDetailsPanelGUI.class).getString("SpringDetailsPanelGUI.lblHelp.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.jLabel2.text")); // NOI18N

        configFolderTextField.setEditable(false);

        browseButton.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.browseButton.text")); // NOI18N
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jspFolderLabel.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.jspFolderLabel.text")); // NOI18N

        jspFolderTf.setEditable(false);
        jspFolderTf.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.jspFolderTf.text")); // NOI18N

        jspFolderBrowse.setText(org.openide.util.NbBundle.getMessage(SpringDetailsPanelGUI.class, "SpringDetailsPanelGUI.jspFolderBrowse.text")); // NOI18N
        jspFolderBrowse.setEnabled(false);
        jspFolderBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jspFolderBrowseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(lblEdit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                .add(27, 27, 27))
                            .add(layout.createSequentialGroup()
                                .add(lblView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                .add(23, 23, 23))
                            .add(layout.createSequentialGroup()
                                .add(lblHelp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                .add(24, 24, 24)))
                        .add(30, 30, 30))
                    .add(layout.createSequentialGroup()
                        .add(jspFolderLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(configLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                .add(14, 14, 14)))
                        .add(30, 30, 30)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(helpJspTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                            .add(editJspTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                            .add(viewJspTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                            .add(jspFolderTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                        .add(9, 9, 9))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, configFolderTextField)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, configFileTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jspFolderBrowse, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .add(browseButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                .add(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(configLabel)
                    .add(configFileTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jLabel2))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(browseButton)
                            .add(configFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jspFolderTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jspFolderLabel)
                    .add(jspFolderBrowse))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblView)
                    .add(viewJspTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(9, 9, 9)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblEdit)
                    .add(editJspTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblHelp)
                    .add(helpJspTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void configFileTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configFileTfActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_configFileTfActionPerformed

private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
// TODO add your handling code here:
    //File selectedFolder = new File(pro)
    //JFileChooser chooser = new JFileChooser(currentDirectory);

    //SourceGroup group = (SourceGroup)locationComboBox.getSelectedItem();

    FileObject fo = BrowseFolders.showDialog(folders,
            project,
            "WEB-INF".replace(File.separatorChar, '/')); // NOI18N

    if (fo != null && fo.isFolder()) {
        //TODO handle during multiple source folder
        String relPath = FileUtil.getRelativePath(folders[0].getRootFolder(), fo);
        configFolderTextField.setText(relPath.replace('/', File.separatorChar)); // NOI18N

    }
}//GEN-LAST:event_browseButtonActionPerformed

private void jspFolderBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jspFolderBrowseActionPerformed
// TODO add your handling code here:
    FileObject fo = BrowseFolders.showDialog(folders,
            project,
            "WEB-INF/jsp".replace(File.separatorChar, '/')); // NOI18N

    if (fo != null && fo.isFolder()) {
        //TODO handle during multiple source folder
        String relPath = FileUtil.getRelativePath(folders[0].getRootFolder(), fo);
        jspFolderTf.setText(relPath.replace('/', File.separatorChar)); // NOI18N

    }
}//GEN-LAST:event_jspFolderBrowseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField configFileTf;
    private javax.swing.JTextField configFolderTextField;
    private javax.swing.JLabel configLabel;
    private javax.swing.JTextField editJspTf;
    private javax.swing.JTextField helpJspTf;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jspFolderBrowse;
    private javax.swing.JLabel jspFolderLabel;
    private javax.swing.JTextField jspFolderTf;
    private javax.swing.JLabel lblEdit;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblView;
    private javax.swing.JTextField viewJspTf;
    // End of variables declaration//GEN-END:variables

    public void initData() {
        configFolderTextField.setText("web" + File.separator + "WEB-INF");
        jspFolderTf.setText("web" + File.separator + "WEB-INF" + File.separator + "jsp");
        enableTextComponents(false);
    }

    private void enableTextComponents(boolean enable) {

        viewJspTf.setEnabled(enable && isView);
        editJspTf.setEnabled(enable && isEdit);
        helpJspTf.setEnabled(enable && isHelp);

        viewJspTf.setEditable(enable && isView);
        editJspTf.setEditable(enable && isEdit);
        helpJspTf.setEditable(enable && isHelp);
    }

    public boolean valid(WizardDescriptor wizardDescriptor) {
        String configFileName = configFileTf.getText();
        String viewJspFileName = viewJspTf.getText();
        String editJspFileName = editJspTf.getText();
        String helpJspFileName = helpJspTf.getText();
        String canUseConfigFileName = CoreUtil.canUseFileName(PortletProjectUtils.getWebInf(project), getFileName(configFileName), FileUtil.getExtension(configFileName));
        String canUseViewJSPFileName = CoreUtil.canUseFileName(PortletProjectUtils.getWebModule(project).getWebInf().getFileObject("/jsp"), getFileName(viewJspFileName), FileUtil.getExtension(viewJspFileName));
        String canUseEditJSPFileName = CoreUtil.canUseFileName(PortletProjectUtils.getWebModule(project).getWebInf().getFileObject("/jsp"), getFileName(editJspFileName), FileUtil.getExtension(editJspFileName));
        String canUseHelpJSPFileName = CoreUtil.canUseFileName(PortletProjectUtils.getWebModule(project).getWebInf().getFileObject("/jsp"), getFileName(helpJspFileName), FileUtil.getExtension(helpJspFileName));
        
        // Validating Config file name
        if ((configFileName == null || configFileName.trim().length() == 0) 
                || (!checkFileName(configFileName))) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_CONFIG_FILE_NAME"));
            return false;
        } else if (!configFileName.endsWith("xml") && !configFileName.endsWith("XML")) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_XML_FILE_NAME"));
            return false;
        } else if (canUseConfigFileName != null) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", canUseConfigFileName);
            return false;
        } else
        if (isView && (viewJspFileName == null || viewJspFileName.trim().length() == 0 || !checkFileName(viewJspFileName))) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_VIEW_JSP_NAME"));
            return false;
        } else if (isView && !(viewJspFileName.endsWith("jsp") || viewJspFileName.endsWith("JSP"))) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_JSP_FILE_NAME"));
            return false;
        } else if (isView && canUseViewJSPFileName != null) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", canUseViewJSPFileName);
            return false;
        } else
        if (isEdit && (editJspFileName == null || editJspFileName.trim().length() == 0 || !checkFileName(editJspFileName)) ) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_EDIT_JSP_NAME"));
            return false;
        } else if (isEdit && !(editJspFileName.endsWith("jsp") || editJspFileName.endsWith("JSP"))) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_JSP_FILE_NAME"));
            return false;
        } else if (isEdit && canUseEditJSPFileName != null) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", canUseEditJSPFileName);
            return false;
        } else 
        if (isHelp && (helpJspFileName == null || helpJspFileName.trim().length() == 0 || !checkFileName(helpJspFileName)) ) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_HELP_JSP_NAME"));
            return false;
        } else if (isHelp && !(helpJspFileName.endsWith("jsp") || helpJspFileName.endsWith("JSP"))) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", NbBundle.getMessage(SpringDetailsPanelGUI.class, "INVALID_JSP_FILE_NAME"));
            return false;
        } else if (isHelp && canUseHelpJSPFileName != null) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", canUseHelpJSPFileName);
            return false;
        }
        
        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    public void readSettings(WizardDescriptor wizardDescriptor) {
        // enableTextComponents(false);
        PortletContext context = (PortletContext) (wizardDescriptor.getProperty("context"));
        if (context != null) {

            if (context.isViewMode()) {
                viewJspTf.setText(context.getViewJsp());
                isView = true;
                enableTextField(viewJspTf, isView);

            } else {
                isView = false;
                enableTextField(viewJspTf, false);
            }
            if (context.isEditMode()) {
                editJspTf.setText(context.getEditJsp());
                isEdit = true;
                enableTextField(editJspTf, isEdit);
            } else {
                isEdit = false;
                enableTextField(editJspTf, false);
            }
            if (context.isHelpMode()) {
                helpJspTf.setText(context.getHelpJsp());
                isHelp = true;
                enableTextField(helpJspTf, isHelp);

            } else {
                isHelp = false;
                enableTextField(helpJspTf, false);
            }
            
            //String portletName = context.getPortletName();
            String configFileName = configFileTf.getText();
            if(configFileName == null || configFileName.trim().length() == 0)
                configFileTf.setText(context.getPortletName()+"-portlet.xml");
        }
                
    }

    private void enableTextField(JTextField jt, boolean enable) {
        jt.setEditable(enable);
        jt.setEnabled(enable);
    }

    public void store(WizardDescriptor wizardDescriptor) {
        PortletContext context = (PortletContext) (wizardDescriptor.getProperty("context"));
        if (context == null) {
            context = new PortletContext();
        }
        context.setViewJsp(viewJspTf.getText().trim());
        context.setEditJsp(editJspTf.getText().trim());
        context.setHelpJsp(helpJspTf.getText().trim());
        
        wizardDescriptor.putProperty("context", context);
        wizardDescriptor.putProperty("jsp-folder", jspFolderTf.getText());
        wizardDescriptor.putProperty("config-folder", configFolderTextField.getText());
        
        String configFile = configFileTf.getText();
        if(configFile.endsWith(".xml")) {
            int index = configFile.indexOf(".xml");
            configFile = configFile.substring(0,index);
        }
            
        wizardDescriptor.putProperty("context-file", configFile);
        
    }


    // Implementation of DocumentListener --------------------------------------
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {

        Document doc = e.getDocument();
        fireChange();

    }

    public synchronized void addChangeListener(ChangeListener l) {
        listeners.add(l);
    }

    public synchronized void removeChangeListener(ChangeListener l) {
        listeners.remove(l);
    }

    private void fireChange() {
        ChangeEvent e = new ChangeEvent(this);
        List templist;
        synchronized (this) {
            templist = new ArrayList(listeners);
        }
        Iterator it = templist.iterator();
        while (it.hasNext()) {
            ((ChangeListener) it.next()).stateChanged(e);
        }
    }

    public void stateChanged(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    private static boolean checkFileName(String str) {
        char c[] = str.toCharArray();
        for (int i=0;i<c.length;i++) {
            if (c[i]=='\\') return false;
            if (c[i]=='/') return false;
            if (c[i]==':') return false;
            if (c[i]=='*') return false;
            if (c[i]=='?') return false;
            if (c[i]=='"') return false;
            if (c[i]=='<') return false;
            if (c[i]=='>') return false;
            if (c[i]=='|') return false;
            
        }
        return true;
    }
    
    private static String getFileName(String file) {
        int dotIndex = file.lastIndexOf(".");
        if (dotIndex != -1) {
            return file.substring(0, file.lastIndexOf("."));
        }
        else {
            return "";
        } 
    }

}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.java.tools.nbjad;

import javax.swing.JTextField;

/**
 *
 * @author Sandip V. Chitale (Sandip.Chitale@Sun.Com)
 */
final class NbjadPanel extends javax.swing.JPanel {
    
    private final NbjadOptionsPanelController controller;
    
    NbjadPanel(NbjadOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    public JTextField getJadLocationTextField() {
        return jadLocationTextField;
    }   

    public JTextField getJadOptionsTextField() {
        return jadOptionsTextField;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jadLocationLabel = new javax.swing.JLabel();
        jadLocationTextField = new javax.swing.JTextField();
        jadOptionsLabel = new javax.swing.JLabel();
        jadOptionsTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        setBackground(java.awt.Color.white);
        org.openide.awt.Mnemonics.setLocalizedText(jadLocationLabel, "Location of Jad executable:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jadLocationLabel, gridBagConstraints);

        jadLocationTextField.setToolTipText("Specify the location of Jad executable.");
        jadLocationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jadLocationTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jadLocationTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jadOptionsLabel, "Options:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        add(jadOptionsLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jadOptionsTextField, gridBagConstraints);

        jTextArea1.setColumns(80);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 13));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(8);
        jTextArea1.setText("Available Options:\n         -a           - generate JVM instructions as comments (annotate)\n         -af          - output fully qualified names when annotating\n         -b           - generate redundant braces (braces)\n         -clear       - clear all prefixes, including the default ones\n         -dead        - try to decompile dead parts of code (if there are any)\n         -dis         - disassembler only (disassembler)\n         -f           - generate fully qualified names (fullnames)\n         -ff          - output fields before methods (fieldsfirst)\n         -i           - print default initializers for fields (definits)\n         -l<num>      - split strings into pieces of max <num> chars (splitstr)\n         -lnc         - output original line numbers as comments (lnc)\n         -lradix<num> - display long integers using the specified radix\n         -nl          - split strings on newline characters (splitstr)\n         -noconv      - don't convert Java identifiers into valid ones (noconv)\n         -nocast      - don't generate auxiliary casts\n         -noclass     - don't convert .class operators\n         -nocode      - don't generate the source code for methods\n         -noctor      - suppress the empty constructors\n         -nodos       - turn off check for class files written in DOS mode\n         -nofd        - don't disambiguate fields with the same names (nofldis)\n         -noinner     - turn off the support of inner classes\n         -nolvt       - ignore Local Variable Table entries (nolvt)\n         -nonlb       - don't insert a newline before opening brace (nonlb)\n         -pa <pfx>    - prefix for all packages in generated source files\n         -pc <pfx>    - prefix for classes with numerical names (default: _cls)\n         -pe <pfx>    - prefix for unused exception names (default: _ex)\n         -pf <pfx>    - prefix for fields with numerical names (default: _fld)\n         -pi<num>     - pack imports into one line using .* (packimports)\n         -pl <pfx>    - prefix for locals with numerical names (default: _lcl)\n         -pm <pfx>    - prefix for methods with numerical names (default: _mth)\n         -pp <pfx>    - prefix for method parms with numerical names (default:_prm)\n         -pv<num>     - pack fields with the same types into one line (packfields)\n         -radix<num>  - display integers using the specified radix (8, 10, or 16)\n         -safe        - generate additional casts to disambiguate methods/fields\n         -space       - output space between keyword (if, while, etc) and expression\n         -stat        - show the total number of processed classes/methods/fields\n         -t<num>      - use <num> spaces for indentation (default: 4)\n         -t           - use tabs instead of spaces for indentation\n         -8           - convert Unicode strings into ANSI strings (ansi)");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jScrollPane1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jadLocationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jadLocationTextFieldActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jadLocationTextFieldActionPerformed
    
    void load() {
        // TODO read settings and initialize GUI
        // Example:
        // someCheckBox.setSelected(Preferences.userNodeForPackage(NbjadPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }
    
    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(NbjadPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }
    
    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel jadLocationLabel;
    private javax.swing.JTextField jadLocationTextField;
    private javax.swing.JLabel jadOptionsLabel;
    private javax.swing.JTextField jadOptionsTextField;
    // End of variables declaration//GEN-END:variables
    
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.ada.platform.ui;

import java.io.File;
import java.awt.Dialog;
import java.awt.EventQueue;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import org.netbeans.api.ada.platform.AdaException;
import org.netbeans.api.ada.platform.AdaPlatform;
import org.netbeans.api.ada.platform.AdaPlatformManager;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.Mnemonics;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.Utilities;

/**
 * 
 * @author Andrea Lucarelli
 */
public class PlatformsCustomizer extends JPanel {

    /** Creates new form PlatformCustomizer */
    public PlatformsCustomizer() {
        adaPlatformManager = AdaPlatformManager.getInstance();
        initComponents();
        setAutoDetecting(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        platformsListScrollPanel = new javax.swing.JScrollPane();
        PlatformList = new javax.swing.JList();
        paltformsListTitleLabel = new javax.swing.JLabel();
        newButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        autoDetectButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        platfromNameLabel = new javax.swing.JLabel();
        platformName = new javax.swing.JTextField();
        compilerCommandLabel = new javax.swing.JLabel();
        compilerCommand = new javax.swing.JTextField();
        otherInfoLabel = new javax.swing.JLabel();
        platformInfoTextField = new javax.swing.JTextField();
        autoDetectLabel = new javax.swing.JLabel();
        autoDetectProgress = new javax.swing.JProgressBar();
        jvmCompilerCommand = new javax.swing.JTextField();
        jvmCompilerCommandLabel = new javax.swing.JLabel();
        adaPathPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        adaPath = new javax.swing.JList();
        addPath = new javax.swing.JButton();
        removePath = new javax.swing.JButton();
        moveUpPath = new javax.swing.JButton();
        moveDownPath = new javax.swing.JButton();
        makeDefaultButton = new javax.swing.JButton();

        PlatformList.setModel(platformListModel);
        PlatformList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        PlatformList.setCellRenderer(new PlatformListCellRenderer());
        PlatformList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                PlatformListValueChanged(evt);
            }
        });
        platformsListScrollPanel.setViewportView(PlatformList);

        paltformsListTitleLabel.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.paltformsListTitleLabel.text")); // NOI18N

        newButton.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.newButton.text")); // NOI18N
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        removeButton.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        autoDetectButton.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.autoDetectButton.text")); // NOI18N
        autoDetectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDetectButtonActionPerformed(evt);
            }
        });

        platfromNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        platfromNameLabel.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.platfromNameLabel.text")); // NOI18N

        platformName.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.platformName.text_1")); // NOI18N

        compilerCommandLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        compilerCommandLabel.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.compilerCommandLabel.text")); // NOI18N

        compilerCommand.setEditable(false);
        compilerCommand.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.compilerCommand.text")); // NOI18N

        otherInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        otherInfoLabel.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.otherInfoLabel.text")); // NOI18N

        platformInfoTextField.setEditable(false);
        platformInfoTextField.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.platformInfoTextField.text")); // NOI18N

        autoDetectLabel.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.autoDetectLabel.text")); // NOI18N

        autoDetectProgress.setIndeterminate(true);

        jvmCompilerCommand.setEditable(false);
        jvmCompilerCommand.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.jvmCompilerCommand.text")); // NOI18N

        jvmCompilerCommandLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jvmCompilerCommandLabel.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.jvmCompilerCommandLabel.text")); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(otherInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(compilerCommandLabel)
                                .addComponent(platfromNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(compilerCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(platformName, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(platformInfoTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap(192, Short.MAX_VALUE)
                        .addComponent(autoDetectLabel)
                        .addGap(5, 5, 5)
                        .addComponent(autoDetectProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jvmCompilerCommandLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jvmCompilerCommand, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(platfromNameLabel)
                    .addComponent(platformName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(platformInfoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(otherInfoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compilerCommandLabel)
                    .addComponent(compilerCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jvmCompilerCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jvmCompilerCommandLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoDetectLabel)
                    .addComponent(autoDetectProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.mainPanel.TabConstraints.tabTitle_1"), mainPanel); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.jLabel5.text_1")); // NOI18N

        adaPath.setModel(adaPathModel);
        adaPath.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(adaPath);

        addPath.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.addPath.text")); // NOI18N
        addPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPathActionPerformed(evt);
            }
        });

        removePath.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.removePath.text")); // NOI18N
        removePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePathActionPerformed(evt);
            }
        });

        moveUpPath.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.moveUpPath.text")); // NOI18N
        moveUpPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpPathActionPerformed(evt);
            }
        });

        moveDownPath.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.moveDownPath.text")); // NOI18N
        moveDownPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adaPathPanelLayout = new javax.swing.GroupLayout(adaPathPanel);
        adaPathPanel.setLayout(adaPathPanelLayout);
        adaPathPanelLayout.setHorizontalGroup(
            adaPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adaPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adaPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adaPathPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(adaPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moveDownPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveUpPath, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(removePath, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(addPath, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)))
                    .addComponent(jLabel5))
                .addContainerGap())
        );
        adaPathPanelLayout.setVerticalGroup(
            adaPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adaPathPanelLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adaPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, adaPathPanelLayout.createSequentialGroup()
                        .addComponent(addPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveUpPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveDownPath))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.adaPathPanel.TabConstraints.tabTitle_1"), adaPathPanel); // NOI18N

        makeDefaultButton.setText(org.openide.util.NbBundle.getMessage(PlatformsCustomizer.class, "PlatformsCustomizer.makeDefaultButton.text")); // NOI18N
        makeDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeDefaultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(makeDefaultButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(autoDetectButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                    .addComponent(paltformsListTitleLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(platformsListScrollPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paltformsListTitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(platformsListScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeButton)
                            .addComponent(newButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoDetectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(makeDefaultButton))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setAutoDetecting(boolean autoDetecting) {
        autoDetectButton.setEnabled(!autoDetecting);
        newButton.setEnabled(!autoDetecting);
        autoDetectProgress.setVisible(autoDetecting);
        autoDetectLabel.setVisible(autoDetecting);
    }

    private void loadPlatform() {
        platformName.setText(adaPlatform.getName());
        platformInfoTextField.setText(adaPlatform.getInfo());
        compilerCommand.setText(adaPlatform.getGnatCompilerCommand());
        jvmCompilerCommand.setText(adaPlatform.getJvmGnatCompilerCommand());
        // TODO: add in main tab the commands list for ada platform
//        adaPathModel.setModel(adaPlatform.getCompilerPath());
    }

    private void clearPlatform() {
        platformName.setText("");
        platformInfoTextField.setText("");
        compilerCommand.setText("");
    }

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        if (!Utilities.isWindows()) {
            fc.setCurrentDirectory(new File("/usr/bin"));
            fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            fc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File file) {
                    if (file.isDirectory()) {
                        return true;
                    } else if (file.getName().toLowerCase().contains("gnat")) {
                        return true;
                    } else {
                        return false;
                    }
                }

                @Override
                public String getDescription() {
                    return getMessage("AdaPlatformCustomizer.adaCompilerFile");
                }
            });
        } else {
            fc.setCurrentDirectory(new File("C:/"));
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.setFileFilter(new FileFilter() {

                public boolean accept(File f) {
                    return f.isDirectory(); // NOI18N
                }

                public String getDescription() {
                    return getMessage("AdaPlatformCustomizer.adaPlatform");
                }
            });
        }
        fc.setFileHidingEnabled(false);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (file.isFile()) {
                file = fc.getCurrentDirectory();
            }
            if (file != null) {
                FileObject fo = FileUtil.toFileObject(file);
                if (fo != null) {
                    try {
                        adaPlatform = adaPlatformManager.findPlatformProperties(fo);
                        if (adaPlatform != null) {
                            loadPlatform();
                            platformListModel.refresh();
                            platformName.setEditable(true);
                        }
                    } catch (AdaException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        }

}//GEN-LAST:event_newButtonActionPerformed

    private void PlatformListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_PlatformListValueChanged
        if (adaPlatform != null) {
            updatePlatform();
        }
        adaPlatform = adaPlatformManager.getPlatform(
                (String) platformListModel.getElementAt(
                PlatformList.getSelectedIndex()));
        loadPlatform();
        platformName.setEditable(false);
    }//GEN-LAST:event_PlatformListValueChanged

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (platformListModel.getSize() > 0) {
            int selectedIndex = PlatformList.getSelectedIndex();
            if (selectedIndex != -1) {
                adaPlatformManager.removePlatform(
                        (String) platformListModel.getElementAt(selectedIndex));
                platformListModel.refresh();
                adaPlatform = null;
                clearPlatform();
            }
        }
}//GEN-LAST:event_removeButtonActionPerformed

    private void makeDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeDefaultButtonActionPerformed
        if (PlatformList.getSelectedIndex() != -1) {
            adaPlatformManager.setDefaultPlatform((String) platformListModel.getElementAt(PlatformList.getSelectedIndex()));
            platformListModel.refresh();
        }
}//GEN-LAST:event_makeDefaultButtonActionPerformed

    private void moveDownPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownPathActionPerformed
        adaPathModel.moveDown(adaPath.getSelectedIndex());
}//GEN-LAST:event_moveDownPathActionPerformed

    private void moveUpPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpPathActionPerformed
        adaPathModel.moveUp(adaPath.getSelectedIndex());
}//GEN-LAST:event_moveUpPathActionPerformed

    private void removePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePathActionPerformed
        adaPathModel.remove(adaPath.getSelectedIndex());
}//GEN-LAST:event_removePathActionPerformed

    private void addPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPathActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileHidingEnabled(false);
        fc.setDialogTitle("Select Ada Lib Directory");
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String cmd = fc.getSelectedFile().getAbsolutePath();
            adaPathModel.add(cmd);
        }
}//GEN-LAST:event_addPathActionPerformed

    private void autoDetectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDetectButtonActionPerformed
        setAutoDetecting(true);
        RequestProcessor.getDefault().post(new Runnable() {

            public void run() {
                adaPlatformManager.autoDetect();
                EventQueue.invokeLater(new Runnable() {

                    public void run() {
                        platformListModel.refresh();
                        setAutoDetecting(false);
                    }
                });
            }
        });
    }//GEN-LAST:event_autoDetectButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList PlatformList;
    private javax.swing.JList adaPath;
    private javax.swing.JPanel adaPathPanel;
    private javax.swing.JButton addPath;
    private javax.swing.JButton autoDetectButton;
    private javax.swing.JLabel autoDetectLabel;
    private javax.swing.JProgressBar autoDetectProgress;
    private javax.swing.JTextField compilerCommand;
    private javax.swing.JLabel compilerCommandLabel;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jvmCompilerCommand;
    private javax.swing.JLabel jvmCompilerCommandLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton makeDefaultButton;
    private javax.swing.JButton moveDownPath;
    private javax.swing.JButton moveUpPath;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel otherInfoLabel;
    private javax.swing.JLabel paltformsListTitleLabel;
    private javax.swing.JTextField platformInfoTextField;
    private javax.swing.JTextField platformName;
    private javax.swing.JScrollPane platformsListScrollPanel;
    private javax.swing.JLabel platfromNameLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removePath;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
    private AdaPlatformManager adaPlatformManager;
    private AdaPlatform adaPlatform;
    private PathListModel adaPathModel = new PathListModel();
    private PlatformListModel platformListModel = new PlatformListModel();

    public static void showPlatformManager() {
        PlatformsCustomizer customizer = new PlatformsCustomizer();
        JButton closeButton = new JButton();
        closeButton.getAccessibleContext().setAccessibleDescription(getMessage("AdaPlatformCustomizer.closeButton.AccessibleContext.accessibleName"));
        Mnemonics.setLocalizedText(closeButton,
                NbBundle.getMessage(PlatformsCustomizer.class, "CTL_Close"));
        DialogDescriptor descriptor = new DialogDescriptor(
                customizer,
                getMessage("CTL_AdaPlatformCustomizer_Title"), // NOI18N
                true,
                new Object[]{closeButton},
                closeButton,
                DialogDescriptor.DEFAULT_ALIGN,
                new HelpCtx(PlatformsCustomizer.class),
                null);
        Dialog dlg = DialogDisplayer.getDefault().createDialog(descriptor);
        dlg.setVisible(true);
        AdaPlatformManager.getInstance().save();
        dlg.dispose();
    }

    private static String getMessage(String key) {
        return NbBundle.getMessage(PlatformsCustomizer.class, key);
    }

    private void updatePlatform() {
        if (!adaPlatform.getName().equals(platformName.getText())) {
            adaPlatformManager.removePlatform(adaPlatform.getName());
            adaPlatform.setName(platformName.getText());
        }

        adaPlatform.setInfo(platformInfoTextField.getText());
        adaPlatform.setGnatCompilerCommand(compilerCommand.getText());
        // TODO: add in main tab the commands list for ada platform
//        adaPlatform.setCompilerPath(adaPathModel.getModel());
        adaPlatformManager.addPlatform(adaPlatform);
    }

    private boolean isDefaultPLatform(String platform) {
        String defaultPlatform = adaPlatformManager.getDefaultPlatform();
        return defaultPlatform != null && !defaultPlatform.equals(platform);
    }
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.scala.refactoring.ui

import java.awt.Component
import java.awt.event.ItemEvent
import javax.swing.JPanel
import javax.swing.event.ChangeListener
import javax.swing.event.DocumentEvent
import javax.swing.event.DocumentListener
import org.netbeans.modules.refactoring.spi.ui.CustomRefactoringPanel
import org.netbeans.modules.scala.refactoring.RefactoringModule


/**
 * Rename refactoring parameters panel
 *
 * @author  Pavel Flaska
 */
class RenamePanel(@transient oldName: String, @transient parent: ChangeListener, name: String, editable: Boolean, showUpdateReferences: Boolean
) extends JPanel with CustomRefactoringPanel {
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private var jPanel1: javax.swing.JPanel = _
  private var label: javax.swing.JLabel = _
  private var nameField: javax.swing.JTextField = _
  private var textCheckBox: javax.swing.JCheckBox = _
  private var updateReferencesCheckBox: javax.swing.JCheckBox = _
  // End of variables declaration//GEN-END:variables


  setName(name)
  initComponents
  updateReferencesCheckBox.setVisible(showUpdateReferences)
  nameField.setEnabled(editable)
    //parent.setPreviewEnabled(false);
  nameField.requestFocus()
  nameField.getDocument.addDocumentListener(new DocumentListener {
      def changedUpdate(event: DocumentEvent) {
          RenamePanel.this.parent.stateChanged(null);
        }
      def insertUpdate(event: DocumentEvent) {
          RenamePanel.this.parent.stateChanged(null);
        }
      def removeUpdate(event: DocumentEvent) {
          RenamePanel.this.parent.stateChanged(null);
        }
    })

  private var initialized = false
  def initialize {
    if (initialized) return
    initialized = true
  }
    
  override def requestFocus {
    nameField.requestFocus
  }
    
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private def initComponents {
    var gridBagConstraints: java.awt.GridBagConstraints = null

    label = new javax.swing.JLabel();
    nameField = new javax.swing.JTextField();
    jPanel1 = new javax.swing.JPanel();
    textCheckBox = new javax.swing.JCheckBox();
    updateReferencesCheckBox = new javax.swing.JCheckBox();

    setLayout(new java.awt.GridBagLayout());

    setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 11, 11));
    label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    label.setLabelFor(nameField);
    org.openide.awt.Mnemonics.setLocalizedText(label, org.openide.util.NbBundle.getMessage(classOf[RenamePanel], "LBL_NewName")); // NOI18N
    add(label, new java.awt.GridBagConstraints());

    nameField.setText(oldName);
    nameField.selectAll();
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(nameField, gridBagConstraints);
    val bundle = java.util.ResourceBundle.getBundle("org/netbeans/modules/scala/refactoring/ui/Bundle"); // NOI18N
    nameField.getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_nameField")); // NOI18N

    jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
    jPanel1.setPreferredSize(new java.awt.Dimension(0, 0));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jPanel1, gridBagConstraints);

    textCheckBox.setSelected(RefactoringModule.getOption("searchInComments.rename", false).booleanValue);
    org.openide.awt.Mnemonics.setLocalizedText(textCheckBox, org.openide.util.NbBundle.getBundle(classOf[RenamePanel]).getString("LBL_RenameComments")); // NOI18N
    textCheckBox.addItemListener(new java.awt.event.ItemListener() {
        def itemStateChanged(evt: java.awt.event.ItemEvent) {
          textCheckBoxItemStateChanged(evt);
        }
      });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(textCheckBox, gridBagConstraints);
    textCheckBox.getAccessibleContext().setAccessibleDescription(textCheckBox.getText());

    org.openide.awt.Mnemonics.setLocalizedText(updateReferencesCheckBox, org.openide.util.NbBundle.getBundle(classOf[RenamePanel]).getString("LBL_RenameWithoutRefactoring")); // NOI18N
    updateReferencesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 0, 4));
    updateReferencesCheckBox.setMargin(new java.awt.Insets(2, 2, 0, 2));
    updateReferencesCheckBox.addActionListener(new java.awt.event.ActionListener() {
        def actionPerformed(evt: java.awt.event.ActionEvent) {
          updateReferencesCheckBoxActionPerformed(evt);
        }
      });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(updateReferencesCheckBox, gridBagConstraints);

  }// </editor-fold>//GEN-END:initComponents

  private def updateReferencesCheckBoxActionPerformed(evt: java.awt.event.ActionEvent) {//GEN-FIRST:event_updateReferencesCheckBoxActionPerformed
    textCheckBox.setEnabled(!updateReferencesCheckBox.isSelected());
    parent.stateChanged(null);
  }//GEN-LAST:event_updateReferencesCheckBoxActionPerformed

  private def textCheckBoxItemStateChanged(evt: java.awt.event.ItemEvent) {//GEN-FIRST:event_textCheckBoxItemStateChanged
    // used for change default value for searchInComments check-box.
    // The value is persisted and then used as default in next IDE run.
    val b = if (evt.getStateChange == ItemEvent.SELECTED) true else false
    RefactoringModule.setOption("searchInComments.rename", b) // NOI18N
  }//GEN-LAST:event_textCheckBoxItemStateChanged
                                                             
  def getNameValue: String = {
    nameField.getText
  }
    
  def searchJavadoc: Boolean = {
    textCheckBox.isSelected
  }
    
  def isUpdateReferences: Boolean = {
    if (updateReferencesCheckBox.isVisible && updateReferencesCheckBox.isSelected) false else true
  }

  def getComponent: Component = {
    this
  }
}

/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.jnpc.ui;

import java.io.File;
import java.io.FilenameFilter;
import java.net.MalformedURLException;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.common.ExtendedClassLoader;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import org.netbeans.modules.portalpack.servers.core.util.Util;
import org.netbeans.modules.portalpack.servers.jnpc.common.JNPCConstants;
import org.netbeans.modules.portalpack.servers.jnpc.impl.JNPCTaskHandler;
import org.openide.util.NbBundle;

/**
 *
 * @author  Satya
 */
public class PCConfigPanel extends ConfigPanel implements DocumentListener{
    
    private String psVersion;
    /** Creates new form PCConfigPanel */
    public PCConfigPanel(String psVersion) {
        this.psVersion = psVersion;
        initComponents();
        initData();
        
        portalUri.getDocument().addDocumentListener(this);
        adminConsoleUriTf.getDocument().addDocumentListener(this);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        portalUri = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        homeTf = new javax.swing.JTextField();
        homeChooseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        hostTf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        adminConsoleUriTf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        portletUriTf = new javax.swing.JTextField();
        directoryDeploymentCB = new javax.swing.JCheckBox();

        setFont(new java.awt.Font("Tahoma", 1, 11));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PCConfigPanel.class, "LBL_OPEN_SOURCE_PORTLET_CONTAINER")); // NOI18N

        jLabel4.setLabelFor(portalUri);
        jLabel4.setText(org.openide.util.NbBundle.getMessage(PCConfigPanel.class, "LBL_PORTAL_URI")); // NOI18N

        jLabel3.setLabelFor(homeTf);
        jLabel3.setText(org.openide.util.NbBundle.getMessage(PCConfigPanel.class, "LBL_PC_HOME")); // NOI18N

        homeTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                homeTfFocusLost(evt);
            }
        });

        homeChooseButton.setText("...");
        homeChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeChooseButtonActionPerformed(evt);
            }
        });

        jLabel2.setLabelFor(hostTf);
        jLabel2.setText(org.openide.util.NbBundle.getMessage(PCConfigPanel.class, "LBL_HOST")); // NOI18N

        hostTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hostTfFocusLost(evt);
            }
        });

        jLabel5.setLabelFor(adminConsoleUriTf);
        jLabel5.setText(org.openide.util.NbBundle.getMessage(PCConfigPanel.class, "LBL_ADMIN_URI")); // NOI18N

        jLabel6.setLabelFor(portletUriTf);
        jLabel6.setText(org.openide.util.NbBundle.getBundle(PCConfigPanel.class).getString("LBL_PORTLET_URI")); // NOI18N

        directoryDeploymentCB.setText(org.openide.util.NbBundle.getMessage(PCConfigPanel.class, "LBL_Directory_Deployment_Enable")); // NOI18N
        directoryDeploymentCB.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(155, 155, 155)
                .add(jLabel1)
                .addContainerGap(239, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(49, 49, 49))
                    .add(layout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(28, 28, 28))
                    .add(layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(27, 27, 27))
                    .add(layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(26, 26, 26))
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, adminConsoleUriTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, portalUri, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, portletUriTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                        .add(168, 168, 168))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, hostTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, homeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(homeChooseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, Short.MAX_VALUE)))
                .add(103, 103, 103))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(directoryDeploymentCB)
                .addContainerGap(356, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(homeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(homeChooseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(hostTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(9, 9, 9)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(portalUri, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(adminConsoleUriTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(portletUriTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(directoryDeploymentCB)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void hostTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostTfFocusLost
// TODO add your handling code here:
        fireChangeEvent();
    }//GEN-LAST:event_hostTfFocusLost

    private void homeTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeTfFocusLost
// TODO add your handling code here:
        fireChangeEvent();
    }//GEN-LAST:event_homeTfFocusLost

    private boolean validatePCHome()
    {
        
        String dir = homeTf.getText();
        File homeDir = new File(dir);
        File portletPolicy = new File(homeDir,"config" + File.separator + "portlet-policy.xml");
        if(psVersion.equals(JNPCConstants.OP_PC_2_0))
        {
            //check for policy file  
            if(!portletPolicy.exists())
            {
                setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_INVALID_PC_2_0_HOME"));
                return false;
            }
        } else if(psVersion.equals(JNPCConstants.OS_PC_1_0))
        {
            if(portletPolicy.exists())
            {
                setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_PC_2_0_HOME_NEED_PC_1_0_Home"));
                return false;
            }
        }
        File config = new File(homeDir,"config" + File.separator + "pcenv.conf");
        File lib = new File(homeDir,"lib");
        if(!config.exists() || !lib.exists())
        {           
            setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_INVALID_PC_HOME"));
            return false;
        }else{
            
            setErrorMessage("");
            return true;
        }
        
    }
    
    private void homeChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeChooseButtonActionPerformed
// TODO add your handling code here:
        String dir = browseInstallLocation();
        if(dir != null && dir.trim().length() != 0)
            homeTf.setText(dir);
        fireChangeEvent();    
    }//GEN-LAST:event_homeChooseButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField adminConsoleUriTf;
    private javax.swing.JCheckBox directoryDeploymentCB;
    private javax.swing.JButton homeChooseButton;
    private javax.swing.JTextField homeTf;
    private javax.swing.JTextField hostTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField portalUri;
    private javax.swing.JTextField portletUriTf;
    // End of variables declaration//GEN-END:variables

    public void initData()
    {
       /* String[] instances = InstanceProperties.getInstanceList();
        for(int i=0;i<instances.length;i++)
        {
            instancesCombo.addItem(instances[i]);
        }*/
        
      ///  InstanceProperties intProps = InstanceProperties.getInstanceProperties(instances[1]);
        
      /// DeploymentFactoryManager.getInstance().getDisconnectedDeploymentManager("test").
       portalUri.setText("/portletdriver/dt");
       adminConsoleUriTf.setText("/portletdriver/admin");
       portletUriTf.setText("/portletdriver/ospc");
       hostTf.setText("localhost");
        
    }
    
    public void enableDisableDirectoryDeploymentCheckBox(File pcHomeFile) {
        
        if(pcHomeFile == null || !pcHomeFile.exists())
            return;
        
         if(psVersion.equals(JNPCConstants.OP_PC_2_0)) {
                        
            directoryDeploymentCB.setEnabled(true);
        } else {
            directoryDeploymentCB.setSelected(false);
            directoryDeploymentCB.setEnabled(false);
        }
        
    }
    public void populateDataForCustomizer(PSConfigObject object) {
        
        //hostTf.setText(object.getHost());
        //portTf.setText(object.getPort());
        portalUri.setText(object.getPortalUri());
        homeTf.setText(object.getPSHome());
        hostTf.setText(object.getHost());
        adminConsoleUriTf.setText(object.getProperty(JNPCConstants.ADMIN_CONSOLE_URI));
        portletUriTf.setText(object.getProperty(JNPCConstants.PORTLET_URI));
        directoryDeploymentCB.setSelected(object.isDirectoryDeployment());
        
        homeTf.setEnabled(false);
        hostTf.setEnabled(false);
        homeChooseButton.setEnabled(false);
        
        //set directory deployment option properly
        if(object.getPSHome() != null && object.getPSHome().length() != 0)
            enableDisableDirectoryDeploymentCheckBox(new File(object.getPSHome()));
        
    }

    public void read(org.openide.WizardDescriptor wizardDescriptor) {
        WizardPropertyReader reader = new WizardPropertyReader(wizardDescriptor);
        String domainDir = reader.getDomainDir();
        String pcHome = homeTf.getText();
        if(pcHome == null || pcHome.trim().length() == 0)
        {
            File pcHomeFile = new File(domainDir,"portlet-container");
            if(pcHomeFile.exists()) {
                homeTf.setText(pcHomeFile.getAbsolutePath());
            }
        }
        
        //check for directory deployment option.
        pcHome = homeTf.getText();
        if(pcHome != null && pcHome.trim().length() != 0) {
            enableDisableDirectoryDeploymentCheckBox(new File(pcHome));
        }
        
    }

    public void store(org.openide.WizardDescriptor d) {
             
        WizardPropertyReader wr = new WizardPropertyReader(d);                
        wr.setAdminUser("admin");
        wr.setAdminPassWord("adminadmin");
        wr.setPSHome(homeTf.getText());
        //wr.setPort(portTf.getText());
        //wr.setAdminPort(portTf.getText());
        wr.setRemote(false);
        wr.setPortalUri(portalUri.getText());
        wr.setHost(hostTf.getText());
        wr.setDirectoryDeployment(directoryDeploymentCB.isSelected());
        
        wr.setProperty(JNPCConstants.ADMIN_CONSOLE_URI,adminConsoleUriTf.getText());
        wr.setProperty(JNPCConstants.PORTLET_URI,portletUriTf.getText());
      //  wr.setPortalUri("/pcdriver");
    }

    public boolean validate(Object wizardDescriptor) {
        
        if(!validatePCHome())
            return false;
        
        if(!Util.isIp(hostTf.getText().trim()))
        {
            if(!Util.isHostValid(hostTf.getText().trim()))
            {
                setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_NOT_A_VALID_HOST"));
                return false;
            }
        }
        
        if(portalUri.getText() == null || portalUri.getText().trim().length() == 0)
        {
            setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_NOT_A_VALID_PORTAL_URI"));
            return false;
        }
        
        if(adminConsoleUriTf.getText() == null || adminConsoleUriTf.getText().trim().length() == 0)
        {
            setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_NOT_A_VALID_ADMIN_URI"));
            return false;
        }

        if(portletUriTf.getText() == null || portletUriTf.getText().trim().length() == 0)
        {
            setErrorMessage(NbBundle.getMessage(PCConfigPanel.class,"MSG_NOT_A_VALID_PORTLET_URI"));
            return false;
        }
        setErrorMessage("");
        return true;
    }

    public String getDescription() {
        return "OS PC";
    }
    
    private String browseInstallLocation(){
        String insLocation = null;
        JFileChooser chooser = getJFileChooser();
        int returnValue = chooser.showDialog(SwingUtilities.getWindowAncestor(this),
                NbBundle.getMessage(PCConfigPanel.class, "LBL_BrowseButton")); //NOI18N
        
        if(returnValue == JFileChooser.APPROVE_OPTION){
            insLocation = chooser.getSelectedFile().getAbsolutePath();
        }
        return insLocation;
    }
    
    private JFileChooser getJFileChooser(){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(NbBundle.getMessage(PCConfigPanel.class, "LBL_ChooserName")); //NOI18N
        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setApproveButtonMnemonic("Choose_Button_Mnemonic".charAt(0)); //NOI18N
        chooser.setMultiSelectionEnabled(false);
        chooser.setApproveButtonToolTipText(NbBundle.getMessage(PCConfigPanel.class, "LBL_ChooserName")); //NOI18N

        chooser.getAccessibleContext().setAccessibleName(NbBundle.getMessage(PCConfigPanel.class, "LBL_ChooserName")); //NOI18N
        chooser.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(PCConfigPanel.class, "LBL_ChooserName")); //NOI18N

        // set the current directory
        String dir = System.getProperty("user.home");
        if(dir != null)
            chooser.setSelectedFile(new File(dir));

        return chooser;
    }

    public void insertUpdate(DocumentEvent e) {
        updateText();
    }

    public void removeUpdate(DocumentEvent e) {
        updateText();
    }

    public void changedUpdate(DocumentEvent e) {
        updateText();
    }
    
    public void updateText()
    {
        fireChangeEvent();
    }
   
    //Directory deployment is supported from PC 2.1
   protected boolean checkIfDirectoryDeploymentSupported(File pcHome)
   {
   
       ExtendedClassLoader loader = null;
       try{
            loader = new ExtendedClassLoader();
       }catch(Exception e) {
           return false;
       }
        
       if(pcHome == null)
           return false;
       
       File libDir = new File(pcHome, "lib");
       File[] files = libDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                if(name.endsWith(".jar"))
                {
                    return true;
                }
                return false;
            }
        });
        
        if(files == null)
            return false;
        
        for(int i=0;i<files.length;i++)
        {
            try {
                loader.addURL(files[i]);
            } catch (MalformedURLException ex) {
                
            } catch (RuntimeException ex) {
                
            }
        }
        
        try {

            Class pwuClazz = loader.loadClass(JNPCTaskHandler.PORTLET_WAR_UPDATER);
            pwuClazz.getMethod("preparePortlet",new Class[]{String.class,File.class});
            
        } catch (ClassNotFoundException ex) {
            return false;
        } catch(NoSuchMethodException msmex) {
            return false;
        }
        
        return true;
   }

    
}

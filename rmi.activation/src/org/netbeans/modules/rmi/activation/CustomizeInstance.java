/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.rmi.activation;

import java.awt.*;
import java.awt.event.*;
import java.io.*;

import org.openide.*;
import org.openide.nodes.*;
import org.openide.explorer.propertysheet.*;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.io.NbObjectInputStream;

/**
 * Allow to create and edit an object instance.
 * @author  vzboril, Jan Pokorsky
 */
public class CustomizeInstance extends javax.swing.JPanel {

    private final static boolean debug = Boolean.getBoolean("org.netbeans.modules.rmi.test"); // NOI18N
    private final static boolean exceptions = Boolean.getBoolean("netbeans.debug.exceptions"); // NOI18N
    
    /** Creates new form Activation1 */
    public CustomizeInstance(Object obj) {
        initComponents();
        this.getAccessibleContext().setAccessibleDescription(getString("AD_CustomizeInstance"));
        propertySheet = new PropertySheet ();
        propertiesLayout = (java.awt.CardLayout) jPanel1.getLayout();
        jPanel1.add(propertySheet, OBJECT_CARD);
        javax.swing.JPanel jPanelString = new javax.swing.JPanel(new BorderLayout());
        jtfString = new javax.swing.JTextField();
        jPanelString.add(jtfString, BorderLayout.NORTH);
        jPanel1.add(jPanelString, STRING_CARD);
        
        if (obj instanceof String) {
            setInstance((String) obj);
        } else {
            setInstance(obj);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        jLabel1.setText(getString("LBL_CustomizeInstance.Class"));
        jLabel1.setLabelFor(jTextField1);
        jLabel1.setDisplayedMnemonic(getMnemonic("LBL_CustomizeInstance.Class"));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 0, 0);
        add(jLabel1, gridBagConstraints1);
        
        jButton1.setText(getString("BTN_CustomizeInstance.New"));
        jButton1.getAccessibleContext().setAccessibleDescription(getString("AD_CustomizeInstance.jButton1"));
        jButton1.setMnemonic(getMnemonic("BTN_CustomizeInstance.New"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.insets = new java.awt.Insets(12, 11, 0, 12);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        add(jButton1, gridBagConstraints1);
        
        jLabel2.setText(getString("LBL_CustomizeInstance.Prop"));
        jLabel2.setLabelFor(jPanel1);
        jLabel2.setDisplayedMnemonic(getMnemonic("LBL_CustomizeInstance.Prop"));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.insets = new java.awt.Insets(12, 11, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel2, gridBagConstraints1);
        
        jTextField1.setEditable(false);
        jTextField1.setColumns(30);
        jTextField1.getAccessibleContext().setAccessibleDescription(getString("AD_CustomizeInstance.jTextField1"));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(12, 11, 0, 0);
        gridBagConstraints1.weightx = 1.0;
        add(jTextField1, gridBagConstraints1);
        
        jPanel1.setLayout(new java.awt.CardLayout());
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 17, 12);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(jPanel1, gridBagConstraints1);
        
    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        final CreateInstance panel = new CreateInstance();
        DialogDescriptor descriptor =new DialogDescriptor(
            panel,
            getString("LBL_CreateInstance.Title"), // NOI18N
            true,
            DialogDescriptor.OK_CANCEL_OPTION,
            DialogDescriptor.OK_OPTION,
            DialogDescriptor.DEFAULT_ALIGN,
            new HelpCtx(CreateInstance.class),
            new ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent ae) {
                    if (ae.getSource() == DialogDescriptor.OK_OPTION) {
                        if (panel.isEmty()) {
                            setInstance((Object) null);
                            dialog.dispose();
                            dialog = null;
                            return;
                        }
                        
                        Object obj;
                        String name;
                        if (panel.isFromFile()) {
                            name = panel.getFileName();
                            if (name == null || name.length() == 0) {
                                DialogDisplayer.getDefault().notify(
                                    new NotifyDescriptor.Message(getString("ERR_CustomizeInstance.MissingFile"), NotifyDescriptor.WARNING_MESSAGE) // NOI18N
                                );
                                return;
                            }
                            obj = getInstanceFromFile(new File(name));
                        } else {
                            name = panel.getClassName();
                            if (name == null || name.length() == 0) {
                                DialogDisplayer.getDefault().notify(
                                    new NotifyDescriptor.Message(getString("ERR_CustomizeInstance.MissingClass"), NotifyDescriptor.WARNING_MESSAGE) // NOI18N
                                );
                                return;
                            }
                            obj = getInstance(name);
                        }
                        
                        if (obj == null) return;    // do not close dialog
                        
                        try {
                            new java.rmi.MarshalledObject(obj);
                        } catch (java.io.NotSerializableException ex) {
                            if (exceptions) ex.printStackTrace();
                            DialogDisplayer.getDefault().notify(
                                new NotifyDescriptor.Message(getString("ERR_CustomizeInstance.Serialized"), NotifyDescriptor.ERROR_MESSAGE) // NOI18N
                            );
                            return;
                        } catch (ThreadDeath ex) {
                            throw ex;
                        } catch (Throwable ex) {
                            
                            ErrorManager em = RMIModule.getErrorManager(this.getClass());
                            em.annotate(ex, getString("ERR_CustomizeInstance.CreateMarshalled")); //NOI18N
                            em.notify(ex);
                            return;
                        }

                        if (obj instanceof String) {
                            setInstance((String) obj);
                        } else {
                            setInstance(obj);
                        }

                    }
                    dialog.dispose();
                    dialog = null;
                }
            }
        );
        descriptor.setClosingOptions(new Object[0]);
        dialog = DialogDisplayer.getDefault().createDialog(descriptor);
        dialog.show();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private static final String OBJECT_CARD = "cardObject"; // NOI18N
    private static final String STRING_CARD = "cardString"; // NOI18N
    private static final String mnemonic_suffix = ".mnemonic";    // NOI18N
    /** Create instance dialog. */
    private Dialog dialog = null;
    /** Object instance. */
    private PropertySheet propertySheet = null;
    /** String instance. */
    private javax.swing.JTextField jtfString = null;
    /** Manager for switching between property panels */
    private java.awt.CardLayout propertiesLayout;
    private Object customizedInstance;
    
    /** Get customized instance which can be null. */
    public Object getCustomizedInstance() {
        if (customizedInstance instanceof String) customizedInstance = jtfString.getText();
        return customizedInstance;
    }
    
    /** Localization. */
    private String getString(java.lang.String key) {
       return org.openide.util.NbBundle.getBundle (CustomizeInstance.class).getString(key);
    }    
  
    private char getMnemonic(java.lang.String key) {
       return org.openide.util.NbBundle.getBundle (CustomizeInstance.class).getString(key + mnemonic_suffix).charAt(0);
    }
    
    private void setNullInstance() {
        jTextField1.setText(""); // NOI18N
        customizedInstance = null;
    }
    
    /** Set GUI for Object instance. */
    private void setInstance(Object obj) {
        Node[] nodes = null;
        if (obj == null) {
            setNullInstance();
            nodes = new Node[0];
        } else {
            java.beans.Introspector.flushFromCaches(obj.getClass());
            jTextField1.setText(obj.getClass().getName());
            BeanNode bn = null; 
            try {
                bn = new BeanNode(obj);
                nodes = new Node [1];
                nodes [0] = bn;
                customizedInstance = obj;
            } catch (ThreadDeath e) {
                throw e;
            } catch (Throwable e) {
                ErrorManager em = ErrorManager.getDefault ();

                em.annotate (e, NbBundle.getMessage (
                    CustomizeInstance.class, "EXC_Introspection", obj.getClass().getName() // NOI18N
                ));
                em.notify(ErrorManager.WARNING, e);
                setNullInstance();
            }
        }
        
        propertySheet.setNodes(nodes);
        propertiesLayout.show(jPanel1, OBJECT_CARD);
    }
    
    /** Set GUI for String instance. */
    private void setInstance(String obj) {
        jTextField1.setText(obj.getClass().getName());
        jtfString.setText(obj);
        customizedInstance = obj;
        propertiesLayout.show(jPanel1, STRING_CARD);
    }
    
    /** Try to create instance of classname.
     * @param classname class name
     * @return new instance or null if cannot create
     */
    private Object getInstance(String classname) {
        Object instance = null;
        
        try {
            instance = Class.forName(classname, true, MarshalledObjectSupport.currentClassLoader()).newInstance();
        } catch (ClassNotFoundException ex) {
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                    NbBundle.getMessage(CustomizeInstance.class, "ERR_CustomizeInstance.ClassNotFoundException", ex.getMessage()), // NOI18N
                    NotifyDescriptor.ERROR_MESSAGE
                )
            );
        } catch (InstantiationException ex) {
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                    NbBundle.getMessage(CustomizeInstance.class, "ERR_CustomizeInstance.InstantiationException", ex.getMessage()), // NOI18N
                    NotifyDescriptor.ERROR_MESSAGE
                )
            );
        } catch (ThreadDeath ex) {
            throw ex;
        } catch (Throwable ex) {
            ErrorManager err = RMIModule.getErrorManager(CreateInstance.class);
            err.annotate(ex, getString("ERR_CustomizeInstance.Instantiation")); // NOI18N
            err.notify(ex);
        }
        return instance;
    }
    
    /** Create instance from file.
     * @param f file with serialized object.
     * @return instance or null when cannot create
     */
    private Object getInstanceFromFile(File f) {
        NbObjectInputStream in = null;
        Object instance = null;
        try {
            in = new NbObjectInputStream(new FileInputStream(f));
            instance = in.readObject();
        } catch (ClassNotFoundException ex) {
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                    NbBundle.getMessage(CustomizeInstance.class, "ERR_CustomizeInstance.ClassNotFoundException", ex.getMessage()), // NOI18N
                    NotifyDescriptor.ERROR_MESSAGE
                )
            );
        } catch (FileNotFoundException ex) {
            if (exceptions) ex.printStackTrace();
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                    NbBundle.getMessage(CustomizeInstance.class, "ERR_CustomizeInstance.FileNotFoundException", f.getAbsolutePath()), // NOI18N
                    NotifyDescriptor.ERROR_MESSAGE
                )
            );
        } catch (StreamCorruptedException ex) {
            // The version or magic number are incorrect.
            if (exceptions) ex.printStackTrace();
            DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message(
                    getString("ERR_CustomizeInstance.StreamCorruptedException"), // NOI18N
                    NotifyDescriptor.ERROR_MESSAGE
                )
            );
        } catch (IOException ex) {
            ErrorManager err = RMIModule.getErrorManager(CreateInstance.class);
            err.annotate(ex, getString("ERR_CustomizeInstance.IOException")); // NOI18N
            err.notify(ex);
        } catch (ThreadDeath ex) {
            throw ex; // rethrow
        } catch (Throwable ex) {
            ErrorManager err = RMIModule.getErrorManager(CreateInstance.class);
            err.annotate(ex, getString("ERR_CustomizeInstance.Throwable")); // NOI18N
            err.notify(ex);
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException ex) {
                // ignore it is not needed
            }
        }
        
        return instance;
    }
    
}

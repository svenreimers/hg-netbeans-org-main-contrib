/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.rmi.activation;

import org.openide.util.NbBundle;

/**
 * Find out data necessary for registration to a registry.
 * @author  vzboril, Jan Pokorsky
 */
public class RegistrationPanel extends javax.swing.JPanel {

    /** Creates new form RegistrationPanel */
    public RegistrationPanel(String registryHost) {
        initComponents();
        jTextArea1.setText(NbBundle.getMessage(RegistrationPanel.class, "LBL_RegistrationPanel.Info", registryHost)); // NOI18N
        this.getAccessibleContext().setAccessibleDescription(getString("AD_RegistrationPanel") + jTextArea1.getText());
        jTextField1.setText(String.valueOf(java.rmi.registry.Registry.REGISTRY_PORT));
        jTextField1.selectAll();
    }
    
    /** Service name to bind to registry. */
    public String getServiceName() {
        return jTextField2.getText();
    }
    
    /** Port number to lookup registry.
     * @throws NumberFormatException if port is not 1-65535
     */
    public int getPort() throws NumberFormatException {
        String portStr = jTextField1.getText();
        int port = java.rmi.registry.Registry.REGISTRY_PORT;
        if (portStr != null && portStr.length() > 0) port = Integer.parseInt(portStr);
        if (port < 1 || port > 65535) throw new NumberFormatException();
        
        return port;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextArea1 = new javax.swing.JTextArea();
        
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        setPreferredSize(new java.awt.Dimension(300, 110));
        setMinimumSize(new java.awt.Dimension(300, 110));
        jLabel2.setText(getString("LBL_RegistrationPanel.Port"));
        jLabel2.setDisplayedMnemonic(getMnemonic("LBL_RegistrationPanel.Port"));
        jLabel2.setLabelFor(jTextField1);
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel2, gridBagConstraints1);
        
        jTextField1.setColumns(5);
        jTextField1.getAccessibleContext().setAccessibleDescription(getString("AD_RegistrationPanel.Port"));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(12, 11, 0, 12);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints1.weightx = 1.0;
        add(jTextField1, gridBagConstraints1);
        
        jLabel3.setText(getString("LBL_RegistrationPanel.Name"));
        jLabel3.setDisplayedMnemonic(getMnemonic("LBL_RegistrationPanel.Name"));
        jLabel3.setLabelFor(jTextField2);
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel3, gridBagConstraints1);
        
        jTextField2.setColumns(20);
        jTextField2.getAccessibleContext().setAccessibleDescription(getString("AD_RegistrationPanel.Name"));
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(11, 12, 0, 11);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints1.weightx = 1.0;
        add(jTextField2, gridBagConstraints1);
        
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setLineWrap(true);
        jTextArea1.setEditable(false);
        jTextArea1.setForeground(new java.awt.Color(102, 102, 153));
        jTextArea1.setText(getString("LBL_RegistrationPanel.Info"));
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setDisabledTextColor(new java.awt.Color(102, 102, 153));
        jTextArea1.setEnabled(false);
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 0, 12);
        add(jTextArea1, gridBagConstraints1);
        
    }//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

  /** Localization. */
  private String getString(java.lang.String key) {
     return org.openide.util.NbBundle.getBundle (RegistrationPanel.class).getString(key);
  }    
  
  private static final String mnemonic_suffix = ".mnemonic"; // NOI18N
  
  private char getMnemonic(java.lang.String key) {
     return org.openide.util.NbBundle.getBundle (RegistrationPanel.class).getString(key + mnemonic_suffix).charAt(0);
  }
}

/* Generated By:JavaCC: Do not edit this line. JavadocParser.java */

/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Leon Chiver. All Rights Reserved.
 */
package org.netbeans.modules.editor.java.doclet.parser;

import org.netbeans.modules.editor.java.doclet.ast.*;

public class JavadocParser implements JavadocParserConstants {

  static final public Javadoc doc() throws ParseException {
    Javadoc jd = new Javadoc();
    Token parStart;
    try {
      switch (jj_nt.kind) {
      case DOC_START:
        jj_consume_token(DOC_START);
        switch (jj_nt.kind) {
        case WORD:
          text();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        break;
      case PARAGRAPH_START0:
        parStart = jj_consume_token(PARAGRAPH_START0);
        paragraph(jd, 0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case PARAGRAPH_START1:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        parStart = jj_consume_token(PARAGRAPH_START1);
        paragraph(jd, parStart.beginLine);
      }
      jj_consume_token(DOC_END);
    } catch (ParseException ex) {
        // Should normally not happen
        ex.printStackTrace();
    } finally {
        {if (true) return jd;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public void text() throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(WORD);
      switch (jj_nt.kind) {
      case WORD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void paragraph(Javadoc jd, int beginLine) throws ParseException {
    Tag t = new Tag();
    t.setBeginLine(beginLine);
    Token tok1 = null;
    Token tok2 = null;
    Token tok;
    boolean validTag = true;
    switch (jj_nt.kind) {
    case EQ:
    case WORD:
      switch (jj_nt.kind) {
      case WORD:
        tok1 = jj_consume_token(WORD);
        break;
      case EQ:
        tok2 = jj_consume_token(EQ);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                // We checked for both <WORD> or <EQ>, so that we don't
                // get a parse exception if @= is in the javadoc
                // Alternatively, we could handle the exception
                tok = tok1 != null ? tok1 : tok2;
                if (tok.specialToken != null) {
                    validTag = false;
                } else {
                    t.setName(tok.image);
                    t.setNameBeginColumn(tok.beginColumn);
                    t.setNameEndColumn(tok.endColumn);
                }
      attributeList(t, validTag);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
            if (validTag) {
                jd.addTag(t);
            }
  }

/**
 * This method goes through a tag's content and decides if the words are attributes
 * or attribute values. For example in "@tag a1=a2", a1 would be the attribute and a2
 * would be it's value, while in "@tag a1 a2" both a1 and a2 would be attributes.
 * The attributes are added to the tag only if the tag is a valid one
 */
  static final public void attributeList(Tag t, boolean validTag) throws ParseException {
    Token word;
    Attribute a = null;
    boolean nextIsAttributeValue = false;
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case EQ:
      case WORD:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch (jj_nt.kind) {
      case WORD:
        word = jj_consume_token(WORD);
                if (validTag) {
                    if (nextIsAttributeValue && a != null) {
                        a.setValue(word.image);
                        // XXX - really strange behaviour of beginline
                        // We get get line + 1, so we have to adjust this
                        a.setValueLine(word.beginLine - 1);
                        a.setValueBeginColumn(word.beginColumn);
                        a.setValueEndColumn(word.endColumn);
                        a = null;
                    } else {
                        a = new Attribute();
                        a.setName(word.image);
                        // XXX - really strange behaviour of beginline
                        // We get get line + 1, so we have to adjust this
                        a.setLine(word.beginLine - 1);
                        a.setBeginColumn(word.beginColumn);
                        a.setEndColumn(word.endColumn);
                        t.addAttribute(a);
                        nextIsAttributeValue = false;
                    }
                }
        break;
      case EQ:
        jj_consume_token(EQ);
                if (a != null) {
                    // The next word is an attribute value
                    nextIsAttributeValue = !nextIsAttributeValue;
                }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static private boolean jj_initialized_once = false;
  static public JavadocParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x6,0x8,0x40,0x60,0x60,0x60,0x60,};
   }

  public JavadocParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavadocParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public JavadocParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavadocParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public JavadocParser(JavadocParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(JavadocParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[9];
    for (int i = 0; i < 9; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 9; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}

/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.a11y.ui;

import javax.swing.JLabel;
import javax.swing.JTextField;

import javax.accessibility.AccessibleContext;

import java.util.HashSet;
import java.util.Iterator;

import org.netbeans.a11y.TestSettings;
import org.netbeans.a11y.TestSettingsLogger;

/** A dialog to customize and run the accessibility test.
 *  Based on a11y project - author Tristan Bonsall
 *  @author  Marian.Mirilovic@sun.com
 */
public class AccessibilityPanel extends javax.swing.JPanel {
    
    /* Status label used for informing user about runned actions. */
    //private JLabel statusLabel;
    
    private javax.swing.DefaultListModel listModel = null;
    
    /** Creates new  */
    public AccessibilityPanel() {
        super();
        
        //this.statusLabel = statusL;
        
        listModel = new javax.swing.DefaultListModel();
        // no default listModel.addElement(new String("javax.swing.plaf.metal.MetalComboBoxButton"));
        
        initComponents();
        
        AccessibleContext jTabbedPane1_AC = jTabbedPane1.getAccessibleContext();
        jTabbedPane1_AC.setAccessibleName("Settings, Properties, Tester Configuration, AWT Tree of tested windows");
        jTabbedPane1_AC.setAccessibleDescription("Settings, Properties, Tester Configuration, AWT Tree of tested windows");
        
        // set default settings
        TestSettings defaultTS = new TestSettings();
        defaultTS.setDefaultSettings();
        setTests(defaultTS);

        if(!Boolean.getBoolean("a11ytest.name")) {
            cbTestName.setVisible(false);
            cbTestName.setSelected(false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        results = new javax.swing.ButtonGroup();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tests = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        model = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        implement = new javax.swing.JCheckBox();
        jPanel51 = new javax.swing.JPanel();
        showingOnly_IA = new javax.swing.JCheckBox();
        properties = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        isFocusTraversable = new javax.swing.JCheckBox();
        showingOnly_AP = new javax.swing.JCheckBox();
        traversal = new javax.swing.JCheckBox();
        jPanel511 = new javax.swing.JPanel();
        showingOnly_T = new javax.swing.JCheckBox();
        cbTestName = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        a11yProperties = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        accessName = new javax.swing.JCheckBox();
        accessDesc = new javax.swing.JCheckBox();
        labelForSet = new javax.swing.JCheckBox();
        labelForPointsTo = new javax.swing.JCheckBox();
        labelForPointsToPanel = new javax.swing.JPanel();
        lfpt_JTextComponent = new javax.swing.JCheckBox();
        lfpt_JTable = new javax.swing.JCheckBox();
        lfpt_JList = new javax.swing.JCheckBox();
        lfpt_JTree = new javax.swing.JCheckBox();
        lfpt_JTabbedPane = new javax.swing.JCheckBox();
        mnemonics = new javax.swing.JCheckBox();
        mnemonicsPanel = new javax.swing.JPanel();
        mnemonicsAbstractButtons = new javax.swing.JCheckBox();
        mnemonicsJLabels = new javax.swing.JCheckBox();
        mnemonicsDefault = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        cancelTextField = new javax.swing.JTextField();
        options = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        newExclude = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        excludes = new javax.swing.JList();
        removeButton = new javax.swing.JButton();
        excluded = new javax.swing.JLabel();
        jPanel101 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        propertiesFileName = new javax.swing.JTextField();
        browsePropertiesFile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        readPropertiesFromFile = new javax.swing.JButton();
        resultsPane = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        reportTypeCheckBox = new javax.swing.JCheckBox();
        outputWindow = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        file = new javax.swing.JRadioButton();
        fileName = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        printName = new javax.swing.JCheckBox();
        printDescription = new javax.swing.JCheckBox();
        printPosition = new javax.swing.JCheckBox();
        propertiesFile = new javax.swing.JCheckBox();
        removePanel = new javax.swing.JPanel();
        removeTabButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout(10, 0));

        statusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        statusLabel.setText(" ");
        statusLabel.setToolTipText("Status label");
        statusPanel.add(statusLabel);

        add(statusPanel, java.awt.BorderLayout.NORTH);

        jTabbedPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        tests.setLayout(new javax.swing.BoxLayout(tests, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
        model.setMnemonic('a');
        model.setSelected(true);
        model.setText(" Get and show AWT tree of tested components");
        model.setToolTipText("Get and show AWT tree of tested window");
        jPanel3.add(model);

        jLabel3.setText("          ");
        jPanel3.add(jLabel3);

        implement.setMnemonic('i');
        implement.setText(" Test if components implement Accessible interface");
        implement.setToolTipText("Test if components implement Accessible interface");
        implement.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                implementItemStateChanged(evt);
            }
        });

        jPanel3.add(implement);

        jPanel51.setLayout(new javax.swing.BoxLayout(jPanel51, javax.swing.BoxLayout.Y_AXIS));

        jPanel51.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 20, 10, 10)));
        showingOnly_IA.setMnemonic('o');
        showingOnly_IA.setText(" Only test showing components");
        showingOnly_IA.setToolTipText("Only test showing components in tab traversal");
        jPanel51.add(showingOnly_IA);

        jPanel3.add(jPanel51);

        properties.setMnemonic('p');
        properties.setText(" Test Accessibility properties");
        properties.setToolTipText("Run the property tests defined below");
        properties.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                propertiesItemStateChanged(evt);
            }
        });

        jPanel3.add(properties);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 20, 10, 10)));
        isFocusTraversable.setMnemonic('f');
        isFocusTraversable.setText(" Only test focusTraversable components");
        isFocusTraversable.setToolTipText("Only test focusTraversable components in test properties");
        jPanel5.add(isFocusTraversable);

        showingOnly_AP.setMnemonic('s');
        showingOnly_AP.setText(" Only test showing components");
        showingOnly_AP.setToolTipText("Only test showing components in tab traversal");
        jPanel5.add(showingOnly_AP);

        jPanel3.add(jPanel5);

        traversal.setMnemonic('k');
        traversal.setText(" Test keyboard traversal");
        traversal.setToolTipText("Test keyboard traversal");
        traversal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                traversalItemStateChanged(evt);
            }
        });

        jPanel3.add(traversal);

        jPanel511.setLayout(new javax.swing.BoxLayout(jPanel511, javax.swing.BoxLayout.Y_AXIS));

        jPanel511.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 20, 10, 10)));
        showingOnly_T.setMnemonic('w');
        showingOnly_T.setText(" Only test showing components");
        showingOnly_T.setToolTipText("Only test showing components in tab traversal");
        jPanel511.add(showingOnly_T);

        jPanel3.add(jPanel511);

        cbTestName.setText("Test component name");
        cbTestName.setName("cbTestName");
        jPanel3.add(cbTestName);

        tests.add(jPanel3);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        jPanel6.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(15, 15, 10, 10)));
        tests.add(jPanel6);

        jTabbedPane1.addTab("Tests", tests);

        a11yProperties.setLayout(new javax.swing.BoxLayout(a11yProperties, javax.swing.BoxLayout.Y_AXIS));

        jLabel4.setText(" ");
        a11yProperties.add(jLabel4);

        accessName.setMnemonic('n');
        accessName.setText(" Test if components have an Accessible name");
        accessName.setToolTipText("Test if components have an Accessible name");
        a11yProperties.add(accessName);

        accessDesc.setMnemonic('d');
        accessDesc.setText(" Test if components have an Accessible description");
        accessDesc.setToolTipText("Test if components have an Accessible description");
        a11yProperties.add(accessDesc);

        labelForSet.setMnemonic('l');
        labelForSet.setText(" Test whether JLabels have LABEL_FOR set");
        labelForSet.setToolTipText("Test whether JLabels have LABEL_FOR set");
        a11yProperties.add(labelForSet);

        labelForPointsTo.setMnemonic('f');
        labelForPointsTo.setText(" Test if components have a LABEL_FOR set to them");
        labelForPointsTo.setToolTipText("Test whether JTextFields have a LABEL_FOR set to them");
        labelForPointsTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                labelForPointsToItemStateChanged(evt);
            }
        });

        a11yProperties.add(labelForPointsTo);

        labelForPointsToPanel.setLayout(new javax.swing.BoxLayout(labelForPointsToPanel, javax.swing.BoxLayout.Y_AXIS));

        labelForPointsToPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 20, 10, 10)));
        lfpt_JTextComponent.setMnemonic('x');
        lfpt_JTextComponent.setText("JTextComponents");
        lfpt_JTextComponent.setToolTipText("Test if TextComponents have set labelFor them.");
        labelForPointsToPanel.add(lfpt_JTextComponent);

        lfpt_JTable.setMnemonic('a');
        lfpt_JTable.setText("JTable");
        lfpt_JTable.setToolTipText("Test if JTables have set labelFor them.");
        labelForPointsToPanel.add(lfpt_JTable);

        lfpt_JList.setMnemonic('i');
        lfpt_JList.setText("JList");
        lfpt_JList.setToolTipText("Test if JLists have set labelFor them.");
        labelForPointsToPanel.add(lfpt_JList);

        lfpt_JTree.setMnemonic('e');
        lfpt_JTree.setText("JTree");
        lfpt_JTree.setToolTipText("Test if JTrees have set labelFor them.");
        labelForPointsToPanel.add(lfpt_JTree);

        lfpt_JTabbedPane.setMnemonic('p');
        lfpt_JTabbedPane.setText("JTabbedPane");
        lfpt_JTabbedPane.setToolTipText("Test if JtabbedPanes have set labelFor them.");
        labelForPointsToPanel.add(lfpt_JTabbedPane);

        a11yProperties.add(labelForPointsToPanel);

        mnemonics.setMnemonic('m');
        mnemonics.setText(" Test if components have  mnemonics for");
        mnemonics.setToolTipText("Test whether AbstractButtons have mnemonics");
        mnemonics.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mnemonicsItemStateChanged(evt);
            }
        });

        a11yProperties.add(mnemonics);

        mnemonicsPanel.setLayout(new javax.swing.BoxLayout(mnemonicsPanel, javax.swing.BoxLayout.Y_AXIS));

        mnemonicsPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 20, 10, 10)));
        mnemonicsAbstractButtons.setMnemonic('b');
        mnemonicsAbstractButtons.setText("AbstractButtons");
        mnemonicsAbstractButtons.setToolTipText("Test if AbstractButtons have mnemonics");
        mnemonicsPanel.add(mnemonicsAbstractButtons);

        mnemonicsJLabels.setMnemonic('j');
        mnemonicsJLabels.setText("JLabels with LABEL_FOR focusable");
        mnemonicsJLabels.setToolTipText("Test if JLables with not null labelFor have mnemonics");
        mnemonicsPanel.add(mnemonicsJLabels);

        mnemonicsDefault.setMnemonic('u');
        mnemonicsDefault.setText("default and \"Cancel\" button");
        mnemonicsDefault.setToolTipText("Test default and Cancel button have mnemonics");
        mnemonicsDefault.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mnemonicsDefaultItemStateChanged(evt);
            }
        });

        mnemonicsPanel.add(mnemonicsDefault);

        cancelTextField.setColumns(10);
        cancelTextField.setToolTipText("Text of \"cancel\" button");
        jPanel15.add(cancelTextField);

        mnemonicsPanel.add(jPanel15);

        a11yProperties.add(mnemonicsPanel);

        jTabbedPane1.addTab("Accessibility properties", a11yProperties);

        options.setLayout(new java.awt.GridBagLayout());

        addButton.setMnemonic('a');
        addButton.setText("Add");
        addButton.setToolTipText("Add the class to the list of excluded classes");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 11);
        options.add(addButton, gridBagConstraints);

        newExclude.setColumns(20);
        newExclude.setToolTipText("The full class name to exclude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 0);
        options.add(newExclude, gridBagConstraints);

        excludes.setModel(listModel);
        excludes.setToolTipText("The list of classes excluded from the test");
        excludes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                excludesValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(excludes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 2, 0);
        options.add(jScrollPane1, gridBagConstraints);

        removeButton.setMnemonic('r');
        removeButton.setText("Remove");
        removeButton.setToolTipText("Remove the selected classes from the list of excluded classes");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 11);
        options.add(removeButton, gridBagConstraints);

        excluded.setText("Excluded Classes:");
        excluded.setDisplayedMnemonic('E');
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        options.add(excluded, gridBagConstraints);

        jPanel101.setLayout(new javax.swing.BoxLayout(jPanel101, javax.swing.BoxLayout.Y_AXIS));

        jPanel101.setBorder(new javax.swing.border.TitledBorder(" Read properties from file "));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        propertiesFileName.setColumns(25);
        propertiesFileName.setToolTipText("The file name to save to");
        jPanel1.add(propertiesFileName);

        browsePropertiesFile.setMnemonic('b');
        browsePropertiesFile.setText("Browse...");
        browsePropertiesFile.setToolTipText("Select the destination file for the results");
        browsePropertiesFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browsePropertiesFileActionPerformed(evt);
            }
        });

        jPanel1.add(browsePropertiesFile);

        jPanel101.add(jPanel1);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        readPropertiesFromFile.setText("Read properties");
        readPropertiesFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readPropertiesFromFileActionPerformed(evt);
            }
        });

        jPanel2.add(readPropertiesFromFile);

        jPanel101.add(jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        options.add(jPanel101, gridBagConstraints);

        jTabbedPane1.addTab("Test settings", options);

        resultsPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel9.setLayout(new java.awt.GridBagLayout());

        reportTypeCheckBox.setMnemonic('x');
        reportTypeCheckBox.setText("store to XML ");
        reportTypeCheckBox.setToolTipText("Write output into xml file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 1);
        jPanel9.add(reportTypeCheckBox, gridBagConstraints);

        outputWindow.setMnemonic('o');
        outputWindow.setSelected(true);
        outputWindow.setText(" Standard Output");
        outputWindow.setToolTipText("Send the results to the Standard Output as text");
        results.add(outputWindow);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 0);
        jPanel9.add(outputWindow, gridBagConstraints);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 4, 5));

        file.setMnemonic('f');
        file.setText(" File");
        file.setToolTipText("Save the results to a XML file");
        results.add(file);
        file.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        file.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fileItemStateChanged(evt);
            }
        });

        jPanel10.add(file);

        fileName.setColumns(25);
        fileName.setToolTipText("The file name to save to");
        fileName.setEnabled(false);
        jPanel10.add(fileName);

        browseButton.setMnemonic('b');
        browseButton.setText("Browse...");
        browseButton.setToolTipText("Select the destination file for the results");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jPanel10.add(browseButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        jPanel9.add(jPanel10, gridBagConstraints);

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.Y_AXIS));

        jPanel8.setBorder(new javax.swing.border.TitledBorder("Print Options :"));
        printName.setMnemonic('n');
        printName.setText("print Name of Component");
        printName.setToolTipText("Write name of components to output.");
        jPanel8.add(printName);

        printDescription.setMnemonic('d');
        printDescription.setText("print Description of Component");
        printDescription.setToolTipText("Write description of components to output.");
        jPanel8.add(printDescription);

        printPosition.setMnemonic('p');
        printPosition.setText("print Position of Component");
        printPosition.setToolTipText("Write position of components to output.");
        jPanel8.add(printPosition);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jPanel8, gridBagConstraints);

        propertiesFile.setMnemonic('s');
        propertiesFile.setSelected(true);
        propertiesFile.setText("save properties to second file");
        propertiesFile.setToolTipText("Save properties of test into .properties file");
        propertiesFile.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 1);
        jPanel9.add(propertiesFile, gridBagConstraints);

        resultsPane.add(jPanel9);

        jTabbedPane1.addTab("Test results", resultsPane);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        removePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        removeTabButton.setText("Remove selected tab");
        removeTabButton.setEnabled(false);
        removeTabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTabButtonActionPerformed(evt);
            }
        });

        removePanel.add(removeTabButton);

        add(removePanel, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void removeTabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTabButtonActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index > 3)
            jTabbedPane1.remove(index);
    }//GEN-LAST:event_removeTabButtonActionPerformed
    
    private void readPropertiesFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readPropertiesFromFileActionPerformed
        String p_fileName = getPropertiesFileName();
        
        try{
            if(p_fileName != null) {
                TestSettings testSettings = TestSettingsLogger.readSettings(p_fileName);
                if(testSettings.getReadedCorrectly()){
                    setTests(testSettings);
                    setStatusText("Settings readed from file {"+p_fileName+"} correctly.");
                }else
                    setStatusText("ERROR: Settings readed from file {"+p_fileName+"} incorrectly !");
            }else
                setStatusText("ERROR: It's impossible read properties from file {null}.");
        }catch(java.io.IOException exc) {
            setStatusText("It's impossible read properties from file {"+p_fileName+"}.");
        }
        
        
    }//GEN-LAST:event_readPropertiesFromFileActionPerformed
    
    private void browsePropertiesFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browsePropertiesFileActionPerformed
        String fn = getPropertiesFileName();
        javax.swing.JFileChooser chooser;
        
        if(fn == null)
            chooser = new javax.swing.JFileChooser();
        else
            chooser = new javax.swing.JFileChooser(fn);
        
        chooser.setDialogTitle("Properties file destination");
        int returnVal = chooser.showDialog(this, "OK");
        if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            propertiesFileName.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_browsePropertiesFileActionPerformed
    
    private void implementItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_implementItemStateChanged
        boolean state = (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED);
        showingOnly_IA.setEnabled(state);
    }//GEN-LAST:event_implementItemStateChanged
    
    private void mnemonicsDefaultItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mnemonicsDefaultItemStateChanged
        boolean state = (evt.getStateChange() != java.awt.event.ItemEvent.SELECTED);
        cancelTextField.setEnabled(state);
    }//GEN-LAST:event_mnemonicsDefaultItemStateChanged
    
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        removeTabButton.setEnabled(jTabbedPane1.getSelectedIndex()>3);
    }//GEN-LAST:event_jTabbedPane1StateChanged
    
    private void labelForPointsToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_labelForPointsToItemStateChanged
        setLabelForCheckBoxesEnabled(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED);
    }//GEN-LAST:event_labelForPointsToItemStateChanged
    
    private void setLabelForCheckBoxesEnabled(boolean state) {
        lfpt_JList.setEnabled(state);
        lfpt_JTextComponent.setEnabled(state);
        lfpt_JTable.setEnabled(state);
        lfpt_JTree.setEnabled(state);
        lfpt_JTabbedPane.setEnabled(state);
    }
    
    private void mnemonicsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mnemonicsItemStateChanged
        setMenomonicsCheckBoxesEnabled(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED);
    }//GEN-LAST:event_mnemonicsItemStateChanged
    
    private void setMenomonicsCheckBoxesEnabled(boolean state) {
        mnemonicsAbstractButtons.setEnabled(state);
        mnemonicsJLabels.setEnabled(state);
        mnemonicsDefault.setEnabled(state);
        boolean defS = mnemonicsDefault.isSelected();
        cancelTextField.setEnabled(state && !defS);
    }
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String fn = getResultsFileName();
        javax.swing.JFileChooser chooser;
        
        if(fn == null)
            chooser = new javax.swing.JFileChooser();
        else
            chooser = new javax.swing.JFileChooser(fn);
        
        chooser.setDialogTitle("Set results destination");
        int returnVal = chooser.showDialog(this, "OK");
        if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            fileName.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String className = newExclude.getText();
        
        if (className.compareTo("") != 0){
            try{
                Class clazz = Class.forName(className);
                if (java.awt.Component.class.isAssignableFrom(clazz)){
                    listModel.addElement(className);
                }
            } catch(ClassNotFoundException e){
                //Ignore?
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        while (!excludes.isSelectionEmpty()){
            int index = excludes.getSelectedIndex();
            listModel.remove(index);
        }
        removeButton.setEnabled(false);
    }//GEN-LAST:event_removeButtonActionPerformed
    
    private void excludesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_excludesValueChanged
        if (evt.getSource() == excludes){
            if (!excludes.isSelectionEmpty()){
                removeButton.setEnabled(true);
            } else{
                removeButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_excludesValueChanged
    
    private void traversalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_traversalItemStateChanged
        boolean state = (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED);
        showingOnly_T.setEnabled(state);
    }//GEN-LAST:event_traversalItemStateChanged
    
    private void propertiesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_propertiesItemStateChanged
        boolean state = (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED);
        //implement.setEnabled(state);
        accessName.setEnabled(state);
        accessDesc.setEnabled(state);
        labelForSet.setEnabled(state);
        labelForPointsTo.setEnabled(state);
        if(labelForPointsTo.isSelected())
            setLabelForCheckBoxesEnabled(state);
        mnemonics.setEnabled(state);
        if(mnemonics.isSelected())
            setMenomonicsCheckBoxesEnabled(state);
        isFocusTraversable.setEnabled(state);
        showingOnly_AP.setEnabled(state);
        
    }//GEN-LAST:event_propertiesItemStateChanged
    
    
    
    private void fileItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fileItemStateChanged
        boolean state = (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED);
        
        propertiesFile.setEnabled(state);
        fileName.setEnabled(state);
        browseButton.setEnabled(state);
    }//GEN-LAST:event_fileItemStateChanged
    
    
    /** Get the tests specified before the dialog was closed.
     *  @return the tests to perform.
     */
    public TestSettings getTests(){
        TestSettings settings = new TestSettings();
        
        settings.accessibleInterface = (implement.isSelected() && implement.isEnabled());
        settings.AI_showingOnly = (showingOnly_IA.isSelected() && showingOnly_IA.isEnabled());
        
        settings.accessibleProperties = (properties.isSelected() && properties.isEnabled());
        settings.AP_showingOnly = (showingOnly_AP.isSelected() && showingOnly_AP.isEnabled());
        settings.AP_focusTraversableOnly = (isFocusTraversable.isSelected() && isFocusTraversable.isEnabled());
        settings.AP_accessibleName = (accessName.isSelected() && accessName.isEnabled());
        settings.AP_accessibleDescription = (accessDesc.isSelected() && accessDesc.isEnabled());
        settings.AP_labelForSet = (labelForSet.isSelected() && labelForSet.isEnabled());
        settings.AP_noLabelFor = (labelForPointsTo.isSelected() && labelForPointsTo.isEnabled());
        settings.AP_nlf_text = (lfpt_JTextComponent.isSelected() && lfpt_JTextComponent.isEnabled());
        settings.AP_nlf_table = (lfpt_JTable.isSelected()&& lfpt_JTable.isEnabled());
        settings.AP_nlf_list = (lfpt_JList.isSelected() && lfpt_JList.isEnabled());
        settings.AP_nlf_tree = (lfpt_JTree.isSelected() && lfpt_JTree.isEnabled());
        settings.AP_nlf_tabbedPane = (lfpt_JTabbedPane.isSelected() && lfpt_JTabbedPane.isEnabled());
        settings.AP_mnemonics = (mnemonics.isSelected() && mnemonics.isEnabled());
        settings.AP_m_abstractButtons = (mnemonicsAbstractButtons.isSelected() && mnemonicsAbstractButtons.isEnabled());
        settings.AP_m_label = (mnemonicsJLabels.isSelected() && mnemonicsJLabels.isEnabled());
        settings.AP_m_defaultCancel = (mnemonicsDefault.isSelected() && mnemonicsDefault.isEnabled());
        
        settings.tabTraversal = (traversal.isSelected() && traversal.isEnabled());
        settings.TT_showingOnly = (showingOnly_T.isSelected() && showingOnly_T.isEnabled());
        
        settings.setCancelLabel(getCancelText());
        settings.setExcludedClasses(getExcludes(settings.excludedSeparator));
        
        settings.report_name = (printName.isSelected() && printName.isEnabled());
        settings.report_description = (printDescription.isSelected() && printDescription.isEnabled());
        settings.report_position = (printPosition.isSelected() && printPosition.isEnabled());
        
        settings.storeToXML = getReportTypeXML();
        
        settings.test_name = cbTestName.isSelected() && cbTestName.isEnabled();
        
        return settings;
    }
    
    
    private void setCheckBox(javax.swing.JCheckBox ch_box, boolean enabled, boolean selected){
        ch_box.setEnabled(enabled);
        ch_box.setSelected(selected);
    }
    
    
    /** Set the tests.  */
    public void setTests(TestSettings settings){
        
        implement.setSelected(settings.accessibleInterface);
        setCheckBox(showingOnly_IA, settings.accessibleInterface && implement.isSelected(), settings.AI_showingOnly);
        
        properties.setSelected(settings.accessibleProperties);
        setCheckBox(accessName ,settings.accessibleProperties && properties.isSelected(),settings.AP_accessibleName);
        setCheckBox(accessDesc ,settings.accessibleProperties && properties.isSelected(),settings.AP_accessibleDescription);
        setCheckBox(labelForSet ,settings.accessibleProperties && properties.isSelected(),settings.AP_labelForSet);
        setCheckBox(labelForPointsTo ,settings.accessibleProperties && properties.isSelected(),settings.AP_noLabelFor);
        
        setCheckBox(lfpt_JTextComponent,settings.accessibleProperties && labelForPointsTo.isSelected(),settings.AP_nlf_text);
        setCheckBox(lfpt_JTable,settings.accessibleProperties && labelForPointsTo.isSelected(),settings.AP_nlf_table);
        setCheckBox(lfpt_JList,settings.accessibleProperties && labelForPointsTo.isSelected(),settings.AP_nlf_list);
        setCheckBox(lfpt_JTree,settings.accessibleProperties && labelForPointsTo.isSelected(),settings.AP_nlf_tree);
        setCheckBox(lfpt_JTabbedPane,settings.accessibleProperties && labelForPointsTo.isSelected(),settings.AP_nlf_tabbedPane);
        
        setCheckBox(mnemonics, settings.accessibleProperties, settings.AP_mnemonics);
        
        setCheckBox(mnemonicsAbstractButtons,settings.accessibleProperties && mnemonics.isSelected(),settings.AP_m_abstractButtons);
        setCheckBox(mnemonicsJLabels,settings.accessibleProperties && mnemonics.isSelected(),settings.AP_m_label);
        setCheckBox(mnemonicsDefault,settings.accessibleProperties && mnemonics.isSelected(),settings.AP_m_defaultCancel);
        
        setCheckBox(isFocusTraversable, settings.accessibleProperties, settings.AP_focusTraversableOnly);
        setCheckBox(showingOnly_AP, settings.accessibleProperties, settings.AP_showingOnly);
        
        traversal.setSelected(settings.tabTraversal);
        setCheckBox(showingOnly_T, settings.tabTraversal && traversal.isSelected(), settings.TT_showingOnly);
        
        cancelTextField.setText(settings.getCancelLabel());
        
        listModel = new javax.swing.DefaultListModel();
        HashSet exc = settings.getExcludedClasses();
        if (exc.size() > 0){
            Iterator i = exc.iterator();
            while(i.hasNext()){
                listModel.addElement(i.next().toString());
            }
        }
        excludes.setModel(listModel);
        
        setCheckBox(printName, true, settings.report_name);
        setCheckBox(printDescription, true, settings.report_description);
        setCheckBox(printPosition, true, settings.report_position);
        setCheckBox(reportTypeCheckBox, true, settings.storeToXML);
        
    }
    
    
    /** Get the list of excluded classes.
     *  @return a semicolon separated list of classes
     */
    private String getExcludes(String separator){
        StringBuffer buffer = new StringBuffer();
        for (int c = 0; c < listModel.size(); c++){
            buffer.append((String)(listModel.get(c)));
            
            if (c != listModel.size() - 1){
                buffer.append(separator);
            }
        }
        return buffer.toString();
    }
    
    /** Return label of Cancel button if test Default and Cancel is true
     * @return label for Cancel testing
     */
    private String getCancelText(){
        return cancelTextField.getText();
    }
    
    /** Return whether to do the implement Accessibility test.
     *  @return true if the implment Accessibility test is to be performed, false otherwise
     */
    private boolean doImplement(){
        return implement.isSelected();
    }
    
    /** Return whether to get model of tested windows.
     *  @return true if get model is to be performed, false otherwise
     */
    public boolean doGetModel(){
        return model.isSelected();
    }
    
    /** Return whether to do the property tests.
     *  @return true if the property tests are to be performed, false otherwise
     */
    private boolean doProperties(){
        return properties.isSelected();
    }
    
    /** Return whether to do the traversal test.
     *  @return true if the traversal test is to be performed, false otherwise
     */
    private boolean doTraversal(){
        return traversal.isSelected();
    }
    
    
    /** Return whether store report to XML or TXT file
     *  @return true store to XML, false store to TXT file
     */
    private boolean getReportTypeXML() {
        return reportTypeCheckBox.isSelected();
    }
    
    
    /**  Return the name of file to save the results to.
     *  @return the filename, or null if OutputWindow is desired output.
     */
    public String getResultsFileName(){
        String name = fileName.getText();
        if (file.isSelected() && name.length()>0){
            return name;
        }
        return null;
    }
    
    public boolean saveProperties() {
        return (propertiesFile.isSelected() && propertiesFile.isEnabled());
    }
    
    /**  Return the name of file to save the properties to.
     *  @return the filename, or null if OutputWindow is desired output.
     */
    private String getPropertiesFileName(){
        String name = propertiesFileName.getText();
        if (name.length() > 0){
            return name;
        }
        return null;
    }
    
    
    public void addTreePanel(String rootLabel, javax.swing.JSplitPane panel){
        jTabbedPane1.addTab("AWT tree - "+ (rootLabel.length()>10 ? rootLabel.substring(0,10) : rootLabel), panel);
        jTabbedPane1.invalidate();
        jTabbedPane1.validate();
        jTabbedPane1.repaint();
        
        panel.setDividerSize(5);
        panel.setDividerLocation(0.4);

    }
    
/*    public JLabel getStatusLabel() {
        return statusLabel;
    }
*/
    
    public void setStatusText(String text) {
        if(statusLabel != null)
            statusLabel.setText(text);
        else
            System.err.println("It's impossible set status text, because status label is null and this isn't used as NetBeans module.");
    }
    
    
    public void enableAllCheckBoxes(boolean enable) {
        accessDesc.setEnabled(enable);
        accessName.setEnabled(enable);
        cbTestName.setEnabled(enable);
        implement.setEnabled(enable);
        isFocusTraversable.setEnabled(enable);
        labelForPointsTo.setEnabled(enable);
        labelForSet.setEnabled(enable);
        lfpt_JList.setEnabled(enable);
        lfpt_JTabbedPane.setEnabled(enable);
        lfpt_JTable.setEnabled(enable);
        lfpt_JTextComponent.setEnabled(enable);
        lfpt_JTree.setEnabled(enable);
        mnemonics.setEnabled(enable);
        mnemonicsAbstractButtons.setEnabled(enable);
        mnemonicsDefault.setEnabled(enable);
        mnemonicsJLabels.setEnabled(enable);
        model.setEnabled(enable);
        showingOnly_AP.setEnabled(enable);
        showingOnly_IA.setEnabled(enable);
        showingOnly_T.setEnabled(enable);
        properties.setEnabled(enable);
        traversal.setEnabled(enable);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel a11yProperties;
    private javax.swing.JCheckBox accessDesc;
    private javax.swing.JCheckBox accessName;
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton browsePropertiesFile;
    private javax.swing.JTextField cancelTextField;
    private javax.swing.JCheckBox cbTestName;
    private javax.swing.JLabel excluded;
    private javax.swing.JList excludes;
    private javax.swing.JRadioButton file;
    private javax.swing.JTextField fileName;
    private javax.swing.JCheckBox implement;
    private javax.swing.JCheckBox isFocusTraversable;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel101;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel511;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox labelForPointsTo;
    private javax.swing.JPanel labelForPointsToPanel;
    private javax.swing.JCheckBox labelForSet;
    private javax.swing.JCheckBox lfpt_JList;
    private javax.swing.JCheckBox lfpt_JTabbedPane;
    private javax.swing.JCheckBox lfpt_JTable;
    private javax.swing.JCheckBox lfpt_JTextComponent;
    private javax.swing.JCheckBox lfpt_JTree;
    private javax.swing.JCheckBox mnemonics;
    private javax.swing.JCheckBox mnemonicsAbstractButtons;
    private javax.swing.JCheckBox mnemonicsDefault;
    private javax.swing.JCheckBox mnemonicsJLabels;
    private javax.swing.JPanel mnemonicsPanel;
    private javax.swing.JCheckBox model;
    private javax.swing.JTextField newExclude;
    private javax.swing.JPanel options;
    private javax.swing.JRadioButton outputWindow;
    private javax.swing.JCheckBox printDescription;
    private javax.swing.JCheckBox printName;
    private javax.swing.JCheckBox printPosition;
    private javax.swing.JCheckBox properties;
    private javax.swing.JCheckBox propertiesFile;
    private javax.swing.JTextField propertiesFileName;
    private javax.swing.JButton readPropertiesFromFile;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel removePanel;
    private javax.swing.JButton removeTabButton;
    private javax.swing.JCheckBox reportTypeCheckBox;
    private javax.swing.ButtonGroup results;
    private javax.swing.JPanel resultsPane;
    private javax.swing.JCheckBox showingOnly_AP;
    private javax.swing.JCheckBox showingOnly_IA;
    private javax.swing.JCheckBox showingOnly_T;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel tests;
    private javax.swing.JCheckBox traversal;
    // End of variables declaration//GEN-END:variables
    
}

/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.core.ui;

import org.netbeans.modules.portalpack.servers.core.api.PSDeploymentManager;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.api.PSConfigPanelManager;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import java.awt.Component;
import org.openide.WizardDescriptor;

/**
 *
 * @author  Satya
 */
public class PSCustomizerPanel extends javax.swing.JPanel {
    
    private String psVersion;
    private String uri;
    private ConfigPanel[] configPanel;
    private PSConfigPanelManager configPanelManager;
    
    /** Creates new form PSCustomizerPanel */
    public PSCustomizerPanel(PSDeploymentManager manager) {
        this.psVersion = manager.getPSVersion();
        this.uri = manager.getUri();
        this.configPanelManager = manager.getPSConfigPanelManager();
        initComponents();
        initOtherData();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        applyButton = new javax.swing.JButton();
        tabPane = new javax.swing.JTabbedPane();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        applyButton.setText(org.openide.util.NbBundle.getMessage(PSCustomizerPanel.class, "LBL_APPLY"));
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(321, Short.MAX_VALUE)
                .add(applyButton)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, tabPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(tabPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(applyButton)
                .add(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
// TODO add your handling code here:
        WizardDescriptor.Panel[] panels = configPanelManager.getInstallPanels(psVersion);
        WizardDescriptor wd = new WizardDescriptor(panels);
        for(int i=0;i<configPanel.length;i++)
        {
            configPanel[i].store(wd);
        }
        
        PSConfigObject object = PSConfigObject.getPSConfigObject(uri);
        object.save(new WizardPropertyReader(wd));
    }//GEN-LAST:event_applyButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables
    
    private void initOtherData()
    {
        configPanel = configPanelManager.getConfigPanels(psVersion); 
        PSConfigObject object = PSConfigObject.getPSConfigObject(uri);
        for(int i=0;i<configPanel.length;i++)
        {
            configPanel[i].populateDataForCustomizer(object);
            tabPane.addTab(configPanel[i].getDescription(),(Component)configPanel[i]);
        }
    }
}

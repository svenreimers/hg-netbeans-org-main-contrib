/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.ui;

import java.awt.CardLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import org.openide.WizardDescriptor;
import java.util.*;
/**
 *
 * @author  satya
 */
public class DefaultServerConfigPanel extends ConfigPanel implements ChangeListener{
    private WizardDescriptor wd;
    private Map panelMap;
    /** Creates new form PCServerConfigTopPanel */
    public DefaultServerConfigPanel() {
        panelMap = new HashMap();
        initComponents();
        initServerSpecificComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        serverTypeCombo = new javax.swing.JComboBox();
        cardPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setLabelFor(serverTypeCombo);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(DefaultServerConfigPanel.class, "LBL_SERVER_TYPE")); // NOI18N

        serverTypeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                serverTypeComboItemStateChanged(evt);
            }
        });
        serverTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverTypeComboActionPerformed(evt);
            }
        });

        cardPanel.setLayout(new java.awt.CardLayout());

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(32, 32, 32)
                        .add(jLabel1)
                        .add(31, 31, 31)
                        .add(serverTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 256, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(cardPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(serverTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38)
                .add(cardPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void serverTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverTypeComboActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_serverTypeComboActionPerformed

    private void serverTypeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_serverTypeComboItemStateChanged
// TODO add your handling code here:
        if(wd != null)
        {
           wd.putProperty("WizardPanel_errorMessage","");
        }
        ServerType serverType = (ServerType)evt.getItem();
        if(serverType == null)
            return;
      
        CardLayout cl = (CardLayout)(cardPanel.getLayout());
        cl.show(cardPanel, serverType.getKey());    
        read(wd);
        fireChangeEvent();
    }//GEN-LAST:event_serverTypeComboItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cardPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox serverTypeCombo;
    // End of variables declaration//GEN-END:variables

    
    public void initServerSpecificComponents()
    {
       
        
       // cardPanel = new JPanel();
       // cardPanel.setLayout(new CardLayout());
    //    cardPanel.add(new PCServerConfigPanel(),"a");
      //  cardPanel.add(new PCConfigPanel(),"b");
        
        
        
        //serverTypeCombo.addItem("a");
        //serverTypeCombo.addItem("b");
    }

    public void populateDataForCustomizer(PSConfigObject object) {
        
        setServerType(object.getServerType());
        serverTypeCombo.setEditable(false);
        serverTypeCombo.setEnabled(false);
        Object ob = serverTypeCombo.getSelectedItem();
        if(ob == null)
            return;
        ConfigPanel selectedPanel = (ConfigPanel)panelMap.get(ob);
        if(selectedPanel != null)
            selectedPanel.populateDataForCustomizer(object);
    }

    public void read(WizardDescriptor wizardDescriptor) {
        wd = wizardDescriptor;
        Object ob = serverTypeCombo.getSelectedItem();
        ConfigPanel selectedPanel = (ConfigPanel)panelMap.get(ob);
        if(selectedPanel != null)
            selectedPanel.readSettings(wizardDescriptor);
    }

    public void store(WizardDescriptor d) {
        WizardPropertyReader reader = new WizardPropertyReader(d);
        
        Object ob = serverTypeCombo.getSelectedItem();
        reader.setServerType(((ServerType)ob).getKey());
        ConfigPanel selectedPanel = (ConfigPanel)panelMap.get(ob);
        if(selectedPanel != null)
            selectedPanel.store(d);
    }

    public boolean validate(Object wizardDescriptor) {
        Object ob = serverTypeCombo.getSelectedItem();
        ConfigPanel selectedPanel = (ConfigPanel)panelMap.get(ob);
        if(selectedPanel != null)
            return selectedPanel.validate(wizardDescriptor);
        return true;
    }
    
    public void setServerType(String type)
    {
        Set keys = panelMap.keySet();
        ServerType selectedServerType = null;
        if(keys == null) return;
        for(Iterator it = keys.iterator();it.hasNext();)
        {
            ServerType serverTypeObj = (ServerType)it.next();
            if(serverTypeObj.getKey().equals(type))
            {
                selectedServerType = serverTypeObj;
                break;
            }
        }
        
        if(selectedServerType != null)
            serverTypeCombo.setSelectedItem(selectedServerType);
    }

    public String getDescription() {
        return "Server Config";
    }
    
    public void registerServerConfigPanel(ConfigPanel panel,String serverKey,String serverDesc)
    {
        if(serverKey == null) return;
        ServerType serverType = new ServerType(serverKey,serverDesc);
        
        serverTypeCombo.addItem(serverType);
        cardPanel.add(panel,serverKey);
        panelMap.put(serverType,panel);
        panel.addChangeListener(this);
        
    }
    
    class ServerType{
        public String serverKey;
        public String serverDesc;
        
        public ServerType(String serverKey,String serverDesc)
        {
            this.serverDesc = serverDesc;
            this.serverKey = serverKey;
        }
        
        public int hashCode() {
            if(serverKey != null)
                return serverKey.hashCode();
            else
                return 1;    
        }
        
        public String toString(){
            return serverDesc;
        }
        
        public String getKey()
        {
            return serverKey;
        }
        
        public boolean equals(Object ob)
        {
            if(ob instanceof String)
            {
                if(serverKey.equals((String)ob))
                    return true;
                else
                    return false;
            }
            if(!(ob instanceof ServerType))
                return false;
            if(((ServerType)ob).getKey().equals(serverKey))
                return true;
            else
                return false;
        }
        
        public JLabel getJLabel1() {
        return jLabel1;
    }

}

    public JPanel getCardPanel() {
        return cardPanel;
    }

    public void stateChanged(ChangeEvent e) {
        fireChangeEvent();
    }

    
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 * John Platts
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 * Portions Copyrighted 2009 John Platts
 */

/*
 * JBConfigPanel.java
 *
 * Created on Apr 12, 2009, 8:42:18 PM
 */

package org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.jboss;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.java.platform.JavaPlatform;
import org.netbeans.api.java.platform.JavaPlatformManager;
import org.netbeans.api.java.platform.Specification;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.jboss.JBConfigUtil.GetHttpPortResult;
import org.netbeans.modules.portalpack.servers.core.util.DirectoryChooser;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

/**
 * Config Panel for JBoss Application Server
 * @author John Platts
 */
public class JBConfigPanel extends ConfigPanel implements DocumentListener {
    private static String DEFAULT_DEBUG_PORT = "8787";

    /** Creates new form JBConfigPanel */
    public JBConfigPanel() {
        initComponents();
        initData();

        httpPortTextField.getDocument().addDocumentListener(this);
        debugPortTextField.getDocument().addDocumentListener(this);
    }

    private void initData() {
        setJavaPlatform();
        debugPortTextField.setText(DEFAULT_DEBUG_PORT);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbossRootLabel = new javax.swing.JLabel();
        jbossRootTextField = new javax.swing.JTextField();
        jbossRootBrowseButton = new javax.swing.JButton();
        jbossInstanceLabel = new javax.swing.JLabel();
        jbossInstanceComboBox = new javax.swing.JComboBox();
        javaHomeLabel = new javax.swing.JLabel();
        javaHomeComboBox = new javax.swing.JComboBox();
        httpPortLabel = new javax.swing.JLabel();
        httpPortTextField = new javax.swing.JTextField();
        secureCheckbox = new javax.swing.JCheckBox();
        debugPortLabel = new javax.swing.JLabel();
        debugPortTextField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();

        jbossRootLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.jbossRootLabel.text")); // NOI18N

        jbossRootTextField.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.jbossRootTextField.text")); // NOI18N
        jbossRootTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jbossRootFocusLost(evt);
            }
        });

        jbossRootBrowseButton.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.jbossRootBrowseButton.text")); // NOI18N
        jbossRootBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onJbossRootBrowse(evt);
            }
        });

        jbossInstanceLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.jbossInstanceLabel.text")); // NOI18N

        jbossInstanceComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                onJbossInstanceItemStateChanged(evt);
            }
        });
        jbossInstanceComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                onJbossInstanceFocusLost(evt);
            }
        });

        javaHomeLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.javaHomeLabel.text")); // NOI18N

        httpPortLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.httpPortLabel.text")); // NOI18N

        httpPortTextField.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.httpPortTextField.text")); // NOI18N
        httpPortTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                onHttpPortFocusLost(evt);
            }
        });

        secureCheckbox.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.secureCheckbox.text")); // NOI18N

        debugPortLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.debugPortLabel.text")); // NOI18N

        debugPortTextField.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.debugPortTextField.text")); // NOI18N
        debugPortTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                onDebugPortFocusLost(evt);
            }
        });

        userNameLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.userNameLabel.text")); // NOI18N

        userNameTextField.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.userNameTextField.text")); // NOI18N

        passwordLabel.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.passwordLabel.text")); // NOI18N

        passwordTextField.setText(org.openide.util.NbBundle.getMessage(JBConfigPanel.class, "JBConfigPanel.passwordTextField.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jbossInstanceLabel)
                    .add(jbossRootLabel)
                    .add(javaHomeLabel)
                    .add(httpPortLabel)
                    .add(debugPortLabel)
                    .add(userNameLabel)
                    .add(passwordLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jbossRootTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbossRootBrowseButton))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jbossInstanceComboBox, 0, 305, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, debugPortTextField)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, httpPortTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(secureCheckbox))
                    .add(javaHomeComboBox, 0, 305, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, passwordTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, userNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                        .add(136, 136, 136)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbossRootLabel)
                    .add(jbossRootTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbossRootBrowseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbossInstanceLabel)
                    .add(jbossInstanceComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(javaHomeLabel)
                    .add(javaHomeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(httpPortLabel)
                    .add(httpPortTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(secureCheckbox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(debugPortLabel)
                    .add(debugPortTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userNameLabel)
                    .add(userNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(passwordLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbossRootFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jbossRootFocusLost
        populateAllDefaultValues();
    }//GEN-LAST:event_jbossRootFocusLost

    private void onJbossInstanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_onJbossInstanceFocusLost
        populateAllDefaultValues();
    }//GEN-LAST:event_onJbossInstanceFocusLost

    private void onHttpPortFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_onHttpPortFocusLost
        validate(null);
    }//GEN-LAST:event_onHttpPortFocusLost

    private void onDebugPortFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_onDebugPortFocusLost
        validate(null);
    }//GEN-LAST:event_onDebugPortFocusLost

    private void onJbossRootBrowse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onJbossRootBrowse
        DirectoryChooser chooser = new DirectoryChooser();
        String dir = browseInstallLocation(System.getProperty("netbeans.user"));
        if(dir != null) {
            jbossRootTextField.setText(dir);
            populateAllDefaultValues();
        }
    }//GEN-LAST:event_onJbossRootBrowse

    private void onJbossInstanceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_onJbossInstanceItemStateChanged
        
    }//GEN-LAST:event_onJbossInstanceItemStateChanged

    private String browseInstallLocation(String defaultDir){
        String insLocation = null;
        JFileChooser chooser = getJFileChooser(defaultDir);
        int returnValue = chooser.showDialog(SwingUtilities.getWindowAncestor(this),
                NbBundle.getMessage(JBConfigPanel.class, "LBL_BrowseButton")); //NOI18N

        if(returnValue == JFileChooser.APPROVE_OPTION){
            insLocation = chooser.getSelectedFile().getAbsolutePath();
        }
        return insLocation;
    }

    private JFileChooser getJFileChooser(String defaultDir){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(NbBundle.getMessage(JBConfigPanel.class, "LBL_ChooserName")); //NOI18N
        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setApproveButtonMnemonic("Choose_Button_Mnemonic".charAt(0)); //NOI18N
        chooser.setMultiSelectionEnabled(false);
        chooser.setApproveButtonToolTipText(NbBundle.getMessage(JBConfigPanel.class, "LBL_ChooserName")); //NOI18N

        chooser.getAccessibleContext().setAccessibleName(NbBundle.getMessage(JBConfigPanel.class, "LBL_ChooserName")); //NOI18N
        chooser.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(JBConfigPanel.class, "LBL_ChooserName")); //NOI18N

        // set the current directory
        File file = new File(defaultDir);
        if(file != null)
            chooser.setSelectedFile(file);

        return chooser;
    }

    @Override
    public void populateDataForCustomizer(PSConfigObject object) {
        String jbossRoot = object.getProperty(JBConstant.ROOT_DIR);
        jbossRootTextField.setText(jbossRoot);

        oldJbossRoot = null;
        populateJbossInstanceComboBox();

        String instanceName = object.getProperty(JBConstant.SERVER);
        if(instanceName != null) {
            for(int i = 0; i < jbossInstanceComboBox.getItemCount(); i++) {
                String item =
                        getStringFromObject(jbossInstanceComboBox.getItemAt(i));

                if(item.equals(instanceName)) {
                    jbossInstanceComboBox.setSelectedIndex(i);
                    jbossInstanceComboBox.setEnabled(false);
                    break;
                }
            }
        }

        String javaHome = object.getProperty(JBConstant.JAVA_HOME);
        JavaHome javaHomeObject = findJavaHomeObject(javaHome);

        if(javaHomeObject != null) {
            javaHomeComboBox.setSelectedItem(javaHomeObject);
            javaHomeComboBox.setEnabled(false);
        } else {
            setJavaPlatform();
        }

        httpPortTextField.setText(object.getPort());

        String securePropertyValue = object.getProperty(JBConstant.SECURE);

        secureCheckbox.setSelected(securePropertyValue != null &&
                "true".equalsIgnoreCase(securePropertyValue.trim()));
        debugPortTextField.setText(object.getProperty(JBConstant.DEBUG_PORT));

        userNameTextField.setText(object.getProperty(JBConstant.SERVER_USER));
        passwordTextField.setText(object.getProperty(JBConstant.SERVER_PASSWORD));
    }

    @Override
    public void read(WizardDescriptor wizardDescriptor) {
    }

    @Override
    public void store(WizardDescriptor wizardDescriptor) {
        WizardPropertyReader wr = new WizardPropertyReader(wizardDescriptor);

        File rootDir = new File(jbossRootTextField.getText());

        try {
            rootDir = rootDir.getCanonicalFile();
        } catch(IOException e) {
            rootDir = rootDir.getAbsoluteFile();
        }

        String rootDirStr = rootDir.toString();
        wr.setProperty(JBConstant.ROOT_DIR, rootDirStr);
        wr.setServerHome(rootDirStr);

        String instanceName =
                getStringFromObject(jbossInstanceComboBox.getSelectedItem());
        wr.setProperty(JBConstant.SERVER, instanceName);

        wr.setProperty(JBConstant.SERVER_DIR,
                new File(rootDir, "server" + File.separator + instanceName)
                .toString());

        JavaHome javaHome = (JavaHome)javaHomeComboBox.getSelectedItem();
        wr.setProperty(JBConstant.JAVA_HOME, javaHome.getJavaHome());

        String httpPort = httpPortTextField.getText();
        wr.setPort(httpPort);
        wr.setAdminPort(httpPort);
        wr.setProperty(JBConstant.SECURE,
                secureCheckbox.isSelected() ? "true" : "false");

        wr.setProperty(JBConstant.DEBUG_PORT,
                debugPortTextField.getText());

        String userName = userNameTextField.getText();
        wr.setProperty(JBConstant.SERVER_USER,
                userName);
        wr.setAdminUser(userName);

        char[] pwdChars = passwordTextField.getPassword();
        String pwdString = (pwdChars != null) ? new String(pwdChars) : null;
        wr.setProperty(JBConstant.SERVER_PASSWORD,
                pwdString);
        wr.setAdminPassWord(pwdString);
    }

    @Override
    public boolean validate(Object wizardDescriptor) {
        File jbossRoot = getJbossRoot();

        String instanceName =
                getStringFromObject(jbossInstanceComboBox.getSelectedItem());
        if(instanceName == null || instanceName.length() < 1) {
            setInvalidJbossRootErrorMessage();
            return false;
        }

        File serverDirectory =
                new File(jbossRoot, "server" + File.separator +
                instanceName);
        if(!JBConfigUtil.isValidJbossInstanceDirectory(serverDirectory)) {
            setInvalidJbossInstanceErrorMessage();
            return false;
        }

        if(!JBConfigUtil.isValidPort(httpPortTextField.getText())) {
            setInvalidHttpPortErrorMessage();
            return false;
        }
        if(!JBConfigUtil.isValidPort(debugPortTextField.getText())) {
            setInvalidDebugPortErrorMessage();
            return false;
        }

        setErrorMessage("");

        return true;
    }

    @Override
    public String getDescription() {
        return NbBundle.getMessage(
                JBConfigPanel.class, "LBL_JBOSS");
    }

    public void setJavaPlatform() {
        JavaPlatformManager jpm = JavaPlatformManager.getDefault();
        JavaPlatform[] installedPlatforms = jpm.getPlatforms(null, new Specification("J2SE", null)); // NOI18N

        JavaPlatform defaultPlatform  = jpm.getDefaultPlatform();
        JavaHome javaHomeObj = new JavaHome(defaultPlatform.getDisplayName(),getJavaHome(defaultPlatform));
        String javaHome = javaHomeObj.getJavaHome();
        javaHomeComboBox.addItem(javaHomeObj);

        for (int i = 0; i < installedPlatforms.length; i++) {
            String sjavaHome = getJavaHome(installedPlatforms[i]);
            if(sjavaHome == null)
                continue;

            if(!sjavaHome.equals(javaHome)) {
                JavaHome pjavaHome = new JavaHome(installedPlatforms[i].getDisplayName(),sjavaHome);
                javaHomeComboBox.addItem(pjavaHome);
            }
        }
    }

    private String getJavaHome(JavaPlatform platform) {
        try{
            FileObject fo = (FileObject)platform.getInstallFolders().iterator().next();
            return FileUtil.toFile(fo).getAbsolutePath();
        }catch(Exception e){
            return null;
        }
    }

    public void insertUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    public void removeUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    public void changedUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    private static String getStringFromObject(Object o) {
        if(o instanceof String) {
            return ((String)o);
        } else if(o != null) {
            return o.toString();
        } else {
            return null;
        }
    }

    private void setInvalidJbossRootErrorMessage() {
        setErrorMessage(NbBundle.getMessage(
                JBConfigPanel.class, "MSG_INVALID_JBOSS_ROOT"));
    }
    private void setInvalidJbossInstanceErrorMessage() {
        setErrorMessage(NbBundle.getMessage(
                JBConfigPanel.class, "MSG_INVALID_JBOSS_INSTANCE"));
    }
    private void setInvalidJavaHomeErrorMessage() {
        setErrorMessage(NbBundle.getMessage(
                JBConfigPanel.class, "MSG_INVALID_JAVA_HOME"));
    }
    private void setInvalidHttpPortErrorMessage() {
        setErrorMessage(NbBundle.getMessage(
                JBConfigPanel.class, "MSG_INVALID_HTTP_PORT"));
    }
    private void setInvalidDebugPortErrorMessage() {
        setErrorMessage(NbBundle.getMessage(
                JBConfigPanel.class, "MSG_INVALID_DEBUG_PORT"));
    }

    private void populateJbossInstanceComboBox() {
        File jbossRoot = getJbossRoot();

        populateJbossInstanceComboBox(jbossRoot,
                JBConfigUtil.isValidJbossRootDirectory(jbossRoot));
    }
    private void populateJbossInstanceComboBox(File jbossRoot,
            boolean isValidJbossRoot) {
        if(oldJbossRoot == null || jbossRoot == null ||
                !jbossRoot.equals(oldJbossRoot)) {
            File[] instanceDirectories = null;

            if(isValidJbossRoot) {
                File serverInstancesDirectory =
                        new File(jbossRoot, "server");

                if(serverInstancesDirectory.isDirectory()) {
                    instanceDirectories =
                            serverInstancesDirectory.listFiles(new FileFilter() {
                                public boolean accept(File pathname) {
                                    return JBConfigUtil.isValidJbossInstanceDirectory(pathname);
                                }
                            });
                }
            }

            Object oldSelectedItem =
                    getStringFromObject(jbossInstanceComboBox.getSelectedItem());

            jbossInstanceComboBox.removeAllItems();

            if(instanceDirectories != null) {
                int selectedIndex = -1;

                for(int i = 0; i < instanceDirectories.length; i++) {
                    String itemName =
                            instanceDirectories[i].getName();

                    if(itemName.equals(oldSelectedItem)) {
                        selectedIndex = i;
                    }

                    jbossInstanceComboBox.addItem(itemName);
                }

                if(selectedIndex >= 0) {
                    jbossInstanceComboBox.setSelectedIndex(selectedIndex);
                }
            }

            oldJbossRoot = jbossRoot;
        }
    }
    private void populateAllDefaultValues() {
        File jbossRoot = getJbossRoot();

        boolean isValidJbossRoot =
                JBConfigUtil.isValidJbossRootDirectory(jbossRoot);

        populateJbossInstanceComboBox(jbossRoot, isValidJbossRoot);

        if(!isValidJbossRoot) {
            setInvalidJbossRootErrorMessage();
            return;
        }

        String instanceName =
                getStringFromObject(jbossInstanceComboBox.getSelectedItem());
        File instanceDir =
                (isValidJbossRoot && instanceName != null) ?
                    new File(jbossRoot, "server" + File.separator + instanceName) :
                    null;

        boolean validInstanceDir =
                JBConfigUtil.isValidJbossInstanceDirectory(instanceDir);

        if(validInstanceDir) {
            String httpPortTextFieldValue =
                    httpPortTextField.getText();

            if(httpPortTextFieldValue == null ||
                    (httpPortTextFieldValue = httpPortTextFieldValue.trim()).length() < 1) {
                GetHttpPortResult portResult =
                       JBConfigUtil.getHttpPort(instanceDir.getAbsolutePath());
                if(portResult != null) {
                    httpPortTextField.setText(Integer.toString(portResult.getPort()));
                    secureCheckbox.setSelected(portResult.isSecure());
                }
            }
        } else {
            setInvalidJbossInstanceErrorMessage();
            return;
        }

        if(javaHomeComboBox.getSelectedItem() == null) {
            if(javaHomeComboBox.getItemCount() >= 1) {
                setJavaPlatform();
            }

            if(javaHomeComboBox.getSelectedItem() == null) {
                setInvalidJavaHomeErrorMessage();
                return;
            }
        }

        if(!JBConfigUtil.isValidPort(httpPortTextField.getText())) {
            setInvalidHttpPortErrorMessage();
            return;
        }

        String debugPortTextFieldValue =
                debugPortTextField.getText();

        if(debugPortTextFieldValue == null ||
                (debugPortTextFieldValue = debugPortTextFieldValue.trim()).length() < 1) {

            debugPortTextFieldValue =
                    Integer.toString(JBStartServer.DEFAULT_DEBUG_PORT);
            debugPortTextField.setText(debugPortTextFieldValue);
        } else if(!JBConfigUtil.isValidPort(debugPortTextFieldValue)) {
            setInvalidDebugPortErrorMessage();
            return;
        }

        setErrorMessage("");
        fireChangeEvent();
    }

    public File getJbossRoot() {
        String jbossRootText = jbossRootTextField.getText();

        if(jbossRootText == null ||
                (jbossRootText = jbossRootText.trim()).length() < 1) {
            return null;
        }

        File file = new File(jbossRootText);

        try {
            return file.getCanonicalFile();
        } catch(IOException e) {
            return file.getAbsoluteFile();
        }
    }

    private JavaHome findJavaHomeObject(String javaHome) {
        JavaPlatformManager jpm = JavaPlatformManager.getDefault();
        JavaPlatform[] installedPlatforms = jpm.getPlatforms(null, new Specification("J2SE", null)); // NOI18N

        for (int i = 0; i < installedPlatforms.length; i++) {

            String sjavaHome = getJavaHome(installedPlatforms[i]);

            if(sjavaHome == null)
                continue;

            if(sjavaHome.equalsIgnoreCase(javaHome))
                return new JavaHome(installedPlatforms[i].getDisplayName(),getJavaHome(installedPlatforms[i]));

        }

        return null;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel debugPortLabel;
    private javax.swing.JTextField debugPortTextField;
    private javax.swing.JLabel httpPortLabel;
    private javax.swing.JTextField httpPortTextField;
    private javax.swing.JComboBox javaHomeComboBox;
    private javax.swing.JLabel javaHomeLabel;
    private javax.swing.JComboBox jbossInstanceComboBox;
    private javax.swing.JLabel jbossInstanceLabel;
    private javax.swing.JButton jbossRootBrowseButton;
    private javax.swing.JLabel jbossRootLabel;
    private javax.swing.JTextField jbossRootTextField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JCheckBox secureCheckbox;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables

    class JavaHome {
        public String displayName;
        public String javaHome;
        public JavaHome(String displayName,String javaHome) {
            this.displayName = displayName;
            this.javaHome = javaHome;
        }

        @Override
        public String toString() {
            return displayName + " (" + javaHome + ")";
        }

        public String getJavaHome() {
            return javaHome;
        }
    }

    private File oldJbossRoot;
}

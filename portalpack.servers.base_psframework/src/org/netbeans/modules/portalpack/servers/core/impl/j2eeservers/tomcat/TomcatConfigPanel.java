/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.tomcat;

import java.io.File;
import java.io.IOException;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.java.platform.JavaPlatform;
import org.netbeans.api.java.platform.JavaPlatformManager;
import org.netbeans.api.java.platform.Specification;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.util.DirectoryChooser;
import org.netbeans.modules.portalpack.servers.core.util.NetbeanConstants;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import org.netbeans.modules.portalpack.servers.core.util.Util;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;
import org.xml.sax.SAXException;

/**
 *
 * @author  satya
 */
public class TomcatConfigPanel extends ConfigPanel implements TomcatConstant, DocumentListener{
    
    private static Logger logger = Logger.getLogger(NetbeanConstants.PORTAL_LOGGER);
    private static String DEFAULT_DEBUG_PORT = "11589";
    /** Creates new form TomcatConfigPanel */
    public TomcatConfigPanel() {
        initComponents();
        initData();
        
        portTf.getDocument().addDocumentListener(this);
        debugPortTf.getDocument().addDocumentListener(this);
        
    }
    
    private void initData() {
        setJavaPlatform();
        debugPortTf.setText(DEFAULT_DEBUG_PORT);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        homeTf = new javax.swing.JTextField();
        homeButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        baseTf = new javax.swing.JTextField();
        baseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        javacombo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        portTf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        debugPortTf = new javax.swing.JTextField();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(TomcatConfigPanel.class, "LBL_CATALINA_HOME")); // NOI18N

        homeTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                homeTfFocusLost(evt);
            }
        });

        homeButton.setText("...");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(TomcatConfigPanel.class, "LBL_CATALINA_BASE")); // NOI18N

        baseTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                baseTfFocusLost(evt);
            }
        });

        baseButton.setText("...");
        baseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baseButtonActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(TomcatConfigPanel.class, "LBL_JAVA_HOME")); // NOI18N

        jLabel6.setLabelFor(portTf);
        jLabel6.setText(org.openide.util.NbBundle.getMessage(TomcatConfigPanel.class, "LBL_PORT")); // NOI18N

        jLabel7.setLabelFor(debugPortTf);
        jLabel7.setText(org.openide.util.NbBundle.getMessage(TomcatConfigPanel.class, "LBL_DEBUG_PORT")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(19, 19, 19))
                    .add(layout.createSequentialGroup()
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, debugPortTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, portTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(baseTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, homeTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(baseButton, 0, 0, Short.MAX_VALUE)
                            .add(homeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)))
                    .add(javacombo, 0, 289, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {baseTf, homeTf, javacombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {debugPortTf, portTf}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(homeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(homeButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(baseTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(baseButton)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel5)
                    .add(javacombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(portTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(debugPortTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void baseTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_baseTfFocusLost
// TODO add your handling code here:
        populateAllDefaultValues();
    }//GEN-LAST:event_baseTfFocusLost

    private void homeTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeTfFocusLost
// TODO add your handling code here:
        if(!checkIfValueAlreadySet(baseTf))
        {
            baseTf.setText(homeTf.getText());
        }
        populateAllDefaultValues();
    }//GEN-LAST:event_homeTfFocusLost
    
    private void baseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baseButtonActionPerformed
        
        DirectoryChooser chooser = new DirectoryChooser();
        String dir = browseInstallLocation(System.getProperty("user.home"));
        if(dir != null) {
            baseTf.setText(dir);
            populateAllDefaultValues();
        }
    }//GEN-LAST:event_baseButtonActionPerformed
    
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
// TODO add your handling code here:
        
        DirectoryChooser chooser = new DirectoryChooser();
        String dir = browseInstallLocation(System.getProperty("user.home"));
        if(dir != null)
            homeTf.setText(dir);
        if(!checkIfValueAlreadySet(baseTf))
        {
            if(dir != null)
                baseTf.setText(dir);
        }
        if(dir != null)
            populateAllDefaultValues();
    }//GEN-LAST:event_homeButtonActionPerformed

    private String browseInstallLocation(String defaultDir){
        String insLocation = null;
        JFileChooser chooser = getJFileChooser(defaultDir);
        int returnValue = chooser.showDialog(SwingUtilities.getWindowAncestor(this),
                NbBundle.getMessage(TomcatConfigPanel.class, "LBL_BrowseButton")); //NOI18N
        
        if(returnValue == JFileChooser.APPROVE_OPTION){
            insLocation = chooser.getSelectedFile().getAbsolutePath();
        }
        return insLocation;
    }
    
    private JFileChooser getJFileChooser(String defaultDir){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(NbBundle.getMessage(TomcatConfigPanel.class, "LBL_ChooserName")); //NOI18N
        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setApproveButtonMnemonic("Choose_Button_Mnemonic".charAt(0)); //NOI18N
        chooser.setMultiSelectionEnabled(false);
        chooser.setApproveButtonToolTipText(NbBundle.getMessage(TomcatConfigPanel.class, "LBL_ChooserName")); //NOI18N

        chooser.getAccessibleContext().setAccessibleName(NbBundle.getMessage(TomcatConfigPanel.class, "LBL_ChooserName")); //NOI18N
        chooser.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(TomcatConfigPanel.class, "LBL_ChooserName")); //NOI18N

        // set the current directory
        File file = new File(defaultDir);
        if(file != null)
            chooser.setSelectedFile(file);

        return chooser;
    }
      /** Update the jvm model */
    private void loadJvmModel() {
       /* JavaPlatformManager jpm = JavaPlatformManager.getDefault();
        JavaPlatformAdapter curJvm = (JavaPlatformAdapter)jvmModel.getSelectedItem();
        String curPlatformName = null;
        if (curJvm != null) {
            curPlatformName = curJvm.getName();
        } else {
            curPlatformName = (String)tp.getJavaPlatform().getProperties().get(TomcatProperties.PLAT_PROP_ANT_NAME);
        }

        jvmModel.removeAllElements();
        
        // feed the combo with sorted platform list
        JavaPlatform[] j2sePlatforms = jpm.getPlatforms(null, new Specification("J2SE", null)); // NOI18N
        JavaPlatformAdapter[] platformAdapters = new JavaPlatformAdapter[j2sePlatforms.length];
        for (int i = 0; i < platformAdapters.length; i++) {
            platformAdapters[i] = new JavaPlatformAdapter(j2sePlatforms[i]);
        }
        Arrays.sort(platformAdapters);
        for (int i = 0; i < platformAdapters.length; i++) {
            JavaPlatformAdapter platformAdapter = platformAdapters[i];
            jvmModel.addElement(platformAdapter);
            // try to set selected item
            if (curPlatformName != null) {
                if (curPlatformName.equals(platformAdapter.getName())) {
                    jvmModel.setSelectedItem(platformAdapter);
                }
            }   
        }*/
    }
    private boolean checkIfValueAlreadySet(JTextField jt)
    {
        String value = jt.getText();
        if(value == null || value.trim().length() == 0)
            return false;
        else
            return true;
    }
    
    private void populateAllDefaultValues()
    {
        String catalinaHome = homeTf.getText();
        String catalinaBase = baseTf.getText();
        
        TomcatConfigUtil configUtil = null;
        try {
            configUtil = new TomcatConfigUtil(new File(catalinaBase));
        } catch (SAXException ex) {
            
            setErrorMessage("Not a valid server.xml");
            fireChangeEvent();
            clearDomainXmlData();
            return;
        } catch (IOException ex) {
            setErrorMessage("Not a valid catalina base directory");
            fireChangeEvent();
            clearDomainXmlData();
            return;
        }catch(Exception e){
            setErrorMessage("Not a valid catalina base dir");
            clearDomainXmlData();
            fireChangeEvent();
            return;
        }
         setErrorMessage("");
                    
        String port = configUtil.getHttpPort();
        portTf.setText(port);
        
        debugPortTf.setText(DEFAULT_DEBUG_PORT);
        fireChangeEvent();
    }
    public void populateDataForCustomizer(PSConfigObject object) {
        
        homeTf.setText(object.getProperty(CATALINA_HOME));
        baseTf.setText(object.getProperty(CATALINA_BASE));
        homeTf.setEnabled(false);
        baseTf.setEnabled(false);
        
        homeButton.setEnabled(false);
        baseButton.setEnabled(false);
        
        //tomcatUserNameTf.setText(object.getProperty(MANAGER_USER));
        //tomcatPasswordTf.setText(object.getProperty(MANAGER_PASSWORD));
        
        String javaHome = object.getProperty(JAVA_HOME);
        JavaHome javaHomeObject = findJavaHomeObject(javaHome);
        if(javaHomeObject != null)
        {
            javacombo.setSelectedItem(javaHomeObject);
            //javacombo.setEnabled(false);
        }
        else{
           
             setJavaPlatform();
        }
        
        portTf.setText(object.getPort());
        debugPortTf.setText(object.getProperty(DEBUG_PORT));
    }
    
    public void read(WizardDescriptor wizardDescriptor) {
        //wd = wizardDescriptor;
        //logger.info("Inside read of TomcatConfigPanel...................");
                
    }
    
    public void store(WizardDescriptor d) {
        
        WizardPropertyReader wr = new WizardPropertyReader(d);
        wr.setProperty(CATALINA_HOME,homeTf.getText());
        wr.setServerHome(homeTf.getText());
        // wr.setProperty(MANAGER_USER,tomcatUserNameTf.getText());
        //wr.setProperty(MANAGER_PASSWORD,new String(tomcatPasswordTf.getPassword()));
        wr.setProperty(CATALINA_BASE,baseTf.getText());
        
        
        JavaHome javaHome = (JavaHome)javacombo.getSelectedItem();
        wr.setProperty(JAVA_HOME,javaHome.getJavaHome());
        wr.setPort(portTf.getText());
        wr.setAdminPort(portTf.getText());
        wr.setProperty(DEBUG_PORT, debugPortTf.getText());
    }
    
    public boolean validate(Object wizardDescriptor) {
       String catalinaHome = homeTf.getText();
       String catalinaBase = baseTf.getText();
        
        TomcatConfigUtil configUtil = null;
        try {
            configUtil = new TomcatConfigUtil(new File(catalinaBase));
        } catch (SAXException ex) {
            
            setErrorMessage(NbBundle.getMessage(
                TomcatConfigPanel.class, "MSG_NOT_A_VALID_SERVER_XML"));
            
            clearDomainXmlData();
            return false;
        } catch (IOException ex) {
            
            setErrorMessage(NbBundle.getMessage(
                TomcatConfigPanel.class, "MSG_NOT_A_VALID_CATALINA_BASE_DIR"));
            
            clearDomainXmlData();
            return false;
        }catch(Exception e){
            
            setErrorMessage(NbBundle.getMessage(
                TomcatConfigPanel.class, "MSG_NOT_A_VALID_CATALINA_BASE_DIR"));
            
            clearDomainXmlData();
            return false;
        }
        
        String port = portTf.getText();
        if(!Util.isValidPort(port)) {
            
            setErrorMessage(NbBundle.getMessage(
                TomcatConfigPanel.class, "MSG_NOT_A_VALID_PORT"));
            return false;
        }
        
        String debugPort = debugPortTf.getText();
        if(!Util.isValidPort(debugPort)) {
            
            setErrorMessage(NbBundle.getMessage(
                TomcatConfigPanel.class, "MSG_NOT_A_VALID_DEBUG_PORT"));
            return false;
        }
         
        setErrorMessage("");
                 
        return true;
    }
    
    private void clearDomainXmlData()
    {
        portTf.setText("");
        debugPortTf.setText("");
    }
    
    public String getDescription() {
        return NbBundle.getMessage(
                TomcatConfigPanel.class, "LBL_TOMCAT");
    }
    
    public void setJavaPlatform() {
        
        JavaPlatformManager jpm = JavaPlatformManager.getDefault();
        JavaPlatform[] installedPlatforms = jpm.getPlatforms(null, new Specification("J2SE", null)); // NOI18N
        
        JavaPlatform defaultPlatform  = jpm.getDefaultPlatform();
        JavaHome javaHomeObj = new JavaHome(defaultPlatform.getDisplayName(),getJavaHome(defaultPlatform));
        String javaHome = javaHomeObj.getJavaHome();
        javacombo.addItem(javaHomeObj);
        
        for (int i = 0; i < installedPlatforms.length; i++) {
            String sjavaHome = getJavaHome(installedPlatforms[i]);
            if(sjavaHome == null)
                continue;
            
            if(!sjavaHome.equals(javaHome)) {
                JavaHome pjavaHome = new JavaHome(installedPlatforms[i].getDisplayName(),sjavaHome);
                javacombo.addItem(pjavaHome);
            }
        }
        
    }
    
    public JavaHome findJavaHomeObject(String javaHome) {
        JavaPlatformManager jpm = JavaPlatformManager.getDefault();
        JavaPlatform[] installedPlatforms = jpm.getPlatforms(null, new Specification("J2SE", null)); // NOI18N
        
        for (int i = 0; i < installedPlatforms.length; i++) {
            
            String sjavaHome = getJavaHome(installedPlatforms[i]);
            
            if(sjavaHome == null)
                continue;
            
            if(sjavaHome.equalsIgnoreCase(javaHome))
                return new JavaHome(installedPlatforms[i].getDisplayName(),getJavaHome(installedPlatforms[i]));
            
        }
        
        return null;
        
    }
    
    
    
    private String getJavaHome(JavaPlatform platform) {
        try{
            FileObject fo = (FileObject)platform.getInstallFolders().iterator().next();
            return FileUtil.toFile(fo).getAbsolutePath();
        }catch(Exception e){
            return null;
        }
    }
    
    public void insertUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    public void removeUpdate(DocumentEvent e) {
        fireChangeEvent();
    }

    public void changedUpdate(DocumentEvent e) {
        fireChangeEvent();
    }
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton baseButton;
    private javax.swing.JTextField baseTf;
    private javax.swing.JTextField debugPortTf;
    private javax.swing.JButton homeButton;
    private javax.swing.JTextField homeTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox javacombo;
    private javax.swing.JTextField portTf;
    // End of variables declaration//GEN-END:variables
    
    class JavaHome{
        public String displayName;
        public String javaHome;
        public JavaHome(String displayName,String javaHome) {
            this.displayName = displayName;
            this.javaHome = javaHome;
        }
        
        public String toString() {
            return displayName + "(" + javaHome + ")";
        }
        
        public String getJavaHome() {
            return javaHome;
        }

        @Override
        public boolean equals(Object obj) {
            if(obj == null)
                return false;
            if(!(obj instanceof JavaHome))
                return false;
            if(this.toString().equalsIgnoreCase(((JavaHome)obj).toString()))
                return true;
            else
                return false;
        }
      
    }
    
    
     private static class JavaPlatformAdapter implements Comparable {
        private JavaPlatform platform;
        
        public JavaPlatformAdapter(JavaPlatform platform) {
            this.platform = platform;
        }
        
        public JavaPlatform getJavaPlatform() {
            return platform;
        }
        
        public String getName() {
            return "name";
        }
        
        public String toString() {
            return platform.getDisplayName();
        }
        
        public int compareTo(Object o) {
            return toString().compareTo(o.toString());
        }
     }
}

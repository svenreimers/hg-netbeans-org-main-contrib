/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.assistant.ui;

/**
 *
 * @author  Dusan Pavlica
 */

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.JOptionPane;

public class AssistantSettings extends javax.swing.JPanel {
    
    private Boolean DEBUG;
    
    /** Creates new form AssistantSettings */
    public AssistantSettings() {
        initComponents();
        TableCheckBoxModel newCheckBoxModel=new TableCheckBoxModel();
        tableCheckBox.setModel(newCheckBoxModel);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        tableCheckBoxScrollPane1 = new javax.swing.JScrollPane();
        tableCheckBox = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        sectionButtonDown = new javax.swing.JButton();
        sectionButtonUp = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        visibilityCheckBox = new javax.swing.JCheckBox();
        quickSearchRadioButton1 = new javax.swing.JRadioButton();
        quickSearchRadioButton2 = new javax.swing.JRadioButton();
        helpContentLabel = new javax.swing.JLabel();
        helpContentEditor = new javax.swing.JRadioButton();
        helpContentDialog = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        limitCheckBox = new javax.swing.JCheckBox();
        limitTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(12, 12, 11, 11)));
        tableCheckBoxScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        tableCheckBoxScrollPane1.setMinimumSize(new java.awt.Dimension(250, 80));
        tableCheckBoxScrollPane1.setPreferredSize(new java.awt.Dimension(250, 80));
        tableCheckBox.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableCheckBox.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tableCheckBox.setMinimumSize(new java.awt.Dimension(250, 60));
        tableCheckBox.setPreferredSize(new java.awt.Dimension(250, 60));
        tableCheckBoxScrollPane1.setViewportView(tableCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(tableCheckBoxScrollPane1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        sectionButtonDown.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Move_Down"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(sectionButtonDown, gridBagConstraints);

        sectionButtonUp.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Move_Up"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(sectionButtonUp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        visibilityCheckBox.setSelected(true);
        visibilityCheckBox.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Search_ToolBar"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(visibilityCheckBox, gridBagConstraints);

        quickSearchRadioButton1.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Search_ToolBar_Up"));
        buttonGroup1.add(quickSearchRadioButton1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(quickSearchRadioButton1, gridBagConstraints);

        quickSearchRadioButton2.setSelected(true);
        quickSearchRadioButton2.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Search_ToolBar_Down"));
        buttonGroup1.add(quickSearchRadioButton2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(quickSearchRadioButton2, gridBagConstraints);

        helpContentLabel.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("LBL_Java_Doc_Content"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(helpContentLabel, gridBagConstraints);

        helpContentEditor.setSelected(true);
        helpContentEditor.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Java_Doc_Content_Desktop"));
        buttonGroup2.add(helpContentEditor);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(helpContentEditor, gridBagConstraints);

        helpContentDialog.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Java_Doc_Content_Dialog"));
        buttonGroup2.add(helpContentDialog);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 24, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(helpContentDialog, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        limitCheckBox.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/assistant/ui/Bundle").getString("CTL_Max_Number_Of_Links"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(limitCheckBox, gridBagConstraints);

        limitTextField.setColumns(2);
        limitTextField.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(limitTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jPanel4, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox limitCheckBox;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton sectionButtonDown;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton sectionButtonUp;
    private javax.swing.JScrollPane tableCheckBoxScrollPane1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton helpContentDialog;
    private javax.swing.JLabel helpContentLabel;
    private javax.swing.JRadioButton quickSearchRadioButton2;
    private javax.swing.JRadioButton quickSearchRadioButton1;
    private javax.swing.JCheckBox visibilityCheckBox;
    private javax.swing.JTextField limitTextField;
    private javax.swing.JTable tableCheckBox;
    private javax.swing.JRadioButton helpContentEditor;
    // End of variables declaration//GEN-END:variables
    
    
    class TableCheckBoxModel extends AbstractTableModel {
        final String[] columnNames = {"Visible","Type of information"};
        final Object[][] data = {
            {new Boolean(false),"Smart navigation"},
            {new Boolean(true),"Help Links"},
            {new Boolean(false),"Descriptions"}
        };
        
        public int getColumnCount() {
            return columnNames.length;
        }
        
        public int getRowCount() {
            return data.length;
        }
        
        public String getColumnName(int col) {
            return columnNames[col];
        }
        
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }
        
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
        
/*
 * Name for sections couldn't be editable.
 */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            if (col > 0) {
                return false;
            } else {
                return true;
            }
        }
        
/*
 * Don't need to implement this method unless your table's
 * data can change.
 */
        public void setValueAt(Object value, int row, int col) {
            if (data[0][col] instanceof Integer && !(value instanceof Integer)) {
                //With JFC/Swing 1.1 and JDK 1.2, we need to create
                //an Integer from the value; otherwise, the column
                //switches to contain Strings. Starting with v 1.3,
                //the table automatically converts value to an Integer,
                //so you only need the code in the 'else' part of this
                //'if' block.
                try {
                    data[row][col] = new Integer(value.toString());
                    fireTableCellUpdated(row, col);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(AssistantSettings.this,
                    "The \"" + getColumnName(col)
                    + "\" column accepts only integer values.");
                }
            } else {
                data[row][col] = value;
                fireTableCellUpdated(row, col);
            }
        }        
    }
}

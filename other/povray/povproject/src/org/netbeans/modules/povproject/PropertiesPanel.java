/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2005 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
/*
 * PropertiesPanel.java
 *
 * Created on February 17, 2005, 10:44 PM
 */

package org.netbeans.modules.povproject;

import java.util.Properties;
import org.openide.util.NbBundle;

/**
 *
 * @author  Timothy Boudreau
 */
public class PropertiesPanel extends javax.swing.JPanel {
    private String lastGoodResolution = "640x480";
    private Properties defaults = null;
    /** Creates new form PropertiesPanel */
    private PropertiesPanel() {
        initComponents();
    }
    
    public PropertiesPanel (Properties defaults) {
        this();
        this.defaults = defaults;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        reslabel = new javax.swing.JLabel();
        resolution = new javax.swing.JComboBox();
        quallabel = new javax.swing.JLabel();
        antialias = new javax.swing.JCheckBox();
        reflection = new javax.swing.JCheckBox();
        quality = new javax.swing.JSlider();
        qualValue = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        reslabel.setLabelFor(resolution);
        reslabel.setText(NbBundle.getMessage(PropertiesPanel.class,"LBL_Resolution"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 5);
        add(reslabel, gridBagConstraints);

        resolution.setEditable(true);
        resolution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024x768", "640x480", "320x200", "160x100" }));
        resolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 12);
        add(resolution, gridBagConstraints);

        quallabel.setLabelFor(quality);
        quallabel.setText(NbBundle.getMessage(PropertiesPanel.class,"LBL_Quality"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 5);
        add(quallabel, gridBagConstraints);

        antialias.setText(NbBundle.getMessage(PropertiesPanel.class,"KEY_AntiAlias"));
        antialias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 12, 5);
        add(antialias, gridBagConstraints);

        reflection.setText(NbBundle.getMessage(PropertiesPanel.class,"KEY_Reflection"));
        reflection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                change(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 12, 12);
        add(reflection, gridBagConstraints);

        quality.setMaximum(9);
        quality.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qualityStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(quality, gridBagConstraints);

        qualValue.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 12);
        add(qualValue, gridBagConstraints);

        jButton1.setText(NbBundle.getMessage(PropertiesPanel.class,"KEY_Reset"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 5);
        add(jButton1, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        reset();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void qualityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qualityStateChanged
        change (null);
    }//GEN-LAST:event_qualityStateChanged

    private boolean changing = false;
    
    private void change(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_change
        if (changing) {
            return;
        }
        changing = true;
        try {
            int qual = quality.getValue();
            
            qualValue.setText (Integer.toString(qual));
            String res = (String) resolution.getSelectedItem();
            int xIndex = res.indexOf ("x");
            if (xIndex == -1) {
                xIndex = res.indexOf ("X");
            }
            if (xIndex == -1) {
                resolution.setSelectedItem (lastGoodResolution);
            } else {
                lastGoodResolution = res;
            }
            
            
            
        } finally {
            changing = false;
        }
        
    }//GEN-LAST:event_change
    
    private void reset() {
        StringBuffer sb = new StringBuffer();
        sb.append (defaults.get("renderer.W"));
        sb.append ("x");
        sb.append (defaults.get("renderer.H"));
        resolution.setSelectedItem (sb.toString().intern());
        
        String aa = (defaults.getProperty("A"));
        if (aa != null && !"0.0".equals(aa)) {
            antialias.setSelected(true);
        }
        
        
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox antialias;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel qualValue;
    private javax.swing.JSlider quality;
    private javax.swing.JLabel quallabel;
    private javax.swing.JCheckBox reflection;
    private javax.swing.JLabel reslabel;
    private javax.swing.JComboBox resolution;
    // End of variables declaration//GEN-END:variables
    
}

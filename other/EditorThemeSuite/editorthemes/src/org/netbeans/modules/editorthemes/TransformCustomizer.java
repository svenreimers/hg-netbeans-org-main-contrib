/*
 * TransformCustomizer.java
 *
 * Created on July 6, 2007, 8:45 PM
 */

package org.netbeans.modules.editorthemes;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JSlider;

/**
 *
 * @author  Tim Boudreau
 */
public class TransformCustomizer extends javax.swing.JPanel {

    /** Creates new form TransformCustomizer */
    public TransformCustomizer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        invertBox = new javax.swing.JCheckBox();
        hueBox = new javax.swing.JCheckBox();
        hueSlider = new javax.swing.JSlider();
        satBox = new javax.swing.JCheckBox();
        satSlider = new javax.swing.JSlider();
        briBox = new javax.swing.JCheckBox();
        briSlider = new javax.swing.JSlider();
        hueLbl = new javax.swing.JLabel();
        satLbl = new javax.swing.JLabel();
        briLbl = new javax.swing.JLabel();

        invertBox.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.invertBox.text")); // NOI18N
        invertBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        hueBox.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.hueBox.text")); // NOI18N
        hueBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        hueBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });

        hueSlider.setMinimum(-100);
        hueSlider.setValue(0);
        hueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMoved(evt);
            }
        });

        satBox.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.satBox.text")); // NOI18N
        satBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        satBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });

        satSlider.setMinimum(-100);
        satSlider.setValue(0);
        satSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMoved(evt);
            }
        });

        briBox.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.briBox.text")); // NOI18N
        briBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        briBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });

        briSlider.setMinimum(-100);
        briSlider.setValue(0);
        briSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMoved(evt);
            }
        });

        hueLbl.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.hueLbl.text")); // NOI18N
        hueLbl.setEnabled(false);

        satLbl.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.satLbl.text")); // NOI18N
        satLbl.setEnabled(false);

        briLbl.setText(org.openide.util.NbBundle.getMessage(TransformCustomizer.class, "TransformCustomizer.briLbl.text")); // NOI18N
        briLbl.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(satBox)
                            .add(hueBox)
                            .add(briBox))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(hueSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(hueLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(satSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(satLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(briSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(briLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(invertBox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(hueBox)
                    .add(hueSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(hueLbl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(satBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(briBox))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(satSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(satLbl))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(briLbl)
                            .add(briSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(invertBox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {briBox, briLbl, briSlider, invertBox}, org.jdesktop.layout.GroupLayout.VERTICAL);

        layout.linkSize(new java.awt.Component[] {hueBox, hueLbl, hueSlider}, org.jdesktop.layout.GroupLayout.VERTICAL);

        layout.linkSize(new java.awt.Component[] {satBox, satLbl, satSlider}, org.jdesktop.layout.GroupLayout.VERTICAL);

    }// </editor-fold>//GEN-END:initComponents

private void checkboxChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxChanged
    // TODO add your handling code here:
    if (evt.getSource() == hueBox) {
        hueLbl.setEnabled (hueBox.isSelected());
    } else if (evt.getSource() == briBox) {
        briLbl.setEnabled (briBox.isSelected());
    } else if (evt.getSource() == satBox) {
        satLbl.setEnabled (satBox.isSelected());
    }
}//GEN-LAST:event_checkboxChanged

private void sliderMoved(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMoved
    // TODO add your handling code here:
    if (evt.getSource() == hueSlider) {
        hueLbl.setText (hueSlider.getValue() + "");
        hueBox.setSelected (hueSlider.getValue() != 0);
        hueLbl.setEnabled (hueBox.isSelected());
    } else if (evt.getSource() == briSlider) {
        briLbl.setText (briSlider.getValue() + "");
        briBox.setSelected (briSlider.getValue() != 0);
        briLbl.setEnabled (briBox.isSelected());
    } else if (evt.getSource() == satSlider) {
        satLbl.setText (satSlider.getValue() + "");
        satBox.setSelected (satSlider.getValue() != 0);
        satLbl.setEnabled (satBox.isSelected());
    }
}//GEN-LAST:event_sliderMoved

public Transformation getTransformation() {
    List <Transformation> l = new ArrayList <Transformation> ();
    if (invertBox.isSelected()) {
        l.add (Transformation.createInverseTransformation());
    }
    if (hueBox.isSelected()) {
        l.add (Transformation.createHueTransformation(fval(hueSlider)));
    }
    if (briBox.isSelected()) {
        l.add (Transformation.createBrightnessTransformation(fval(briSlider)));
    }
    if (satBox.isSelected()) {
        l.add (Transformation.createSaturationTransformation(fval(satSlider)));
    }
    if (l.size() == 0) {
        return null;
    } else if (l.size() == 1) {
        return l.iterator().next();
    } else {
        Transformation[] t = new Transformation[l.size()];
        t = l.toArray(t);
        return Transformation.createCompound(t);
    }
}

private float fval (JSlider slider) {
    float val = slider.getValue();
    return val / 100F;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox briBox;
    private javax.swing.JLabel briLbl;
    private javax.swing.JSlider briSlider;
    private javax.swing.JCheckBox hueBox;
    private javax.swing.JLabel hueLbl;
    private javax.swing.JSlider hueSlider;
    private javax.swing.JCheckBox invertBox;
    private javax.swing.JCheckBox satBox;
    private javax.swing.JLabel satLbl;
    private javax.swing.JSlider satSlider;
    // End of variables declaration//GEN-END:variables

}

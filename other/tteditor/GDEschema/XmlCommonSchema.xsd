<?xml version="1.0" encoding="UTF-8" ?>
<!--
Copyright © 2005 Covad, Mahindra – British Telecom Limited, 
MetaSolv Software Inc., Motorola, Inc., NEC Corporation, 
Nokia Networks Oy, Nortel Networks Limited, Sun Microsystems Inc..  
All rights reserved. Use is subject to license terms. 
-->
<!--
 
DOCUMENTATION IS PROVIDED "AS IS" AND ALL EXPRESS OR IMPLIED
CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY IMPLIED
WARRANTY OF MERCHANTABILITY, FITNESS FOR FOR A PARTICULAR PURPOSE OR
NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT TO THE EXTENT THAT SUCH
DISCLAIMERS ARE HELD TO BE LEGALLY INVALID.
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:co="http://java.sun.com/products/oss/xml/Common" elementFormDefault="qualified" targetNamespace="http://java.sun.com/products/oss/xml/Common">
   <annotation>
      <documentation>This Schema was generated by the OSS through Java XML Toolkit Doclet 3-30-2005 15:26</documentation>
   </annotation>
   <complexType name="UnsupportedOperationException">
      <annotation>
         <documentation>Similar to java.lang.UnsupportedOperationException,
 except this inherits from Exception, not RuntimeException.
 This new class is required because J2EE containers deal with
 RuntimeException in a special way.  See EJB specification.
 &lt;p&gt;
 This exception is thrown if a remote method is not implemented
 (and the throws clause states that this exception may be thrown).</documentation>
      </annotation>
      <complexContent>
         <extension base="co:BaseException">
            <sequence />
         </extension>
      </complexContent>
   </complexType>
   <complexType name="UnsupportedAttributeException">
      <annotation>
         <documentation>This exception is thrown for operations affecting
 unsupported attributes. It is unchecked.</documentation>
      </annotation>
      <complexContent>
         <extension base="co:RuntimeException">
            <sequence>
               <element name="attributeName" minOccurs="0"  type="string" />
            </sequence>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="SetException">
      <annotation>
         <documentation>Indicates that there was a problem with a remote call to set the value of a Managed Entity.</documentation>
      </annotation>
      <complexContent>
         <extension base="co:BaseException">
            <sequence />
         </extension>
      </complexContent>
   </complexType>
   <complexType name="ResyncRequiredException">
      <annotation>
         <documentation>This exception is thrown if a an update method (remote) contains
 a stale value object.</documentation>
      </annotation>
      <complexContent>
         <extension base="co:BaseException">
            <sequence>
               <element name="managedEntityKey" type="co:ManagedEntityKey" />
            </sequence>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="QueryValue" abstract="true">
      <annotation>
         <documentation>Base interface from which each application specific &lt;CODE&gt;QueryValue&lt;/CODE&gt;
 type must be derived. A &lt;CODE&gt;QueryValue&lt;/CODE&gt; interface is also a
 generic attribute accessor (i.e., it extends AttributeAccess).</documentation>
      </annotation>
      <sequence />
   </complexType>
   <complexType name="ManagedEntityValue" abstract="true">
      <annotation>
         <documentation>The &lt;CODE&gt;ManagedEntityValue&lt;/CODE&gt; interface is the base interface for all more
 detailed interfaces which represent any kind of object that is to be managed.
 &lt;p&gt;
 Classes which implement &lt;CODE&gt;ManagedEntityValue&lt;/CODE&gt; or a
 sub interface of &lt;CODE&gt;ManagedEntityValue&lt;/CODE&gt;.
 are also called value classes.
 &lt;P&gt;All classes implementing a value interface provide several ways to access
 the attributes:
 &lt;UL&gt;
 &lt;LI&gt;Attributes can be accessed through standard JavaBeans get/set (is/set)
 methods.
 &lt;LI&gt;Attributes can be accessed through the generic methods defined
     in Attribute Access
 &lt;UL&gt;
 &lt;LI&gt;&lt;CODE&gt;public Object getAttributeValue(String attributeName)&lt;/CODE&gt;
 &lt;LI&gt;&lt;CODE&gt;public void setAttributeValue(String attributeName, Object newValue)&lt;/CODE&gt;
 &lt;/UL&gt;</documentation>
      </annotation>
      <sequence>
         <element name="lastUpdateVersionNumber" minOccurs="0" type="long" />
      </sequence>
   </complexType>
   <complexType name="ManagedEntityKeyResult" abstract="true">
      <annotation>
         <documentation>A base interface for every application specific &lt;CODE&gt;&amp;lt;ManagedEntity&amp;gt;KeyResult&lt;/CODE&gt;
 interface.
 &lt;p&gt;
 A &lt;CODE&gt;&amp;lt;ManagedEntity&amp;gt;KeyResult&lt;/CODE&gt; interface must comply with the following template:
 &lt;pre&gt;
 public interface &amp;lt;ManagedEntity&amp;gt;KeyResult extends ManagedEntityKeyResult
 {
     public &amp;lt;ManagedEntity&amp;gt;Key get&amp;lt;ManagedEntity&amp;gt;Key();
 }
&lt;/pre&gt;
&lt;p&gt;
 The managed entity key result encapsulates all the information necessary to
 indicate the result of  a BEST EFFORT operation on a specific managed entity.
 &lt;p&gt;
 The managed entity key result is used in operations involving the update of
 multiple managed entities, in the deletion of multiple managed entities or in
 the creation of multiple managed entities or in bulk business operations.
 &lt;p&gt;
 The base &lt;CODE&gt;ManagedEntityKeyResult&lt;/CODE&gt; interface contains the managed entity key,
 a boolean value indicating if the operation on the targeted managed entity was
 succesful and finally the exception that would have been thrown if this operation
 had been attempted on the individual Managed Entity.</documentation>
      </annotation>
      <sequence>
         <element name="success" type="boolean" />
         <element name="exception" minOccurs="0" type="co:BaseException" />
      </sequence>
   </complexType>
   <complexType name="ManagedEntityKey">
      <annotation>
         <documentation>A &lt;CODE&gt;ManagedEntityKey&lt;/CODE&gt; is a unique identifier for a
 &lt;CODE&gt;ManagedEntityValue&lt;/CODE&gt;.
 &lt;p&gt;
 The Type, ApplicationDN and ApplicationContext
 are included in &lt;CODE&gt;ManagedEntityKey&lt;/CODE&gt;, because
 a &lt;CODE&gt;primaryKey&lt;/CODE&gt; is only unique within an
 application instance as given by the ApplicationDN running
 in a given naming system as given by the ApplicationContext URL.</documentation>
      </annotation>
      <sequence>
         <element name="applicationContext" minOccurs="0" type="co:ApplicationContext" />
         <element name="applicationDN" minOccurs="0" type="string" />
         <element name="type" type="string" />
      </sequence>
   </complexType>
   <annotation>
      <documentation>Get the names of the optional operations supported by this JVT
 Session Bean. The names of the optional operations are defined
 in the &lt;CODE&gt;JVT&amp;lt;ApplicationType&amp;gt;SessionOptionalOps&lt;/CODE&gt; interface as
 defined by the API.</documentation>
   </annotation>
   <element name="getSupportedOptionalOperationsRequest">
      <complexType>
         <sequence />
      </complexType>
   </element>
   <element name="getSupportedOptionalOperationsResponse">
      <complexType>
         <sequence>
            <element name="strings" type="co:ArrayOfString" />
         </sequence>
      </complexType>
   </element>
   <element name="getSupportedOptionalOperationsException">
      <complexType>
         <choice>
            <element name="remoteException" type="co:RemoteException" />
         </choice>
      </complexType>
   </element>
   <annotation>
      <documentation>Get the Managed Entity types supported by a JVT Session Bean.</documentation>
   </annotation>
   <element name="getManagedEntityTypesRequest">
      <complexType>
         <sequence />
      </complexType>
   </element>
   <element name="getManagedEntityTypesResponse">
      <complexType>
         <sequence>
            <element name="strings" type="co:ArrayOfString" />
         </sequence>
      </complexType>
   </element>
   <element name="getManagedEntityTypesException">
      <complexType>
         <choice>
            <element name="remoteException" type="co:RemoteException" />
         </choice>
      </complexType>
   </element>
   <annotation>
      <documentation>Get the Query type names supported by a JVT Session Bean</documentation>
   </annotation>
   <element name="getQueryTypesRequest">
      <complexType>
         <sequence />
      </complexType>
   </element>
   <element name="getQueryTypesResponse">
      <complexType>
         <sequence>
            <element name="strings" type="co:ArrayOfString" />
         </sequence>
      </complexType>
   </element>
   <element name="getQueryTypesException">
      <complexType>
         <choice>
            <element name="remoteException" type="co:RemoteException" />
         </choice>
      </complexType>
   </element>
   <annotation>
      <documentation>Get the Event Type names supported by the JVT Session Bean</documentation>
   </annotation>
   <element name="getEventTypesRequest">
      <complexType>
         <sequence />
      </complexType>
   </element>
   <element name="getEventTypesResponse">
      <complexType>
         <sequence>
            <element name="strings" type="co:ArrayOfString" />
         </sequence>
      </complexType>
   </element>
   <element name="getEventTypesException">
      <complexType>
         <choice>
            <element name="remoteException" type="co:RemoteException" />
         </choice>
      </complexType>
   </element>
   <annotation>
      <documentation>Get the EventPropertyDescriptor associated with an event type name.</documentation>
   </annotation>
   <element name="getEventDescriptorRequest">
      <complexType>
         <sequence>
            <element name="eventType" type="string" />
         </sequence>
      </complexType>
   </element>
   <element name="getEventDescriptorResponse">
      <complexType>
         <sequence>
            <element name="eventPropertyDescriptor" type="co:EventPropertyDescriptor" />
         </sequence>
      </complexType>
   </element>
   <element name="getEventDescriptorException">
      <complexType>
         <choice>
            <element name="illegalArgumentException" type="co:IllegalArgumentException" />
            <element name="remoteException" type="co:RemoteException" />
         </choice>
      </complexType>
   </element>
   <annotation>
      <documentation>Query multiple Managed Entities using a QueryValue.</documentation>
   </annotation>
   <element name="queryManagedEntitiesRequest">
      <complexType>
         <complexContent>
            <extension base="co:IteratorRequest">
               <sequence>
                  <element name="query" type="co:QueryValue" minOccurs="0" />
                  <element name="attributeNames" type="co:ArrayOfString" minOccurs="0" />
               </sequence>
            </extension>
         </complexContent>
      </complexType>
   </element>
   <element name="queryManagedEntitiesResponse">
      <complexType>
         <complexContent>
            <extension base="co:IteratorResponse">
               <sequence>
                  <element type="co:ArrayOfManagedEntityValue" name="results" minOccurs="0"  />
               </sequence>
            </extension>
         </complexContent>
      </complexType>
   </element>
   <element name="queryManagedEntitiesException">
      <complexType>
         <choice>
            <element name="illegalArgumentException" type="co:IllegalArgumentException" />
            <element name="remoteException" type="co:RemoteException" />
         </choice>
      </complexType>
   </element>
   <complexType name="IllegalStateException">
      <annotation>
         <documentation>Similar to java.lang.IllegalStateException,
 except this inherits from Exception, not RuntimeException.
 This new class is required because J2EE containers deal with
 RuntimeException in a special way.  See EJB specification.
 &lt;p&gt;
 The IllegalStateException  exception is thrown by a JVT Session Bean
 to report that the invoked business method could not be completed because
 the operation was invoked at an illegal or inappropriate time.</documentation>
      </annotation>
      <complexContent>
         <extension base="co:BaseException">
            <sequence />
         </extension>
      </complexContent>
   </complexType>
   <complexType name="IllegalAttributeValueException">
      <annotation>
         <documentation>Similar to javax.oss.IllegalArgumentException,
 except it specifically refers to a bad value associated
 with an attribute name within an AttributeAccess object.

 This exception is thrown if an AttributeAccess object passed
 to a remote method contains an attribute with a bad value.</documentation>
      </annotation>
      <complexContent>
         <extension base="co:IllegalArgumentException">
            <sequence>
               <element name="illegalAttributeName" type="string" />
            </sequence>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="IllegalArgumentException">
      <annotation>
         <documentation>Similar to java.lang.IllegalArgumentException,
 except this inherits from Exception, not RuntimeException.
 This new class is required because J2EE containers deal with
 RuntimeException in a special way.  See EJB specification.
 &lt;p&gt;
 This exception is thrown if the argument of a remote
 method is invalid.
 &lt;p&gt;</documentation>
      </annotation>
      <complexContent>
         <extension base="co:BaseException">
            <sequence />
         </extension>
      </complexContent>
   </complexType>
   <complexType name="EventPropertyDescriptor" abstract="true">
      <annotation>
         <documentation>The EventPropertyDescriptor is used to document and
 specify the filterable properties of an event.
 &lt;p&gt;
 An Interface extending the base EventPropertyDescriptor
 interface must be defined for each type of application
 specific event emitted by a component.
 &lt;p&gt;
 The name of the specific EventPropertyDescriptor
 interface should be &lt;i&gt;EventType&lt;/i&gt;EventPropertyDescriptor
 where the &lt;i&gt;EventType&lt;/i&gt; is the name of the event type
 interface.
 &lt;p&gt;
 Example:&lt;br&gt;
  &lt;UL&gt;
  &lt;LI&gt;NotifyAckStateChangedEvent
  &lt;LI&gt;NotifyAckStateChangedEventEventPropertyDescriptor
 &lt;/UL&gt;</documentation>
      </annotation>
      <sequence>
         <element name="eventType" type="string" />
         <element name="propertyNames" type="co:ArrayOfString" />
         <element name="propertyTypes" type="co:ArrayOfString" />
      </sequence>
   </complexType>
   <complexType name="ApplicationContext">
      <annotation>
         <documentation>The ApplicationContext interface contains the URL and
 other system properties required to set up an initial
 connection with the JNDI provider into which the
 components in charge of that managed entity are registered.
 &lt;p&gt;
 Security Credentials are not passed.
 &lt;p&gt;</documentation>
      </annotation>
      <sequence>
         <element name="factoryClass" type="string" />
         <element name="URL" type="string" />
         <element name="systemProperties" type="co:ArrayOfSystemProperties" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfUnsupportedOperationException">
      <sequence>
         <element name="item" type="co:UnsupportedOperationException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfUnsupportedAttributeException">
      <sequence>
         <element name="item" type="co:UnsupportedAttributeException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfSetException">
      <sequence>
         <element name="item" type="co:SetException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfResyncRequiredException">
      <sequence>
         <element name="item" type="co:ResyncRequiredException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfQueryValue">
      <sequence>
         <element name="item" type="co:QueryValue"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfManagedEntityValue">
      <sequence>
         <element name="item" type="co:ManagedEntityValue"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfManagedEntityKeyResult">
      <sequence>
         <element name="item" type="co:ManagedEntityKeyResult"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfManagedEntityKey">
      <sequence>
         <element name="item" type="co:ManagedEntityKey"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfIllegalStateException">
      <sequence>
         <element name="item" type="co:IllegalStateException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfIllegalAttributeValueException">
      <sequence>
         <element name="item" type="co:IllegalAttributeValueException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfIllegalArgumentException">
      <sequence>
         <element name="item" type="co:IllegalArgumentException"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfEventPropertyDescriptor">
      <sequence>
         <element name="item" type="co:EventPropertyDescriptor"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
   <complexType name="ArrayOfApplicationContext">
      <sequence>
         <element name="item" type="co:ApplicationContext"  minOccurs="0" maxOccurs="unbounded" />
      </sequence>
   </complexType>
	<!--============MultiValueList=============-->
	<complexType name="MultiValueList" abstract="true">
		<annotation>
			<documentation>
				The MultiValuedList is used In oder to minimize the amount of 
				data required to add or remove a single attribute value from a 
				multi-valued attribute of a Managed Entity.
			</documentation>
		</annotation>
		<sequence>
			<element name="modifier" type="co:Modifier"/>
		</sequence>
	</complexType>
	<simpleType name="Modifier">
		<annotation>
			<documentation>
				This is modifier is used  to indicate the operation on a MultiValueList.
	         	</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="NONE"/>
			<enumeration value="SET"/>
			<enumeration value="ADD"/>
			<enumeration value="REMOVE"/>
		</restriction>
	</simpleType>
	<!--================ejb exceptions==================-->
	<complexType name="CreateException">
		<annotation>
			<documentation> The CreateException exception can be
		returned by all create(...) requests defined in the OSS
		through Java XML/JMS interface. The exception is used as a
		standard application-level exception to report a failure to
		create a managed entity or a collection of managed
		entities. This exception is thrown when a particular managed
		entity or group of managed entities cannot be
		created.</documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="DuplicateKeyException">
		<annotation>
			<documentation> The DuplicateKeyException exception is
		returned if a managed entity cannot be created because an
		object with the same key already exists. This exception is
		only used when a managed entity key is provided in a
		create(...) request and when client controlled naming is
		used. This exception is returned by the create requests
		defined in the OSS through Java XML/JMS
		interface. </documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FinderException">
		<annotation>
			<documentation> The exception is used as a standard
		application-level exception to report a failure to find the
		requested managed entities. This exception is returned when a
		collection of one or more entity cannot be found. This
		exception should not be returned by requests that return a
		collection of managed entitites using an associative lookup
		approach (they should return a null list
		instead). </documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ObjectNotFoundException">
		<annotation>
			<documentation> The ObjectNotFoundException exception is
		returned by an OSS through Java request to indicate that the
		specified managed entity does not exist. Only the request that
		are declared to return a single managed entity use this
		exception. This exception should not be returned by methods
		that return a collection of managed entitites. This exception
		is returned when a singular managed entity cannot be
		found. </documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RemoveException">
		<annotation>
			<documentation> The RemoveException exception is returned
		at an attempt to remove a collection of one or more managed
		entity when the XML/JMS interface does not allow the managed
		entity to be removed. This exception is returned when a a
		collection of one or more managed entity cannot be
		removed</documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<!--================rmi  exceptions==================-->
	<complexType name="RemoteException">
		<annotation>
			<documentation> The RemoteException is returned when an
		errors occurs during any remote object
		operation.</documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<!--================oss exceptions==================-->
	<complexType name="RuntimeException">
		<annotation>
			<documentation> The RuntimeException is returned when an
		errors occurs during runtime
		operation.</documentation>
		</annotation>
		<complexContent>
			<extension base="co:BaseException">
				<sequence/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseException" abstract="true">
		<annotation>
			<documentation>The BaseException is the parent complexType of the Exceptions.</documentation>
		</annotation>
		<sequence>
			<element name="message" type="string">
				<annotation>
					<documentation>The Message element indicates the error message from the Exception. This is most 
			         likely the results from a Exception.getMessage() call.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<!--================Events==================-->
	<complexType name="BaseEventType" abstract="true">
		<annotation>
			<documentation>Base Event</documentation>
		</annotation>
		<sequence>
			<element name="applicationDN" type="string"/>
			<element name="eventTime" type="dateTime"/>
		</sequence>
	</complexType>
	<!--============SystemProperties array=============-->
	<complexType name="SystemProperty">
		<annotation>
			<documentation/>
		</annotation>
		<sequence>
			<element name="name" type="string"/>
			<element name="value" type="string"/>
		</sequence>
	</complexType>
	<complexType name="ArrayOfSystemProperties">
		<annotation>
			<documentation/>
		</annotation>
		<sequence>
			<element name="property" type="co:SystemProperty" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============string array=============-->
	<complexType name="ArrayOfString">
		<annotation>
			<documentation>This is a representation of a String
		array.</documentation>
		</annotation>
		<sequence>
			<element name="item" type="string"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============int array=============-->
	<complexType name="ArrayOfInt">
		<annotation>
			<documentation/>
		</annotation>
		<sequence>
			<element name="item" type="int"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============Calendar array=============-->
 	<complexType name="ArrayOfCalendar">
		<sequence>
			<element name="item" type="dateTime"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============Object array=============-->
	<complexType name="ArrayOfObject">
		<sequence>
			<element name="item" type="anyType"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============Serializable array=============-->
	<complexType name="ArrayOfSerializable">
		<sequence>
			<element name="item" type="anyType"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============boolean array=============-->
	<complexType name="ArrayOfBoolean">
		<sequence>
			<element name="item" type="boolean"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============byte array=============-->
	<complexType name="ArrayOfByte">
		<sequence>
			<element name="item" type="byte"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============short array=============-->
	<complexType name="ArrayOfShort">
		<sequence>
			<element name="item" type="short"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============char value=============-->
	<simpleType name="CharValue">
		<restriction base="string">
			<length value="1" fixed="true"/>
		</restriction>
	</simpleType>
	<!--============char array=============-->
	<complexType name="ArrayOfChar">
		<sequence>
			<element name="item" type="co:CharValue"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============long array=============-->
	<complexType name="ArrayOfLong">
		<sequence>
			<element name="item" type="long"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============float array=============-->
	<complexType name="ArrayOfFloat">
		<sequence>
			<element name="item" type="float"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============double array=============-->
	<complexType name="ArrayOfDouble">
		<sequence>
			<element name="item" type="double"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============date array=============-->
	<complexType name="ArrayOfDate">
		<sequence>
			<element name="item" type="byte"  minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<!--============response iterator=============-->
	<complexType name="IteratorRequest" abstract="true">
		<annotation>
			<documentation>This is a representation of an Iterator
		Request.</documentation>
		</annotation>
		<sequence>
			<element name="howMany" type="unsignedInt"  minOccurs="0"/>
		</sequence>
	</complexType>
	<complexType name="IteratorResponse" abstract="true">
		<annotation>
			<documentation>This is a representation of an Iterator
		Response.</documentation>
		</annotation>
		<sequence>
			<element name="sequence" type="int"/>
			<element name="endOfReply" type="boolean"/>
		</sequence>
	</complexType>
	
</schema>

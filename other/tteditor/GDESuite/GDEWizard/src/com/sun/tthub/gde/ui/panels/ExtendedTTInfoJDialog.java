
/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Copyright 2007 Sun Microsystems, Inc. All Rights Reserved
 *
 */


package com.sun.tthub.gde.ui.panels;

import com.sun.tthub.gdelib.GDEException;
import com.sun.tthub.gdelib.GDERuntimeException;

import com.sun.tthub.gde.logic.GDEClassesManager;
import com.sun.tthub.gde.ui.*;
import com.sun.tthub.gde.logic.GDEAppContext;
import com.sun.tthub.gde.logic.GDEPreferencesController;
import com.sun.tthub.gde.util.FileUtilities;
import com.sun.tthub.gde.util.GDEFolderManager;
import com.sun.tthub.gde.util.JarFileManager;
import java.awt.Frame;
import java.awt.Dialog;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;

/**
 *
 * @author  Hareesh Ravindran
 */
public class ExtendedTTInfoJDialog extends JDialog {
    
    public static final int TYPE_INTERFACE = 0;
    public static final int TYPE_CLASS = 1; 
    public static final int TYPE_ALL = 2;
    
    private int type = TYPE_ALL;
    private String chosenClassName = null;
    
    /** Creates new form ExtendedTTInfoJDialog */    
    public ExtendedTTInfoJDialog(Dialog parent, boolean modal, 
            int type) {
        super(parent, modal);
        this.type = type;
        initComponents();                
        try {
            String gdeFolder = new GDEFolderManager().getGdeFolderName();            
            // Display the GDEFolder name on the label.
            txtGdeFolder.setText(gdeFolder);
            loadClassesFromGDEFolder();        
            fillGdeFolderJarsList();            
        } catch (GDEException ex) {
            throw new GDERuntimeException(ex);
        }        
        this.pack();        
    }
    
    /**
     * returns the chosen classname from the dialog. This can be used by the
     * called component to get the selected class/interface.
     */
    public String getChosenClassName() { return chosenClassName; }
        
    private void fillGdeFolderJarsList() {
        DefaultListModel model = new DefaultListModel();        
        GDEFolderManager mngr = new GDEFolderManager();
        Collection coll = null;
        try {
            coll = mngr.loadJarFilesFromGdeFolder();
            for(Iterator it = coll.iterator(); it.hasNext(); ) {
                String fileName = ((File) it.next()).getName();
                model.addElement(fileName);
            }
            lstJarList.setModel(model);
        } catch (GDEException ex) {
            throw new GDERuntimeException(ex);
        }
    }
        
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblTitle = new javax.swing.JLabel();
        pnlChooseTTValue = new javax.swing.JPanel();
        lblGdeFolder = new javax.swing.JLabel();
        lbGdeFolderContents = new javax.swing.JLabel();
        scrlPaneGdeFolderContents = new javax.swing.JScrollPane();
        lstGdeFolderContents = new javax.swing.JList();
        txtGdeFolder = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        pnlAddJars = new javax.swing.JPanel();
        scrlPaneJarList = new javax.swing.JScrollPane();
        lstJarList = new javax.swing.JList();
        scrlPaneAddJarsMessage = new javax.swing.JScrollPane();
        txtAddJarsMessage = new javax.swing.JTextArea();
        btnAddJarFiles = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extended TroubleTicketValue Definition");
        setModal(true);
        setResizable(false);
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Choose the Extended TTValue Interface/Class");

        pnlChooseTTValue.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblGdeFolder.setText("GDE Folder:");

        lbGdeFolderContents.setText("Choose the extended TTValue interface/class:");

        lstGdeFolderContents.setToolTipText("The extended TTValue classes/interfaces. (From GDE Folder jars)");
        scrlPaneGdeFolderContents.setViewportView(lstGdeFolderContents);

        txtGdeFolder.setEditable(false);
        txtGdeFolder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlChooseTTValueLayout = new org.jdesktop.layout.GroupLayout(pnlChooseTTValue);
        pnlChooseTTValue.setLayout(pnlChooseTTValueLayout);
        pnlChooseTTValueLayout.setHorizontalGroup(
            pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, pnlChooseTTValueLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(scrlPaneGdeFolderContents, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lbGdeFolderContents)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, pnlChooseTTValueLayout.createSequentialGroup()
                                .add(lblGdeFolder)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtGdeFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlChooseTTValueLayout.createSequentialGroup()
                        .add(btnChoose)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnCancel)))
                .addContainerGap())
        );
        pnlChooseTTValueLayout.setVerticalGroup(
            pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, pnlChooseTTValueLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblGdeFolder)
                    .add(txtGdeFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(lbGdeFolderContents)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrlPaneGdeFolderContents, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlChooseTTValueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnCancel)
                    .add(btnChoose))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAddJars.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lstJarList.setToolTipText("List of jar files in the GDE Folder");
        scrlPaneJarList.setViewportView(lstJarList);

        scrlPaneAddJarsMessage.setBorder(null);
        scrlPaneAddJarsMessage.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrlPaneAddJarsMessage.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        txtAddJarsMessage.setBackground(new java.awt.Color(238, 238, 238));
        txtAddJarsMessage.setColumns(20);
        txtAddJarsMessage.setEditable(false);
        txtAddJarsMessage.setLineWrap(true);
        txtAddJarsMessage.setRows(5);
        txtAddJarsMessage.setText("If none of the classes/interfaces are listed above, click on the button below to add jar files extended trouble ticket value interface or implementation...");
        txtAddJarsMessage.setWrapStyleWord(true);
        txtAddJarsMessage.setBorder(null);
        scrlPaneAddJarsMessage.setViewportView(txtAddJarsMessage);

        btnAddJarFiles.setText("Click to add jar files");
        btnAddJarFiles.setToolTipText("Add more jar files to the GDE folder");
        btnAddJarFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddJarFilesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlAddJarsLayout = new org.jdesktop.layout.GroupLayout(pnlAddJars);
        pnlAddJars.setLayout(pnlAddJarsLayout);
        pnlAddJarsLayout.setHorizontalGroup(
            pnlAddJarsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, pnlAddJarsLayout.createSequentialGroup()
                .addContainerGap()
                .add(scrlPaneJarList, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlAddJarsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(scrlPaneAddJarsMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .add(btnAddJarFiles, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAddJarsLayout.setVerticalGroup(
            pnlAddJarsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, pnlAddJarsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlAddJarsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, scrlPaneJarList, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlAddJarsLayout.createSequentialGroup()
                        .add(scrlPaneAddJarsMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnAddJarFiles)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlChooseTTValue)
                    .add(lblTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .add(pnlAddJars))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(lblTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlChooseTTValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlAddJars, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        String selValue = (String) this.lstGdeFolderContents.getSelectedValue();
        if(selValue == null) {
            JOptionPane.showMessageDialog(this, "Select a class/interface from" +
                    " the list", "Select Class/Interface", 
                    JOptionPane.ERROR_MESSAGE);
            // set the focus on the GDE folder contents list box.
            this.lstGdeFolderContents.grabFocus(); 
            return;
        }
        this.chosenClassName = selValue;
        this.dispose();
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddJarFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddJarFilesActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        
        // Disable the all filel filters.
        fileChooser.setAcceptAllFileFilterUsed(false); 
        // Set the selection to 'files only' so the user is not allowed to
        // choose the 'FILES'
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //Set the filter so that the file chooser will display only the jsp files.
        fileChooser.setFileFilter(new CustomFileFilter("Jar Files (*.jar)", "jar"));
        
        int retVal = fileChooser.showOpenDialog(this); // Show the 'Open File' dialog.
        if(retVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile(); 
            
            String str = System.getProperty("file.separator");       
            String gdeFolderName = null;
            try {
                gdeFolderName = new GDEFolderManager().getGdeFolderName();
            } catch (Exception ex) {
                throw new GDERuntimeException(ex);
            }
            String destFileName = gdeFolderName + str +"lib"+str+ file.getName();
            File destFile = new File(destFileName);
            try { 
                FileUtilities.copy(file, destFile);
                fillGdeFolderJarsList();      
                GDEClassesManager mngr = 
                        GDEAppContext.getInstance().getClassesManager();
                mngr.loadClassesFromJarFile(file.getName());
                loadClassesFromGDEFolder();
            } catch(IOException ex) {
                throw new GDERuntimeException("IOException occured", ex);
            } catch(GDEException ex) {
                String errorStr = ex.getMessage();
                JOptionPane.showMessageDialog(this, errorStr, 
                        "Class Loading Failure", JOptionPane.ERROR_MESSAGE);
            }
        }        
    }//GEN-LAST:event_btnAddJarFilesActionPerformed
    
    /**
     * This function loads the list of classes/interfaces from the GDEFolder, 
     * which implements/extendes the base TroubleTicketValue interface.
     */
    private void loadClassesFromGDEFolder() throws GDEException {
        
        GDEAppContext context = GDEAppContext.getInstance();
        GDEClassesManager mngr = context.getClassesManager();
        
        DefaultListModel model = new DefaultListModel();        
        
        Collection coll1 = mngr.getStandardTypeList();
        for(Iterator it = coll1.iterator(); it.hasNext(); ) {
            Class cls = (Class) it.next();
            if(this.type == TYPE_INTERFACE) {
                if(cls.isInterface())
                    model.addElement(cls.getName());
            } else if(this.type == TYPE_CLASS) {
                if(!cls.isInterface())
                    model.addElement(cls.getName());
            } else {
                model.addElement(cls.getName());                
            }
        }        
                
        Collection coll =  mngr.getAssignableTypeList();        
        for(Iterator it = coll.iterator(); it.hasNext(); ) {
            Class cls = (Class) it.next();
            if(this.type == TYPE_INTERFACE) {
                if(cls.isInterface())
                    model.addElement(cls.getName());
            } else if(this.type == TYPE_CLASS) {
                if(!cls.isInterface())
                    model.addElement(cls.getName());
            } else {
                model.addElement(cls.getName());
            }
        }        
        lstGdeFolderContents.setModel(model); // display the contents in the list.       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAddJarFiles;
    public javax.swing.JButton btnCancel;
    public javax.swing.JButton btnChoose;
    public javax.swing.JLabel lbGdeFolderContents;
    public javax.swing.JLabel lblGdeFolder;
    public javax.swing.JLabel lblTitle;
    public javax.swing.JList lstGdeFolderContents;
    public javax.swing.JList lstJarList;
    public javax.swing.JPanel pnlAddJars;
    public javax.swing.JPanel pnlChooseTTValue;
    public javax.swing.JScrollPane scrlPaneAddJarsMessage;
    public javax.swing.JScrollPane scrlPaneGdeFolderContents;
    public javax.swing.JScrollPane scrlPaneJarList;
    public javax.swing.JTextArea txtAddJarsMessage;
    public javax.swing.JTextField txtGdeFolder;
    // End of variables declaration//GEN-END:variables

}


/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * Copyright 2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder. *
 */

package com.sun.tthub.gde.ui.controls;

import com.sun.tthub.gde.ui.framework.GDEWizardMainDlg;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.ImageIcon;
import javax.swing.JPanel; 

/**
 * This panel contains the navigation controls and the background image. This is
 * set as the navigation panel for the wizard.
 *
 * @author  Hareesh Ravindran
 */

public class GDENavigationPanel extends JPanel {
    
    private GDEWizardMainDlg gdeDialog;
    
    public GDENavigationPanel (GDEWizardMainDlg gdeDialog) {                    
        this.gdeDialog = gdeDialog;
        initComponents();     
        setBackImage();
    }        
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnGrpWizardOptions = new javax.swing.ButtonGroup();
        pnlGdeOptionsGroup = new javax.swing.JPanel();
        optGdePreferences = new javax.swing.JRadioButton();
        optDisplayControlAttr = new javax.swing.JRadioButton();

        pnlGdeOptionsGroup.setOpaque(false);
        btnGrpWizardOptions.add(optGdePreferences);
        optGdePreferences.setText("GDE Preferences");
        optGdePreferences.setBorder(null);
        optGdePreferences.setMargin(new java.awt.Insets(0, 0, 0, 0));
        optGdePreferences.setOpaque(false);
        optGdePreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optGdePreferencesActionPerformed(evt);
            }
        });

        btnGrpWizardOptions.add(optDisplayControlAttr);
        optDisplayControlAttr.setText("Display Control Attr");
        optDisplayControlAttr.setBorder(null);
        optDisplayControlAttr.setMargin(new java.awt.Insets(0, 0, 0, 0));
        optDisplayControlAttr.setOpaque(false);
        optDisplayControlAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optDisplayControlAttrActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlGdeOptionsGroupLayout = new org.jdesktop.layout.GroupLayout(pnlGdeOptionsGroup);
        pnlGdeOptionsGroup.setLayout(pnlGdeOptionsGroupLayout);
        pnlGdeOptionsGroupLayout.setHorizontalGroup(
            pnlGdeOptionsGroupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlGdeOptionsGroupLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlGdeOptionsGroupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, optDisplayControlAttr, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, optGdePreferences, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlGdeOptionsGroupLayout.setVerticalGroup(
            pnlGdeOptionsGroupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlGdeOptionsGroupLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(optGdePreferences)
                .add(14, 14, 14)
                .add(optDisplayControlAttr)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlGdeOptionsGroup, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(94, 94, 94)
                .add(pnlGdeOptionsGroup, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void optDisplayControlAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optDisplayControlAttrActionPerformed
        gdeDialog.processDisplayControlSelection();
    }//GEN-LAST:event_optDisplayControlAttrActionPerformed

    private void optGdePreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optGdePreferencesActionPerformed
       gdeDialog.processPreferencesSelection(); 
    }//GEN-LAST:event_optGdePreferencesActionPerformed
                
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int y = (this.getHeight() -  pnlGdeOptionsGroup.getHeight()) / 2;
        pnlGdeOptionsGroup.setBounds(pnlGdeOptionsGroup.getX(), 
                    y, pnlGdeOptionsGroup.getWidth(), 
                    pnlGdeOptionsGroup.getHeight());
        Graphics innerG = g.create();
        if(bgImage == null) {
            innerG.setColor(new Color(0xffccccff));
            innerG.fill3DRect(0,0,getSize().width,getSize().height,true);
        } else {
             innerG.drawImage(bgImage,0,0,getSize().width,getSize().height,this);
        }        
    }     
    
    private void setBackImage() {
        
        InputStream resourceStream = 
                    getClass().getResourceAsStream("defaultWizard.gif");
        try {
            byte[] byteArr = new byte[resourceStream.available()];
            resourceStream.read(byteArr);
            ImageIcon icon = new ImageIcon(byteArr, "The GDE Wizard Image");       
            this.bgImage = icon.getImage();            
        } catch (IOException ex) {/** do nothing. the image will not be loaded. */}
        repaint();
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.ButtonGroup btnGrpWizardOptions;
    public javax.swing.JRadioButton optDisplayControlAttr;
    public javax.swing.JRadioButton optGdePreferences;
    public javax.swing.JPanel pnlGdeOptionsGroup;
    // End of variables declaration//GEN-END:variables

    Image bgImage = null;        
}

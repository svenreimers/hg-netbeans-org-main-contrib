/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package beans2nbm.ui;

import java.awt.Component;
import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.JTextComponent;
import org.netbeans.spi.wizard.WizardPage;

/**
 *
 * @author  Tim Boudreau
 */
public class OutputLocationPage extends WizardPage {

    /** Creates new form OutputLocationPage */
    public OutputLocationPage() {
        initComponents();
    }

    public static String getStep() {
        return "destination";
    }
   
    public static String getDescription() {
        return "Choose Output Location";
    }
    
    public void addNotify() {
        super.addNotify();
        String s = (String) getWizardData ("codename");
        if (s != null) {
            char[] c = s.toCharArray();
            for (int i=0; i < c.length; i++) {
                if (c[i] == '.') {
                    c[i] = '-';
                }
            }
            fileField.setText (new String (c) + ".nbm");
        } else {
            String dir = Preferences.userNodeForPackage(getClass()).get(
                    KEY_OUTPATH, null);
            if (new File(dir).exists()) {
                fileField.setText (dir);
            }
        }
    }
    
    protected String validateContents(Component component, Object event) {
        String s = fileField.getText();
        if (s.trim().length() == 0) {
            return "Enter a file name ending with .nbm";
        }
        if (!s.endsWith(".nbm")) {
            return "File name must end with .nbm";
        }
        if (s.indexOf ("\\") > 0 || s.indexOf ("/") > 0) {
            return "File name contains illegal characters";
        }
        if (s.indexOf (" ") > 0) {
            return "File names containing spaces are not recommended";
        }
        String fld = folderField.getText();
        File f = new File (fld);
        if (f.isFile()) {
            return f.getName() + " is a file, not a directory";
        }
        if (!f.exists()) {
            return "Directory " + f.getName() + " does not exist";
        }
        
        Preferences.userNodeForPackage(getClass()).put(
                    KEY_OUTPATH, f.getPath());
        
        return null;
    }
    
    public void requestFocus() {
        folderField.requestFocus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        folderField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        jLabel1.setText("Destination Folder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 5, 5);
        add(jLabel1, gridBagConstraints);

        folderField.setName("destFolder");
        folderField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                folderFieldFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(folderField, gridBagConstraints);

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jButton1, gridBagConstraints);

        jLabel2.setText("File Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        add(jLabel2, gridBagConstraints);

        fileField.setName("destFileName");
        fileField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                folderFieldFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(fileField, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void folderFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_folderFieldFocusGained
        JTextComponent jtc = (JTextComponent) evt.getSource();
        jtc.selectAll();
    }//GEN-LAST:event_folderFieldFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jfc == null) {
            jfc = new JFileChooser();
            String dir = Preferences.userNodeForPackage(getClass()).get(
                    KEY_OUTPATH, null);
            jfc.setFileHidingEnabled(true);
            jfc.setFileSelectionMode(jfc.DIRECTORIES_ONLY);
//            jfc.setFileFilter(new FF());
            jfc.setMultiSelectionEnabled(false);
            if (dir != null) {
                File f = new File (dir);
                if (f.exists() && f.isDirectory()) {
                    jfc.setCurrentDirectory(f);
                }
            }
        }
        if (jfc.showOpenDialog(this) == jfc.APPROVE_OPTION) {
            File sel = jfc.getSelectedFile();
            setOutputDir (sel);
            Preferences.userNodeForPackage(getClass()).put(
                    KEY_OUTPATH, sel.getPath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private static final String KEY_OUTPATH = "OutputPath";
    private JFileChooser jfc = null;
    
    private void setOutputDir (File f) {
        folderField.setText (f.getPath());
    }
    
    private static final class FF extends FileFilter {
        public String getDescription() {
            return "Folders";
        }
        
        public boolean accept (File f) {
            return f.isDirectory();
        }
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fileField;
    private javax.swing.JTextField folderField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
    
}

/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package beans2nbm.ui;

import java.awt.Component;
import java.awt.EventQueue;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import javax.swing.BoundedRangeModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.JTextComponent;
import org.netbeans.spi.wizard.WizardPage;

/**
 *
 * @author  Tim Boudreau
 */
public class AuthorInfoPage extends WizardPage {
    
    /** Creates new form AuthorInfoPage */
    public AuthorInfoPage() {
        initComponents();
        licenseField.setFont (authorField.getFont());
    }
    
    public static String getStep() {
        return "authorInfo";
    }
    
    public static String getDescription() {
        return "Author & License";
    }    
    
    public void requestFocus() {
        authorField.requestFocus();
    }

    protected String validateContents(Component component, Object event) {
        String s = homePageField.getText();
        if (!"".equals(s)) {
            try {
                URL url = new URL (s);
            } catch (MalformedURLException e) {
                return "Not a valid URL " + s + " (you can leave it blank)";
            }
        }
        s = licenseField.getText();
        if ("".equals(s.trim())) {
            return "Enter a license, or choose one from the combo box";
        }
        s = authorField.getText();
        if ("".equals(s.trim())) {
            return "Enter a name or company in the author field";
        }
        return null;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        authorLabel = new javax.swing.JLabel();
        authorField = new javax.swing.JTextField();
        homePageLabel = new javax.swing.JLabel();
        homePageField = new javax.swing.JTextField();
        licenseLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        licenseField = new javax.swing.JTextArea();
        browseButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        authorLabel.setLabelFor(authorField);
        authorLabel.setText("Author");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 5, 0);
        add(authorLabel, gridBagConstraints);

        authorField.setName("author");
        authorField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                authorFieldFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        add(authorField, gridBagConstraints);

        homePageLabel.setLabelFor(homePageField);
        homePageLabel.setText("Home Page");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        add(homePageLabel, gridBagConstraints);

        homePageField.setName("homepage");
        homePageField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                authorFieldFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        add(homePageField, gridBagConstraints);

        licenseLabel.setLabelFor(licenseField);
        licenseLabel.setText("License");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 5, 0);
        add(licenseLabel, gridBagConstraints);

        licenseField.setColumns(20);
        licenseField.setLineWrap(true);
        licenseField.setRows(5);
        licenseField.setWrapStyleWord(true);
        licenseField.setName("license");
        jScrollPane1.setViewportView(licenseField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 167;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jScrollPane1, gridBagConstraints);

        browseButton.setText("Browse for License File");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(browseButton, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Custom", "CDDL", "Apache License", "BSD License", "GNU Public License", "LGPL", "Perl Artistic License" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jComboBox1, gridBagConstraints);

        jLabel1.setText("Common Licenses");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private JFileChooser jfc = null;
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (jfc == null) {
            jfc = new JFileChooser();
        }
        if (jfc.showOpenDialog(this) == jfc.APPROVE_OPTION) {
            jComboBox1.setSelectedItem("Custom");
            putWizardData("licenseFile", jfc.getSelectedFile().getPath());
            putWizardData ("licenseName", null);
            loadLicense (jfc.getSelectedFile());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

private static final String[] licenses = new String[] { 
    "Custom", 
    "CDDL", 
    "Sun Public License", 
    "Apache License", 
    "BSD License", 
    "GNU Public License", 
    "LGPL",
    "Perl Artistic License",
};

private static final String[] licenseFiles = new String[] {
    null,
    "cddl.txt",
    "spl.txt",
    "apache.txt",
    "bsd.txt",
    "gpl.txt",
    "lgpl.txt",
    "artistic.txt",
};

static {
    assert licenses.length == licenseFiles.length;
}
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        JComboBox box = (JComboBox) evt.getSource();
        String sel = (String) box.getSelectedItem();
        int ix = Arrays.asList(licenses).indexOf (sel);
        if (ix >= 0) {
            String filename = licenseFiles[ix];
            if (filename == null) {
                licenseField.setText("");
            } else {
                putWizardData("licenseFile", null);
                int pix = filename.lastIndexOf(".");
                String lname = filename.substring (0, pix);
                putWizardData ("licenseName", lname.toLowerCase());
                loadLicense (filename);
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void loadLicense (String filename) {
        InputStream is = new BufferedInputStream(AuthorInfoPage.class.getResourceAsStream("resources/" + filename ));
        loadLicense (is);
    }
    
    private void loadLicense (File file) {
        if (!file.isFile() || !file.canRead()) {
            JOptionPane.showMessageDialog(this, 
                    "Cannot read " + file.getName(), 
                    "Error reading license file", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            InputStream is = new BufferedInputStream (new FileInputStream (file));
            loadLicense (is);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this, "Could not open " + file.getName());
        }
    }
    
    private void loadLicense (InputStream is) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream ();
        try {
            copy (is, baos);
            String s = new String (baos.toByteArray(), "UTF-8");
            licenseField.setText(s);
            jScrollPane1.setIgnoreRepaint(true);
            EventQueue.invokeLater (new Runnable() {
                public void run() {
                    BoundedRangeModel mdl = jScrollPane1.getVerticalScrollBar().getModel();
                    mdl.setValue(mdl.getMinimum());
                    mdl = jScrollPane1.getHorizontalScrollBar().getModel();
                    mdl.setValue(mdl.getMinimum());
                    jScrollPane1.setIgnoreRepaint(false);
                    jScrollPane1.repaint();
                }
            });
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
    
        public static void copy(InputStream is, OutputStream os)
    throws IOException {
        final byte[] BUFFER = new byte[4096];
        int len;

        for (;;) {
            len = is.read(BUFFER);

            if (len == -1) {
                return;
            }

            os.write(BUFFER, 0, len);
        }
    }

    
    private void authorFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_authorFieldFocusGained
        JTextComponent jtc = (JTextComponent) evt.getSource();
        jtc.selectAll();
    }//GEN-LAST:event_authorFieldFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField homePageField;
    private javax.swing.JLabel homePageLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea licenseField;
    private javax.swing.JLabel licenseLabel;
    // End of variables declaration//GEN-END:variables
    
}

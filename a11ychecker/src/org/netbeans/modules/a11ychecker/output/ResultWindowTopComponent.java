/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.a11ychecker.output;

import java.io.Serializable;
import org.netbeans.modules.a11ychecker.FormBroker;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Utilities;

/**
 * Top component for a11y result window
 * @author Max Sauer
 */
public final class ResultWindowTopComponent extends TopComponent {
    
    private static ResultWindowTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/netbeans/modules/a11ychecker/output/a11yIcon.png";
    private ResultPanel resultPanel;

    public ResultPanel getResultPanel() {
        return resultPanel;
    }
    private static final String PREFERRED_ID = "ResultWindowTopComponent";
    
    private ResultWindowTopComponent() {
	initComponents2();
	setName(NbBundle.getMessage(ResultWindowTopComponent.class, "CTL_ResultWindowTopComponent"));
	setToolTipText(NbBundle.getMessage(ResultWindowTopComponent.class, "HINT_ResultWindowTopComponent"));
	setIcon(Utilities.loadImage(ICON_PATH, true));
    }
    
    private void initComponents2() {
	resultPanel = new org.netbeans.modules.a11ychecker.output.ResultPanel();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, resultPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 613, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 226, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ResultWindowTopComponent.class, "ResultWindowTopComponent.AccessibleContext.accessibleName")); // NOI18N
        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ResultWindowTopComponent.class, "ResultWindowTopComponent.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ResultWindowTopComponent getDefault() {
	if (instance == null) {
	    instance = new ResultWindowTopComponent();
	}
	return instance;
    }
    
    /**
     * Obtain the ResultWindowTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ResultWindowTopComponent findInstance() {
	TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
	if (win == null) {
	    ErrorManager.getDefault().log(ErrorManager.WARNING,
		    "Cannot find ResultWindowTopComponent. It will not be located properly in the window system.");
	    return getDefault();
	}
	if (win instanceof ResultWindowTopComponent) {
	    return (ResultWindowTopComponent)win;
	}
	ErrorManager.getDefault().log(ErrorManager.WARNING,
		"There seem to be multiple components with the '" + PREFERRED_ID +
		"' ID. That is a potential source of errors and unexpected behavior.");
	return getDefault();
    }
    
    public int getPersistenceType() {
	return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
	FormBroker.getDefault().startBroker();
    }
    
    public void componentClosed() {
	FormBroker.getDefault().stopBroker();
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
	return new ResolvableHelper();
    }
    
    protected String preferredID() {
	return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
	private static final long serialVersionUID = 1L;
	public Object readResolve() {
	    return ResultWindowTopComponent.getDefault();
	}
    }
    
}

/*
 * ExternalToolsManager.java
 *
 * Created on 11. prosinec 2005, 23:41
 */

package org.netbeans.modules.toolsintegration;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.NotifyDescriptor.Message;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;

/**
 *
 * @author  Administrator
 */
public class ExternalToolsManager extends javax.swing.JPanel {
    
    private int         currentIndex = -1;
    private Vector      toolNames;
    private List        tools;
    
    
    /** Creates new form ExternalToolsManager */
    public ExternalToolsManager () {
        initComponents ();
        
        cbAnnotateOutputAs.setModel (new DefaultComboBoxModel (new String[] {
            "No Annotation",
            "Error",
            "Warning",
            "Suggestion",
            "Task"
        }));
        cbAnnotateOutputAs.setRenderer (new Renderer ());
        tools = new ArrayList (Model.getDefault ().getTools ());
        Collections.sort (tools, new ToolsComparator ());
        toolNames = new Vector ();
        Iterator it = tools.iterator ();
        while (it.hasNext ()) {
            ExternalTool tool = (ExternalTool) it.next ();
            toolNames.add (tool.getName ());
        }
        lTools.setListData (toolNames);
        if (toolNames.size () > 0)
            lTools.setSelectedIndex (0);
        
        spParameters.setHorizontalScrollBarPolicy (JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        taParameters.setLineWrap (true);
        taParameters.setWrapStyleWord (true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        lTools = new javax.swing.JList();
        bNew = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        lName = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tabbedPane = new javax.swing.JTabbedPane();
        pGeneral = new javax.swing.JPanel();
        lTarget = new javax.swing.JLabel();
        tfTarget = new javax.swing.JTextField();
        bTarget = new javax.swing.JButton();
        lWorkingDirectory = new javax.swing.JLabel();
        tfWorkingDirectory = new javax.swing.JTextField();
        lParameters = new javax.swing.JLabel();
        spParameters = new javax.swing.JScrollPane();
        taParameters = new javax.swing.JTextArea();
        bVariables = new javax.swing.JButton();
        bAddFile = new javax.swing.JButton();
        bWDSetDirectory = new javax.swing.JButton();
        bWDSetVariable = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lVariables = new javax.swing.JLabel();
        spVariables = new javax.swing.JScrollPane();
        taVariables = new javax.swing.JTextArea();
        bAddVariableToEnvironment = new javax.swing.JButton();
        cbInheritEnvironment = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        lRedirectOutput = new javax.swing.JLabel();
        cbProcessOutput = new javax.swing.JCheckBox();
        cbProcessError = new javax.swing.JCheckBox();
        cbProcessInput = new javax.swing.JCheckBox();
        lOpenAlwaysNewTab = new javax.swing.JLabel();
        cbOpenAlwaysNewTab = new javax.swing.JCheckBox();
        lHighlightOutput = new javax.swing.JLabel();
        cbHighlightOutput = new javax.swing.JCheckBox();
        lSetOutputExpression = new javax.swing.JLabel();
        tfOutputExpression = new javax.swing.JTextField();
        lAnnotateOutputAs = new javax.swing.JLabel();
        cbAnnotateOutputAs = new javax.swing.JComboBox();
        cbAppend = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lFilterProcessOutput = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        bSetExpression = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        bShortcut = new javax.swing.JButton();
        tfShortcut = new javax.swing.JTextField();
        lShortcut = new javax.swing.JLabel();

        lTools.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lToolsValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(lTools);

        bNew.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/toolsintegration/Bundle").getString("CTL_New"));
        bNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewActionPerformed(evt);
            }
        });

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        lName.setText("Name:");

        lTarget.setText("Target:");

        bTarget.setText("Select");
        bTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTargetActionPerformed(evt);
            }
        });

        lWorkingDirectory.setText("Working Directory:");

        lParameters.setText("Parameters:");

        taParameters.setColumns(20);
        taParameters.setRows(5);
        spParameters.setViewportView(taParameters);

        bVariables.setText("Add Variable");
        bVariables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVariablesActionPerformed(evt);
            }
        });

        bAddFile.setText("Add File");
        bAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddFileActionPerformed(evt);
            }
        });

        bWDSetDirectory.setText("Set Directory");
        bWDSetDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWDSetDirectoryActionPerformed(evt);
            }
        });

        bWDSetVariable.setText("Set Variable");
        bWDSetVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWDSetVariableActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pGeneralLayout = new org.jdesktop.layout.GroupLayout(pGeneral);
        pGeneral.setLayout(pGeneralLayout);
        pGeneralLayout.setHorizontalGroup(
            pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pGeneralLayout.createSequentialGroup()
                        .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lWorkingDirectory)
                            .add(lTarget)
                            .add(lParameters))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pGeneralLayout.createSequentialGroup()
                                .add(tfTarget, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(bTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(spParameters, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                            .add(tfWorkingDirectory, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pGeneralLayout.createSequentialGroup()
                        .add(bAddFile)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bVariables))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pGeneralLayout.createSequentialGroup()
                        .add(bWDSetDirectory)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bWDSetVariable)))
                .addContainerGap())
        );
        pGeneralLayout.setVerticalGroup(
            pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lTarget)
                    .add(bTarget)
                    .add(tfTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lWorkingDirectory)
                    .add(tfWorkingDirectory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bWDSetVariable)
                    .add(bWDSetDirectory))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lParameters)
                    .add(spParameters, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pGeneralLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bVariables)
                    .add(bAddFile))
                .addContainerGap())
        );
        tabbedPane.addTab(java.util.ResourceBundle.getBundle("org/netbeans/modules/toolsintegration/Bundle").getString("CTL_General_Tab"), pGeneral);

        lVariables.setText("Environment Variables:");

        taVariables.setColumns(20);
        taVariables.setRows(5);
        spVariables.setViewportView(taVariables);

        bAddVariableToEnvironment.setText("Add Variable");
        bAddVariableToEnvironment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddVariableToEnvironmentActionPerformed(evt);
            }
        });

        cbInheritEnvironment.setText("Inherit IDE Environment Variables");
        cbInheritEnvironment.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbInheritEnvironment.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbInheritEnvironment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbInheritEnvironmentActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spVariables, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                    .add(lVariables, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(cbInheritEnvironment)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 240, Short.MAX_VALUE)
                        .add(bAddVariableToEnvironment)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(lVariables)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spVariables, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(bAddVariableToEnvironment)
                    .add(cbInheritEnvironment))
                .addContainerGap())
        );
        tabbedPane.addTab("Environment Variables", jPanel2);

        lRedirectOutput.setText("Redirect to Output Window:");

        cbProcessOutput.setText("Process Output");
        cbProcessOutput.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbProcessOutput.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cbProcessError.setText("Process Error Output");
        cbProcessError.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbProcessError.setMargin(new java.awt.Insets(0, 0, 0, 0));

        cbProcessInput.setText("Process Input");
        cbProcessInput.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbProcessInput.setMargin(new java.awt.Insets(0, 0, 0, 0));

        lOpenAlwaysNewTab.setText("Output Window's Tabs:");

        cbOpenAlwaysNewTab.setText("Open Always a New Tab");
        cbOpenAlwaysNewTab.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbOpenAlwaysNewTab.setMargin(new java.awt.Insets(0, 0, 0, 0));

        lHighlightOutput.setText("Highlight Filtered Stuff in Output Window:");

        cbHighlightOutput.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbHighlightOutput.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbHighlightOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHighlightOutputActionPerformed(evt);
            }
        });

        lSetOutputExpression.setText("Set Output Filter:");

        tfOutputExpression.setEditable(false);

        lAnnotateOutputAs.setText("Annotate Filtered Stuff in Editor as:");

        cbAnnotateOutputAs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Do not Annotate", "Tasks", "Suggestion", "Errors", "Warnings" }));

        cbAppend.setText("Append Ouptut");
        cbAppend.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbAppend.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel2.setText("Output Window");

        lFilterProcessOutput.setText("Filter Process Output");

        bSetExpression.setText("Set...");
        bSetExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSetExpressionActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lOpenAlwaysNewTab)
                            .add(lRedirectOutput)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(200, 200, 200)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cbOpenAlwaysNewTab)
                            .add(cbProcessOutput)
                            .add(cbProcessError)
                            .add(cbProcessInput)
                            .add(cbAppend)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(lFilterProcessOutput)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(jLabel2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(lHighlightOutput)
                                    .add(lSetOutputExpression)
                                    .add(lAnnotateOutputAs))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(cbHighlightOutput)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .add(tfOutputExpression, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(bSetExpression))
                                    .add(cbAnnotateOutputAs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel2)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lRedirectOutput)
                    .add(cbProcessOutput))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbProcessError)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbProcessInput)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbOpenAlwaysNewTab)
                    .add(lOpenAlwaysNewTab))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbAppend)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(lFilterProcessOutput)
                    .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lSetOutputExpression)
                    .add(bSetExpression)
                    .add(tfOutputExpression, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lHighlightOutput)
                    .add(cbHighlightOutput))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lAnnotateOutputAs)
                    .add(cbAnnotateOutputAs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        tabbedPane.addTab("Output", jPanel3);

        jLabel1.setText("Save Current File Before Processing:");

        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel3.setText("Invoke Tool When File is Opened in Editor:");

        jLabel4.setText("Invoke Tool When File is Saved:");

        jLabel5.setText("Invoke Tool When File is Focused in Editor:");

        jLabel6.setText("Invoke Tool When File is Selected in Explorer:");

        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBox3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox3.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBox4.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox4.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBox5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox5.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel3)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCheckBox5)
                    .add(jCheckBox4)
                    .add(jCheckBox3)
                    .add(jCheckBox2)
                    .add(jCheckBox1))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jCheckBox1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jCheckBox2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jCheckBox3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jCheckBox4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jCheckBox5))
                .addContainerGap(225, Short.MAX_VALUE))
        );
        tabbedPane.addTab("Advanced", jPanel1);

        bShortcut.setText("Select");
        bShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bShortcutActionPerformed(evt);
            }
        });

        tfShortcut.setEditable(false);

        lShortcut.setText("Shortcut:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(bNew)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bDelete)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(lName)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tfName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, tabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(lShortcut)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tfShortcut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bShortcut)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lName)
                            .add(tfName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(bNew)
                        .add(bDelete))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(bShortcut)
                        .add(tfShortcut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lShortcut)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bSetExpressionActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSetExpressionActionPerformed
        OutputFilterEditor editor = new OutputFilterEditor 
            (tfOutputExpression.getText ());
        DialogDescriptor dd = new DialogDescriptor (
            editor,
            "Set Output Filter"
        );
        final Dialog dialog = DialogDisplayer.getDefault ().createDialog (dd);
        dialog.setVisible (true);
        if (dd.getValue () == dd.OK_OPTION)
            tfOutputExpression.setText (editor.getValue ());
    }//GEN-LAST:event_bSetExpressionActionPerformed

    private void cbHighlightOutputActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHighlightOutputActionPerformed
        cbAnnotateOutputAs.setEnabled (cbHighlightOutput.isSelected ());
        tfOutputExpression.setEnabled (cbHighlightOutput.isSelected ());
    }//GEN-LAST:event_cbHighlightOutputActionPerformed

    private void bAddVariableToEnvironmentActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddVariableToEnvironmentActionPerformed
        VariablesChooser chooser = new VariablesChooser (
            Variables.getParameterVariables ()
        );
        DialogDescriptor dd = new DialogDescriptor (
            chooser,
            "Select Variable"
        );
        Dialog dialog = DialogDisplayer.getDefault ().createDialog (dd);
        dialog.setVisible (true);
        if (dd.getValue () != dd.OK_OPTION) return;
        if (chooser.getSelectedVariable () == null) return;
        taVariables.setText (
            taVariables.getText () + "\n" + 
            chooser.getSelectedVariable ().getSymbolicName ()
        );
    }//GEN-LAST:event_bAddVariableToEnvironmentActionPerformed

    private void bVariablesActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVariablesActionPerformed
        VariablesChooser chooser = new VariablesChooser (
            Variables.getParameterVariables ()
        );
        DialogDescriptor dd = new DialogDescriptor (
            chooser,
            "Select Variable"
        );
        Dialog dialog = DialogDisplayer.getDefault ().createDialog (dd);
        dialog.setVisible (true);
        if (dd.getValue () != dd.OK_OPTION) return;
        if (chooser.getSelectedVariable () == null) return;
        int position = taParameters.getCaret ().getDot ();
        String old = taParameters.getText ();
        taParameters.setText (
            old.substring (0, position) + 
            chooser.getSelectedVariable ().getSymbolicName () +
            old.substring (position)
        );
    }//GEN-LAST:event_bVariablesActionPerformed

    private void bWDSetDirectoryActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bWDSetDirectoryActionPerformed
        JFileChooser fileChooser = new JFileChooser ();
        fileChooser.setFileSelectionMode (JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showDialog (
            WindowManager.getDefault ().getMainWindow (),
            "Select"
        );
        if (result != JFileChooser.APPROVE_OPTION) return;
        File f = fileChooser.getSelectedFile ();
        tfWorkingDirectory.setText (f.getAbsolutePath ());        
    }//GEN-LAST:event_bWDSetDirectoryActionPerformed

    private void bWDSetVariableActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bWDSetVariableActionPerformed
        VariablesChooser chooser = new VariablesChooser (
            Variables.getWorkingDirectoryVariables ()
        );
        DialogDescriptor dd = new DialogDescriptor (
            chooser,
            "Select Variable"
        );
        Dialog dialog = DialogDisplayer.getDefault ().createDialog (dd);
        dialog.setVisible (true);
        if (dd.getValue () != dd.OK_OPTION) return;
        if (chooser.getSelectedVariable () == null) return;
        tfWorkingDirectory.setText (
            chooser.getSelectedVariable ().getSymbolicName ()
        );
    }//GEN-LAST:event_bWDSetVariableActionPerformed

    private void cbInheritEnvironmentActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbInheritEnvironmentActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_cbInheritEnvironmentActionPerformed

    private void bAddFileActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddFileActionPerformed
        JFileChooser fileChooser = new JFileChooser ();
        fileChooser.setFileSelectionMode (JFileChooser.FILES_AND_DIRECTORIES);
        int result = fileChooser.showDialog (
            WindowManager.getDefault ().getMainWindow (),
            "Select"
        );
        if (result != JFileChooser.APPROVE_OPTION) return;
        File f = fileChooser.getSelectedFile ();
        taParameters.setText (taParameters.getText () + " " + f.getAbsolutePath ());        
    }//GEN-LAST:event_bAddFileActionPerformed

    private void bShortcutActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bShortcutActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_bShortcutActionPerformed
    private void bTargetActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTargetActionPerformed
        JFileChooser fileChooser = new JFileChooser ();
        fileChooser.setFileSelectionMode (JFileChooser.FILES_ONLY);
        int result = fileChooser.showDialog (
            WindowManager.getDefault ().getMainWindow (),
            "Select"
        );
        if (result != JFileChooser.APPROVE_OPTION) return;
        File f = fileChooser.getSelectedFile ();
        tfTarget.setText (f.getAbsolutePath ());        
    }//GEN-LAST:event_bTargetActionPerformed

    private void bDeleteActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        int i = lTools.getSelectedIndex ();
        if (i < 0) return;
        tools.remove (i);
        toolNames.remove (i);
        lTools.setListData (toolNames);
        if (tools.size () == 0) {
            setCurrentIndex (-1);
            return;
        }
        if (i < tools.size ())
            lTools.setSelectedIndex (i);
        else
            lTools.setSelectedIndex (tools.size () - 1);
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bNewActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewActionPerformed
        int i = lTools.getSelectedIndex ();
        if (i < 0) return;
        saveCurrentData ();
        currentIndex = -1;
        tools.add (ExternalTool.NEW);
        toolNames.add (ExternalTool.NEW.getName ());
        lTools.setListData (toolNames);
        lTools.setSelectedIndex (tools.size () - 1);
    }//GEN-LAST:event_bNewActionPerformed

    private void lToolsValueChanged (javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lToolsValueChanged
        setCurrentIndex (lTools.getSelectedIndex ());
    }//GEN-LAST:event_lToolsValueChanged

    private void setCurrentIndex (int index) {
        // save current data
        saveCurrentData ();
        
        // set new data
        if (index < 0) {
            tfName.setText ("");
            tfTarget.setText ("");
            tfWorkingDirectory.setText ("");
            taParameters.setText ("");
            taVariables.setText ("");
            cbInheritEnvironment.setSelected (false);
            cbProcessOutput.setSelected (true);
            cbProcessError.setSelected (true);
            cbProcessInput.setSelected (false);
            cbOpenAlwaysNewTab.setSelected (false);
            cbAppend.setSelected (false);
            cbHighlightOutput.setSelected (true);
            tfOutputExpression.setText ("");
            cbAnnotateOutputAs.setSelectedIndex (0);
            return;
        }
        ExternalTool tool = (ExternalTool) tools.get (index);
        tfName.setText (tool.getName ());
        tfTarget.setText (tool.getFileName ());
        if (tool.getWorkingDirectory () == null)
            tfWorkingDirectory.setText ("");
        else
            tfWorkingDirectory.setText (tool.getWorkingDirectory ());
        taParameters.setText (tool.getParametersAsText ());
        taVariables.setText (tool.getVariablesAsText ());
        cbInheritEnvironment.setSelected (tool.isInheritIDEEnvironment ());
        cbProcessOutput.setSelected (tool.isShowOutput ());
        cbProcessError.setSelected (tool.isShowError ());
        cbProcessInput.setSelected (tool.isShowInput ());
        cbOpenAlwaysNewTab.setSelected (tool.isNewTabAlways ());
        cbAppend.setSelected (tool.isAppend ());
        cbHighlightOutput.setSelected (tool.isHighlightOutput ());
        if (tool.getHighlightExpression () != null)
            tfOutputExpression.setText (tool.getHighlightExpression ());
        else
            tfOutputExpression.setText ("");
        cbAnnotateOutputAs.setSelectedIndex (tool.getAnnotateAs ());
            
        currentIndex = index;
    }
    
    private void saveCurrentData () {
        if (currentIndex < 0) return;
        tools.set (
            currentIndex,
            new ExternalTool (
                tfName.getText (),
                tfTarget.getText (), 
                tfWorkingDirectory.getText (), 
                taParameters.getText (), 
                taVariables.getText (),
                cbInheritEnvironment.isSelected (),
                cbProcessOutput.isSelected (),
                cbProcessError.isSelected (),
                cbProcessInput.isSelected (),
                cbOpenAlwaysNewTab.isSelected (),
                cbAppend.isSelected (),
                cbHighlightOutput.isSelected (),
                tfOutputExpression.getText (),
                cbAnnotateOutputAs.getSelectedIndex ()
            )
        );
        toolNames.set (
            currentIndex,
            tfName.getText ()
        );
    }
    
    List getTools () {
        saveCurrentData ();
        return Collections.unmodifiableList (tools);
    }
    
    private static List icons;
    
    private static Icon getIcon (int index) {
        if (icons == null) {
            icons = new ArrayList ();
            icons.add (
                new ImageIcon (Utilities.loadImage (
                    "org/netbeans/modules/java/resources/error-glyph.gif"
                ))
            );
            icons.add (
                new ImageIcon (Utilities.loadImage (
                    "org/netbeans/modules/java/resources/warning-glyph.gif"
                ))
            );
            icons.add (
                new ImageIcon (Utilities.loadImage (
                    "org/netbeans/modules/tasklist/suggestions/suggestion.gif"
                ))
            );
            icons.add (
                new ImageIcon (Utilities.loadImage (
                    "org/netbeans/modules/tasklist/core/taskGlyph.gif"
                ))
            );
        }
        return (Icon) icons.get (index - 1);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddFile;
    private javax.swing.JButton bAddVariableToEnvironment;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bNew;
    private javax.swing.JButton bSetExpression;
    private javax.swing.JButton bShortcut;
    private javax.swing.JButton bTarget;
    private javax.swing.JButton bVariables;
    private javax.swing.JButton bWDSetDirectory;
    private javax.swing.JButton bWDSetVariable;
    private javax.swing.JComboBox cbAnnotateOutputAs;
    private javax.swing.JCheckBox cbAppend;
    private javax.swing.JCheckBox cbHighlightOutput;
    private javax.swing.JCheckBox cbInheritEnvironment;
    private javax.swing.JCheckBox cbOpenAlwaysNewTab;
    private javax.swing.JCheckBox cbProcessError;
    private javax.swing.JCheckBox cbProcessInput;
    private javax.swing.JCheckBox cbProcessOutput;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lAnnotateOutputAs;
    private javax.swing.JLabel lFilterProcessOutput;
    private javax.swing.JLabel lHighlightOutput;
    private javax.swing.JLabel lName;
    private javax.swing.JLabel lOpenAlwaysNewTab;
    private javax.swing.JLabel lParameters;
    private javax.swing.JLabel lRedirectOutput;
    private javax.swing.JLabel lSetOutputExpression;
    private javax.swing.JLabel lShortcut;
    private javax.swing.JLabel lTarget;
    private javax.swing.JList lTools;
    private javax.swing.JLabel lVariables;
    private javax.swing.JLabel lWorkingDirectory;
    private javax.swing.JPanel pGeneral;
    private javax.swing.JScrollPane spParameters;
    private javax.swing.JScrollPane spVariables;
    private javax.swing.JTextArea taParameters;
    private javax.swing.JTextArea taVariables;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfOutputExpression;
    private javax.swing.JTextField tfShortcut;
    private javax.swing.JTextField tfTarget;
    private javax.swing.JTextField tfWorkingDirectory;
    // End of variables declaration//GEN-END:variables
    
    
    // innerclasses ............................................................
    
    private static class ToolsComparator implements Comparator {
        public int compare (Object o1, Object o2) {
            return ((ExternalTool) o1).getName ().compareTo (
                ((ExternalTool) o2).getName ()
            );
        }
    }
    
    private static class Renderer extends DefaultListCellRenderer {

        public Component getListCellRendererComponent (
            JList list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus)
        {
            JLabel l = (JLabel) super.getListCellRendererComponent (
                list, value, index, isSelected, cellHasFocus
            );
            if (index > 0)
                l.setIcon (ExternalToolsManager.getIcon (index));
            else
                l.setIcon (null);
            return l;
        }
    }
}

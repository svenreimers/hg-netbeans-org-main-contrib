package ramos.localhistory.ui;

import java.awt.BorderLayout;
import java.io.Serializable;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.TreeTableView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.Repository;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class DeletedFilesTopComponent extends TopComponent
        implements ExplorerManager.Provider{
   
   private static DeletedFilesTopComponent instance;
   private final ExplorerManager manager = new ExplorerManager();
   private Lookup lookup;
   //   private final BeanTreeView view = new BeanTreeView();
   private final TreeTableView view = new TreeTableView();
   /** path to the icon used by the component and its open action */
   //    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   
   private static final String PREFERRED_ID = "DeletedFilesTopComponent";
   
   private DeletedFilesTopComponent() {
      //initComponents();
      this.setLayout(new BorderLayout());
      setName(NbBundle.getMessage(DeletedFilesTopComponent.class, "CTL_DeletedFilesTopComponent"));
      setToolTipText(NbBundle.getMessage(DeletedFilesTopComponent.class, "HINT_DeletedFilesTopComponent"));
      //        setIcon(Utilities.loadImage(ICON_PATH, true));
      this.add(view);
       ActionMap map = getActionMap();
      map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(manager));
      map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(manager));
      map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(manager));
      map.put("delete", ExplorerUtils.actionDelete(manager, true)); // or false
      lookup = ExplorerUtils.createLookup(manager, map);
      FileObject folder = Repository.getDefault().getDefaultFileSystem()
                                         .getRoot()
                                         .getFileObject("local history").getFileObject("deleted");
      try {
         manager.setRootContext(DataObject.find(folder).getNodeDelegate());
      } catch (DataObjectNotFoundException ex) {
         ex.printStackTrace();
      }
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized DeletedFilesTopComponent getDefault() {
       if (instance == null) {
          instance = new DeletedFilesTopComponent();
       }
       return instance;
    }
     public Lookup getLookup() {
      return lookup;
   }
    /**
     * Obtain the DeletedFilesTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DeletedFilesTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find DeletedFiles component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof DeletedFilesTopComponent) {
          return (DeletedFilesTopComponent)win;
       }
       ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_NEVER;
    }
    
    public void componentOpened() {
       // TODO add custom code on component opening
    }
    
    public void componentClosed() {
       // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
    protected String preferredID() {
       return PREFERRED_ID;
    }
    
    public ExplorerManager getExplorerManager() {
       return manager;
    }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return DeletedFilesTopComponent.getDefault();
       }
    }
    
}

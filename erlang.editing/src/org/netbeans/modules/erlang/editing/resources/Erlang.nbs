#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#


# Erlang.nbs
# @version 1.1.0
# @spec Erlang 4.7.3
# @author Caoyuan Deng (dcaoyuan@gmail.com)

########### Tokens ##########################################################
<DEFAULT>:TOKEN:comment:(["%"]+):<IN_COMMENT>
<IN_COMMENT> {
    TOKEN:doc_tag: (
        "@author" |
        "@code" |
        "@copyright" |
        "@doc" |
        "@deprecated" |
        "@exception" |
        "@end" |
        "@inheritDoc" |
        "@link" |
        "@linkplain" |
        "@literal" |
        "@param" |
        "@return" |
        "@see" |
        "@serial" |
        "@serialData" |
        "@serialField" |
        "@since" |
        "@spec" |
        "@throws" |
        "@type" |
        "@value" |
        "@version" |
        "@todo" |
        "@notice"
    )
    TOKEN:comment: ("@")
    TOKEN:comment: ([^ "@" "\n" "\r"]*)	
    TOKEN:whitespace: (["\n" "\r"]+):<DEFAULT>
}

TOKEN:whitespace: (
    ["\u0001"-"\u0020"]+
)

TOKEN:escript: ("#!" [^ "\n" "\r"]*)

TOKEN:string: (
    "\"" ([^ "\\" "\""] |
          ("\\" (. |
                 (["0"-"7"]) |
                 (["0"-"7"] ["0"-"7"]) | 
                 (["0"-"7"] ["0"-"7"] ["0"-"7"])
                 ("^" ["@" "A"-"Z" "["-"_"])
                )
          )
         )* 
    "\""
)

TOKEN:attribute: (
    "-define" |
    "-module" |
    "-export" | 
    "-import" |
    "-record" |
    "-include" |
    "-include_lib" |
    "-compile" |
    "-file" |
    "-spec" |
    "-type"
)

## match keyword before atom, otherwise they may be matched as atom.
TOKEN:keyword: (
    "after" | "begin" | "case" | "try" | "catch" | "end" | "fun" | "if" | "of" | "receive" | "when" |
    "andalso" | "orelse" | "query" |
    "cond" |
    "bnot" | "not" |
    "div" | "rem" | "band" | "and" |
    "bor" | "bxor" | "bsl" | "bsr" | "or" | "xor"
)

## We should match integer before float, otherwise, it will be matched as float. Why?
TOKEN:integer: (
    ["0"-"9"]+ |
    ["0"]* ["2"-"9"] "#" ["0"-"9" "a"-"f" "A"-"F"]+ |
    ["0"]* ["1"-"2"] ["0"-"9"] "#" ["0"-"9"  "a"-"f" "A"-"F"]+ |
    ["0"]* ["3"] ["0"-"6"] "#" ["0"-"9" "a"-"f" "A"-"F"]+   
)
TOKEN:float: (
    ["0"-"9"]+ "." ["0"-"9"]+ |
    ["0"-"9"]+ "." ["0"-"9"]* (["e" "E"] ["+" "-"]? ["0"-"9"]+)+ |
    ["0"-"9"]+ ["e" "E"] ["+" "-"]? ["0"-"9"]+ |
    ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)?
)
TOKEN:atom: (
    ["a"-"z" "\u00DF"-"\u00F6" "\u00F8"-"\u00FF"] 
    ["a"-"z" "A"-"Z" "0"-"9" "_" "@" "\u00DF"-"\u00F6" "\u00F8"-"\u00FF" "\u00C0"-"\u00D6" "\u00D8"-"\u00DE"]* |
    "\'" ([^ "\\" "\'"] |
          ("\\" (. |
                 (["0"-"7"]) |
                 (["0"-"7"] ["0"-"7"]) | 
                 (["0"-"7"] ["0"-"7"] ["0"-"7"])
                 ("^" ["@" "A"-"Z" "["-"_"])
                )
          )
         )* 
    "\'"
)
TOKEN:var: (
    ["A"-"Z" "_"] ["a"-"z" "A"-"Z" "0"-"9" "_" "@"]*
)
## We should match <char> after <atom> and <string> , because <string> may end with $' or $"
TOKEN:char: (
    "$" ([^ "\\" "\t" "\n" "\r"] |
         "\\" (. |
               (["0"-"7"]) |
               (["0"-"7"] ["0"-"7"]) | 
               (["0"-"7"] ["0"-"7"] ["0"-"7"]) | 
               ("^" ["@" "A"-"Z" "["-"_"])
              )
        )
)

## match operator and separator after atomic token, since atom, string may contain them.
TOKEN:operator: (
    "+" | "-" | "*" | "/" |
    "==" | "/=" | "=:=" | "=/=" | "<" | "=<" | ">" | ">=" |
    "++" | "--" | "=" | "!" | "<-" | "<="
)
TOKEN:separator: (
    "(" | ")" | "{" | "}" | "[" | "]" | ":" |
    "|" | "||" | ";" | "," | "?" | "->" |
    "<<" | ">>" | ":-" | "::" | "#"
)

## A full stop is a "." followed by whitespace, comment or end of file, 
TOKEN:stop: {
    pattern:( "." ["\t" "\r" "\n" " " "%" "-"]? );
    call:org.netbeans.modules.erlang.editing.Erlang.parsePeriod;
}
## <dot> must be defined after <stop>, otherwise there is no chance to parse stop
TOKEN:dot: (".")

#TOKEN:js_regularExpression: (
#    "/" ( [^ "\n" "\r"] )* "/" ['g' 'i' 'm']*
#)

#TOKEN:js_regularExpression: {
#    pattern:( "/" );
#    call:org.netbeans.modules.erlang.editing.Erlang.parseRegularExpression;
#}

## define can contain anything between "(" and ")", except stop.
#TOKEN:define:("-define"):<IN_DEFINE>
#<IN_DEFINE> {
#    TOKEN:define_content: (
#        (
#         [^ "." "%"] | "." ["!"-"$" "&"-"," "."-"~"]
#        )*
#    )
#    TOKEN:comment:(["%"]+): <IN_COMMENT_OF_DEFINE> 
#    TOKEN:stop: ("." [^ "!"-"$" "&"-"," "."-"~"]?):<DEFAULT>
#}
#<IN_COMMENT_OF_DEFINE> {
#    TOKEN:comment: ([^ "\n" "\r"]*)
#    TOKEN:whitespace: (["\n" "\r"]+):<IN_DEFINE>
#} 


########### Grammar ############################################################

SKIP:whitespace
SKIP:comment
SKIP:doc_tag
SKIP:escript

##### Root #####
S = (Form)+;

## Hacking for LL(k), We can not identify function and rule in current LL(k) parser, 
## so just mix them in this definition:
Form = AttributeDeclaration <stop>
     | FunctionDeclaration  <stop>;

##### Begin Attributes of Erlang ####
## Hacking: last ")" of define-attribute declaration is included in MacroBody
AttributeDeclaration = DefineAttribute     "(" MacroName ["(" [MacroParams] ")"] "," MacroBody
                     | ModuleAttribute     "(" <atom> ("." <atom>)* ")"
                     | ExportAttribute     "(" "[" [FunctionNames] "]" ")" 
                     | ImportAttribute     "(" <atom> ["," "[" [FunctionNames] "]"] ")"
                     | RecordAttribute     "(" RecordName "," "{" RecordFieldNames "}" ")"
                     | IncludeAttribute    "(" <string> ")" 
                     | IncludeLibAttribute "(" <string> ")"
                     | CompileAttribute    "(" Exprs ")" 
                     | FileAttribute       "(" <string> "," <integer> ")"
                     | SpecAttribute       "(" FunctionName "::" TypeSig ")"
                     | TypeAttribute       "(" TypedAttrVal ")"
                     | WildAttribute       ["(" [Exprs | TypedAttrVal] ")"];
            
DefineAttribute     = "-define";
ModuleAttribute     = "-module";
ExportAttribute     = "-export";
ImportAttribute     = "-import";
RecordAttribute     = "-record";
IncludeAttribute    = "-include";
IncludeLibAttribute = "-include_lib";
CompileAttribute    = "-compile";
FileAttribute       = "-file";
SpecAttribute       = "-spec";
TypeAttribute       = "-type";
WildAttribute       = "-" <atom>;

MacroName = <atom> 
          | <var>;
MacroParams = <var> ("," <var>)*;
MacroBody = (  <comment>
             | <doc_tag>
             | <string>
             | <keyword>
             | <integer>
             | <float>
             | <atom>
             | <var>
             | <char>
             | <operator>
             | <separator>
             | <dot> 
            )+;

RecordFieldNames = RecordFieldName ("," RecordFieldName)*;
RecordFieldName = <atom> ["=" Expr] ["::" TopType];

FunctionNames = FunctionName ("," FunctionName)*;
FunctionName = <atom> "/" <integer>;

#### Begin Types ####
TypedAttrVal = Expr "," TypedRecordFields
             | Expr "::" [TypeSigs | TopType];

TypedRecordFields = "{" TypedExprs "}";

TypedExprs = TypedExpr ("," TypedExpr)*;
TypedExpr = Expr ["::" TopType];

TypeSigs = TypeSig (";" TypeSig)*;
TypeSig = FunType ["when" TypeGuards];

TypeGuards = TypeGuard ("," TypeGuard)*;
TypeGuard = <atom> "(" TopTypes ")"; 

TopTypes = TopType ("," TopType)*;
TopType = Type ("|" Type)*;

Type = <var> 
     | <atom> ["(" [TopTypes] ")"]
     | "[" [TopType] ["," "." "." "."] "]"
     | "{" [TopTypes] "}"
     | "#" <atom> "{" [FieldTypes] "}"                
     | BinaryType
     | IntType ["." "." IntType]
     | "fun" "(" [FunType] ")";

IntType = <integer>
        | "-" <integer>;

FunType = "(" "." "." "." ")" "->" TopType 
        | "(" [ArgTypes] ")" "->" TopType;

ArgTypes = ArgType ("," ArgType)*;
ArgType = <var> "::" TopType
        | TopType;

FieldTypes = FieldType ("," FieldType)*; 
FieldType = <atom> "::" TopType;

BinaryType = "<<" ">>"
           | "<<" BinBaseType ["," BinUnitType] ">>"
           | "<<" BinUnitType ">>";
BinBaseType = <var> ":" <integer>;
BinUnitType = <var> ":" <var> "*" <integer>;

##### Begin Functions and Rules of Erlang ####
FunctionDeclaration = FunctionClauses;
FunctionClauses = FunctionClause (";" FunctionClause)*;
FunctionClause = <atom> "(" [Exprs] ")" [ClauseGuard] FunctionRuleClauseBody;
FunctionRuleClauseBody = ClauseBody
                       | RuleClauseBody;

ClauseGuard = "when" Guard;
ClauseBody = "->" Exprs;
RuleClauseBody = ":-" ListComprehensionExprs;

##### Begin Terms of Erlang ####
List = "[" "]" 
     | "[" Expr ("," Expr)* [ListTail] "]"
     | "[" Expr "||" ListComprehensionExprs "]";
ListTail = "|" Expr;
ListComprehensionExprs = ListComprehensionExpr ("," ListComprehensionExpr)*;
## Hacking for LL(k), we can not write:
## ListComprehensionExpr = Expr ["<-" Expr]
##                       | Binary "<=" Expr];
## since Binary also belongs to Expr
ListComprehensionExpr = Expr ["<-" Expr | "<=" Expr];

## Hacking for LL(k), we can not write:
## Binary = "<<" ">>"
##        | "<<" BinElement ("," BinElement)* ">>"
##        | "<<" "<<" BinElement ("," BinElement)* ">>"  "||" ListComprehensionExprs ">>";
## since "<<" BinElement ("," BinElement)* ">>" also begins with BitExpr -> PrimaryExpr -> Binary
Binary = "<<" ">>"
       | "<<" BinElement ("," BinElement)* ">>"
       | "<<" BinElement  "||" ListComprehensionExprs ">>";
BinElement = BitExpr [OptBitSizeExpr] [OptBitTypeList];
BitExpr = PrimaryExpr
        | PrefixOp PrimaryExpr;
OptBitSizeExpr = ":" BitSizeExpr;
OptBitTypeList = "/" BitTypeList;
BitTypeList = BitType ("-" BitType)*;
BitType = <atom> [":" <integer>];
BitSizeExpr = PrimaryExpr;

Tuple = "{" [Exprs] "}";

#### Begin Expressions of Erlang ####

Exprs = Expr ("," Expr)*;

Expr = "catch" Expr
     | MatchSendExpr;

MatchSendExpr = OrelseExpr ["=" MatchSendExpr | "!" MatchSendExpr];

OrelseExpr = AndalsoExpr ["orelse" OrelseExpr];

AndalsoExpr = CompExpr ["andalso" AndalsoExpr];

CompExpr = ListOpExpr [CompOp ListOpExpr];

ListOpExpr = AddExpr [ListOp ListOpExpr];

AddExpr = MultExpr (AddOp MultExpr)*;

MultExpr = PrefixExpr (MultOp PrefixExpr)*;

PrefixExpr = FunctionCallRecordRemoteExpr
           | PrefixOp FunctionCallRecordRemoteExpr;

FunctionCallRecordRemoteExpr = FunctionCallExpr
                             | RecordExpr;
                            #| RemoteExpr;

## Hacking for LL(k), FunctionCallExpr should be RemoteExpr "(" [Exprs] ")" only:             
FunctionCallExpr = RemoteExpr ["(" [Exprs] ")"];

RemoteExpr = RecordFieldExpr [":" PrimaryExpr];

# Hacking for LL(k), "PrimaryExpr RecordExpr" actually should be "RecordExpr":                  
RecordFieldExpr = PrimaryExpr [RecordExpr | (<dot> <atom>)+]
                | (<dot> <atom>)+;

RecordExpr = "#" RecordName [<dot> <atom> | "{" [RecordFields] "}"];
RecordName = <atom>
           | Macro;
RecordFields = RecordField ("," RecordField)*;
RecordField = <atom> "=" Expr
            | <var>  "=" Expr;

PrimaryExpr = <var>
            | <integer> 
            | <float> 
            | <char> 
            | <atom>
            | <string> (<string>)*
            | Tuple
            | List
            | Binary
            | BlockExpr 
            | IfExpr 
            | CaseExpr 
            | ReceiveExpr 
            | FunExpr 
            | QueryExpr 
            | ParenthesizedExpr 
            | TryExpr
            | Macro ["(" [Exprs] ")"];

Macro = "?" (<atom> | <var>);

ParenthesizedExpr = "(" Expr ")";

BlockExpr = "begin" Exprs "end";

IfExpr = "if" IfClauses "end";
IfClauses = IfClause (";" IfClause)*;
IfClause = Guard ClauseBody;

CaseExpr = "case" Expr "of" CrClauses "end";
CrClauses = CrClause (";" CrClause)*;
CrClause = Expr [ClauseGuard] ClauseBody;

ReceiveExpr = "receive" CrClauses ["after" Expr ClauseBody] "end"
            | "receive" "after" Expr ClauseBody "end";

FunExpr = "fun" (<atom> | Macro) [":" (<atom> | Macro)] "/" <integer> 
        | "fun" FunClauses "end";
FunClauses = FunClause (";" FunClause)*;
FunClause = "(" [Exprs] ")" [ClauseGuard] ClauseBody;

TryExpr = "try" Exprs ["of" CrClauses] TryCatch;
TryCatch = "catch" TryClauses ["after" Exprs] "end"
         | "after" Exprs "end";
TryClauses = TryClause (";" TryClause)*;
## Hacking for LL(k), which should like?:
## TryClause = Expr [ClauseGuard] ClauseBody |
##             <atom> ":" Expr [ClauseGuard] ClauseBody |
##             <var>  ":" Expr [ClauseGuard] ClauseBody;     
TryClause = Expr [":" Expr] [ClauseGuard] ClauseBody;

QueryExpr = "query" "[" Expr "||" ListComprehensionExprs "]" "end";

Guard = Exprs (";" Exprs)*;

PrefixOp = "+"
         | "-"
         | "bnot"
         | "not";

MultOp = "/" 
       | "*" 
       | "div" 
       | "rem" 
       | "band" 
       | "and";

AddOp = "+" 
      | "-" 
      | "bor" 
      | "bxor" 
      | "bsl" 
      | "bsr" 
      | "or" 
      | "xor";

ListOp = "++" 
       | "--"; 

CompOp = "==" 
       | "/=" 
       | "=<" 
       | "<" 
       | ">=" 
       | ">" 
       | "=:=" 
       | "=/=";


#RegularExpression = <js_regularExpression>;
#RegularExpression = "/";
#PARSE:RegularExpression:org.netbeans.modules.erlang.editing.Erlang.parseRegularExpression

#AST {
#    process:org.netbeans.modules.erlang.editing.semantic.ErlangSemanticParser.process;
#}

########### colors #############################################################
## Notice: it's always better to put these condition COLOR head than others, so 
## the others won't be override by conditioned COLOR. 

#0x0000CC 
COLOR:comment: {
    color_name: "comment";
}
COLOR:doc_tag: {
    color_name: "comment";
    font_type: "bold";
}

COLOR:operator: {
    color_name: "operator";
}

COLOR:separator: {
    color_name: "separator";
}

COLOR:keyword: {
    color_name: "keyword";
}

# 0xbc8f8f(Emacs 0x098604(green) default color for "string":"0xCE7B00"
COLOR:char: {
    color_name: "char";
}
COLOR:string: {
    color_name: "string";
}

COLOR:integer: {
    color_name: "integer";
}
COLOR:float: {
    color_name: "float";
}

#COLOR:js_regularExpression: {
#    font_type: "bold";
#    foreground_color: "0x008000";
#}
COLOR:atom: {
    color_name: "atom";
    font_type: "bold";
    condition:org.netbeans.modules.erlang.editing.Erlang.isFunctionCall;
}
COLOR:FunctionName.atom: {
    color_name: "atom";
    font_type: "bold";
}
COLOR:FunctionClause.atom: {
    color_name: "atom";
    underline_color: "0x000000";
}


#Gray: foreground_color: "0x737373";
COLOR:var: {    
    color_name: "unused_var";
    #foreground_color: "0x737373";
    wave_underline_color: "0x737373";
    condition:org.netbeans.modules.erlang.editing.Erlang.isUnusedVariable;
}
#Green:0x228b22, LightBlue: 0x008b8b, DarkGoldenrod: "0xB8860B"
COLOR:var: {
    color_name: "var";
    font_type: "bold";
    condition:org.netbeans.modules.erlang.editing.Erlang.isFunctionParameter;
}
COLOR:var: {
    color_name: "var";
    condition:org.netbeans.modules.erlang.editing.Erlang.isLocalVariable;
}

COLOR:attribute: {
    color_name: "attribute";
}
COLOR:AttributeDeclaration.WildAttribute: {
    color_name: "attribute";
}

COLOR:RecordName.atom: {
    color_name: "record";
    foreground_color: "0x2E92C7";
}

# Cyan:0x2E92C7, Red:0xb22222, Emacs:0x5f9ea0
COLOR:MacroName: {
    color_name: "macro";
    foreground_color: "0x2E92C7";
}
COLOR:Macro: {
    color_name: "macro";
    foreground_color: "0x2E92C7";
}

########### code folding #######################################################

FOLD:AttributeDeclaration.Exprs: {
    expand_type_action_name:"Expand Methods";
    collapse_type_action_name:"Collapse Methods";
}
FOLD:AttributeDeclaration.FunctionNames: {
    expand_type_action_name:"Expand Methods";
    collapse_type_action_name:"Collapse Methods";
}

FOLD:ClauseBody: {
    expand_type_action_name:"Expand Methods";
    collapse_type_action_name:"Collapse Methods";
}


FOLD:comment: {
    expand_type_action_name:"Expand Comments";
    collapse_type_action_name:"Collapse Comments";
}

########### navigator ##########################################################

NAVIGATOR:FunctionClauses: {
    display_name: org.netbeans.modules.erlang.editing.Erlang.functionName;
    icon: "/org/netbeans/modules/languages/resources/method.gif";
}

NAVIGATOR:FunctionClause: {
    display_name: org.netbeans.modules.erlang.editing.Erlang.functionArguments;
    icon: "/org/netbeans/modules/languages/resources/variable.gif";
}

MARK:ERROR: {
    type:"Error";
    message:"Syntax error.";
}

MARK:error: {
    type:"Error";
    message:"Unexpected character.";
}

COMPLETION:atom: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}

COMPLETION:var: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}

COMPLETION:keyword: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}

COMPLETION:whitespace: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}

COMPLETION:comment: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}

COMPLETION:operator: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}
COMPLETION:separator: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}
COMPLETION:dot: {
    text1:org.netbeans.modules.erlang.editing.Erlang.completionItems; 
}

HYPERLINK:var:  org.netbeans.modules.erlang.editing.Erlang.hyperlink
HYPERLINK:atom: org.netbeans.modules.erlang.editing.Erlang.hyperlink

########### brace matching #####################################################

BRACE "(:)"
BRACE "{:}"
BRACE "[:]"
BRACE "<<:>>"
BRACE "if:end"
BRACE "case:end"
BRACE "begin:end"
BRACE "receive:end"
BRACE "query:end"
BRACE "try:end"
BRACE "fun:end"


########### complete and indentation ########################################################
COMPLETE "(:)"
COMPLETE "{:}"
COMPLETE "\":\""
COMPLETE "':'"
COMPLETE "[:]"
COMPLETE "<<:>>"

INDENT "(:)"
INDENT "{:}"
INDENT "[:]"
INDENT "if:end"
INDENT "of:end"
INDENT "begin:end"
INDENT "receive:end"
INDENT "query:end"
INDENT "after:end"
INDENT ".*(((->|=)\\s*)[^;,]*)"
#INDENT "\\s*(((if|of|begin|receive)\\s*)[^;,.]*)"
#INDENT "\\s*(()[^{;]*)"
#(if|while)\\s*\\(    ==> if (    while (
#else\\s*             ==> else
#else\\s+if\\s*\\(    ==> else if (
#for\\s*\\(.*\\)      ==> for (   )

#FORMAT:Statement: "NewLine"


PROPERTIES {
    #traceSteps:"true";
    #printRules:"true";
    #printFirst:"true";
    projectsViewIcon:"org/netbeans/modules/erlang/editing/erlang.png";
}

SELECTION ( ["a"-"z" "A"-"Z" "0"-"9" "_" "$"] )

COMMENT_LINE {
    prefix:"%";
}

########### actions ############################################################

ACTION:delete_method: {
    name:"Delete Current Method";
    performer:org.netbeans.modules.erlang.editing.Erlang.performDeleteCurrentMethod;
    enabled:org.netbeans.modules.erlang.editing.Erlang.enabledDeleteCurrentMethod;
    explorer:"false";
}

#ACTION:run_script: {
#    name:"Run";
#    performer:org.netbeans.modules.erlang.editing.Erlang.performRun;
#    enabled:org.netbeans.modules.erlang.editing.Erlang.enabledRun;
#    explorer:"false";
#}

ACTION:goto_declaration: {
    name:"Go To Declaration";
    performer:org.netbeans.modules.erlang.editing.Erlang.performGoToDeclaration;
    enabled:org.netbeans.modules.erlang.editing.Erlang.enabledGoToDeclaration;
    explorer:"false";
}

IMPORT:string: {
    mimeType:"text/x-string";
    startSkipLength:"1";
    endSkipLength:"1";
}


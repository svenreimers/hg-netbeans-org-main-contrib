// ===========================================================================
// This file has been generated by
// Typical, version 1.13.2,
// (C) 2004-2007 Robert Grimm and New York University,
// on Thursday, November 29, 2007 at 11:36:00 PM.
// Edit at your own risk.
// ===========================================================================

package xtc.typical;

import java.math.BigInteger;

import java.util.List;
import java.util.ArrayList;

import xtc.util.Pair;
import xtc.util.Runtime;
import xtc.util.Function;

import xtc.tree.Node;
import xtc.tree.GNode;

/** Type checker for Typical. */
public class TypicalAnalyzer extends Analyzer {
  protected String nodeType = null;

  public TypicalAnalyzer(Runtime runt, String nodeType) {
    super(runt);
    analyzer = analyze;
    this.nodeType = nodeType;
  }

  public void getScopeNodes() {
    processScopeNodes.add("ValueDefinition");
    processScopeNodes.add("LetExpression");
    processScopeNodes.add("PatternMatch");
  }

  final Function.F1<Tuple.T3<Name, String, String>, Node> getNameSpace = new Function.F1<Tuple.T3<Name, String, String>, Node>() {
    public Tuple.T3<Name, String, String> apply(final Node n) {
      return new Match<Tuple.T3<Name, String, String>>() {
        public Tuple.T3<Name, String, String> apply() {
          final Node arg$0 = GNode.cast(n);

          if ((null == arg$0)) {
            return null;
          }
          if (TypicalSupport.match$1(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$4 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "constructor", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4);
          }
          if (TypicalSupport.match$5(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$8 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "constructor", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$8);
          }
          if (TypicalSupport.match$9(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$12 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "constructor", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$12);
          }
          if (TypicalSupport.match$13(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$16 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "constructor", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$16);
          }
          if (TypicalSupport.match$17(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$20 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "poly", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$20);
          }
          if (TypicalSupport.match$21(arg$0)) {
            final String s = (arg$0.size() > 1 ? arg$0.getString(1) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$24 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "type", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$24);
          }
          if (TypicalSupport.match$25(arg$0)) {
            final String s = (arg$0.size() > 1 ? arg$0.getString(1) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$28 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "type", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$28);
          }
          if (TypicalSupport.match$29(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$32 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "type", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$32);
          }
          if (TypicalSupport.match$33(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$36 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "field", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$36);
          }
          if (TypicalSupport.match$37(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$40 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "field", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$40);
          }
          if (TypicalSupport.match$41(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$44 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "field", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$44);
          }
          if (TypicalSupport.match$45(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$48 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "field", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$48);
          }
          if (TypicalSupport.match$49(arg$0)) {
            final String s = (arg$0.size() > 1 ? arg$0.getString(1) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$52 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "field", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$52);
          }
          if (TypicalSupport.match$53(arg$0)) {
            final String s = (arg$0.getGeneric(0).size() > 0 ? arg$0.getGeneric(0).getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            List<Node> listName$55 = new ArrayList<Node>();
            Node nodeName$54 = arg$0;

            nodeName$54 = nodeName$54.getGeneric(0);
            if ((null != nodeName$54 && processScopeNodes.contains(nodeName$54.getName()))) {
              processScope(nodeName$54, getScope);
            }
            checkEnterScope(nodeName$54);
            listName$55.add(0, nodeName$54);

            final Object retValue$56 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "field", "type"));

            for (Node no : listName$55) {
              checkExitScope(no);
            }
            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$56);
          }
          if (TypicalSupport.match$57(arg$0)) {
            final String s = (arg$0.size() > 1 ? arg$0.getString(1) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$60 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "value", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$60);
          }
          if (TypicalSupport.match$61(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$64 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "value", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$64);
          }
          if (TypicalSupport.match$65(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$68 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "value", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$68);
          }
          if (TypicalSupport.match$69(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$72 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "value", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$72);
          }
          if (TypicalSupport.match$73(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$76 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "value", "type"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$76);
          }
          if (TypicalSupport.match$77(arg$0)) {
            final String s = (arg$0.size() > 0 ? arg$0.getString(0) : null);

            matching_nodes.add(arg$0);
            if ((null != arg$0 && processScopeNodes.contains(arg$0.getName()))) {
              processScope(arg$0, getScope);
            }
            checkEnterScope(arg$0);

            final Object retValue$80 = Analyzer.cast(new Tuple.T3<Name, String, String>(new Name.SimpleName(s), "node", "node"));

            checkExitScope(arg$0);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$80);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Scope, Node> getScope = new Function.F1<Scope, Node>() {
    public Scope apply(final Node n) {
      if (TypicalSupport.match$73(n)) {
        final String s = (n.size() > 0 ? n.getString(0) : null);
        final Node a = (n.size() > 1 ? n.getGeneric(1) : null);
        final Node b = (n.size() > 2 ? n.getGeneric(2) : null);

        return Analyzer.cast(new Scope(new ScopeKind.Named(new Name.SimpleName(s)), new Pair<Node>(a).append(new Pair<Node>(b))));
      }
      if (TypicalSupport.match$83(n)) {
        final Node a = (n.size() > 1 ? n.getGeneric(1) : null);

        return Analyzer.cast(new Scope(new ScopeKind.Anonymous("let"), new Pair<Node>(a)));
      }
      if (TypicalSupport.match$84(n)) {
        final Node a = Analyzer.cast(n);

        return Analyzer.cast(new Scope(new ScopeKind.Anonymous("patternmatching"), new Pair<Node>(a)));
      }
      return null;
    }
  };

  final TypicalTypes.raw_type<?> wildt = Analyzer.cast(new TypicalTypes.WildcardT());
  final TypicalTypes.raw_type<?> typet = Analyzer.cast(new TypicalTypes.TypeName("type"));
  final TypicalTypes.raw_type<?> strt = Analyzer.cast(new TypicalTypes.StringT());
  final TypicalTypes.raw_type<?> intt = Analyzer.cast(new TypicalTypes.IntT());
  final TypicalTypes.raw_type<?> boolt = Analyzer.cast(new TypicalTypes.BoolT());
  final TypicalTypes.raw_type<?> floatt = Analyzer.cast(new TypicalTypes.Float64T());
  final TypicalTypes.raw_type<?> nodet = Analyzer.cast(new TypicalTypes.NodeTypeT());

  final Function.F1<String, TypicalTypes.raw_type<?>> getTypeName = new Function.F1<String, TypicalTypes.raw_type<?>>() {
    public String apply(final TypicalTypes.raw_type<?> t) {
      return (null == Primitives.isBottom.apply(t) ? null : Primitives.isBottom.apply(t) ? "null type" : new Match<String>() {
        public String apply() {
          final TypicalTypes.raw_type<?> arg$86 = Analyzer.cast(t);

          if ((null == arg$86)) {
            return null;
          }
          if ((null != arg$86))
                        switch (arg$86.tag()) {
            case PairOfType:
              if (TypicalSupport.match$116(arg$86)) {
                final TypicalTypes.raw_type<?> t1 = Analyzer.cast(arg$86.getTuple().get1());
                final TypicalTypes.raw_type<?> t2 = Analyzer.cast(arg$86.getTuple().get2());

                return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply("pair of types of ", getTypeName.apply(t1)), " -> "), getTypeName.apply(t2)));
              }
              break;
            case VariableT:
              if (TypicalSupport.match$117(arg$86)) {
                final String str = Analyzer.cast(arg$86.getTuple().get1());

                return Analyzer.cast(new Let<String>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public String apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(ty) ? null : Primitives.isBottom.apply(ty) ? "variable type" : getTypeName.apply(ty));
                  }
                }.apply());
              }
              break;
            case StringT:
              if (TypicalSupport.match$91(arg$86)) {
                return Analyzer.cast("string");
              }
              break;
            case FunctionT:
              if (TypicalSupport.match$97(arg$86)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$86.getTuple().get1());
                final TypicalTypes.raw_type<?> t = Analyzer.cast(arg$86.getTuple().get2());

                return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply("function type (", getTypeName.apply(TypicalSupport.head$98.apply(tl))), getTypeListName.apply(TypicalSupport.tail$99.apply(tl), "")), ") -> "), getTypeName.apply(t)));
              }
              break;
            case IntT:
              if (TypicalSupport.match$88(arg$86)) {
                return Analyzer.cast("integer");
              }
              break;
            case VariantT:
              if (TypicalSupport.match$100(arg$86)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$86.getTuple().get1());

                return Analyzer.cast(new Let<String>() {
                  final TypicalTypes.raw_type<?> t;

                  {
                    t = Analyzer.cast(TypicalSupport.head$98.apply(tl));
                  }

                  public String apply() {
                    return Analyzer.cast(new Match<String>() {
                      public String apply() {
                        final TypicalTypes.raw_type<?> arg$104 = Analyzer.cast(t);

                        if ((null == arg$104)) {
                          return null;
                        }
                        if ((null != arg$104))
                                                    switch (arg$104.tag()) {
                          case ConstructorT:
                            if (TypicalSupport.match$94(arg$104)) {
                              final String s = Analyzer.cast(arg$104.getTuple().get1());

                              return Analyzer.cast(s);
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case Float64T:
              if (TypicalSupport.match$90(arg$86)) {
                return Analyzer.cast("64-bit float");
              }
              break;
            case ConstructorT:
              if (TypicalSupport.match$94(arg$86)) {
                final String s = Analyzer.cast(arg$86.getTuple().get1());

                return Analyzer.cast(s);
              }
              break;
            case PolyVariantT:
              if (TypicalSupport.match$118(arg$86)) {
                return Analyzer.cast("node");
              }
              break;
            case NodeTypeT:
              if (TypicalSupport.match$119(arg$86)) {
                return Analyzer.cast("node");
              }
              break;
            case AnyT:
              if (TypicalSupport.match$93(arg$86)) {
                return Analyzer.cast("'any'");
              }
              break;
            case WildcardT:
              if (TypicalSupport.match$92(arg$86)) {
                return Analyzer.cast("wildcard");
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$115(arg$86)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$86.getTuple().get1());
                final String s = Analyzer.cast(arg$86.getTuple().get2());

                return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(s, " of ("), getTypeName.apply(TypicalSupport.head$98.apply(tl))), getTypeListName.apply(TypicalSupport.tail$99.apply(tl), "")), ")"));
              }
              break;
            case TypeName:
              if (TypicalSupport.match$95(arg$86)) {
                final String s = Analyzer.cast(arg$86.getTuple().get1());

                return Analyzer.cast(s);
              }
              break;
            case Float32T:
              if (TypicalSupport.match$89(arg$86)) {
                return Analyzer.cast("32-bit float");
              }
              break;
            case BoolT:
              if (TypicalSupport.match$87(arg$86)) {
                return Analyzer.cast("boolean");
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$86)) {
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$86.getTuple().get3());

                return Analyzer.cast(getTypeName.apply(ty));
              }
              break;
            case TupleT:
              if (TypicalSupport.match$114(arg$86)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$86.getTuple().get1());

                return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply("tuple type (", getTypeName.apply(TypicalSupport.head$98.apply(tl))), getTypeListName.apply(TypicalSupport.tail$99.apply(tl), "")), ")"));
              }
              break;
            case RecordT:
              if (TypicalSupport.match$107(arg$86)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$86.getTuple().get1());

                return Analyzer.cast(new Let<String>() {
                  final TypicalTypes.raw_type<?> t;

                  {
                    t = Analyzer.cast(TypicalSupport.head$98.apply(tl));
                  }

                  public String apply() {
                    return Analyzer.cast(new Match<String>() {
                      public String apply() {
                        final TypicalTypes.raw_type<?> arg$111 = Analyzer.cast(t);

                        if ((null == arg$111)) {
                          return null;
                        }
                        if ((null != arg$111))
                                                    switch (arg$111.tag()) {
                          case FieldT:
                            if (TypicalSupport.match$96(arg$111)) {
                              final String s = Analyzer.cast(arg$111.getTuple().get1());

                              return Analyzer.cast(s);
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F2<String, Pair<TypicalTypes.raw_type<?>>, String> getTypeListName = new Function.F2<String, Pair<TypicalTypes.raw_type<?>>, String>() {
    public String apply(final Pair<TypicalTypes.raw_type<?>> tl, final String str) {
      return (null == Primitives.isBottom.apply(tl) ? null : Primitives.isBottom.apply(tl) ? str : new Match<String>() {
        public String apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$121 = Analyzer.cast(tl);

          if ((null == arg$121)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$121)) {
            return Analyzer.cast(str);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$123 = Analyzer.cast(Analyzer.cast(arg$121));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$123));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$123));

            return Analyzer.cast(getTypeListName.apply(xs, Primitives.concat.apply(Primitives.concat.apply(str, ","), getTypeName.apply(x))));
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, Node> analyze = new Function.F1<TypicalTypes.raw_type<?>, Node>() {
    public TypicalTypes.raw_type<?> apply(final Node no) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Node arg$125 = GNode.cast(no);

          if ((null == arg$125)) {
            return null;
          }
          if (TypicalSupport.match$126(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 1, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$132 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<Node> nl;
              final Pair<TypicalTypes.raw_type<?>> atts;
              final Pair<String> strList;

              {
                nl = Analyzer.cast(TypicalSupport.append$127.apply(new Pair<Node>(n), l));
                TypicalSupport.map$128.apply(scanNode, nl);
                atts = Analyzer.cast(processAttributes.apply(nl));
                createTypeRecord.apply(atts);
                preload.apply(no);
                strList = Analyzer.cast(getNodeTypes.apply(nl));
                Primitives.annotate.apply(no, "__node_types", new TypicalTypes.StringList(strList));
                TypicalSupport.map$129.apply(analyzeTypeDefinition, nl);
                processFunctionCalls.apply(nl);
                processScopeSpace.apply(nl);
                TypicalSupport.map$129.apply(analyze, nl);
                checkUnusedParameters.apply(nl);
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$132);
            }
            return Analyzer.cast(retValue$132);
          }
          if (TypicalSupport.match$21(arg$125)) {
            final Node tp = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);
            final Node dec = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$138 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "visited") ? null : Primitives.hasAnnotation.apply(no, "visited") ? null : new Let<TypicalTypes.raw_type<?>>() {
              {
                Primitives.annotate.apply(no, "visited", wildt);
                Primitives.annotate.apply(dec, "parent", new TypicalTypes.StringName(s));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final Boolean var$135 = checkMonomorphic.apply(no, dec);

                    if ((null != var$135 && !var$135)) {
                      showMessage("error", Primitives.concat.apply(s, " must be a monomorphic variant"), null);
                    }
                    if ((null == var$135)) {
                      return null;
                    }
                    if (var$135) {
                      return (null == Primitives.isBottom.apply(tp) ? null : Primitives.isBottom.apply(tp) ? new Let<TypicalTypes.raw_type<?>>() {
                        final TypicalTypes.raw_type<?> tdec;

                        {
                          tdec = Analyzer.cast(analyze.apply(dec));
                          redefine.apply(no, tdec, getNameSpace);
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(tdec);
                        }
                      }.apply() : new Let<TypicalTypes.raw_type<?>>() {
                        final Pair<Node> nl;
                        final Pair<String> vars;

                        {
                          nl = Analyzer.cast(getNodeList.apply(tp));
                          vars = Analyzer.cast(getTypeVariables.apply(nl, Pair.<String>empty()));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : new Let<TypicalTypes.raw_type<?>>() {
                            final TypicalTypes.raw_type<?> tdec;

                            {
                              Primitives.annotate.apply(dec, "type_variables", new TypicalTypes.StringList(vars));
                              Primitives.annotate.apply(no, "type_variables", new TypicalTypes.StringList(vars));
                              tdec = Analyzer.cast(analyze.apply(dec));
                              checkUnusedVariables.apply(vars, dec);
                              redefine.apply(no, tdec, getNameSpace);
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(tdec);
                            }
                          }.apply());
                        }
                      }.apply());
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$138);
            }
            return Analyzer.cast(retValue$138);
          }
          if (TypicalSupport.match$33(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Node n = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$142 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "visited") ? null : Primitives.hasAnnotation.apply(no, "visited") ? Analyzer.cast(lookup2.apply(no, getNameSpace)) : new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                Primitives.annotate.apply(no, "visited", wildt);
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  {
                    define5.apply(no, new TypicalTypes.FieldT("type", s, t), "error", Primitives.concat.apply(Primitives.concat.apply("attribute ", s), " has been previously defined"), getNameSpace);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.FieldT("type", s, t));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$142);
            }
            return Analyzer.cast(retValue$142);
          }
          if (TypicalSupport.match$37(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Node n = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$146 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "visited") ? null : Primitives.hasAnnotation.apply(no, "visited") ? Analyzer.cast(lookup2.apply(no, getNameSpace)) : new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                Primitives.annotate.apply(no, "visited", wildt);
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  {
                    define5.apply(no, new TypicalTypes.FieldT("type", s, t), "error", Primitives.concat.apply(Primitives.concat.apply("attribute ", s), " has been previously defined"), getNameSpace);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.FieldT("type", s, t));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$146);
            }
            return Analyzer.cast(retValue$146);
          }
          if (TypicalSupport.match$147(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 1, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$152 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              {
                TypicalSupport.map$129.apply(analyze, l);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Require<Object>() {
                  public Object apply() {
                    final Boolean var$149 = Primitives.equal.apply("raw_type", s);

                    if ((null != var$149 && !var$149)) {
                      showMessage("error", "raw_type is expected in equality definition", null);
                    }
                    if ((null == var$149)) {
                      return null;
                    }
                    if (var$149) {
                      return null;
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$152);
            }
            return Analyzer.cast(retValue$152);
          }
          if (TypicalSupport.match$153(arg$125)) {
            final Node up = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node n = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 2, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$182 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String s;
              final Pair<Node> nl;
              final TypicalTypes.raw_type<?> t;

              {
                s = Analyzer.cast(getString.apply(up));
                nl = Analyzer.cast(TypicalSupport.append$127.apply(new Pair<Node>(n), l));
                t = Analyzer.cast(Analyzer.cast(lookup4.apply(up, "error", Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " is undefined"), getNameSpace)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$167 = Analyzer.cast(t);

                    if ((null == arg$167)) {
                      return null;
                    }
                    if ((null != arg$167))
                                            switch (arg$167.tag()) {
                      case ConstructorT:
                        if (TypicalSupport.match$155(arg$167)) {
                          final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$167.getTuple().get3());

                          return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final TypicalTypes.raw_type<?> arg$174 = Analyzer.cast(ty);

                              if ((null == arg$174)) {
                                return null;
                              }
                              if ((null != arg$174))
                                                                switch (arg$174.tag()) {
                                case TupleT:
                                  if (TypicalSupport.match$114(arg$174)) {
                                    final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$174.getTuple().get1());

                                    return Analyzer.cast(null == Primitives.lessInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? null : Primitives.lessInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? error(Primitives.concat.apply(s, " does not have enough children"), null) : null == Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) || !Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? null : error(Primitives.concat.apply(s, " has too many children"), null));
                                  }
                                  break;
                                default:
                                  break;
                                };
                              if (true) {
                                return Analyzer.cast(new Require<Object>() {
                                  public Object apply() {
                                    final Boolean var$177 = Primitives.equal.apply(Primitives.length.apply(nl), BigInteger.valueOf(1));

                                    if ((null != var$177 && !var$177)) {
                                      showMessage("error", Primitives.concat.apply(s, " must have only one child"), null);
                                    }
                                    if ((null == var$177)) {
                                      return null;
                                    }
                                    if (var$177) {
                                      return null;
                                    }
                                    return null;
                                  }
                                }.apply());
                              }
                              return null;
                            }
                          }.apply());
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(error("raw_type constructor is expected in equality definition", null));
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$182);
            }
            return Analyzer.cast(retValue$182);
          }
          if (TypicalSupport.match$183(arg$125)) {
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$187 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;
              final Pair<String> vars;
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                Primitives.annotateList.apply(l, "parent", new TypicalTypes.StringName(str));
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotateList.apply(l, "type_variables", new TypicalTypes.StringList(vars)));
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, l));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new TypicalTypes.RecordT(tl));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$187);
            }
            return Analyzer.cast(retValue$187);
          }
          if (TypicalSupport.match$41(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Node n = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$191 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String ano;
              final Pair<String> vars;
              final TypicalTypes.raw_type<?> t;

              {
                ano = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotate.apply(n, "type_variables", new TypicalTypes.StringList(vars)));
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == isDefined.apply(no, getNameSpace) ? null : isDefined.apply(no, getNameSpace) ? error(Primitives.concat.apply(Primitives.concat.apply("field ", s), " has been previously defined"), null) : null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  {
                    redefine.apply(no, new TypicalTypes.FieldT(ano, s, t), getNameSpace);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.FieldT(ano, s, t));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$191);
            }
            return Analyzer.cast(retValue$191);
          }
          if (TypicalSupport.match$192(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$195 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;
              final Pair<String> vars;
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                Primitives.annotateList.apply(nl, "parent", new TypicalTypes.StringName(str));
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotateList.apply(nl, "type_variables", new TypicalTypes.StringList(vars)));
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new TypicalTypes.VariantT(tl));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$195);
            }
            return Analyzer.cast(retValue$195);
          }
          if (TypicalSupport.match$13(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Node n = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$199 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String ano;
              final Pair<String> vars;
              final TypicalTypes.raw_type<?> t;

              {
                ano = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotate.apply(n, "type_variables", new TypicalTypes.StringList(vars)));
                Primitives.annotate.apply(n, "parent", new TypicalTypes.StringName(ano));
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == isDefined.apply(no, getNameSpace) ? null : isDefined.apply(no, getNameSpace) ? error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " has been previously defined"), null) : new Let<TypicalTypes.raw_type<?>>() {
                  {
                    redefine.apply(no, new TypicalTypes.ConstructorT(ano, s, t), getNameSpace);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.ConstructorT(ano, s, t));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$199);
            }
            return Analyzer.cast(retValue$199);
          }
          if (TypicalSupport.match$200(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$203 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == reachableFromNode.apply(str) ? null : reachableFromNode.apply(str) ? new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<TypicalTypes.raw_type<?>> tl;

                  {
                    tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? new TypicalTypes.PolyVariantT(tl) : null);
                  }
                }.apply() : error("polymorphic variant is not allowed outside node closure", null));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$203);
            }
            return Analyzer.cast(retValue$203);
          }
          if (TypicalSupport.match$17(arg$125)) {
            final String s1 = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final String s2 = (arg$125.size() > 1 ? arg$125.getString(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$215 = Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Boolean var$212 = isDefined.apply(GNode.create("UserDefinedType", s2), getNameSpace);

                if ((null != var$212 && !var$212)) {
                  showMessage("error", Primitives.concat.apply(s2, " is undefined"), null);
                }
                if ((null == var$212)) {
                  return null;
                }
                if (var$212) {
                  return (null == isDefined.apply(no, getNameSpace) ? null : isDefined.apply(no, getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> t;

                    {
                      t = Analyzer.cast(Analyzer.cast(lookup2.apply(no, getNameSpace)));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final TypicalTypes.raw_type<?> arg$209 = Analyzer.cast(t);

                          if ((null == arg$209)) {
                            return null;
                          }
                          if ((null != arg$209))
                                                        switch (arg$209.tag()) {
                            case TypeName:
                              if (TypicalSupport.match$95(arg$209)) {
                                final String s = Analyzer.cast(arg$209.getTuple().get1());

                                return Analyzer.cast(null == Primitives.equal.apply(s, s2) ? null : Primitives.equal.apply(s, s2) ? t : error(Primitives.concat.apply(Primitives.concat.apply(s1, " is previously defined with "), s), null));
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply(s1, " is previously defined with "), getTypeName.apply(t)), null));
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply() : new Let<TypicalTypes.raw_type<?>>() {
                    {
                      redefine.apply(no, new TypicalTypes.TypeName(s2), getNameSpace);
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new TypicalTypes.TypeName(s2));
                    }
                  }.apply());
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$215);
            }
            return Analyzer.cast(retValue$215);
          }
          if (TypicalSupport.match$216(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$219 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              {
                Primitives.annotate.apply(n, "non_exhaustive", wildt);
                Primitives.annotate.apply(n, "no_binding_check", wildt);
                Primitives.annotate.apply(n, "ensure_node", wildt);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(analyze.apply(n));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$219);
            }
            return Analyzer.cast(retValue$219);
          }
          if (TypicalSupport.match$220(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$226 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> res;

                  {
                    res = Analyzer.cast(TypicalSupport.foldl$222.apply(unify, tl, wildt));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final Boolean var$223 = Primitives.isNotBottom.apply(res);

                        if ((null != var$223 && !var$223)) {
                          showMessage("error", Primitives.concat.apply("types of pattern matches in matching structure ", "do not match together"), null);
                        }
                        if ((null == var$223)) {
                          return null;
                        }
                        if (var$223) {
                          return res;
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$226);
            }
            return Analyzer.cast(retValue$226);
          }
          if (TypicalSupport.match$77(arg$125)) {
            final String tagStr = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final String typeStr = (arg$125.size() > 1 ? arg$125.getString(1) : null);
            final Node pat = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$232 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> ty;

              {
                ty = Analyzer.cast(Analyzer.cast(lookup4.apply(GNode.create("UserDefinedType", typeStr), "error", Primitives.concat.apply(typeStr, " is an undefined type"), getNameSpace)));
                Primitives.annotate.apply(pat, "no_binding_check", wildt);
                Primitives.annotate.apply(pat, "non_exhaustive", wildt);
                Primitives.annotate.apply(pat, "ensure_node", wildt);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(ty) || !Primitives.isNotBottom.apply(ty) ? null : null == Primitives.not.apply(isDefined.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", tagStr)), getNameSpace)) ? null : Primitives.not.apply(isDefined.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", tagStr)), getNameSpace)) ? new Let<TypicalTypes.raw_type<?>>() {
                  {
                    redefine.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", tagStr)), new TypicalTypes.TypeName(typeStr), getNameSpace);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(analyze.apply(pat));
                  }
                }.apply() : new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ta;

                  {
                    ta = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", tagStr)), getNameSpace)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final Boolean var$229 = Primitives.isNotBottom.apply(unify.apply(ta, ty));

                        if ((null != var$229 && !var$229)) {
                          showMessage("error", Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply("tag ", tagStr), " must be defined with "), getTypeName.apply(ta)), ", found "), getTypeName.apply(ty)), null);
                        }
                        if ((null == var$229)) {
                          return null;
                        }
                        if (var$229) {
                          return analyze.apply(pat);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$232);
            }
            return Analyzer.cast(retValue$232);
          }
          if (TypicalSupport.match$73(arg$125)) {
            final Node p = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);
            final Node v = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$244 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "visited") ? null : Primitives.hasAnnotation.apply(no, "visited") ? Analyzer.cast(lookup2.apply(no, getNameSpace)) : new Let<TypicalTypes.raw_type<?>>() {
              {
                Primitives.annotate.apply(no, "visited", wildt);
                visitDepend.apply(no);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(Primitives.hasAnnotation.apply(no, "secondary")) ? null : Primitives.not.apply(Primitives.hasAnnotation.apply(no, "secondary")) ? new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> pts;

                  {
                    pts = Analyzer.cast(analyze.apply(p));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final TypicalTypes.raw_type<?> arg$238 = Analyzer.cast(pts);

                        if ((null == arg$238)) {
                          return null;
                        }
                        if ((null != arg$238))
                                                    switch (arg$238.tag()) {
                          case TupleT:
                            if (TypicalSupport.match$235(arg$238)) {
                              return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                final TypicalTypes.raw_type<?> ty;
                                final TypicalTypes.raw_type<?> ret;

                                {
                                  ty = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                                  redefine.apply(no, ty, getNameSpace);
                                  processMutual.apply(no);
                                  ret = Analyzer.cast(analyze.apply(v));
                                  unify.apply(ty, ret);
                                  resolveMutual.apply(no);
                                }

                                public TypicalTypes.raw_type<?> apply() {
                                  return Analyzer.cast(Analyzer.cast(lookup2.apply(no, getNameSpace)));
                                }
                              }.apply());
                            }
                            if (TypicalSupport.match$114(arg$238)) {
                              final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$238.getTuple().get1());

                              return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                final TypicalTypes.raw_type<?> ty;
                                final TypicalTypes.raw_type<?> ret;

                                {
                                  ty = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                                  redefine.apply(no, new TypicalTypes.FunctionT(tl, ty), getNameSpace);
                                  processMutual.apply(no);
                                  ret = Analyzer.cast(analyze.apply(v));
                                  unify.apply(ty, ret);
                                  resolveMutual.apply(no);
                                }

                                public TypicalTypes.raw_type<?> apply() {
                                  return Analyzer.cast(Analyzer.cast(lookup2.apply(no, getNameSpace)));
                                }
                              }.apply());
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply() : Analyzer.cast(lookup2.apply(no, getNameSpace)));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$244);
            }
            return Analyzer.cast(retValue$244);
          }
          if (TypicalSupport.match$245(arg$125)) {
            final Pair<Node> pl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$248 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, pl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new TypicalTypes.TupleT(tl));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$248);
            }
            return Analyzer.cast(retValue$248);
          }
          if (TypicalSupport.match$69(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Node n = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$254 = Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Boolean var$251 = Primitives.not.apply(isDefinedLocally.apply(no, getNameSpace));

                if ((null != var$251 && !var$251)) {
                  showMessage("error", Primitives.concat.apply(Primitives.concat.apply("parameter ", s), " has been previously defined"), null);
                }
                if ((null == var$251)) {
                  return null;
                }
                if (var$251) {
                  return (null == Primitives.isBottom.apply(n) ? null : Primitives.isBottom.apply(n) ? new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> ty;

                    {
                      ty = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                      define3.apply(no, ty, getNameSpace);
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(ty);
                    }
                  }.apply() : new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> t;

                    {
                      t = Analyzer.cast(analyze.apply(n));
                      define3.apply(no, t, getNameSpace);
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(t);
                    }
                  }.apply());
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$254);
            }
            return Analyzer.cast(retValue$254);
          }
          if (TypicalSupport.match$255(arg$125)) {
            final Node n1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node n2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$268 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(analyze.apply(n1));
                ty = Analyzer.cast(analyze.apply(n2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$261 = Analyzer.cast(ty);

                    if ((null == arg$261)) {
                      return null;
                    }
                    if ((null != arg$261))
                                            switch (arg$261.tag()) {
                      case PairOfType:
                        if (TypicalSupport.match$116(arg$261)) {
                          final TypicalTypes.raw_type<?> t1 = Analyzer.cast(arg$261.getTuple().get1());
                          final TypicalTypes.raw_type<?> t2 = Analyzer.cast(arg$261.getTuple().get2());

                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                            {
                              new Guard<TypicalTypes.raw_type<?>>() {
                                public TypicalTypes.raw_type<?> apply() {
                                  if ((null == unify)) {
                                    return null;
                                  }
                                  if ((null == t1)) {
                                    return null;
                                  }
                                  if ((null == t)) {
                                    return null;
                                  }

                                  final TypicalTypes.raw_type<?> result$264 = unify.apply(t, t1);

                                  if ((null == result$264)) {
                                    return Analyzer.cast(error(Primitives.concat.apply("type of the expression does not match ", "the type of patterns"), null));
                                  }
                                  return result$264;
                                }
                              }.apply();
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(t2);
                            }
                          }.apply());
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$268);
            }
            return Analyzer.cast(retValue$268);
          }
          if (TypicalSupport.match$269(arg$125)) {
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$272 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> typeList;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotateList.apply(l, "no_binding_check", wildt));
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "ensure_node") || !Primitives.hasAnnotation.apply(no, "ensure_node") ? null : Primitives.annotateList.apply(l, "ensure_node", wildt));
                typeList = Analyzer.cast(TypicalSupport.map$129.apply(analyze, l));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, typeList)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, typeList)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> res;

                  {
                    res = Analyzer.cast(TypicalSupport.foldl$222.apply(unify, typeList, wildt));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isNotBottom.apply(res) ? null : Primitives.isNotBottom.apply(res) ? new Let<TypicalTypes.raw_type<?>>() {
                      {
                        Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "is_reduce") ? null : Primitives.hasAnnotation.apply(no, "is_reduce") ? checkReduceMatching.apply(l) : checkIrredundant.apply(l));
                        Analyzer.discard(null == Primitives.not.apply(Primitives.hasAnnotation.apply(no, "non_exhaustive")) ? null : Primitives.not.apply(Primitives.hasAnnotation.apply(no, "non_exhaustive")) ? checkExhaustive.apply(l) : Boolean.TRUE);
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(res);
                      }
                    }.apply() : error(Primitives.concat.apply("types of pattern matches in pattern matching structure ", "do not match together"), null));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$272);
            }
            return Analyzer.cast(retValue$272);
          }
          if (TypicalSupport.match$84(arg$125)) {
            final Node pat = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node ne = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$276 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tpat;
              final TypicalTypes.raw_type<?> tne;
              final Pair<String> strList;
              final Pair<String> newList;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotate.apply(pat, "no_binding_check", wildt));
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "ensure_node") || !Primitives.hasAnnotation.apply(no, "ensure_node") ? null : Primitives.annotate.apply(pat, "ensure_node", wildt));
                tpat = Analyzer.cast(analyze.apply(pat));
                tne = Analyzer.cast(analyze.apply(ne));
                strList = Analyzer.cast(retrieveVariables.apply(pat));
                Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                newList = Analyzer.cast(removeUsedVariables.apply(strList, pat));
                checkUnusedVariables.apply(newList, ne);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.and.apply(Primitives.isNotBottom.apply(tpat), Primitives.isNotBottom.apply(tne)) || !Primitives.and.apply(Primitives.isNotBottom.apply(tpat), Primitives.isNotBottom.apply(tne)) ? null : new TypicalTypes.PairOfType(tpat, tne));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$276);
            }
            return Analyzer.cast(retValue$276);
          }
          if (TypicalSupport.match$277(arg$125)) {
            final Pair<Node> pl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$282 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotateList.apply(pl, "no_binding_check", wildt));
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, pl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> res;

                  {
                    res = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "ensure_node") ? null : Primitives.hasAnnotation.apply(no, "ensure_node") ? checkNodeList.apply(tl) : TypicalSupport.foldl$222.apply(unify, tl, wildt));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.and.apply(Primitives.isBottom.apply(res), Primitives.not.apply(Primitives.hasAnnotation.apply(no, "ensure_node"))) ? null : Primitives.and.apply(Primitives.isBottom.apply(res), Primitives.not.apply(Primitives.hasAnnotation.apply(no, "ensure_node"))) ? error("types of the patterns do not match together", null) : new Let<TypicalTypes.raw_type<?>>() {
                      final Pair<String> strList;

                      {
                        strList = Analyzer.cast(retrieveVariables.apply(TypicalSupport.head$279.apply(pl)));
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(null == haveSameVariables.apply(strList, TypicalSupport.tail$278.apply(pl)) ? null : haveSameVariables.apply(strList, TypicalSupport.tail$278.apply(pl)) ? new Let<TypicalTypes.raw_type<?>>() {
                          {
                            Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                          }

                          public TypicalTypes.raw_type<?> apply() {
                            return Analyzer.cast(res);
                          }
                        }.apply() : error("parallel patterns do not have the same variables", null));
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$282);
            }
            return Analyzer.cast(retValue$282);
          }
          if (TypicalSupport.match$283(arg$125)) {
            final Pair<Node> pl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$286 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotateList.apply(pl, "no_binding_check", wildt));
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, pl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> strList;

                  {
                    strList = Analyzer.cast(combineVariables.apply(pl));
                    Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.TupleT(tl));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$286);
            }
            return Analyzer.cast(retValue$286);
          }
          if (TypicalSupport.match$287(arg$125)) {
            final Node p = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node e = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$292 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tp;
              final TypicalTypes.raw_type<?> te;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotate.apply(p, "no_binding_check", wildt));
                tp = Analyzer.cast(analyze.apply(p));
                te = Analyzer.cast(analyze.apply(e));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }
                    if ((null == te)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$289 = unify.apply(te, boolt);

                    if ((null == result$289)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(te)), e));
                    }
                    return result$289;
                  }
                }.apply();
                Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(retrieveVariables.apply(p)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(Primitives.hasAnnotation.apply(p, "has_bindings")) ? null : Primitives.not.apply(Primitives.hasAnnotation.apply(p, "has_bindings")) ? tp : new Let<TypicalTypes.raw_type<?>>() {
                  {
                    Primitives.annotate.apply(no, "has_bindings", wildt);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(tp);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$292);
            }
            return Analyzer.cast(retValue$292);
          }
          if (TypicalSupport.match$57(arg$125)) {
            final Node p = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$305 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tp;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotate.apply(p, "no_binding_check", wildt));
                tp = Analyzer.cast(analyze.apply(p));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final Boolean var$302 = Primitives.not.apply(isDefinedLocally.apply(no, getNameSpace));

                    if ((null != var$302 && !var$302)) {
                      showMessage("error", Primitives.concat.apply(Primitives.concat.apply("variable ", s), " has been previously defined"), null);
                    }
                    if ((null == var$302)) {
                      return null;
                    }
                    if (var$302) {
                      return new Let<TypicalTypes.raw_type<?>>() {
                        final TypicalTypes.raw_type<?> res;
                        final Pair<String> strList;

                        {
                          res = Analyzer.cast(null == Primitives.isBottom.apply(tp) ? null : Primitives.isBottom.apply(tp) ? null : new Match<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final TypicalTypes.raw_type<?> arg$299 = Analyzer.cast(tp);

                              if ((null == arg$299)) {
                                return null;
                              }
                              if ((null != arg$299))
                                                                switch (arg$299.tag()) {
                                case WildcardT:
                                  if (TypicalSupport.match$92(arg$299)) {
                                    return Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                                  }
                                  break;
                                default:
                                  break;
                                };
                              if (true) {
                                return Analyzer.cast(tp);
                              }
                              return null;
                            }
                          }.apply());
                          redefine.apply(no, res, getNameSpace);
                          strList = Analyzer.cast(TypicalSupport.append$297.apply(retrieveVariables.apply(p), new Pair<String>(s)));
                          Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(null == Primitives.and.apply(Primitives.hasAnnotation.apply(p, "has_bindings"), Primitives.not.apply(Primitives.hasAnnotation.apply(no, "no_binding_check"))) ? null : Primitives.and.apply(Primitives.hasAnnotation.apply(p, "has_bindings"), Primitives.not.apply(Primitives.hasAnnotation.apply(no, "no_binding_check"))) ? error("AsPattern contains bindings in the pattern", null) : res);
                        }
                      }.apply();
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$305);
            }
            return Analyzer.cast(retValue$305);
          }
          if (TypicalSupport.match$306(arg$125)) {
            final Node pat = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node ty = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$311 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tp;
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> res;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotate.apply(pat, "no_binding_check", wildt));
                tp = Analyzer.cast(analyze.apply(pat));
                t = Analyzer.cast(analyze.apply(ty));
                res = Analyzer.cast(unify.apply(t, tp));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == t)) {
                      return null;
                    }
                    if ((null == tp)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$308 = unify.apply(t, tp);

                    if ((null == result$308)) {
                      return Analyzer.cast(error(Primitives.concat.apply("type of the pattern does not match ", "with the explicit type"), pat));
                    }
                    return result$308;
                  }
                }.apply();
                Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(retrieveVariables.apply(pat)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(Primitives.hasAnnotation.apply(pat, "has_bindings")) ? null : Primitives.not.apply(Primitives.hasAnnotation.apply(pat, "has_bindings")) ? res : new Let<TypicalTypes.raw_type<?>>() {
                  {
                    Primitives.annotate.apply(no, "has_bindings", wildt);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(res);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$311);
            }
            return Analyzer.cast(retValue$311);
          }
          if (TypicalSupport.match$312(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node con = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$320 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> tl;

              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : new Let<Object>() {
                  {
                    Primitives.annotate.apply(n, "no_binding_check", wildt);
                  }

                  public Object apply() {
                    return Analyzer.cast(Primitives.annotate.apply(con, "no_binding_check", wildt));
                  }
                }.apply());
                t = Analyzer.cast(analyze.apply(n));
                tl = Analyzer.cast(analyze.apply(con));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.and.apply(Primitives.isNotBottom.apply(t), Primitives.isNotBottom.apply(tl)) || !Primitives.and.apply(Primitives.isNotBottom.apply(t), Primitives.isNotBottom.apply(tl)) ? null : null == isListType.apply(tl) ? null : isListType.apply(tl) ? new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> res;

                  {
                    res = Analyzer.cast(unify.apply(tl, new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(t), "list")));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final Boolean var$317 = Primitives.isNotBottom.apply(res);

                        if ((null != var$317 && !var$317)) {
                          showMessage("error", Primitives.concat.apply(Primitives.concat.apply("type of the head does not match with ", "type in the list"), " in cons pattern"), null);
                        }
                        if ((null == var$317)) {
                          return null;
                        }
                        if (var$317) {
                          return new Require<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final Boolean var$316 = Primitives.or.apply(Primitives.not.apply(isNodeType.apply(t)), checkBindings.apply(new Pair<Node>(n).append(new Pair<Node>(con)), BigInteger.valueOf(0), BigInteger.valueOf(0)));

                              if ((null != var$316 && !var$316)) {
                                showMessage("error", "bindings in different nodes in cons pattern", null);
                              }
                              if ((null == var$316)) {
                                return null;
                              }
                              if (var$316) {
                                return new Let<TypicalTypes.raw_type<?>>() {
                                  final Pair<String> strList;

                                  {
                                    strList = Analyzer.cast(TypicalSupport.union$313.apply(retrieveVariables.apply(n), retrieveVariables.apply(con)));
                                  }

                                  public TypicalTypes.raw_type<?> apply() {
                                    return Analyzer.cast(null == Primitives.isEmpty.apply(strList) ? null : Primitives.isEmpty.apply(strList) ? res : new Let<TypicalTypes.raw_type<?>>() {
                                      {
                                        Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                                        Primitives.annotate.apply(no, "has_bindings", wildt);
                                      }

                                      public TypicalTypes.raw_type<?> apply() {
                                        return Analyzer.cast(res);
                                      }
                                    }.apply());
                                  }
                                }.apply();
                              }
                              return null;
                            }
                          }.apply();
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply() : error("the tail of a cons pattern must be a list", null));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$320);
            }
            return Analyzer.cast(retValue$320);
          }
          if (TypicalSupport.match$321(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$338 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              {
                Analyzer.discard(null == Primitives.hasAnnotation.apply(no, "no_binding_check") || !Primitives.hasAnnotation.apply(no, "no_binding_check") ? null : Primitives.annotateList.apply(nl, "no_binding_check", wildt));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final Pair<Node> arg$329 = Analyzer.cast(nl);

                    if ((null == arg$329)) {
                      return null;
                    }
                    if (TypicalSupport.match$323(arg$329)) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        final TypicalTypes.raw_type<?> varT;

                        {
                          varT = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(varT), "list"));
                        }
                      }.apply());
                    }
                    if (true) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        final Pair<TypicalTypes.raw_type<?>> tl;

                        {
                          tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                            final TypicalTypes.raw_type<?> res;

                            {
                              res = Analyzer.cast(TypicalSupport.foldl$222.apply(unify, tl, wildt));
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                public TypicalTypes.raw_type<?> apply() {
                                  final Boolean var$334 = Primitives.isNotBottom.apply(res);

                                  if ((null != var$334 && !var$334)) {
                                    showMessage("error", "types do not match in list pattern", null);
                                  }
                                  if ((null == var$334)) {
                                    return null;
                                  }
                                  if (var$334) {
                                    return new Require<TypicalTypes.raw_type<?>>() {
                                      public TypicalTypes.raw_type<?> apply() {
                                        final Boolean var$333 = Primitives.or.apply(Primitives.not.apply(isNodeType.apply(res)), checkBindings.apply(nl, BigInteger.valueOf(0), BigInteger.valueOf(0)));

                                        if ((null != var$333 && !var$333)) {
                                          showMessage("error", Primitives.concat.apply("bindings in different nodes ", "in list pattern"), null);
                                        }
                                        if ((null == var$333)) {
                                          return null;
                                        }
                                        if (var$333) {
                                          return new Let<TypicalTypes.raw_type<?>>() {
                                            final Pair<String> strList;

                                            {
                                              strList = Analyzer.cast(combineVariables.apply(nl));
                                            }

                                            public TypicalTypes.raw_type<?> apply() {
                                              return Analyzer.cast(null == Primitives.isEmpty.apply(strList) ? null : Primitives.isEmpty.apply(strList) ? new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(res), "list") : new Let<TypicalTypes.raw_type<?>>() {
                                                {
                                                  Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                                                  Primitives.annotate.apply(no, "has_bindings", wildt);
                                                }

                                                public TypicalTypes.raw_type<?> apply() {
                                                  return Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(res), "list"));
                                                }
                                              }.apply());
                                            }
                                          }.apply();
                                        }
                                        return null;
                                      }
                                    }.apply();
                                  }
                                  return null;
                                }
                              }.apply());
                            }
                          }.apply());
                        }
                      }.apply());
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$338);
            }
            return Analyzer.cast(retValue$338);
          }
          if (TypicalSupport.match$339(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$362 = Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Pair<Node> arg$350 = Analyzer.cast(nl);

                if ((null == arg$350)) {
                  return null;
                }
                if (TypicalSupport.match$323(arg$350)) {
                  return Analyzer.cast(error("empty record pattern", null));
                }
                if (true) {
                  final Pair<Node> list$352 = Analyzer.cast(Analyzer.cast(arg$350));
                  final Node x = GNode.cast(Primitives.wrapHead(list$352));
                  final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$352));

                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> tx;

                    {
                      tx = Analyzer.cast(analyze.apply(x));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final TypicalTypes.raw_type<?> arg$356 = Analyzer.cast(tx);

                          if ((null == arg$356)) {
                            return null;
                          }
                          if ((null != arg$356))
                                                        switch (arg$356.tag()) {
                            case FieldT:
                              if (TypicalSupport.match$96(arg$356)) {
                                final String s = Analyzer.cast(arg$356.getTuple().get1());

                                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                  final Pair<String> strList;

                                  {
                                    Primitives.annotateList.apply(xs, "parent", new TypicalTypes.StringName(s));
                                    TypicalSupport.map$129.apply(analyze, xs);
                                    strList = Analyzer.cast(combineVariables.apply(nl));
                                    Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                                  }

                                  public TypicalTypes.raw_type<?> apply() {
                                    return Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                                  }
                                }.apply());
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(null);
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply());
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$362);
            }
            return Analyzer.cast(retValue$362);
          }
          if (TypicalSupport.match$363(arg$125)) {
            final Node name = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node p = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$380 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String s;
              final TypicalTypes.raw_type<?> t;

              {
                s = Analyzer.cast(getString.apply(name));
                t = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(Primitives.concat.apply("field ", s), " is undefined"), getNameSpace)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$371 = Analyzer.cast(t);

                    if ((null == arg$371)) {
                      return null;
                    }
                    if ((null != arg$371))
                                            switch (arg$371.tag()) {
                      case FieldT:
                        if (TypicalSupport.match$96(arg$371)) {
                          final String str = Analyzer.cast(arg$371.getTuple().get1());

                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                            final String ps;

                            {
                              ps = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "parent") ? null : Primitives.hasAnnotation.apply(no, "parent") ? new Let<String>() {
                                final String stri;

                                {
                                  stri = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                                }

                                public String apply() {
                                  return Analyzer.cast(stri);
                                }
                              }.apply() : str);
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                public TypicalTypes.raw_type<?> apply() {
                                  final Boolean var$376 = Primitives.equal.apply(ps, str);

                                  if ((null != var$376 && !var$376)) {
                                    showMessage("error", Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply("record ", ps), " does not contain the field "), s), null);
                                  }
                                  if ((null == var$376)) {
                                    return null;
                                  }
                                  if (var$376) {
                                    return new Let<TypicalTypes.raw_type<?>>() {
                                      final TypicalTypes.raw_type<?> tp;

                                      {
                                        tp = Analyzer.cast(analyze.apply(p));
                                        new Guard<TypicalTypes.raw_type<?>>() {
                                          public TypicalTypes.raw_type<?> apply() {
                                            if ((null == unify)) {
                                              return null;
                                            }
                                            if ((null == t)) {
                                              return null;
                                            }
                                            if ((null == tp)) {
                                              return null;
                                            }

                                            final TypicalTypes.raw_type<?> result$375 = unify.apply(t, tp);

                                            if ((null == result$375)) {
                                              return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("type of the pattern does not match with ", "the declared type of field "), s), null));
                                            }
                                            return result$375;
                                          }
                                        }.apply();
                                        Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(retrieveVariables.apply(p)));
                                      }

                                      public TypicalTypes.raw_type<?> apply() {
                                        return Analyzer.cast(t);
                                      }
                                    }.apply();
                                  }
                                  return null;
                                }
                              }.apply());
                            }
                          }.apply());
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$380);
            }
            return Analyzer.cast(retValue$380);
          }
          if (TypicalSupport.match$65(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$384 = Analyzer.cast(null == isDefinedLocally.apply(no, getNameSpace) ? null : isDefinedLocally.apply(no, getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
              {
                Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(new Pair<String>(s)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(Analyzer.cast(lookup2.apply(no, getNameSpace)));
              }
            }.apply() : new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                define3.apply(no, t, getNameSpace);
                Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(new Pair<String>(s)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(t);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$384);
            }
            return Analyzer.cast(retValue$384);
          }
          if (TypicalSupport.match$5(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 1, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$478 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> ty;
              final Boolean check;

              {
                ty = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " is undefined"), getNameSpace)));
                check = Analyzer.cast(Primitives.hasAnnotation.apply(no, "no_binding_check"));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(ty) || !Primitives.isNotBottom.apply(ty) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final String p;
                  final TypicalTypes.raw_type<?> t;

                  {
                    p = Analyzer.cast(getParent.apply(ty));
                    t = Analyzer.cast(null == Primitives.not.apply(hasTypeVariables.apply(p)) ? null : Primitives.not.apply(hasTypeVariables.apply(p)) ? ty : copy.apply(ty));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final Pair<Node> arg$431 = Analyzer.cast(nl);

                        if ((null == arg$431)) {
                          return null;
                        }
                        if (TypicalSupport.match$387(arg$431)) {
                          final Pair<Node> pl = Analyzer.cast(Primitives.getChildren(arg$431.get(0), 0, arg$431.get(0).size()));

                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                            {
                              Analyzer.discard(null == check || !check ? null : Primitives.annotateList.apply(pl, "no_binding_check", wildt));
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                                public TypicalTypes.raw_type<?> apply() {
                                  final TypicalTypes.raw_type<?> arg$450 = Analyzer.cast(t);

                                  if ((null == arg$450)) {
                                    return null;
                                  }
                                  if ((null != arg$450))
                                                                        switch (arg$450.tag()) {
                                    case ConstructorT:
                                      if (TypicalSupport.match$94(arg$450)) {
                                        final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$450.getTuple().get3());

                                        return Analyzer.cast(null == Primitives.isBottom.apply(ty) ? null : Primitives.isBottom.apply(ty) ? error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " must have no children"), null) : new Match<TypicalTypes.raw_type<?>>() {
                                          public TypicalTypes.raw_type<?> apply() {
                                            final TypicalTypes.raw_type<?> arg$459 = Analyzer.cast(ty);

                                            if ((null == arg$459)) {
                                              return null;
                                            }
                                            if ((null != arg$459))
                                                                                            switch (arg$459.tag()) {
                                              case TupleT:
                                                if (TypicalSupport.match$114(arg$459)) {
                                                  final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$459.getTuple().get1());

                                                  return Analyzer.cast(null == Primitives.lessInt.apply(Primitives.length.apply(pl), Primitives.length.apply(tl)) ? null : Primitives.lessInt.apply(Primitives.length.apply(pl), Primitives.length.apply(tl)) ? error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " does not have enough children"), null) : null == Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(tl)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(tl)) ? error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " has too many children"), null) : new Let<TypicalTypes.raw_type<?>>() {
                                                    final TypicalTypes.raw_type<?> res;

                                                    {
                                                      res = Analyzer.cast(processArguments.apply(pl, tl, t));
                                                    }

                                                    public TypicalTypes.raw_type<?> apply() {
                                                      return Analyzer.cast(null == Primitives.isNotBottom.apply(res) || !Primitives.isNotBottom.apply(res) ? null : new Require<TypicalTypes.raw_type<?>>() {
                                                        public TypicalTypes.raw_type<?> apply() {
                                                          final Boolean var$462 = Primitives.or.apply(Primitives.or.apply(Primitives.not.apply(isNodeType.apply(t)), check), checkBindings.apply(pl, BigInteger.valueOf(0), BigInteger.valueOf(0)));

                                                          if ((null != var$462 && !var$462)) {
                                                            showMessage("error", Primitives.concat.apply("bindings in different nodes ***", "in the node pattern"), null);
                                                          }
                                                          if ((null == var$462)) {
                                                            return null;
                                                          }
                                                          if (var$462) {
                                                            return new Let<TypicalTypes.raw_type<?>>() {
                                                              final Pair<String> strList;

                                                              {
                                                                strList = Analyzer.cast(combineVariables.apply(pl));
                                                              }

                                                              public TypicalTypes.raw_type<?> apply() {
                                                                return Analyzer.cast(null == Primitives.isEmpty.apply(strList) ? null : Primitives.isEmpty.apply(strList) ? res : new Let<TypicalTypes.raw_type<?>>() {
                                                                  {
                                                                    Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                                                                    Primitives.annotate.apply(no, "has_bindings", wildt);
                                                                  }

                                                                  public TypicalTypes.raw_type<?> apply() {
                                                                    return Analyzer.cast(res);
                                                                  }
                                                                }.apply());
                                                              }
                                                            }.apply();
                                                          }
                                                          return null;
                                                        }
                                                      }.apply());
                                                    }
                                                  }.apply());
                                                }
                                                break;
                                              default:
                                                break;
                                              };
                                            if (true) {
                                              return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                                public TypicalTypes.raw_type<?> apply() {
                                                  final Boolean var$464 = Primitives.equal.apply(Primitives.length.apply(pl), BigInteger.valueOf(1));

                                                  if ((null != var$464 && !var$464)) {
                                                    showMessage("error", Primitives.concat.apply(s, " must have only one child"), null);
                                                  }
                                                  if ((null == var$464)) {
                                                    return null;
                                                  }
                                                  if (var$464) {
                                                    return new Let<TypicalTypes.raw_type<?>>() {
                                                      final TypicalTypes.raw_type<?> res;

                                                      {
                                                        res = Analyzer.cast(processArguments.apply(pl, new Pair<TypicalTypes.raw_type<?>>(ty), t));
                                                      }

                                                      public TypicalTypes.raw_type<?> apply() {
                                                        return Analyzer.cast(null == Primitives.isNotBottom.apply(res) || !Primitives.isNotBottom.apply(res) ? null : new Let<TypicalTypes.raw_type<?>>() {
                                                          final Pair<String> strList;

                                                          {
                                                            strList = Analyzer.cast(combineVariables.apply(pl));
                                                          }

                                                          public TypicalTypes.raw_type<?> apply() {
                                                            return Analyzer.cast(null == Primitives.isEmpty.apply(strList) ? null : Primitives.isEmpty.apply(strList) ? res : new Let<TypicalTypes.raw_type<?>>() {
                                                              {
                                                                Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                                                                Primitives.annotate.apply(no, "has_bindings", wildt);
                                                              }

                                                              public TypicalTypes.raw_type<?> apply() {
                                                                return Analyzer.cast(res);
                                                              }
                                                            }.apply());
                                                          }
                                                        }.apply());
                                                      }
                                                    }.apply();
                                                  }
                                                  return null;
                                                }
                                              }.apply());
                                            }
                                            return null;
                                          }
                                        }.apply());
                                      }
                                      break;
                                    default:
                                      break;
                                    };
                                  if (true) {
                                    return Analyzer.cast(error(Primitives.concat.apply("expected constructor type, found ", getTypeName.apply(t)), null));
                                  }
                                  return null;
                                }
                              }.apply());
                            }
                          }.apply());
                        }
                        if (TypicalSupport.match$422(arg$431)) {
                          return Analyzer.cast(t);
                        }
                        if (TypicalSupport.match$323(arg$431)) {
                          return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final TypicalTypes.raw_type<?> arg$472 = Analyzer.cast(t);

                              if ((null == arg$472)) {
                                return null;
                              }
                              if ((null != arg$472))
                                                                switch (arg$472.tag()) {
                                case ConstructorT:
                                  if (TypicalSupport.match$94(arg$472)) {
                                    final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$472.getTuple().get3());

                                    return Analyzer.cast(null == Primitives.isBottom.apply(ty) ? null : Primitives.isBottom.apply(ty) ? t : error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " does not have enough children"), null));
                                  }
                                  break;
                                default:
                                  break;
                                };
                              if (true) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected constructor type, found ", getTypeName.apply(t)), null));
                              }
                              return null;
                            }
                          }.apply());
                        }
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$478);
            }
            return Analyzer.cast(retValue$478);
          }
          if (TypicalSupport.match$479(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$482 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new TypicalTypes.TupleT(tl));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$482);
            }
            return Analyzer.cast(retValue$482);
          }
          if (TypicalSupport.match$483(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node right = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$490 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == tl)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$486 = unify.apply(boolt, tl);

                    if ((null == result$486)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(tl)), left));
                    }
                    return result$486;
                  }
                }.apply();
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }
                    if ((null == tr)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$487 = unify.apply(boolt, tr);

                    if ((null == result$487)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(tr)), right));
                    }
                    return result$487;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(boolt);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$490);
            }
            return Analyzer.cast(retValue$490);
          }
          if (TypicalSupport.match$491(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node right = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$498 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == tl)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$494 = unify.apply(boolt, tl);

                    if ((null == result$494)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(tl)), left));
                    }
                    return result$494;
                  }
                }.apply();
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }
                    if ((null == tr)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$495 = unify.apply(boolt, tr);

                    if ((null == result$495)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(tr)), right));
                    }
                    return result$495;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(boolt);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$498);
            }
            return Analyzer.cast(retValue$498);
          }
          if (TypicalSupport.match$499(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node right = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$504 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == tl)) {
                      return null;
                    }
                    if ((null == tr)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$501 = unify.apply(tl, tr);

                    if ((null == result$501)) {
                      return Analyzer.cast(error(Primitives.concat.apply("types of left and right expressions", " do not match"), null));
                    }
                    return result$501;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(boolt);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$504);
            }
            return Analyzer.cast(retValue$504);
          }
          if (TypicalSupport.match$505(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);
            final Node right = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$552 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final String arg$528 = Analyzer.cast(s);

                    if ((null == arg$528)) {
                      return null;
                    }
                    if ((null != "<=" && "<=".equals(arg$528))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$531 = unify.apply(tl, intt);

                              if ((null == result$531)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$531;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$532 = unify.apply(tr, intt);

                              if ((null == result$532)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$532;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(boolt);
                        }
                      }.apply());
                    }
                    if ((null != "<" && "<".equals(arg$528))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$535 = unify.apply(tl, intt);

                              if ((null == result$535)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$535;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$536 = unify.apply(tr, intt);

                              if ((null == result$536)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$536;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(boolt);
                        }
                      }.apply());
                    }
                    if ((null != ">=" && ">=".equals(arg$528))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$539 = unify.apply(tl, intt);

                              if ((null == result$539)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$539;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$540 = unify.apply(tr, intt);

                              if ((null == result$540)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$540;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(boolt);
                        }
                      }.apply());
                    }
                    if ((null != ">" && ">".equals(arg$528))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$543 = unify.apply(tl, intt);

                              if ((null == result$543)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$543;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$544 = unify.apply(tr, intt);

                              if ((null == result$544)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$544;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(boolt);
                        }
                      }.apply());
                    }
                    if (true) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == floatt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$547 = unify.apply(tl, floatt);

                              if ((null == result$547)) {
                                return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("expected 64-bit float", ", found "), getTypeName.apply(tl)), left));
                              }
                              return result$547;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == floatt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$548 = unify.apply(tr, floatt);

                              if ((null == result$548)) {
                                return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("expected 64-bit float", ", found "), getTypeName.apply(tr)), right));
                              }
                              return result$548;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(boolt);
                        }
                      }.apply());
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$552);
            }
            return Analyzer.cast(retValue$552);
          }
          if (TypicalSupport.match$553(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);
            final Node right = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$608 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final String arg$580 = Analyzer.cast(s);

                    if ((null == arg$580)) {
                      return null;
                    }
                    if ((null != "+" && "+".equals(arg$580))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$583 = unify.apply(tl, intt);

                              if ((null == result$583)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$583;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$584 = unify.apply(tr, intt);

                              if ((null == result$584)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$584;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "-" && "-".equals(arg$580))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$587 = unify.apply(tl, intt);

                              if ((null == result$587)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$587;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$588 = unify.apply(tr, intt);

                              if ((null == result$588)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$588;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "*" && "*".equals(arg$580))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$591 = unify.apply(tl, intt);

                              if ((null == result$591)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$591;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$592 = unify.apply(tr, intt);

                              if ((null == result$592)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$592;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "/" && "/".equals(arg$580))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$595 = unify.apply(tl, intt);

                              if ((null == result$595)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$595;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$596 = unify.apply(tr, intt);

                              if ((null == result$596)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$596;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "%" && "%".equals(arg$580))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$599 = unify.apply(tl, intt);

                              if ((null == result$599)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$599;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$600 = unify.apply(tr, intt);

                              if ((null == result$600)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$600;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if (true) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == floatt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$603 = unify.apply(tl, floatt);

                              if ((null == result$603)) {
                                return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("expected 64-bit float", ", found "), getTypeName.apply(tl)), left));
                              }
                              return result$603;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == floatt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$604 = unify.apply(tr, floatt);

                              if ((null == result$604)) {
                                return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("expected 64-bit float", ", found "), getTypeName.apply(tr)), right));
                              }
                              return result$604;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(floatt);
                        }
                      }.apply());
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$608);
            }
            return Analyzer.cast(retValue$608);
          }
          if (TypicalSupport.match$609(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);
            final Node right = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$664 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final String arg$636 = Analyzer.cast(s);

                    if ((null == arg$636)) {
                      return null;
                    }
                    if ((null != "+" && "+".equals(arg$636))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$639 = unify.apply(tl, intt);

                              if ((null == result$639)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$639;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$640 = unify.apply(tr, intt);

                              if ((null == result$640)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$640;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "-" && "-".equals(arg$636))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$643 = unify.apply(tl, intt);

                              if ((null == result$643)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$643;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$644 = unify.apply(tr, intt);

                              if ((null == result$644)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$644;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "*" && "*".equals(arg$636))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$647 = unify.apply(tl, intt);

                              if ((null == result$647)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$647;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$648 = unify.apply(tr, intt);

                              if ((null == result$648)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$648;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "/" && "/".equals(arg$636))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$651 = unify.apply(tl, intt);

                              if ((null == result$651)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$651;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$652 = unify.apply(tr, intt);

                              if ((null == result$652)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$652;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if ((null != "%" && "%".equals(arg$636))) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$655 = unify.apply(tl, intt);

                              if ((null == result$655)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tl)), left));
                              }
                              return result$655;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == intt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$656 = unify.apply(tr, intt);

                              if ((null == result$656)) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected integer, found ", getTypeName.apply(tr)), right));
                              }
                              return result$656;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(intt);
                        }
                      }.apply());
                    }
                    if (true) {
                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                        {
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == tl)) {
                                return null;
                              }
                              if ((null == floatt)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$659 = unify.apply(tl, floatt);

                              if ((null == result$659)) {
                                return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("expected 64-bit float", ", found "), getTypeName.apply(tl)), left));
                              }
                              return result$659;
                            }
                          }.apply();
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == floatt)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$660 = unify.apply(tr, floatt);

                              if ((null == result$660)) {
                                return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("expected 64-bit float", ", found "), getTypeName.apply(tr)), right));
                              }
                              return result$660;
                            }
                          }.apply();
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(floatt);
                        }
                      }.apply());
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$664);
            }
            return Analyzer.cast(retValue$664);
          }
          if (TypicalSupport.match$665(arg$125)) {
            final Node left = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node right = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$672 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(analyze.apply(left));
                tr = Analyzer.cast(analyze.apply(right));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == tl)) {
                      return null;
                    }
                    if ((null == strt)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$668 = unify.apply(tl, strt);

                    if ((null == result$668)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(tl)), left));
                    }
                    return result$668;
                  }
                }.apply();
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == strt)) {
                      return null;
                    }
                    if ((null == tr)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$669 = unify.apply(tr, strt);

                    if ((null == result$669)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(tr)), right));
                    }
                    return result$669;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(strt);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$672);
            }
            return Analyzer.cast(retValue$672);
          }
          if (TypicalSupport.match$673(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node con = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$678 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> tl;

              {
                t = Analyzer.cast(analyze.apply(n));
                tl = Analyzer.cast(analyze.apply(con));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.and.apply(Primitives.isNotBottom.apply(t), Primitives.isNotBottom.apply(tl)) || !Primitives.and.apply(Primitives.isNotBottom.apply(t), Primitives.isNotBottom.apply(tl)) ? null : null == isListType.apply(tl) ? null : isListType.apply(tl) ? new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> res;

                  {
                    res = Analyzer.cast(unify.apply(tl, new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(t), "list")));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final Boolean var$675 = Primitives.isNotBottom.apply(res);

                        if ((null != var$675 && !var$675)) {
                          showMessage("error", "type of the head does not match type of the tail", null);
                        }
                        if ((null == var$675)) {
                          return null;
                        }
                        if (var$675) {
                          return res;
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply() : error("the tail of a cons expression must be a list", null));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$678);
            }
            return Analyzer.cast(retValue$678);
          }
          if (TypicalSupport.match$679(arg$125)) {
            final Pair<Node> pl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2266 = Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Pair<Node> arg$1472 = Analyzer.cast(pl);

                if ((null == arg$1472)) {
                  return null;
                }
                if (TypicalSupport.match$681(arg$1472)) {
                  final Node mod = Analyzer.cast(arg$1472.get(0));
                  final Node name = Analyzer.cast(arg$1472.get(1));
                  final Node args = Analyzer.cast(arg$1472.get(2));

                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final String mol;
                    final String s;
                    final Pair<Node> nl;

                    {
                      mol = Analyzer.cast(getString.apply(mod));
                      s = Analyzer.cast(getString.apply(name));
                      nl = Analyzer.cast(getNodeList.apply(args));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final String arg$1476 = Analyzer.cast(mol);

                          if ((null == arg$1476)) {
                            return null;
                          }
                          if ((null != "List" && "List".equals(arg$1476))) {
                            return Analyzer.cast(null == isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? null : isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                              final TypicalTypes.raw_type<?> funcType;

                              {
                                funcType = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace)));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(processFunctionApplication.apply(copy.apply(funcType), nl));
                              }
                            }.apply() : error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), " is undefined"), null));
                          }
                          if ((null != "String" && "String".equals(arg$1476))) {
                            return Analyzer.cast(null == isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? null : isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                              final TypicalTypes.raw_type<?> funcType;

                              {
                                funcType = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace)));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(processFunctionApplication.apply(copy.apply(funcType), nl));
                              }
                            }.apply() : error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), " is undefined"), null));
                          }
                          if ((null != "Map" && "Map".equals(arg$1476))) {
                            return Analyzer.cast(null == isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? null : isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                              final TypicalTypes.raw_type<?> funcType;

                              {
                                funcType = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace)));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(processFunctionApplication.apply(copy.apply(funcType), nl));
                              }
                            }.apply() : error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), " is undefined"), null));
                          }
                          if ((null != "Float32" && "Float32".equals(arg$1476))) {
                            return Analyzer.cast(null == isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? null : isDefined.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                              final TypicalTypes.raw_type<?> funcType;

                              {
                                funcType = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("Parameter", Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), null), getNameSpace)));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(processFunctionApplication.apply(copy.apply(funcType), nl));
                              }
                            }.apply() : error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), " is undefined"), null));
                          }
                          if ((null != "Prelude" && "Prelude".equals(arg$1476))) {
                            return Analyzer.cast(null == isDefined.apply(GNode.create("Parameter", s, null), getNameSpace) ? null : isDefined.apply(GNode.create("Parameter", s, null), getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                              final TypicalTypes.raw_type<?> funcType;

                              {
                                funcType = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("Parameter", s, null), getNameSpace)));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(processFunctionApplication.apply(copy.apply(funcType), nl));
                              }
                            }.apply() : error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(mol, "."), s), " is undefined"), null));
                          }
                          if (true) {
                            return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply("module ", mol), " is undefined"), null));
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply());
                }
                if (TypicalSupport.match$686(arg$1472)) {
                  final Node name = Analyzer.cast(arg$1472.get(0));
                  final Node args = Analyzer.cast(arg$1472.get(1));

                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final String s;
                    final Pair<Node> nl;

                    {
                      s = Analyzer.cast(getString.apply(name));
                      nl = Analyzer.cast(getNodeList.apply(args));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final String arg$1871 = Analyzer.cast(s);

                          if ((null == arg$1871)) {
                            return null;
                          }
                          if ((null != "lookup" && "lookup".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$1930 = Analyzer.cast(nl);

                                if ((null == arg$1930)) {
                                  return null;
                                }
                                if (TypicalSupport.match$689(arg$1930)) {
                                  final Node e1 = Analyzer.cast(arg$1930.get(0));
                                  final Node strNode = Analyzer.cast(arg$1930.get(1));
                                  final Node errNode = Analyzer.cast(arg$1930.get(2));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final String str;
                                    final Node e2;
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;

                                    {
                                      str = Analyzer.cast(getString.apply(strNode));
                                      e2 = Analyzer.cast(new Match<Node>() {
                                        public Node apply() {
                                          final Node arg$1945 = GNode.cast(errNode);

                                          if ((null == arg$1945)) {
                                            return null;
                                          }
                                          if (TypicalSupport.match$692(arg$1945)) {
                                            final Node ne = (arg$1945.size() > 1 ? arg$1945.getGeneric(1) : null);

                                            matching_nodes.add(arg$1945);
                                            if ((null != arg$1945 && processScopeNodes.contains(arg$1945.getName()))) {
                                              processScope(arg$1945, getScope);
                                            }
                                            checkEnterScope(arg$1945);

                                            final Object retValue$1949 = Analyzer.cast(ne);

                                            checkExitScope(arg$1945);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$1949);
                                          }
                                          if (true) {
                                            matching_nodes.add(arg$1945);
                                            if ((null != arg$1945 && processScopeNodes.contains(arg$1945.getName()))) {
                                              processScope(arg$1945, getScope);
                                            }
                                            checkEnterScope(arg$1945);

                                            final Object retValue$1952 = Analyzer.cast(error("ErrorClause is expected", null));

                                            checkExitScope(arg$1945);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$1952);
                                          }
                                          return null;
                                        }
                                      }.apply());
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$1954 = ensureNodeType.apply(t1);

                                          if ((null == result$1954)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$1954;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$1955 = unify.apply(t2, strt);

                                          if ((null == result$1955)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$1955;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          final Boolean var$1944 = isDefined.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace);

                                          if ((null != var$1944 && !var$1944)) {
                                            showMessage("error", Primitives.concat.apply(Primitives.concat.apply("tag ", str), " is undefined"), null);
                                          }
                                          if ((null == var$1944)) {
                                            return null;
                                          }
                                          if (var$1944) {
                                            return Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace));
                                          }
                                          return null;
                                        }
                                      }.apply());
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$714(arg$1930)) {
                                  final Node e1 = Analyzer.cast(arg$1930.get(0));
                                  final Node errNode = Analyzer.cast(arg$1930.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final Node e2;
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;

                                    {
                                      e2 = Analyzer.cast(new Match<Node>() {
                                        public Node apply() {
                                          final Node arg$1968 = GNode.cast(errNode);

                                          if ((null == arg$1968)) {
                                            return null;
                                          }
                                          if (TypicalSupport.match$692(arg$1968)) {
                                            final Node ne = (arg$1968.size() > 1 ? arg$1968.getGeneric(1) : null);

                                            matching_nodes.add(arg$1968);
                                            if ((null != arg$1968 && processScopeNodes.contains(arg$1968.getName()))) {
                                              processScope(arg$1968, getScope);
                                            }
                                            checkEnterScope(arg$1968);

                                            final Object retValue$1972 = Analyzer.cast(ne);

                                            checkExitScope(arg$1968);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$1972);
                                          }
                                          if (true) {
                                            matching_nodes.add(arg$1968);
                                            if ((null != arg$1968 && processScopeNodes.contains(arg$1968.getName()))) {
                                              processScope(arg$1968, getScope);
                                            }
                                            checkEnterScope(arg$1968);

                                            final Object retValue$1975 = Analyzer.cast(error("ErrorClause is expected", null));

                                            checkExitScope(arg$1968);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$1975);
                                          }
                                          return null;
                                        }
                                      }.apply());
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$1977 = ensureNodeType.apply(t1);

                                          if ((null == result$1977)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("node is expedted, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$1977;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$1978 = unify.apply(t2, strt);

                                          if ((null == result$1978)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$1978;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(typet);
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$737(arg$1930)) {
                                  final Node e1 = Analyzer.cast(arg$1930.get(0));
                                  final Node strNode = Analyzer.cast(arg$1930.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;
                                    final String str;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      str = Analyzer.cast(getString.apply(strNode));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$1983 = ensureNodeType.apply(t1);

                                          if ((null == result$1983)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$1983;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          final Boolean var$1982 = isDefined.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace);

                                          if ((null != var$1982 && !var$1982)) {
                                            showMessage("error", Primitives.concat.apply(Primitives.concat.apply("tag ", str), " is undefined"), null);
                                          }
                                          if ((null == var$1982)) {
                                            return null;
                                          }
                                          if (var$1982) {
                                            return Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace));
                                          }
                                          return null;
                                        }
                                      }.apply());
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$742(arg$1930)) {
                                  final Node e1 = Analyzer.cast(arg$1930.get(0));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$1986 = ensureNodeType.apply(t1);

                                          if ((null == result$1986)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$1986;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(typet);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply(s, " is applied with invalid arguments"), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "lookup_locally" && "lookup_locally".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2046 = Analyzer.cast(nl);

                                if ((null == arg$2046)) {
                                  return null;
                                }
                                if (TypicalSupport.match$689(arg$2046)) {
                                  final Node e1 = Analyzer.cast(arg$2046.get(0));
                                  final Node strNode = Analyzer.cast(arg$2046.get(1));
                                  final Node errNode = Analyzer.cast(arg$2046.get(2));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final String str;
                                    final Node e2;
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;

                                    {
                                      str = Analyzer.cast(getString.apply(strNode));
                                      e2 = Analyzer.cast(new Match<Node>() {
                                        public Node apply() {
                                          final Node arg$2061 = GNode.cast(errNode);

                                          if ((null == arg$2061)) {
                                            return null;
                                          }
                                          if (TypicalSupport.match$692(arg$2061)) {
                                            final Node ne = (arg$2061.size() > 1 ? arg$2061.getGeneric(1) : null);

                                            matching_nodes.add(arg$2061);
                                            if ((null != arg$2061 && processScopeNodes.contains(arg$2061.getName()))) {
                                              processScope(arg$2061, getScope);
                                            }
                                            checkEnterScope(arg$2061);

                                            final Object retValue$2065 = Analyzer.cast(ne);

                                            checkExitScope(arg$2061);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$2065);
                                          }
                                          if (true) {
                                            matching_nodes.add(arg$2061);
                                            if ((null != arg$2061 && processScopeNodes.contains(arg$2061.getName()))) {
                                              processScope(arg$2061, getScope);
                                            }
                                            checkEnterScope(arg$2061);

                                            final Object retValue$2068 = Analyzer.cast(error("ErrorClause is expected", null));

                                            checkExitScope(arg$2061);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$2068);
                                          }
                                          return null;
                                        }
                                      }.apply());
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2070 = ensureNodeType.apply(t1);

                                          if ((null == result$2070)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2070;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2071 = unify.apply(t2, strt);

                                          if ((null == result$2071)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2071;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          final Boolean var$2060 = isDefined.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace);

                                          if ((null != var$2060 && !var$2060)) {
                                            showMessage("error", Primitives.concat.apply(Primitives.concat.apply("tag ", str), " is undefined"), null);
                                          }
                                          if ((null == var$2060)) {
                                            return null;
                                          }
                                          if (var$2060) {
                                            return Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace));
                                          }
                                          return null;
                                        }
                                      }.apply());
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$714(arg$2046)) {
                                  final Node e1 = Analyzer.cast(arg$2046.get(0));
                                  final Node errNode = Analyzer.cast(arg$2046.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final Node e2;
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;

                                    {
                                      e2 = Analyzer.cast(new Match<Node>() {
                                        public Node apply() {
                                          final Node arg$2084 = GNode.cast(errNode);

                                          if ((null == arg$2084)) {
                                            return null;
                                          }
                                          if (TypicalSupport.match$692(arg$2084)) {
                                            final Node ne = (arg$2084.size() > 1 ? arg$2084.getGeneric(1) : null);

                                            matching_nodes.add(arg$2084);
                                            if ((null != arg$2084 && processScopeNodes.contains(arg$2084.getName()))) {
                                              processScope(arg$2084, getScope);
                                            }
                                            checkEnterScope(arg$2084);

                                            final Object retValue$2088 = Analyzer.cast(ne);

                                            checkExitScope(arg$2084);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$2088);
                                          }
                                          if (true) {
                                            matching_nodes.add(arg$2084);
                                            if ((null != arg$2084 && processScopeNodes.contains(arg$2084.getName()))) {
                                              processScope(arg$2084, getScope);
                                            }
                                            checkEnterScope(arg$2084);

                                            final Object retValue$2091 = Analyzer.cast(error("ErrorClause is expected", null));

                                            checkExitScope(arg$2084);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$2091);
                                          }
                                          return null;
                                        }
                                      }.apply());
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2093 = ensureNodeType.apply(t1);

                                          if ((null == result$2093)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("node is expedted, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2093;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2094 = unify.apply(t2, strt);

                                          if ((null == result$2094)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2094;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(typet);
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$737(arg$2046)) {
                                  final Node e1 = Analyzer.cast(arg$2046.get(0));
                                  final Node strNode = Analyzer.cast(arg$2046.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;
                                    final String str;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      str = Analyzer.cast(getString.apply(strNode));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2099 = ensureNodeType.apply(t1);

                                          if ((null == result$2099)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2099;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          final Boolean var$2098 = isDefined.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace);

                                          if ((null != var$2098 && !var$2098)) {
                                            showMessage("error", Primitives.concat.apply(Primitives.concat.apply("tag ", str), " is undefined"), null);
                                          }
                                          if ((null == var$2098)) {
                                            return null;
                                          }
                                          if (var$2098) {
                                            return Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", Primitives.concat.apply("tag", str)), getNameSpace));
                                          }
                                          return null;
                                        }
                                      }.apply());
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$742(arg$2046)) {
                                  final Node e1 = Analyzer.cast(arg$2046.get(0));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2102 = ensureNodeType.apply(t1);

                                          if ((null == result$2102)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2102;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(typet);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply(s, " is applied with invalid arguments"), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "define" && "define".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2132 = Analyzer.cast(nl);

                                if ((null == arg$2132)) {
                                  return null;
                                }
                                if (TypicalSupport.match$689(arg$2132)) {
                                  final Node e1 = Analyzer.cast(arg$2132.get(0));
                                  final Node e2 = Analyzer.cast(arg$2132.get(1));
                                  final Node errNode = Analyzer.cast(arg$2132.get(2));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final Node e3;
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t3;

                                    {
                                      e3 = Analyzer.cast(new Match<Node>() {
                                        public Node apply() {
                                          final Node arg$2145 = GNode.cast(errNode);

                                          if ((null == arg$2145)) {
                                            return null;
                                          }
                                          if (TypicalSupport.match$692(arg$2145)) {
                                            final Node ne = (arg$2145.size() > 1 ? arg$2145.getGeneric(1) : null);

                                            matching_nodes.add(arg$2145);
                                            if ((null != arg$2145 && processScopeNodes.contains(arg$2145.getName()))) {
                                              processScope(arg$2145, getScope);
                                            }
                                            checkEnterScope(arg$2145);

                                            final Object retValue$2149 = Analyzer.cast(ne);

                                            checkExitScope(arg$2145);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$2149);
                                          }
                                          if (true) {
                                            matching_nodes.add(arg$2145);
                                            if ((null != arg$2145 && processScopeNodes.contains(arg$2145.getName()))) {
                                              processScope(arg$2145, getScope);
                                            }
                                            checkEnterScope(arg$2145);

                                            final Object retValue$2152 = Analyzer.cast(error("ErrorClause is expected", null));

                                            checkExitScope(arg$2145);
                                            matching_nodes.remove(matching_nodes.size() - 1);
                                            return Analyzer.cast(retValue$2152);
                                          }
                                          return null;
                                        }
                                      }.apply());
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      analyze.apply(e2);
                                      t3 = Analyzer.cast(analyze.apply(e3));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2154 = ensureNodeType.apply(t1);

                                          if ((null == result$2154)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2154;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == t3)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2155 = unify.apply(t3, strt);

                                          if ((null == result$2155)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t3)), e3));
                                          }
                                          return result$2155;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(wildt);
                                    }
                                  }.apply());
                                }
                                if (TypicalSupport.match$686(arg$2132)) {
                                  final Node e1 = Analyzer.cast(arg$2132.get(0));
                                  final Node e2 = Analyzer.cast(arg$2132.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      analyze.apply(e2);
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2158 = ensureNodeType.apply(t1);

                                          if ((null == result$2158)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2158;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(wildt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply(s, " is applied with invalid arguments"), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "redefine" && "redefine".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2165 = Analyzer.cast(nl);

                                if ((null == arg$2165)) {
                                  return null;
                                }
                                if (TypicalSupport.match$686(arg$2165)) {
                                  final Node e1 = Analyzer.cast(arg$2165.get(0));
                                  final Node e2 = Analyzer.cast(arg$2165.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      analyze.apply(e2);
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2168 = ensureNodeType.apply(t1);

                                          if ((null == result$2168)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2168;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(wildt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply(s, " is applied with invalid arguments"), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "is_defined" && "is_defined".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2175 = Analyzer.cast(nl);

                                if ((null == arg$2175)) {
                                  return null;
                                }
                                if (TypicalSupport.match$742(arg$2175)) {
                                  final Node e1 = Analyzer.cast(arg$2175.get(0));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2178 = ensureNodeType.apply(t1);

                                          if ((null == result$2178)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2178;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(boolt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply(s, "must have one argument"), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "is_defined_locally" && "is_defined_locally".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2185 = Analyzer.cast(nl);

                                if ((null == arg$2185)) {
                                  return null;
                                }
                                if (TypicalSupport.match$742(arg$2185)) {
                                  final Node e1 = Analyzer.cast(arg$2185.get(0));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2188 = ensureNodeType.apply(t1);

                                          if ((null == result$2188)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2188;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(boolt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply(s, "must have one argument"), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "annotate" && "annotate".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2199 = Analyzer.cast(nl);

                                if ((null == arg$2199)) {
                                  return null;
                                }
                                if (TypicalSupport.match$681(arg$2199)) {
                                  final Node e1 = Analyzer.cast(arg$2199.get(0));
                                  final Node e2 = Analyzer.cast(arg$2199.get(1));
                                  final Node e3 = Analyzer.cast(arg$2199.get(2));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;
                                    final TypicalTypes.raw_type<?> t3;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      t3 = Analyzer.cast(analyze.apply(e3));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2204 = ensureNodeType.apply(t1);

                                          if ((null == result$2204)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2204;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2205 = unify.apply(t2, strt);

                                          if ((null == result$2205)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2205;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == t3)) {
                                            return null;
                                          }
                                          if ((null == typet)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2206 = unify.apply(t3, typet);

                                          if ((null == result$2206)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected type, found ", getTypeName.apply(t3)), e3));
                                          }
                                          return result$2206;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(wildt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(null);
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "has_annotation" && "has_annotation".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2215 = Analyzer.cast(nl);

                                if ((null == arg$2215)) {
                                  return null;
                                }
                                if (TypicalSupport.match$686(arg$2215)) {
                                  final Node e1 = Analyzer.cast(arg$2215.get(0));
                                  final Node e2 = Analyzer.cast(arg$2215.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2219 = ensureNodeType.apply(t1);

                                          if ((null == result$2219)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2219;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2220 = unify.apply(t2, strt);

                                          if ((null == result$2220)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2220;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(boolt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(null);
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "get_annotation" && "get_annotation".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2229 = Analyzer.cast(nl);

                                if ((null == arg$2229)) {
                                  return null;
                                }
                                if (TypicalSupport.match$686(arg$2229)) {
                                  final Node e1 = Analyzer.cast(arg$2229.get(0));
                                  final Node e2 = Analyzer.cast(arg$2229.get(1));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeType)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2233 = ensureNodeType.apply(t1);

                                          if ((null == result$2233)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2233;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2234 = unify.apply(t2, strt);

                                          if ((null == result$2234)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2234;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(typet);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(null);
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if ((null != "annotate_list" && "annotate_list".equals(arg$1871))) {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final Pair<Node> arg$2245 = Analyzer.cast(nl);

                                if ((null == arg$2245)) {
                                  return null;
                                }
                                if (TypicalSupport.match$681(arg$2245)) {
                                  final Node e1 = Analyzer.cast(arg$2245.get(0));
                                  final Node e2 = Analyzer.cast(arg$2245.get(1));
                                  final Node e3 = Analyzer.cast(arg$2245.get(2));

                                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                    final TypicalTypes.raw_type<?> t1;
                                    final TypicalTypes.raw_type<?> t2;
                                    final TypicalTypes.raw_type<?> t3;

                                    {
                                      t1 = Analyzer.cast(analyze.apply(e1));
                                      t2 = Analyzer.cast(analyze.apply(e2));
                                      t3 = Analyzer.cast(analyze.apply(e3));
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == t1)) {
                                            return null;
                                          }
                                          if ((null == ensureNodeList)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2250 = ensureNodeList.apply(t1);

                                          if ((null == result$2250)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected list of node, found ", getTypeName.apply(t1)), e1));
                                          }
                                          return result$2250;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == strt)) {
                                            return null;
                                          }
                                          if ((null == t2)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2251 = unify.apply(t2, strt);

                                          if ((null == result$2251)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2251;
                                        }
                                      }.apply();
                                      new Guard<TypicalTypes.raw_type<?>>() {
                                        public TypicalTypes.raw_type<?> apply() {
                                          if ((null == unify)) {
                                            return null;
                                          }
                                          if ((null == t3)) {
                                            return null;
                                          }
                                          if ((null == typet)) {
                                            return null;
                                          }

                                          final TypicalTypes.raw_type<?> result$2252 = unify.apply(t3, typet);

                                          if ((null == result$2252)) {
                                            return Analyzer.cast(error(Primitives.concat.apply("expected type, found ", getTypeName.apply(t2)), e2));
                                          }
                                          return result$2252;
                                        }
                                      }.apply();
                                    }

                                    public TypicalTypes.raw_type<?> apply() {
                                      return Analyzer.cast(wildt);
                                    }
                                  }.apply());
                                }
                                if (true) {
                                  return Analyzer.cast(null);
                                }
                                return null;
                              }
                            }.apply());
                          }
                          if (true) {
                            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                              final Node lo;
                              final TypicalTypes.raw_type<?> funcT;
                              final Node nod;
                              final Pair<String> muts;

                              {
                                lo = Analyzer.cast(TypicalSupport.head$279.apply(pl));
                                funcT = Analyzer.cast(Analyzer.cast(lookup4.apply(lo, "error", Primitives.concat.apply(s, " is undefined"), getNameSpace)));
                                nod = Analyzer.cast(null == isDefined.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace) || !isDefined.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace) ? null : Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace)));
                                muts = Analyzer.cast(null == Primitives.isNotBottom.apply(nod) || !Primitives.isNotBottom.apply(nod) ? null : getAnnotatedStringList.apply(nod, "mutual"));
                                Analyzer.discard(null == Primitives.isNotBottom.apply(muts) || !Primitives.isNotBottom.apply(muts) ? null : Primitives.annotateList.apply(nl, "mutual", new TypicalTypes.StringList(TypicalSupport.append$297.apply(muts, new Pair<String>(s)))));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(null == Primitives.isNotBottom.apply(funcT) || !Primitives.isNotBottom.apply(funcT) ? null : new Match<TypicalTypes.raw_type<?>>() {
                                  public TypicalTypes.raw_type<?> apply() {
                                    final TypicalTypes.raw_type<?> arg$2258 = Analyzer.cast(funcT);

                                    if ((null == arg$2258)) {
                                      return null;
                                    }
                                    if ((null != arg$2258))
                                                                            switch (arg$2258.tag()) {
                                      case VariableT:
                                        if (TypicalSupport.match$117(arg$2258)) {
                                          return Analyzer.cast(processFunctionApplication.apply(funcT, nl));
                                        }
                                        break;
                                      case FunctionT:
                                        if (TypicalSupport.match$97(arg$2258)) {
                                          return Analyzer.cast(processFunctionApplication.apply(copy.apply(funcT), nl));
                                        }
                                        break;
                                      default:
                                        break;
                                      };
                                    if ((null == arg$2258)) {
                                      return Analyzer.cast(null);
                                    }
                                    if (true) {
                                      return Analyzer.cast(error(Primitives.concat.apply("expected function type, found ", getTypeName.apply(funcT)), null));
                                    }
                                    return null;
                                  }
                                }.apply());
                              }
                            }.apply());
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply());
                }
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2266);
            }
            return Analyzer.cast(retValue$2266);
          }
          if (TypicalSupport.match$2267(arg$125)) {
            final Node pat = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node e = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2272 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> left;
              final TypicalTypes.raw_type<?> right;

              {
                left = Analyzer.cast(analyze.apply(pat));
                right = Analyzer.cast(analyze.apply(e));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == right)) {
                      return null;
                    }
                    if ((null == left)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2269 = unify.apply(left, right);

                    if ((null == result$2269)) {
                      return Analyzer.cast(error("types of the pattern and the expression do not match", null));
                    }
                    return result$2269;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(boolt);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2272);
            }
            return Analyzer.cast(retValue$2272);
          }
          if (TypicalSupport.match$2273(arg$125)) {
            final Node pat = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2276 = Analyzer.cast(analyze.apply(pat));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2276);
            }
            return Analyzer.cast(retValue$2276);
          }
          if (TypicalSupport.match$49(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2378 = Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Node arg$2327 = GNode.cast(n);

                if ((null == arg$2327)) {
                  return null;
                }
                if (TypicalSupport.match$9(arg$2327)) {
                  final String str = (arg$2327.size() > 0 ? arg$2327.getString(0) : null);

                  matching_nodes.add(arg$2327);
                  if ((null != arg$2327 && processScopeNodes.contains(arg$2327.getName()))) {
                    processScope(arg$2327, getScope);
                  }
                  checkEnterScope(arg$2327);

                  final Object retValue$2331 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final String name;

                    {
                      name = Analyzer.cast(null == Primitives.equal.apply("Prelude", str) ? null : Primitives.equal.apply("Prelude", str) ? s : Primitives.concat.apply(Primitives.concat.apply(str, "."), s));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(null == isDefined.apply(GNode.create("Parameter", name, null), getNameSpace) ? null : isDefined.apply(GNode.create("Parameter", name, null), getNameSpace) ? Analyzer.cast(lookup2.apply(GNode.create("Parameter", name, null), getNameSpace)) : error(Primitives.concat.apply(name, " is undefined"), null));
                    }
                  }.apply());

                  checkExitScope(arg$2327);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$2331);
                }
                if (true) {
                  matching_nodes.add(arg$2327);
                  if ((null != arg$2327 && processScopeNodes.contains(arg$2327.getName()))) {
                    processScope(arg$2327, getScope);
                  }
                  checkEnterScope(arg$2327);

                  final Object retValue$2374 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> temp;
                    final TypicalTypes.raw_type<?> tn;
                    final TypicalTypes.raw_type<?> ts;

                    {
                      temp = Analyzer.cast(analyze.apply(n));
                      tn = Analyzer.cast(resolveRecordType.apply(temp));
                      ts = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(Primitives.concat.apply("field ", s), " is undefined"), getNameSpace)));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(null == Primitives.isNotBottom.apply(ts) || !Primitives.isNotBottom.apply(ts) ? null : new Match<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final TypicalTypes.raw_type<?> arg$2352 = Analyzer.cast(tn);

                          if ((null == arg$2352)) {
                            return null;
                          }
                          if ((null != arg$2352))
                                                        switch (arg$2352.tag()) {
                            case VariableT:
                              if (TypicalSupport.match$117(arg$2352)) {
                                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                                  public TypicalTypes.raw_type<?> apply() {
                                    final TypicalTypes.raw_type<?> arg$2368 = Analyzer.cast(ts);

                                    if ((null == arg$2368)) {
                                      return null;
                                    }
                                    if ((null != arg$2368))
                                                                            switch (arg$2368.tag()) {
                                      case FieldT:
                                        if (TypicalSupport.match$96(arg$2368)) {
                                          final String pa = Analyzer.cast(arg$2368.getTuple().get1());

                                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                            final TypicalTypes.raw_type<?> res;

                                            {
                                              res = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", pa), getNameSpace)));
                                              unify.apply(tn, res);
                                            }

                                            public TypicalTypes.raw_type<?> apply() {
                                              return Analyzer.cast(ts);
                                            }
                                          }.apply());
                                        }
                                        break;
                                      default:
                                        break;
                                      };
                                    if (true) {
                                      return Analyzer.cast(null);
                                    }
                                    return null;
                                  }
                                }.apply());
                              }
                              break;
                            case RecordT:
                              if (TypicalSupport.match$107(arg$2352)) {
                                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                                  public TypicalTypes.raw_type<?> apply() {
                                    final TypicalTypes.raw_type<?> arg$2359 = Analyzer.cast(ts);

                                    if ((null == arg$2359)) {
                                      return null;
                                    }
                                    if ((null != arg$2359))
                                                                            switch (arg$2359.tag()) {
                                      case FieldT:
                                        if (TypicalSupport.match$96(arg$2359)) {
                                          final String pa = Analyzer.cast(arg$2359.getTuple().get1());

                                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                            final TypicalTypes.raw_type<?> res;
                                            final TypicalTypes.raw_type<?> tem;

                                            {
                                              res = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", pa), getNameSpace)));
                                              tem = Analyzer.cast(unify.apply(tn, res));
                                            }

                                            public TypicalTypes.raw_type<?> apply() {
                                              return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                                public TypicalTypes.raw_type<?> apply() {
                                                  final Boolean var$2362 = Primitives.isNotBottom.apply(tem);

                                                  if ((null != var$2362 && !var$2362)) {
                                                    showMessage("error", Primitives.concat.apply(Primitives.concat.apply(getTypeName.apply(tn), " does not contain the field "), s), null);
                                                  }
                                                  if ((null == var$2362)) {
                                                    return null;
                                                  }
                                                  if (var$2362) {
                                                    return ts;
                                                  }
                                                  return null;
                                                }
                                              }.apply());
                                            }
                                          }.apply());
                                        }
                                        break;
                                      default:
                                        break;
                                      };
                                    if (true) {
                                      return Analyzer.cast(null);
                                    }
                                    return null;
                                  }
                                }.apply());
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(error(Primitives.concat.apply("expected record, found ", getTypeName.apply(tn)), null));
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply());

                  checkExitScope(arg$2327);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$2374);
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2378);
            }
            return Analyzer.cast(retValue$2378);
          }
          if (TypicalSupport.match$2379(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2384 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }
                    if ((null == t)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2381 = unify.apply(t, boolt);

                    if ((null == result$2381)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(t)), null));
                    }
                    return result$2381;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2384);
            }
            return Analyzer.cast(retValue$2384);
          }
          if (TypicalSupport.match$83(arg$125)) {
            final Node n1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node n2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2389 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<Node> nl;
              final Pair<TypicalTypes.entry> enList;

              {
                nl = Analyzer.cast(getNodeList.apply(n1));
                enList = Analyzer.cast(analyzeBindings.apply(nl, Pair.<TypicalTypes.entry>empty()));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$2386.apply(Primitives.isBottom, enList)) || !Primitives.not.apply(TypicalSupport.exists$2386.apply(Primitives.isBottom, enList)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> res;
                  final Pair<String> strList;

                  {
                    res = Analyzer.cast(analyzeExpression.apply(n2, enList));
                    strList = Analyzer.cast(getNames.apply(enList));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isNotBottom.apply(res) || !Primitives.isNotBottom.apply(res) ? null : new Let<TypicalTypes.raw_type<?>>() {
                      {
                        checkUnusedVariables.apply(strList, n2);
                        Primitives.annotate.apply(no, "variables", new TypicalTypes.StringList(strList));
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(res);
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2389);
            }
            return Analyzer.cast(retValue$2389);
          }
          if (TypicalSupport.match$2390(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2399 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$2394 = Analyzer.cast(t);

                    if ((null == arg$2394)) {
                      return null;
                    }
                    if ((null != arg$2394))
                                            switch (arg$2394.tag()) {
                      case PairOfType:
                        if (TypicalSupport.match$116(arg$2394)) {
                          final TypicalTypes.raw_type<?> tl = Analyzer.cast(arg$2394.getTuple().get1());
                          final TypicalTypes.raw_type<?> ret = Analyzer.cast(arg$2394.getTuple().get2());

                          return Analyzer.cast(new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(tl), ret));
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2399);
            }
            return Analyzer.cast(retValue$2399);
          }
          if (TypicalSupport.match$2400(arg$125)) {
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2404 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Node last;
              final TypicalTypes.raw_type<?> te;

              {
                last = Analyzer.cast(TypicalSupport.nth$2401.apply(l, Primitives.subtractInt.apply(Primitives.length.apply(l), BigInteger.valueOf(1))));
                te = Analyzer.cast(analyze.apply(last));
                TypicalSupport.map$129.apply(analyze, removeLast.apply(l));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(te);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2404);
            }
            return Analyzer.cast(retValue$2404);
          }
          if (TypicalSupport.match$2405(arg$125)) {
            final Node e = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node ne = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);
            final Node atNode = (arg$125.size() > 3 ? arg$125.getGeneric(3) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2414 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> te;
              final TypicalTypes.raw_type<?> tne;

              {
                te = Analyzer.cast(analyze.apply(e));
                tne = Analyzer.cast(analyze.apply(ne));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }
                    if ((null == te)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2410 = unify.apply(te, boolt);

                    if ((null == result$2410)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(te)), e));
                    }
                    return result$2410;
                  }
                }.apply();
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == strt)) {
                      return null;
                    }
                    if ((null == tne)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2411 = unify.apply(tne, strt);

                    if ((null == result$2411)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(tne)), ne));
                    }
                    return result$2411;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isBottom.apply(atNode) ? null : Primitives.isBottom.apply(atNode) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final String s;
                  final TypicalTypes.raw_type<?> ts;

                  {
                    s = Analyzer.cast(getString.apply(atNode));
                    ts = Analyzer.cast(Analyzer.cast(lookup4.apply(atNode, "error", Primitives.concat.apply(s, " is undefined"), getNameSpace)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Guard<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        if ((null == ts)) {
                          return null;
                        }
                        if ((null == ensureNodeType)) {
                          return null;
                        }

                        final TypicalTypes.raw_type<?> result$2409 = ensureNodeType.apply(ts);

                        if ((null == result$2409)) {
                          return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(ts)), null));
                        }
                        return result$2409;
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2414);
            }
            return Analyzer.cast(retValue$2414);
          }
          if (TypicalSupport.match$2415(arg$125)) {
            final Node n1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node n2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2418 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              {
                analyze.apply(n2);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(analyze.apply(n1));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2418);
            }
            return Analyzer.cast(retValue$2418);
          }
          if (TypicalSupport.match$692(arg$125)) {
            final Node e = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);
            final Node n = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2426 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(analyze.apply(e));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == strt)) {
                      return null;
                    }
                    if ((null == t)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2423 = unify.apply(t, strt);

                    if ((null == result$2423)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t)), e));
                    }
                    return result$2423;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isBottom.apply(n) ? null : Primitives.isBottom.apply(n) ? new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE) : new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> tn;

                  {
                    tn = Analyzer.cast(analyze.apply(n));
                    new Guard<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        if ((null == ensureNodeType)) {
                          return null;
                        }
                        if ((null == tn)) {
                          return null;
                        }

                        final TypicalTypes.raw_type<?> result$2422 = ensureNodeType.apply(tn);

                        if ((null == result$2422)) {
                          return Analyzer.cast(error(Primitives.concat.apply("expected node, found ", getTypeName.apply(tn)), null));
                        }
                        return result$2422;
                      }
                    }.apply();
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2426);
            }
            return Analyzer.cast(retValue$2426);
          }
          if (TypicalSupport.match$2427(arg$125)) {
            final Node e1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node e2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2434 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t1;
              final TypicalTypes.raw_type<?> t2;

              {
                t1 = Analyzer.cast(analyze.apply(e1));
                t2 = Analyzer.cast(analyze.apply(e2));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == t1)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2430 = unify.apply(t1, boolt);

                    if ((null == result$2430)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(t1)), e1));
                    }
                    return result$2430;
                  }
                }.apply();
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == strt)) {
                      return null;
                    }
                    if ((null == t2)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2431 = unify.apply(t2, strt);

                    if ((null == result$2431)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected string, found ", getTypeName.apply(t2)), e1));
                    }
                    return result$2431;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2434);
            }
            return Analyzer.cast(retValue$2434);
          }
          if (TypicalSupport.match$9(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 1, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2508 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> ty;

              {
                ty = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(Primitives.concat.apply("constructor ", s), " is undefined"), getNameSpace)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(ty) || !Primitives.isNotBottom.apply(ty) ? null : new Let<TypicalTypes.raw_type<?>>() {
                  final String p;
                  final TypicalTypes.raw_type<?> t;

                  {
                    p = Analyzer.cast(getParent.apply(ty));
                    t = Analyzer.cast(null == Primitives.not.apply(hasTypeVariables.apply(p)) ? null : Primitives.not.apply(hasTypeVariables.apply(p)) ? ty : copy.apply(ty));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final Pair<Node> arg$2471 = Analyzer.cast(nl);

                        if ((null == arg$2471)) {
                          return null;
                        }
                        if (TypicalSupport.match$323(arg$2471)) {
                          return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final TypicalTypes.raw_type<?> arg$2476 = Analyzer.cast(t);

                              if ((null == arg$2476)) {
                                return null;
                              }
                              if ((null != arg$2476))
                                                                switch (arg$2476.tag()) {
                                case ConstructorT:
                                  if (TypicalSupport.match$94(arg$2476)) {
                                    final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$2476.getTuple().get3());

                                    return Analyzer.cast(null == Primitives.isBottom.apply(ty) ? null : Primitives.isBottom.apply(ty) ? t : error(Primitives.concat.apply(Primitives.concat.apply("contructor ", s), " does not have enough children"), null));
                                  }
                                  break;
                                default:
                                  break;
                                };
                              if (true) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected constructor type, found ", getTypeName.apply(t)), null));
                              }
                              return null;
                            }
                          }.apply());
                        }
                        if (true) {
                          return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final TypicalTypes.raw_type<?> arg$2492 = Analyzer.cast(t);

                              if ((null == arg$2492)) {
                                return null;
                              }
                              if ((null != arg$2492))
                                                                switch (arg$2492.tag()) {
                                case ConstructorT:
                                  if (TypicalSupport.match$94(arg$2492)) {
                                    final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$2492.getTuple().get3());

                                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                                      public TypicalTypes.raw_type<?> apply() {
                                        final TypicalTypes.raw_type<?> arg$2499 = Analyzer.cast(ty);

                                        if ((null == arg$2499)) {
                                          return null;
                                        }
                                        if ((null != arg$2499))
                                                                                    switch (arg$2499.tag()) {
                                          case TupleT:
                                            if (TypicalSupport.match$114(arg$2499)) {
                                              final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$2499.getTuple().get1());

                                              return Analyzer.cast(null == Primitives.lessInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? null : Primitives.lessInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), "does not have enough children"), null) : null == Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? error(Primitives.concat.apply(Primitives.concat.apply("constructor ", s), "has too many children"), null) : processArguments.apply(nl, tl, t));
                                            }
                                            break;
                                          default:
                                            break;
                                          };
                                        if (true) {
                                          return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                            public TypicalTypes.raw_type<?> apply() {
                                              final Boolean var$2502 = Primitives.equal.apply(Primitives.length.apply(nl), BigInteger.valueOf(1));

                                              if ((null != var$2502 && !var$2502)) {
                                                showMessage("error", Primitives.concat.apply(s, " must have only one child"), null);
                                              }
                                              if ((null == var$2502)) {
                                                return null;
                                              }
                                              if (var$2502) {
                                                return processArguments.apply(nl, new Pair<TypicalTypes.raw_type<?>>(ty), t);
                                              }
                                              return null;
                                            }
                                          }.apply());
                                        }
                                        return null;
                                      }
                                    }.apply());
                                  }
                                  break;
                                default:
                                  break;
                                };
                              if (true) {
                                return Analyzer.cast(error(Primitives.concat.apply("expected constructor type, found ", getTypeName.apply(t)), null));
                              }
                              return null;
                            }
                          }.apply());
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2508);
            }
            return Analyzer.cast(retValue$2508);
          }
          if (TypicalSupport.match$2509(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2776 = Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Pair<Node> arg$2642 = Analyzer.cast(nl);

                if ((null == arg$2642)) {
                  return null;
                }
                if (TypicalSupport.match$323(arg$2642)) {
                  return Analyzer.cast(error("empty record expression", null));
                }
                if (true) {
                  final Pair<Node> list$2644 = Analyzer.cast(Analyzer.cast(arg$2642));
                  final Node x = GNode.cast(Primitives.wrapHead(list$2644));
                  final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$2644));

                  return Analyzer.cast(null == Primitives.isBottom.apply(x) ? null : Primitives.isBottom.apply(x) ? new Let<TypicalTypes.raw_type<?>>() {
                    final Pair<Node> tai;
                    final Node hea;
                    final TypicalTypes.raw_type<?> tx;

                    {
                      tai = Analyzer.cast(TypicalSupport.tail$278.apply(TypicalSupport.tail$278.apply(nl)));
                      hea = Analyzer.cast(TypicalSupport.head$279.apply(TypicalSupport.tail$278.apply(nl)));
                      tx = Analyzer.cast(analyze.apply(hea));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final TypicalTypes.raw_type<?> arg$2709 = Analyzer.cast(tx);

                          if ((null == arg$2709)) {
                            return null;
                          }
                          if ((null != arg$2709))
                                                        switch (arg$2709.tag()) {
                            case FieldT:
                              if (TypicalSupport.match$96(arg$2709)) {
                                final String s = Analyzer.cast(arg$2709.getTuple().get1());

                                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                  final Pair<TypicalTypes.raw_type<?>> tl;

                                  {
                                    Primitives.annotateList.apply(tai, "parent", new TypicalTypes.StringName(s));
                                    tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, tai));
                                  }

                                  public TypicalTypes.raw_type<?> apply() {
                                    return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                                      final TypicalTypes.raw_type<?> recT;

                                      {
                                        recT = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                                      }

                                      public TypicalTypes.raw_type<?> apply() {
                                        return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                                          public TypicalTypes.raw_type<?> apply() {
                                            final TypicalTypes.raw_type<?> arg$2716 = Analyzer.cast(recT);

                                            if ((null == arg$2716)) {
                                              return null;
                                            }
                                            if ((null != arg$2716))
                                                                                            switch (arg$2716.tag()) {
                                              case RecordT:
                                                if (TypicalSupport.match$107(arg$2716)) {
                                                  final Pair<TypicalTypes.raw_type<?>> rectl = Analyzer.cast(arg$2716.getTuple().get1());

                                                  return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                                    public TypicalTypes.raw_type<?> apply() {
                                                      final Boolean var$2719 = Primitives.equal.apply(Primitives.length.apply(rectl), Primitives.addInt.apply(Primitives.length.apply(tl), BigInteger.valueOf(1)));

                                                      if ((null != var$2719 && !var$2719)) {
                                                        showMessage("error", Primitives.concat.apply(s, " does not have enough fields"), no);
                                                      }
                                                      if ((null == var$2719)) {
                                                        return null;
                                                      }
                                                      if (var$2719) {
                                                        return new TypicalTypes.RecordT(Primitives.wrapCons(tx, tl));
                                                      }
                                                      return null;
                                                    }
                                                  }.apply());
                                                }
                                                break;
                                              default:
                                                break;
                                              };
                                            if (true) {
                                              return Analyzer.cast(null);
                                            }
                                            return null;
                                          }
                                        }.apply());
                                      }
                                    }.apply());
                                  }
                                }.apply());
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(null);
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply() : new Match<TypicalTypes.raw_type<?>>() {
                    public TypicalTypes.raw_type<?> apply() {
                      final Node arg$2722 = GNode.cast(x);

                      if ((null == arg$2722)) {
                        return null;
                      }
                      if (TypicalSupport.match$2527(arg$2722)) {
                        matching_nodes.add(arg$2722);
                        if ((null != arg$2722 && processScopeNodes.contains(arg$2722.getName()))) {
                          processScope(arg$2722, getScope);
                        }
                        checkEnterScope(arg$2722);

                        final Object retValue$2732 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                          final Pair<Node> tai;
                          final Node hea;
                          final TypicalTypes.raw_type<?> tx;

                          {
                            tai = Analyzer.cast(TypicalSupport.tail$278.apply(TypicalSupport.tail$278.apply(nl)));
                            hea = Analyzer.cast(TypicalSupport.head$279.apply(TypicalSupport.tail$278.apply(nl)));
                            tx = Analyzer.cast(analyze.apply(hea));
                          }

                          public TypicalTypes.raw_type<?> apply() {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final TypicalTypes.raw_type<?> arg$2727 = Analyzer.cast(tx);

                                if ((null == arg$2727)) {
                                  return null;
                                }
                                if ((null != arg$2727))
                                                                    switch (arg$2727.tag()) {
                                  case FieldT:
                                    if (TypicalSupport.match$96(arg$2727)) {
                                      final String s = Analyzer.cast(arg$2727.getTuple().get1());

                                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                        final Pair<TypicalTypes.raw_type<?>> tl;

                                        {
                                          Primitives.annotateList.apply(tai, "parent", new TypicalTypes.StringName(s));
                                          tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, tai));
                                        }

                                        public TypicalTypes.raw_type<?> apply() {
                                          return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                                        }
                                      }.apply());
                                    }
                                    break;
                                  default:
                                    break;
                                  };
                                if (true) {
                                  return Analyzer.cast(null);
                                }
                                return null;
                              }
                            }.apply());
                          }
                        }.apply());

                        checkExitScope(arg$2722);
                        matching_nodes.remove(matching_nodes.size() - 1);
                        return Analyzer.cast(retValue$2732);
                      }
                      if (TypicalSupport.match$2537(arg$2722)) {
                        final Node e = (arg$2722.size() > 0 ? arg$2722.getGeneric(0) : null);

                        matching_nodes.add(arg$2722);
                        if ((null != arg$2722 && processScopeNodes.contains(arg$2722.getName()))) {
                          processScope(arg$2722, getScope);
                        }
                        checkEnterScope(arg$2722);

                        final Object retValue$2768 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                          final TypicalTypes.raw_type<?> tx;

                          {
                            tx = Analyzer.cast(resolveRecordType.apply(analyze.apply(e)));
                          }

                          public TypicalTypes.raw_type<?> apply() {
                            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                              public TypicalTypes.raw_type<?> apply() {
                                final TypicalTypes.raw_type<?> arg$2750 = Analyzer.cast(tx);

                                if ((null == arg$2750)) {
                                  return null;
                                }
                                if ((null != arg$2750))
                                                                    switch (arg$2750.tag()) {
                                  case VariableT:
                                    if (TypicalSupport.match$117(arg$2750)) {
                                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                        final TypicalTypes.raw_type<?> ht;

                                        {
                                          ht = Analyzer.cast(analyze.apply(TypicalSupport.head$279.apply(xs)));
                                        }

                                        public TypicalTypes.raw_type<?> apply() {
                                          return Analyzer.cast(null == Primitives.isNotBottom.apply(ht) ? null : Primitives.isNotBottom.apply(ht) ? new Match<TypicalTypes.raw_type<?>>() {
                                            public TypicalTypes.raw_type<?> apply() {
                                              final TypicalTypes.raw_type<?> arg$2762 = Analyzer.cast(ht);

                                              if ((null == arg$2762)) {
                                                return null;
                                              }
                                              if ((null != arg$2762))
                                                                                                switch (arg$2762.tag()) {
                                                case FieldT:
                                                  if (TypicalSupport.match$96(arg$2762)) {
                                                    final String s = Analyzer.cast(arg$2762.getTuple().get1());

                                                    return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                                      final Pair<TypicalTypes.raw_type<?>> tl;

                                                      {
                                                        Primitives.annotateList.apply(TypicalSupport.tail$278.apply(xs), "parent", new TypicalTypes.StringName(s));
                                                        tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, TypicalSupport.tail$278.apply(xs)));
                                                      }

                                                      public TypicalTypes.raw_type<?> apply() {
                                                        return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                                                          final TypicalTypes.raw_type<?> recT;

                                                          {
                                                            recT = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                                                          }

                                                          public TypicalTypes.raw_type<?> apply() {
                                                            return Analyzer.cast(unify.apply(recT, tx));
                                                          }
                                                        }.apply());
                                                      }
                                                    }.apply());
                                                  }
                                                  break;
                                                default:
                                                  break;
                                                };
                                              if (true) {
                                                return Analyzer.cast(null);
                                              }
                                              return null;
                                            }
                                          }.apply() : null);
                                        }
                                      }.apply());
                                    }
                                    break;
                                  case RecordT:
                                    if (TypicalSupport.match$107(arg$2750)) {
                                      final Pair<TypicalTypes.raw_type<?>> rectl = Analyzer.cast(arg$2750.getTuple().get1());

                                      return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                        final TypicalTypes.raw_type<?> field;

                                        {
                                          field = Analyzer.cast(TypicalSupport.head$98.apply(rectl));
                                        }

                                        public TypicalTypes.raw_type<?> apply() {
                                          return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                                            public TypicalTypes.raw_type<?> apply() {
                                              final TypicalTypes.raw_type<?> arg$2755 = Analyzer.cast(field);

                                              if ((null == arg$2755)) {
                                                return null;
                                              }
                                              if ((null != arg$2755))
                                                                                                switch (arg$2755.tag()) {
                                                case FieldT:
                                                  if (TypicalSupport.match$96(arg$2755)) {
                                                    final String s = Analyzer.cast(arg$2755.getTuple().get1());

                                                    return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                                                      final Pair<TypicalTypes.raw_type<?>> tl;

                                                      {
                                                        Primitives.annotateList.apply(xs, "parent", new TypicalTypes.StringName(s));
                                                        tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, xs));
                                                      }

                                                      public TypicalTypes.raw_type<?> apply() {
                                                        return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : tx);
                                                      }
                                                    }.apply());
                                                  }
                                                  break;
                                                default:
                                                  break;
                                                };
                                              if (true) {
                                                return Analyzer.cast(null);
                                              }
                                              return null;
                                            }
                                          }.apply());
                                        }
                                      }.apply());
                                    }
                                    break;
                                  default:
                                    break;
                                  };
                                if (true) {
                                  return Analyzer.cast(error(Primitives.concat.apply("expected record type, found ", getTypeName.apply(tx)), null));
                                }
                                return null;
                              }
                            }.apply());
                          }
                        }.apply());

                        checkExitScope(arg$2722);
                        matching_nodes.remove(matching_nodes.size() - 1);
                        return Analyzer.cast(retValue$2768);
                      }
                      if (true) {
                        matching_nodes.add(arg$2722);
                        if ((null != arg$2722 && processScopeNodes.contains(arg$2722.getName()))) {
                          processScope(arg$2722, getScope);
                        }
                        checkEnterScope(arg$2722);

                        final Object retValue$2771 = Analyzer.cast(null);

                        checkExitScope(arg$2722);
                        matching_nodes.remove(matching_nodes.size() - 1);
                        return Analyzer.cast(retValue$2771);
                      }
                      return null;
                    }
                  }.apply());
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2776);
            }
            return Analyzer.cast(retValue$2776);
          }
          if (TypicalSupport.match$45(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);
            final Node p = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2794 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(Primitives.concat.apply("field ", s), " is undefined"), getNameSpace)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$2785 = Analyzer.cast(t);

                    if ((null == arg$2785)) {
                      return null;
                    }
                    if ((null != arg$2785))
                                            switch (arg$2785.tag()) {
                      case FieldT:
                        if (TypicalSupport.match$96(arg$2785)) {
                          final String str = Analyzer.cast(arg$2785.getTuple().get1());

                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                            final String ps;

                            {
                              ps = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "parent") ? null : Primitives.hasAnnotation.apply(no, "parent") ? new Let<String>() {
                                final String stri;

                                {
                                  stri = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                                }

                                public String apply() {
                                  return Analyzer.cast(stri);
                                }
                              }.apply() : str);
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                                public TypicalTypes.raw_type<?> apply() {
                                  final Boolean var$2790 = Primitives.equal.apply(ps, str);

                                  if ((null != var$2790 && !var$2790)) {
                                    showMessage("error", Primitives.concat.apply(Primitives.concat.apply(ps, " does not contain the field "), s), null);
                                  }
                                  if ((null == var$2790)) {
                                    return null;
                                  }
                                  if (var$2790) {
                                    return new Let<TypicalTypes.raw_type<?>>() {
                                      final TypicalTypes.raw_type<?> tp;

                                      {
                                        tp = Analyzer.cast(analyze.apply(p));
                                        new Guard<TypicalTypes.raw_type<?>>() {
                                          public TypicalTypes.raw_type<?> apply() {
                                            if ((null == unify)) {
                                              return null;
                                            }
                                            if ((null == t)) {
                                              return null;
                                            }
                                            if ((null == tp)) {
                                              return null;
                                            }

                                            final TypicalTypes.raw_type<?> result$2789 = unify.apply(t, tp);

                                            if ((null == result$2789)) {
                                              return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply("type of field ", s), " must be "), getTypeName.apply(t)), ", found "), getTypeName.apply(tp)), null));
                                            }
                                            return result$2789;
                                          }
                                        }.apply();
                                      }

                                      public TypicalTypes.raw_type<?> apply() {
                                        return Analyzer.cast(t);
                                      }
                                    }.apply();
                                  }
                                  return null;
                                }
                              }.apply());
                            }
                          }.apply());
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2794);
            }
            return Analyzer.cast(retValue$2794);
          }
          if (TypicalSupport.match$2795(arg$125)) {
            final Node e1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node e2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2800 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t1;
              final TypicalTypes.raw_type<?> t2;

              {
                t1 = Analyzer.cast(analyze.apply(e1));
                t2 = Analyzer.cast(analyze.apply(e2));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == t1)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2797 = unify.apply(t1, boolt);

                    if ((null == result$2797)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(t1)), null));
                    }
                    return result$2797;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(t2);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2800);
            }
            return Analyzer.cast(retValue$2800);
          }
          if (TypicalSupport.match$2801(arg$125)) {
            final Node e1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node e2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);
            final Node e3 = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2808 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t1;
              final TypicalTypes.raw_type<?> t2;
              final TypicalTypes.raw_type<?> t3;

              {
                t1 = Analyzer.cast(analyze.apply(e1));
                t2 = Analyzer.cast(analyze.apply(e2));
                t3 = Analyzer.cast(analyze.apply(e3));
                new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == t1)) {
                      return null;
                    }
                    if ((null == boolt)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2805 = unify.apply(t1, boolt);

                    if ((null == result$2805)) {
                      return Analyzer.cast(error(Primitives.concat.apply("expected boolean, found ", getTypeName.apply(t1)), null));
                    }
                    return result$2805;
                  }
                }.apply();
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Guard<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    if ((null == unify)) {
                      return null;
                    }
                    if ((null == t3)) {
                      return null;
                    }
                    if ((null == t2)) {
                      return null;
                    }

                    final TypicalTypes.raw_type<?> result$2804 = unify.apply(t2, t3);

                    if ((null == result$2804)) {
                      return Analyzer.cast(error("types of if and else expressions do not match", null));
                    }
                    return result$2804;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2808);
            }
            return Analyzer.cast(retValue$2808);
          }
          if (TypicalSupport.match$2809(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2827 = Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Pair<Node> arg$2818 = Analyzer.cast(nl);

                if ((null == arg$2818)) {
                  return null;
                }
                if (TypicalSupport.match$323(arg$2818)) {
                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> varT;

                    {
                      varT = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(varT), "list"));
                    }
                  }.apply());
                }
                if (true) {
                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final Pair<TypicalTypes.raw_type<?>> tl;

                    {
                      tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(null == Primitives.isNotBottom.apply(ancestor.apply(TypicalSupport.nodeMatch$2813)) ? null : Primitives.isNotBottom.apply(ancestor.apply(TypicalSupport.nodeMatch$2813)) ? new Let<TypicalTypes.raw_type<?>>() {
                        final TypicalTypes.raw_type<?> res;

                        {
                          res = Analyzer.cast(checkNodeList.apply(tl));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(null == Primitives.isBottom.apply(res) ? null : Primitives.isBottom.apply(res) ? null : new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(nodet), "list"));
                        }
                      }.apply() : null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                        final TypicalTypes.raw_type<?> res;

                        {
                          res = Analyzer.cast(TypicalSupport.foldl$222.apply(unify, tl, wildt));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              final Boolean var$2823 = Primitives.isNotBottom.apply(res);

                              if ((null != var$2823 && !var$2823)) {
                                showMessage("error", "types do not match in list literal", null);
                              }
                              if ((null == var$2823)) {
                                return null;
                              }
                              if (var$2823) {
                                return new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(res), "list");
                              }
                              return null;
                            }
                          }.apply());
                        }
                      }.apply());
                    }
                  }.apply());
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2827);
            }
            return Analyzer.cast(retValue$2827);
          }
          if (TypicalSupport.match$2828(arg$125)) {
            final Node ops = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node lit = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);
            final Node pat = (arg$125.size() > 2 ? arg$125.getGeneric(2) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2837 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<String> opList;
              final TypicalTypes.raw_type<?> nodeL;
              final TypicalTypes.raw_type<?> tpat;

              {
                analyze.apply(ops);
                opList = Analyzer.cast(getStringList.apply(ops));
                analyze.apply(lit);
                Primitives.annotate.apply(pat, "is_reduce", wildt);
                Primitives.annotate.apply(pat, "non_exhaustive", wildt);
                nodeL = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(nodet), "list"));
                tpat = Analyzer.cast(analyze.apply(pat));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$2832 = Analyzer.cast(tpat);

                    if ((null == arg$2832)) {
                      return null;
                    }
                    if ((null != arg$2832))
                                            switch (arg$2832.tag()) {
                      case PairOfType:
                        if (TypicalSupport.match$116(arg$2832)) {
                          final TypicalTypes.raw_type<?> right = Analyzer.cast(arg$2832.getTuple().get2());

                          return Analyzer.cast(null == Primitives.contains.apply("list", opList) ? null : Primitives.contains.apply("list", opList) ? new Let<TypicalTypes.raw_type<?>>() {
                            final TypicalTypes.raw_type<?> rightL;

                            {
                              rightL = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(right), "list"));
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodeL), rightL));
                            }
                          }.apply() : new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodeL), right));
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2837);
            }
            return Analyzer.cast(retValue$2837);
          }
          if (TypicalSupport.match$2838(arg$125)) {
            final Pair<String> sl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2841 = Analyzer.cast(null == Primitives.and.apply(Primitives.contains.apply("list", sl), Primitives.contains.apply("singleton", sl)) ? null : Primitives.and.apply(Primitives.contains.apply("list", sl), Primitives.contains.apply("singleton", sl)) ? error("'list' and 'singleton' are not compatible", null) : null == Primitives.and.apply(Primitives.contains.apply("list", sl), Primitives.contains.apply("set", sl)) ? null : Primitives.and.apply(Primitives.contains.apply("list", sl), Primitives.contains.apply("set", sl)) ? error("'list' and 'set' are not compatible", null) : null == Primitives.and.apply(Primitives.contains.apply("singleton", sl), Primitives.contains.apply("set", sl)) ? null : Primitives.and.apply(Primitives.contains.apply("singleton", sl), Primitives.contains.apply("set", sl)) ? error("'singleton' and 'set' are not compatible", null) : null == Primitives.and.apply(Primitives.contains.apply("required", sl), Primitives.contains.apply("optional", sl)) ? null : Primitives.and.apply(Primitives.contains.apply("required", sl), Primitives.contains.apply("optional", sl)) ? error("'required' and 'optional' are not compatible", null) : new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(strt), "list"));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2841);
            }
            return Analyzer.cast(retValue$2841);
          }
          if (TypicalSupport.match$61(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2845 = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(s, " is undefined"), getNameSpace)));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2845);
            }
            return Analyzer.cast(retValue$2845);
          }
          if (TypicalSupport.match$1(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2849 = Analyzer.cast(Analyzer.cast(lookup4.apply(no, "error", Primitives.concat.apply(s, " is undefined"), getNameSpace)));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2849);
            }
            return Analyzer.cast(retValue$2849);
          }
          if (TypicalSupport.match$29(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2855 = Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Boolean var$2852 = isDefined.apply(no, getNameSpace);

                if ((null != var$2852 && !var$2852)) {
                  showMessage("error", Primitives.concat.apply(Primitives.concat.apply("type ", s), " is undefined"), null);
                }
                if ((null == var$2852)) {
                  return null;
                }
                if (var$2852) {
                  return new TypicalTypes.TypeName(s);
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2855);
            }
            return Analyzer.cast(retValue$2855);
          }
          if (TypicalSupport.match$2856(arg$125)) {
            final String s = (arg$125.size() > 0 ? arg$125.getString(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2859 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<String> vars;

              {
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.or.apply(Primitives.isBottom.apply(vars), Primitives.not.apply(Primitives.contains.apply(s, vars))) ? null : Primitives.or.apply(Primitives.isBottom.apply(vars), Primitives.not.apply(Primitives.contains.apply(s, vars))) ? error(Primitives.concat.apply(Primitives.concat.apply("type variable ", s), " is undefined"), null) : new TypicalTypes.VariableT(s, Boolean.TRUE));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2859);
            }
            return Analyzer.cast(retValue$2859);
          }
          if (TypicalSupport.match$2860(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2863 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String s;

              {
                s = Analyzer.cast(getString.apply(n));
                Analyzer.cast(Primitives.put.apply(s, nodet, hashTable));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(nodet);
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2863);
            }
            return Analyzer.cast(retValue$2863);
          }
          if (TypicalSupport.match$2864(arg$125)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2867 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == reachableFromNode.apply(str) ? null : reachableFromNode.apply(str) ? new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<TypicalTypes.raw_type<?>> tl;

                  {
                    tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? new TypicalTypes.PolyVariantT(tl) : null);
                  }
                }.apply() : error("polymorphic variant is not allowed outside node closure", null));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2867);
            }
            return Analyzer.cast(retValue$2867);
          }
          if (TypicalSupport.match$2868(arg$125)) {
            final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$125, 0, arg$125.size()));

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2871 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;
              final Pair<String> vars;
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotateList.apply(l, "type_variables", new TypicalTypes.StringList(vars)));
                Primitives.annotateList.apply(l, "parent", new TypicalTypes.StringName(str));
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, l));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new TypicalTypes.TupleT(tl));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2871);
            }
            return Analyzer.cast(retValue$2871);
          }
          if (TypicalSupport.match$25(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2883 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;
              final Pair<String> vars;
              final TypicalTypes.raw_type<?> t;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotate.apply(n, "type_variables", new TypicalTypes.StringList(vars)));
                Primitives.annotate.apply(n, "parent", new TypicalTypes.StringName(str));
                t = Analyzer.cast(analyze.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final String arg$2877 = Analyzer.cast(s);

                    if ((null == arg$2877)) {
                      return null;
                    }
                    if ((null != "list" && "list".equals(arg$2877))) {
                      return Analyzer.cast(null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(t), s));
                    }
                    if ((null != "var" && "var".equals(arg$2877))) {
                      return Analyzer.cast(null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(t), s));
                    }
                    if ((null != "opt" && "opt".equals(arg$2877))) {
                      return Analyzer.cast(t);
                    }
                    if (true) {
                      return Analyzer.cast(new Require<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          final Boolean var$2879 = isDefined.apply(no, getNameSpace);

                          if ((null != var$2879 && !var$2879)) {
                            showMessage("error", Primitives.concat.apply(Primitives.concat.apply("type ", s), " is undefined"), null);
                          }
                          if ((null == var$2879)) {
                            return null;
                          }
                          if (var$2879) {
                            return new Let<TypicalTypes.raw_type<?>>() {
                              final Node nod;
                              final Pair<String> var_list;

                              {
                                nod = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace)));
                                var_list = Analyzer.cast(getAnnotatedStringList.apply(nod, "type_variables"));
                              }

                              public TypicalTypes.raw_type<?> apply() {
                                return Analyzer.cast(null == Primitives.isBottom.apply(var_list) ? null : Primitives.isBottom.apply(var_list) ? error(Primitives.concat.apply(s, " is not a constructed type"), null) : null == Primitives.not.apply(Primitives.equal.apply(Primitives.length.apply(var_list), BigInteger.valueOf(1))) ? null : Primitives.not.apply(Primitives.equal.apply(Primitives.length.apply(var_list), BigInteger.valueOf(1))) ? error(Primitives.concat.apply(Primitives.concat.apply("constructed type ", s), " does not have enough type parameters"), null) : null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(t), s));
                              }
                            }.apply();
                          }
                          return null;
                        }
                      }.apply());
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2883);
            }
            return Analyzer.cast(retValue$2883);
          }
          if (TypicalSupport.match$2884(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node tv = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2887 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String s;

              {
                s = Analyzer.cast(getString.apply(tv));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == isDefined.apply(GNode.create("UserDefinedType", s), getNameSpace) ? null : isDefined.apply(GNode.create("UserDefinedType", s), getNameSpace) ? error(Primitives.concat.apply(s, " has been previously defined"), null) : new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;
                  final TypicalTypes.raw_type<?> t;

                  {
                    vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                    Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotate.apply(n, "type_variabls", new TypicalTypes.StringList(vars)));
                    t = Analyzer.cast(analyze.apply(n));
                    redefine.apply(GNode.create("UserDefinedType", s), t, getNameSpace);
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(t);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2887);
            }
            return Analyzer.cast(retValue$2887);
          }
          if (TypicalSupport.match$2888(arg$125)) {
            final Node n1 = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final Node n2 = (arg$125.size() > 1 ? arg$125.getGeneric(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2909 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final Pair<String> vars;
              final Pair<Node> nl;
              final Pair<TypicalTypes.raw_type<?>> tl;
              final TypicalTypes.raw_type<?> ret;

              {
                vars = Analyzer.cast(getAnnotatedStringList.apply(no, "type_variables"));
                nl = Analyzer.cast(new Match<Pair<Node>>() {
                  public Pair<Node> apply() {
                    final Node arg$2898 = GNode.cast(n1);

                    if ((null == arg$2898)) {
                      return null;
                    }
                    if (TypicalSupport.match$2868(arg$2898)) {
                      final Pair<Node> l = Analyzer.cast(Primitives.getChildren(arg$2898, 0, arg$2898.size()));

                      matching_nodes.add(arg$2898);
                      if ((null != arg$2898 && processScopeNodes.contains(arg$2898.getName()))) {
                        processScope(arg$2898, getScope);
                      }
                      checkEnterScope(arg$2898);

                      final Object retValue$2902 = Analyzer.cast(l);

                      checkExitScope(arg$2898);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$2902);
                    }
                    if (true) {
                      matching_nodes.add(arg$2898);
                      if ((null != arg$2898 && processScopeNodes.contains(arg$2898.getName()))) {
                        processScope(arg$2898, getScope);
                      }
                      checkEnterScope(arg$2898);

                      final Object retValue$2905 = Analyzer.cast(new Pair<Node>(n1));

                      checkExitScope(arg$2898);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$2905);
                    }
                    return null;
                  }
                }.apply());
                Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotateList.apply(Primitives.wrapCons(n2, nl), "type_variables", new TypicalTypes.StringList(vars)));
                tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                ret = Analyzer.cast(analyze.apply(n2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.and.apply(Primitives.isNotBottom.apply(ret), Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl))) || !Primitives.and.apply(Primitives.isNotBottom.apply(ret), Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl))) ? null : new TypicalTypes.FunctionT(tl, ret));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2909);
            }
            return Analyzer.cast(retValue$2909);
          }
          if (TypicalSupport.match$2910(arg$125)) {
            final Node n = (arg$125.size() > 0 ? arg$125.getGeneric(0) : null);
            final String s = (arg$125.size() > 1 ? arg$125.getString(1) : null);

            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2913 = Analyzer.cast(null == Primitives.not.apply(isDefined.apply(GNode.create("UserDefinedType", s), getNameSpace)) ? null : Primitives.not.apply(isDefined.apply(GNode.create("UserDefinedType", s), getNameSpace)) ? error(Primitives.concat.apply(Primitives.concat.apply("type ", s), " is undefined"), null) : new Let<TypicalTypes.raw_type<?>>() {
              final Node nod;
              final Pair<Node> nl;

              {
                nod = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace)));
                nl = Analyzer.cast(getNodeList.apply(n));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.not.apply(Primitives.hasAnnotation.apply(nod, "type_variables")) ? null : Primitives.not.apply(Primitives.hasAnnotation.apply(nod, "type_variables")) ? error(Primitives.concat.apply(s, " is not a contructed type"), null) : new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;
                  final Pair<TypicalTypes.raw_type<?>> tl;

                  {
                    vars = Analyzer.cast(getAnnotatedStringList.apply(nod, "type_variables"));
                    Analyzer.discard(null == Primitives.isNotBottom.apply(vars) || !Primitives.isNotBottom.apply(vars) ? null : Primitives.annotateList.apply(nl, "type_variables", new TypicalTypes.StringList(vars)));
                    tl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.lessInt.apply(Primitives.length.apply(nl), Primitives.length.apply(vars)) ? null : Primitives.lessInt.apply(Primitives.length.apply(nl), Primitives.length.apply(vars)) ? error(Primitives.concat.apply(Primitives.concat.apply("contructed type ", s), " does not have enough type parameters"), null) : null == Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(vars)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(vars)) ? error(Primitives.concat.apply(Primitives.concat.apply("contructed type ", s), " has too many type parameters"), null) : null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tl)) ? null : new TypicalTypes.ConstructedT(tl, s));
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2913);
            }
            return Analyzer.cast(retValue$2913);
          }
          if (TypicalSupport.match$2914(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2917 = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2917);
            }
            return Analyzer.cast(retValue$2917);
          }
          if (TypicalSupport.match$2918(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2921 = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2921);
            }
            return Analyzer.cast(retValue$2921);
          }
          if (TypicalSupport.match$2922(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2925 = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2925);
            }
            return Analyzer.cast(retValue$2925);
          }
          if (TypicalSupport.match$2926(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2929 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final String str;

              {
                str = Analyzer.cast(getAnnotatedString.apply(no, "parent"));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == reachableFromNode.apply(str) ? null : reachableFromNode.apply(str) ? new TypicalTypes.AnyT() : error("any is not allowed outside node closure", null));
              }
            }.apply());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2929);
            }
            return Analyzer.cast(retValue$2929);
          }
          if (TypicalSupport.match$2930(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2933 = Analyzer.cast(strt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2933);
            }
            return Analyzer.cast(retValue$2933);
          }
          if (TypicalSupport.match$2934(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2937 = Analyzer.cast(strt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2937);
            }
            return Analyzer.cast(retValue$2937);
          }
          if (TypicalSupport.match$2938(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2941 = Analyzer.cast(intt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2941);
            }
            return Analyzer.cast(retValue$2941);
          }
          if (TypicalSupport.match$2942(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2945 = Analyzer.cast(intt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2945);
            }
            return Analyzer.cast(retValue$2945);
          }
          if (TypicalSupport.match$2946(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2949 = Analyzer.cast(boolt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2949);
            }
            return Analyzer.cast(retValue$2949);
          }
          if (TypicalSupport.match$2950(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2953 = Analyzer.cast(boolt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2953);
            }
            return Analyzer.cast(retValue$2953);
          }
          if (TypicalSupport.match$2954(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2957 = Analyzer.cast(floatt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2957);
            }
            return Analyzer.cast(retValue$2957);
          }
          if (TypicalSupport.match$2958(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2961 = Analyzer.cast(floatt);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2961);
            }
            return Analyzer.cast(retValue$2961);
          }
          if (TypicalSupport.match$2962(arg$125)) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2965 = Analyzer.cast(new TypicalTypes.Float32T());

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2965);
            }
            return Analyzer.cast(retValue$2965);
          }
          if (true) {
            matching_nodes.add(arg$125);
            if ((null != arg$125 && processScopeNodes.contains(arg$125.getName()))) {
              processScope(arg$125, getScope);
            }
            checkEnterScope(arg$125);

            final Object retValue$2968 = Analyzer.cast(null);

            checkExitScope(arg$125);
            matching_nodes.remove(matching_nodes.size() - 1);
            if ((null != arg$125)) {
              arg$125.setProperty("__type", retValue$2968);
            }
            return Analyzer.cast(retValue$2968);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> unify = new Function.F2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t1, final TypicalTypes.raw_type<?> t2) {
      return (null == Primitives.or.apply(Primitives.isBottom.apply(t1), Primitives.isBottom.apply(t2)) ? null : Primitives.or.apply(Primitives.isBottom.apply(t1), Primitives.isBottom.apply(t2)) ? null : new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> arg$2970 = Analyzer.cast(new Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>(t1, t2));

          if ((null == arg$2970)) {
            return null;
          }
          if (TypicalSupport.match$2971(arg$2970)) {
            return Analyzer.cast(t2);
          }
          if (TypicalSupport.match$2972(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2973(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2974(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2975(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2976(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2977(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2978(arg$2970)) {
            return Analyzer.cast(t1);
          }
          if (TypicalSupport.match$2979(arg$2970)) {
            return Analyzer.cast(new TypicalTypes.AnyT());
          }
          if (TypicalSupport.match$2980(arg$2970)) {
            return Analyzer.cast(new TypicalTypes.AnyT());
          }
          if (TypicalSupport.match$2981(arg$2970)) {
            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> res;

              {
                res = Analyzer.cast(unify.apply(t2, strt));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.or.apply(Primitives.isNotBottom.apply(res), Primitives.isNotBottom.apply(ensureNodeType.apply(t2))) || !Primitives.or.apply(Primitives.isNotBottom.apply(res), Primitives.isNotBottom.apply(ensureNodeType.apply(t2))) ? null : t1);
              }
            }.apply());
          }
          if (TypicalSupport.match$2982(arg$2970)) {
            return Analyzer.cast(unify.apply(t2, t1));
          }
          if (TypicalSupport.match$2983(arg$2970)) {
            return Analyzer.cast(null == Primitives.isNotBottom.apply(ensureNodeType.apply(t2)) || !Primitives.isNotBottom.apply(ensureNodeType.apply(t2)) ? null : t1);
          }
          if (TypicalSupport.match$2984(arg$2970)) {
            return Analyzer.cast(null == Primitives.isNotBottom.apply(ensureNodeType.apply(t1)) || !Primitives.isNotBottom.apply(ensureNodeType.apply(t1)) ? null : t2);
          }
          if (TypicalSupport.match$2985(arg$2970)) {
            final String s1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final String s2 = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(null == Primitives.equal.apply(s1, s2) || !Primitives.equal.apply(s1, s2) ? null : t1);
          }
          if (TypicalSupport.match$2986(arg$2970)) {
            final String s = Analyzer.cast(arg$2970.get1().getTuple().get1());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> res;

              {
                t = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                res = Analyzer.cast(unify.apply(t, t2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(res) || !Primitives.isNotBottom.apply(res) ? null : t1);
              }
            }.apply());
          }
          if (TypicalSupport.match$2987(arg$2970)) {
            return Analyzer.cast(unify.apply(t2, t1));
          }
          if (TypicalSupport.match$2988(arg$2970)) {
            final String str1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final String str2 = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(null == Primitives.equal.apply(str1, str2) ? null : Primitives.equal.apply(str1, str2) ? t1 : new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str1, hashTable)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isBottom.apply(t) ? null : Primitives.isBottom.apply(t) ? new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str2, hashTable)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(ty) ? null : Primitives.isBottom.apply(ty) ? new Let<TypicalTypes.raw_type<?>>() {
                      {
                        Analyzer.cast(Primitives.put.apply(str1, t2, hashTable));
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(t2);
                      }
                    }.apply() : unify.apply(t1, ty));
                  }
                }.apply() : unify.apply(t, t2));
              }
            }.apply());
          }
          if (TypicalSupport.match$2989(arg$2970)) {
            final String str = Analyzer.cast(arg$2970.get1().getTuple().get1());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;

              {
                t = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isBottom.apply(t) ? null : Primitives.isBottom.apply(t) ? new Let<TypicalTypes.raw_type<?>>() {
                  {
                    Analyzer.cast(Primitives.put.apply(str, t2, hashTable));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(t2);
                  }
                }.apply() : unify.apply(t, t2));
              }
            }.apply());
          }
          if (TypicalSupport.match$2990(arg$2970)) {
            return Analyzer.cast(unify.apply(t2, t1));
          }
          if (TypicalSupport.match$2991(arg$2970)) {
            final TypicalTypes.raw_type<?> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final TypicalTypes.raw_type<?> tr1 = Analyzer.cast(arg$2970.get1().getTuple().get2());
            final TypicalTypes.raw_type<?> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());
            final TypicalTypes.raw_type<?> tr2 = Analyzer.cast(arg$2970.get2().getTuple().get2());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> tl;
              final TypicalTypes.raw_type<?> tr;

              {
                tl = Analyzer.cast(unify.apply(tl1, tl2));
                tr = Analyzer.cast(unify.apply(tr1, tr2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.and.apply(Primitives.isNotBottom.apply(tl), Primitives.isNotBottom.apply(tr)) || !Primitives.and.apply(Primitives.isNotBottom.apply(tl), Primitives.isNotBottom.apply(tr)) ? null : new TypicalTypes.PairOfType(tl, tr));
              }
            }.apply());
          }
          if (TypicalSupport.match$2992(arg$2970)) {
            final String s1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final String s2 = Analyzer.cast(arg$2970.get1().getTuple().get2());
            final TypicalTypes.raw_type<?> ty1 = Analyzer.cast(arg$2970.get1().getTuple().get3());
            final String s3 = Analyzer.cast(arg$2970.get2().getTuple().get1());
            final String s4 = Analyzer.cast(arg$2970.get2().getTuple().get2());
            final TypicalTypes.raw_type<?> ty2 = Analyzer.cast(arg$2970.get2().getTuple().get3());

            return Analyzer.cast(null == Primitives.and.apply(Primitives.equal.apply(s1, s3), Primitives.equal.apply(s2, s4)) ? null : Primitives.and.apply(Primitives.equal.apply(s1, s3), Primitives.equal.apply(s2, s4)) ? t1 : unify.apply(ty1, ty2));
          }
          if (TypicalSupport.match$2993(arg$2970)) {
            final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$2970.get1().getTuple().get3());

            return Analyzer.cast(unify.apply(ty, t2));
          }
          if (TypicalSupport.match$2994(arg$2970)) {
            final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$2970.get2().getTuple().get3());

            return Analyzer.cast(unify.apply(ty, t1));
          }
          if (TypicalSupport.match$2995(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final Pair<TypicalTypes.raw_type<?>> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(null == Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)) || !Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)) ? null : new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                tl = Analyzer.cast(unifyTwoList.apply(tl1, tl2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(tl) || !Primitives.isNotBottom.apply(tl) ? null : new TypicalTypes.RecordT(tl));
              }
            }.apply());
          }
          if (TypicalSupport.match$2996(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final Pair<TypicalTypes.raw_type<?>> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(null == Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)) || !Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)) ? null : new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                tl = Analyzer.cast(unifyTwoList.apply(tl1, tl2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(tl) || !Primitives.isNotBottom.apply(tl) ? null : new TypicalTypes.TupleT(tl));
              }
            }.apply());
          }
          if (TypicalSupport.match$2997(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final String s1 = Analyzer.cast(arg$2970.get1().getTuple().get2());
            final Pair<TypicalTypes.raw_type<?>> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());
            final String s2 = Analyzer.cast(arg$2970.get2().getTuple().get2());

            return Analyzer.cast(null == Primitives.and.apply(Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)), Primitives.equal.apply(s1, s2)) || !Primitives.and.apply(Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)), Primitives.equal.apply(s1, s2)) ? null : new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;

              {
                tl = Analyzer.cast(unifyTwoList.apply(tl1, tl2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(tl) || !Primitives.isNotBottom.apply(tl) ? null : new TypicalTypes.ConstructedT(tl, s1));
              }
            }.apply());
          }
          if (TypicalSupport.match$2998(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> ty;

              {
                ty = Analyzer.cast(TypicalSupport.head$98.apply(tl1));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(unify.apply(ty, t2));
              }
            }.apply());
          }
          if (TypicalSupport.match$2999(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> ty;

              {
                ty = Analyzer.cast(TypicalSupport.head$98.apply(tl2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(unify.apply(t1, ty));
              }
            }.apply());
          }
          if (TypicalSupport.match$3000(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$2970.get1().getTuple().get1());

            return Analyzer.cast(null == checkPolyUnify.apply(tl, t2) || !checkPolyUnify.apply(tl, t2) ? null : t1);
          }
          if (TypicalSupport.match$3001(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(null == checkPolyUnify.apply(tl, t1) || !checkPolyUnify.apply(tl, t1) ? null : t2);
          }
          if (TypicalSupport.match$3002(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final Pair<TypicalTypes.raw_type<?>> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> h1;
              final TypicalTypes.raw_type<?> h2;

              {
                h1 = Analyzer.cast(TypicalSupport.head$98.apply(tl1));
                h2 = Analyzer.cast(TypicalSupport.head$98.apply(tl2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> arg$3006 = Analyzer.cast(new Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>(h1, h2));

                    if ((null == arg$3006)) {
                      return null;
                    }
                    if (TypicalSupport.match$3004(arg$3006)) {
                      final String p1 = Analyzer.cast(arg$3006.get1().getTuple().get1());
                      final String p2 = Analyzer.cast(arg$3006.get2().getTuple().get1());

                      return Analyzer.cast(null == Primitives.equal.apply(p1, p2) || !Primitives.equal.apply(p1, p2) ? null : null == Primitives.not.apply(hasTypeVariables.apply(p1)) ? null : Primitives.not.apply(hasTypeVariables.apply(p1)) ? new TypicalTypes.TypeName(p1) : new Let<TypicalTypes.raw_type<?>>() {
                        final Pair<TypicalTypes.raw_type<?>> tl;

                        {
                          tl = Analyzer.cast(unifyTwoList.apply(tl1, tl2));
                        }

                        public TypicalTypes.raw_type<?> apply() {
                          return Analyzer.cast(null == Primitives.isNotBottom.apply(tl) || !Primitives.isNotBottom.apply(tl) ? null : new TypicalTypes.VariantT(tl));
                        }
                      }.apply());
                    }
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());
          }
          if (TypicalSupport.match$3009(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final String p2 = Analyzer.cast(arg$2970.get2().getTuple().get1());
            final String s2 = Analyzer.cast(arg$2970.get2().getTuple().get2());

            return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> h;

              {
                h = Analyzer.cast(TypicalSupport.head$98.apply(tl));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$3013 = Analyzer.cast(h);

                    if ((null == arg$3013)) {
                      return null;
                    }
                    if ((null != arg$3013))
                                            switch (arg$3013.tag()) {
                      case ConstructorT:
                        if (TypicalSupport.match$94(arg$3013)) {
                          final String p1 = Analyzer.cast(arg$3013.getTuple().get1());

                          return Analyzer.cast(null == Primitives.equal.apply(p1, p2) || !Primitives.equal.apply(p1, p2) ? null : null == Primitives.not.apply(hasTypeVariables.apply(p1)) ? null : Primitives.not.apply(hasTypeVariables.apply(p1)) ? new TypicalTypes.TypeName(p1) : new Let<TypicalTypes.raw_type<?>>() {
                            final TypicalTypes.raw_type<?> t;
                            final TypicalTypes.raw_type<?> res;

                            {
                              t = Analyzer.cast(getConstructorType.apply(s2, tl));
                              res = Analyzer.cast(unify.apply(t, t2));
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(null == Primitives.isNotBottom.apply(res) || !Primitives.isNotBottom.apply(res) ? null : t1);
                            }
                          }.apply());
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());
          }
          if (TypicalSupport.match$3016(arg$2970)) {
            return Analyzer.cast(unify.apply(t2, t1));
          }
          if (TypicalSupport.match$3004(arg$2970)) {
            final String s1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final String s2 = Analyzer.cast(arg$2970.get1().getTuple().get2());
            final TypicalTypes.raw_type<?> ty1 = Analyzer.cast(arg$2970.get1().getTuple().get3());
            final String s3 = Analyzer.cast(arg$2970.get2().getTuple().get1());
            final String s4 = Analyzer.cast(arg$2970.get2().getTuple().get2());
            final TypicalTypes.raw_type<?> ty2 = Analyzer.cast(arg$2970.get2().getTuple().get3());

            return Analyzer.cast(null == Primitives.equal.apply(s1, s3) || !Primitives.equal.apply(s1, s3) ? null : null == Primitives.not.apply(hasTypeVariables.apply(s1)) ? null : Primitives.not.apply(hasTypeVariables.apply(s1)) ? (null == Primitives.equal.apply(s2, s4) ? null : Primitives.equal.apply(s2, s4) ? t1 : new TypicalTypes.TypeName(s1)) : null == Primitives.equal.apply(s2, s4) ? null : Primitives.equal.apply(s2, s4) ? new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> res;

              {
                res = Analyzer.cast(unify.apply(ty1, ty2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(res) ? null : Primitives.isNotBottom.apply(res) ? new TypicalTypes.ConstructorT(s1, s2, res) : null == Primitives.isBottom.apply(ty1) ? null : Primitives.isBottom.apply(ty1) ? t1 : null);
              }
            }.apply() : new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> res1;
              final TypicalTypes.raw_type<?> res2;

              {
                t = Analyzer.cast(copy.apply(new TypicalTypes.TypeName(s1)));
                res1 = Analyzer.cast(unify.apply(t, t1));
                res2 = Analyzer.cast(unify.apply(res1, t2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(res2);
              }
            }.apply());
          }
          if (TypicalSupport.match$3018(arg$2970)) {
            final Pair<TypicalTypes.raw_type<?>> tl1 = Analyzer.cast(arg$2970.get1().getTuple().get1());
            final TypicalTypes.raw_type<?> ret1 = Analyzer.cast(arg$2970.get1().getTuple().get2());
            final Pair<TypicalTypes.raw_type<?>> tl2 = Analyzer.cast(arg$2970.get2().getTuple().get1());
            final TypicalTypes.raw_type<?> ret2 = Analyzer.cast(arg$2970.get2().getTuple().get2());

            return Analyzer.cast(null == Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)) || !Primitives.equal.apply(Primitives.length.apply(tl1), Primitives.length.apply(tl2)) ? null : new Let<TypicalTypes.raw_type<?>>() {
              final Pair<TypicalTypes.raw_type<?>> tl;
              final TypicalTypes.raw_type<?> ret;

              {
                tl = Analyzer.cast(unifyTwoList.apply(tl1, tl2));
                ret = Analyzer.cast(unify.apply(ret1, ret2));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(null == Primitives.and.apply(Primitives.isNotBottom.apply(tl), Primitives.isNotBottom.apply(ret)) || !Primitives.and.apply(Primitives.isNotBottom.apply(tl), Primitives.isNotBottom.apply(ret)) ? null : new TypicalTypes.FunctionT(tl, ret));
              }
            }.apply());
          }
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F2<Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.raw_type<?>>> unifyTwoList = new Function.F2<Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.raw_type<?>>>() {
    public Pair<TypicalTypes.raw_type<?>> apply(final Pair<TypicalTypes.raw_type<?>> tl1, final Pair<TypicalTypes.raw_type<?>> tl2) {
      return new Match<Pair<TypicalTypes.raw_type<?>>>() {
        public Pair<TypicalTypes.raw_type<?>> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3020 = Analyzer.cast(tl1);

          if ((null == arg$3020)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3020)) {
            return Analyzer.cast(Pair.<TypicalTypes.raw_type<?>>empty());
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3022 = Analyzer.cast(Analyzer.cast(arg$3020));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3022));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3022));

            return Analyzer.cast(new Match<Pair<TypicalTypes.raw_type<?>>>() {
              public Pair<TypicalTypes.raw_type<?>> apply() {
                final Pair<TypicalTypes.raw_type<?>> arg$3026 = Analyzer.cast(tl2);

                if ((null == arg$3026)) {
                  return null;
                }
                if (true) {
                  final Pair<TypicalTypes.raw_type<?>> list$3027 = Analyzer.cast(Analyzer.cast(arg$3026));
                  final TypicalTypes.raw_type<?> y = Analyzer.cast(Primitives.wrapHead(list$3027));
                  final Pair<TypicalTypes.raw_type<?>> ys = Analyzer.cast(Primitives.wrapTail(list$3027));

                  return Analyzer.cast(new Let<Pair<TypicalTypes.raw_type<?>>>() {
                    final TypicalTypes.raw_type<?> t;

                    {
                      t = Analyzer.cast(unify.apply(x, y));
                    }

                    public Pair<TypicalTypes.raw_type<?>> apply() {
                      return Analyzer.cast(null == Primitives.isNotBottom.apply(t) || !Primitives.isNotBottom.apply(t) ? null : Primitives.wrapCons(t, unifyTwoList.apply(xs, ys)));
                    }
                  }.apply());
                }
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.raw_type<?>, String, Pair<TypicalTypes.raw_type<?>>> getConstructorType = new Function.F2<TypicalTypes.raw_type<?>, String, Pair<TypicalTypes.raw_type<?>>>() {
    public TypicalTypes.raw_type<?> apply(final String name, final Pair<TypicalTypes.raw_type<?>> tl) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3030 = Analyzer.cast(tl);

          if ((null == arg$3030)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3030)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3032 = Analyzer.cast(Analyzer.cast(arg$3030));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3032));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3032));

            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final TypicalTypes.raw_type<?> arg$3036 = Analyzer.cast(x);

                if ((null == arg$3036)) {
                  return null;
                }
                if ((null != arg$3036))
                                    switch (arg$3036.tag()) {
                  case ConstructorT:
                    if (TypicalSupport.match$94(arg$3036)) {
                      final String s = Analyzer.cast(arg$3036.getTuple().get2());

                      return Analyzer.cast(null == Primitives.equal.apply(name, s) ? null : Primitives.equal.apply(name, s) ? x : getConstructorType.apply(name, xs));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.raw_type<?>, String, Pair<TypicalTypes.raw_type<?>>> getFieldType = new Function.F2<TypicalTypes.raw_type<?>, String, Pair<TypicalTypes.raw_type<?>>>() {
    public TypicalTypes.raw_type<?> apply(final String name, final Pair<TypicalTypes.raw_type<?>> tl) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3040 = Analyzer.cast(tl);

          if ((null == arg$3040)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3040)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3042 = Analyzer.cast(Analyzer.cast(arg$3040));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3042));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3042));

            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final TypicalTypes.raw_type<?> arg$3046 = Analyzer.cast(x);

                if ((null == arg$3046)) {
                  return null;
                }
                if ((null != arg$3046))
                                    switch (arg$3046.tag()) {
                  case FieldT:
                    if (TypicalSupport.match$96(arg$3046)) {
                      final String s = Analyzer.cast(arg$3046.getTuple().get2());

                      return Analyzer.cast(null == Primitives.equal.apply(name, s) ? null : Primitives.equal.apply(name, s) ? x : getFieldType.apply(name, xs));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.raw_type<?>>, TypicalTypes.raw_type<?>> checkPolyUnify = new Function.F2<Boolean, Pair<TypicalTypes.raw_type<?>>, TypicalTypes.raw_type<?>>() {
    public Boolean apply(final Pair<TypicalTypes.raw_type<?>> tl, final TypicalTypes.raw_type<?> t) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3050 = Analyzer.cast(tl);

          if ((null == arg$3050)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3050)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3052 = Analyzer.cast(Analyzer.cast(arg$3050));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3052));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3052));

            return Analyzer.cast(new Let<Boolean>() {
              final TypicalTypes.raw_type<?> res;

              {
                res = Analyzer.cast(unify.apply(x, t));
              }

              public Boolean apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(res) ? null : Primitives.isNotBottom.apply(res) ? Boolean.TRUE : checkPolyUnify.apply(xs, t));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Object, Node> scanNode = new Function.F1<Object, Node>() {
    public Object apply(final Node n) {
      return new Match<Object>() {
        public Object apply() {
          final Node arg$3054 = GNode.cast(n);

          if ((null == arg$3054)) {
            return null;
          }
          if (TypicalSupport.match$73(arg$3054)) {
            final String s = (arg$3054.size() > 0 ? arg$3054.getString(0) : null);

            matching_nodes.add(arg$3054);
            if ((null != arg$3054 && processScopeNodes.contains(arg$3054.getName()))) {
              processScope(arg$3054, getScope);
            }
            checkEnterScope(arg$3054);

            final Object retValue$3060 = Analyzer.cast(new Require<Object>() {
              public Object apply() {
                final Boolean var$3057 = Primitives.not.apply(isDefined.apply(n, getNameSpace));

                if ((null != var$3057 && !var$3057)) {
                  showMessage("error", Primitives.concat.apply(s, " has been previously defined"), n);
                }
                if ((null == var$3057)) {
                  return null;
                }
                if (var$3057) {
                  return new Let<Object>() {
                    {
                      redefine.apply(n, wildt, getNameSpace);
                      define3.apply(GNode.create("NameSpaceStructure", s, null, null), n, getNameSpace);
                    }

                    public Object apply() {
                      return Analyzer.cast(null);
                    }
                  }.apply();
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$3054);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3060);
          }
          if (TypicalSupport.match$21(arg$3054)) {
            final String s = (arg$3054.size() > 1 ? arg$3054.getString(1) : null);

            matching_nodes.add(arg$3054);
            if ((null != arg$3054 && processScopeNodes.contains(arg$3054.getName()))) {
              processScope(arg$3054, getScope);
            }
            checkEnterScope(arg$3054);

            final Object retValue$3066 = Analyzer.cast(new Require<Object>() {
              public Object apply() {
                final Boolean var$3063 = Primitives.not.apply(isDefined.apply(n, getNameSpace));

                if ((null != var$3063 && !var$3063)) {
                  showMessage("error", Primitives.concat.apply(Primitives.concat.apply("type ", s), " has been previously defined"), n);
                }
                if ((null == var$3063)) {
                  return null;
                }
                if (var$3063) {
                  return new Let<Object>() {
                    {
                      redefine.apply(GNode.create("NameSpaceStructure", s, null, null), n, getNameSpace);
                      redefine.apply(n, wildt, getNameSpace);
                    }

                    public Object apply() {
                      return Analyzer.cast(null);
                    }
                  }.apply();
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$3054);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3066);
          }
          if (true) {
            matching_nodes.add(arg$3054);
            if ((null != arg$3054 && processScopeNodes.contains(arg$3054.getName()))) {
              processScope(arg$3054, getScope);
            }
            checkEnterScope(arg$3054);

            final Object retValue$3069 = Analyzer.cast(null);

            checkExitScope(arg$3054);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3069);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, Node> analyzeTypeDefinition = new Function.F1<TypicalTypes.raw_type<?>, Node>() {
    public TypicalTypes.raw_type<?> apply(final Node n) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Node arg$3071 = GNode.cast(n);

          if ((null == arg$3071)) {
            return null;
          }
          if (TypicalSupport.match$3072(arg$3071)) {
            matching_nodes.add(arg$3071);
            if ((null != arg$3071 && processScopeNodes.contains(arg$3071.getName()))) {
              processScope(arg$3071, getScope);
            }
            checkEnterScope(arg$3071);

            final Object retValue$3075 = Analyzer.cast(analyze.apply(n));

            checkExitScope(arg$3071);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3075);
          }
          if (true) {
            matching_nodes.add(arg$3071);
            if ((null != arg$3071 && processScopeNodes.contains(arg$3071.getName()))) {
              processScope(arg$3071, getScope);
            }
            checkEnterScope(arg$3071);

            final Object retValue$3078 = Analyzer.cast(null);

            checkExitScope(arg$3071);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3078);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.raw_type<?>>, Pair<Node>> processAttributes = new Function.F1<Pair<TypicalTypes.raw_type<?>>, Pair<Node>>() {
    public Pair<TypicalTypes.raw_type<?>> apply(final Pair<Node> nl) {
      return new Match<Pair<TypicalTypes.raw_type<?>>>() {
        public Pair<TypicalTypes.raw_type<?>> apply() {
          final Pair<Node> arg$3080 = Analyzer.cast(nl);

          if ((null == arg$3080)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3080)) {
            return Analyzer.cast(Pair.<TypicalTypes.raw_type<?>>empty());
          }
          if (true) {
            final Pair<Node> list$3082 = Analyzer.cast(Analyzer.cast(arg$3080));
            final Node x = GNode.cast(Primitives.wrapHead(list$3082));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3082));

            return Analyzer.cast(new Match<Pair<TypicalTypes.raw_type<?>>>() {
              public Pair<TypicalTypes.raw_type<?>> apply() {
                final Node arg$3096 = GNode.cast(x);

                if ((null == arg$3096)) {
                  return null;
                }
                if (TypicalSupport.match$3084(arg$3096)) {
                  matching_nodes.add(arg$3096);
                  if ((null != arg$3096 && processScopeNodes.contains(arg$3096.getName()))) {
                    processScope(arg$3096, getScope);
                  }
                  checkEnterScope(arg$3096);

                  final Object retValue$3100 = Analyzer.cast(Primitives.wrapCons(analyze.apply(x), processAttributes.apply(xs)));

                  checkExitScope(arg$3096);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3100);
                }
                if (TypicalSupport.match$3088(arg$3096)) {
                  matching_nodes.add(arg$3096);
                  if ((null != arg$3096 && processScopeNodes.contains(arg$3096.getName()))) {
                    processScope(arg$3096, getScope);
                  }
                  checkEnterScope(arg$3096);

                  final Object retValue$3104 = Analyzer.cast(Primitives.wrapCons(analyze.apply(x), processAttributes.apply(xs)));

                  checkExitScope(arg$3096);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3104);
                }
                if (true) {
                  matching_nodes.add(arg$3096);
                  if ((null != arg$3096 && processScopeNodes.contains(arg$3096.getName()))) {
                    processScope(arg$3096, getScope);
                  }
                  checkEnterScope(arg$3096);

                  final Object retValue$3107 = Analyzer.cast(processAttributes.apply(xs));

                  checkExitScope(arg$3096);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3107);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Object, Pair<Node>> processScopeSpace = new Function.F1<Object, Pair<Node>>() {
    public Object apply(final Pair<Node> nl) {
      return new Let<Object>() {
        final Pair<Node> noList;
        final Node n1;
        final Node n2;
        final Pair<TypicalTypes.call> calls1;
        final Pair<TypicalTypes.call> calls2;
        final Pair<String> callees1;
        final Pair<String> callees2;

        {
          noList = Analyzer.cast(getScopeSpace.apply(nl, Pair.<Node>empty()));
          n1 = Analyzer.cast(TypicalSupport.head$279.apply(noList));
          n2 = Analyzer.cast(TypicalSupport.head$279.apply(TypicalSupport.tail$278.apply(noList)));
          calls1 = Analyzer.cast(getCall.apply(n1, "", Pair.<TypicalTypes.call>empty()));
          calls2 = Analyzer.cast(getCall.apply(n2, "", Pair.<TypicalTypes.call>empty()));
          callees1 = Analyzer.cast(getCallees.apply(calls1, Pair.<String>empty()));
          callees2 = Analyzer.cast(getCallees.apply(calls2, Pair.<String>empty()));
        }

        public Object apply() {
          return Analyzer.cast(visitFunctions.apply(TypicalSupport.union$313.apply(callees1, callees2), nl));
        }
      }.apply();
    }
  };

  final Function.F2<Pair<Node>, Pair<Node>, Pair<Node>> getScopeSpace = new Function.F2<Pair<Node>, Pair<Node>, Pair<Node>>() {
    public Pair<Node> apply(final Pair<Node> nl, final Pair<Node> res) {
      return new Match<Pair<Node>>() {
        public Pair<Node> apply() {
          final Pair<Node> arg$3110 = Analyzer.cast(nl);

          if ((null == arg$3110)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3110)) {
            return Analyzer.cast(res);
          }
          if (true) {
            final Pair<Node> list$3112 = Analyzer.cast(Analyzer.cast(arg$3110));
            final Node x = GNode.cast(Primitives.wrapHead(list$3112));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3112));

            return Analyzer.cast(new Match<Pair<Node>>() {
              public Pair<Node> apply() {
                final Node arg$3126 = GNode.cast(x);

                if ((null == arg$3126)) {
                  return null;
                }
                if (TypicalSupport.match$3114(arg$3126)) {
                  matching_nodes.add(arg$3126);
                  if ((null != arg$3126 && processScopeNodes.contains(arg$3126.getName()))) {
                    processScope(arg$3126, getScope);
                  }
                  checkEnterScope(arg$3126);

                  final Object retValue$3130 = Analyzer.cast(getScopeSpace.apply(xs, Primitives.wrapCons(x, res)));

                  checkExitScope(arg$3126);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3130);
                }
                if (TypicalSupport.match$3118(arg$3126)) {
                  matching_nodes.add(arg$3126);
                  if ((null != arg$3126 && processScopeNodes.contains(arg$3126.getName()))) {
                    processScope(arg$3126, getScope);
                  }
                  checkEnterScope(arg$3126);

                  final Object retValue$3134 = Analyzer.cast(getScopeSpace.apply(xs, Primitives.wrapCons(x, res)));

                  checkExitScope(arg$3126);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3134);
                }
                if (true) {
                  matching_nodes.add(arg$3126);
                  if ((null != arg$3126 && processScopeNodes.contains(arg$3126.getName()))) {
                    processScope(arg$3126, getScope);
                  }
                  checkEnterScope(arg$3126);

                  final Object retValue$3137 = Analyzer.cast(getScopeSpace.apply(xs, res));

                  checkExitScope(arg$3126);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3137);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Object, Pair<String>, Pair<Node>> visitFunctions = new Function.F2<Object, Pair<String>, Pair<Node>>() {
    public Object apply(final Pair<String> strL, final Pair<Node> nl) {
      return new Match<Object>() {
        public Object apply() {
          final Pair<Node> arg$3140 = Analyzer.cast(nl);

          if ((null == arg$3140)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3140)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<Node> list$3142 = Analyzer.cast(Analyzer.cast(arg$3140));
            final Node x = GNode.cast(Primitives.wrapHead(list$3142));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3142));

            return Analyzer.cast(new Match<Object>() {
              public Object apply() {
                final Node arg$3152 = GNode.cast(x);

                if ((null == arg$3152)) {
                  return null;
                }
                if (TypicalSupport.match$73(arg$3152)) {
                  final String s = (arg$3152.size() > 0 ? arg$3152.getString(0) : null);

                  matching_nodes.add(arg$3152);
                  if ((null != arg$3152 && processScopeNodes.contains(arg$3152.getName()))) {
                    processScope(arg$3152, getScope);
                  }
                  checkEnterScope(arg$3152);

                  final Object retValue$3156 = Analyzer.cast(null == Primitives.contains.apply(s, strL) ? null : Primitives.contains.apply(s, strL) ? new Let<Object>() {
                    {
                      analyze.apply(x);
                    }

                    public Object apply() {
                      return Analyzer.cast(visitFunctions.apply(strL, xs));
                    }
                  }.apply() : visitFunctions.apply(strL, xs));

                  checkExitScope(arg$3152);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3156);
                }
                if (true) {
                  matching_nodes.add(arg$3152);
                  if ((null != arg$3152 && processScopeNodes.contains(arg$3152.getName()))) {
                    processScope(arg$3152, getScope);
                  }
                  checkEnterScope(arg$3152);

                  final Object retValue$3159 = Analyzer.cast(visitFunctions.apply(strL, xs));

                  checkExitScope(arg$3152);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3159);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, Pair<TypicalTypes.call>, Pair<String>> getCallees = new Function.F2<Pair<String>, Pair<TypicalTypes.call>, Pair<String>>() {
    public Pair<String> apply(final Pair<TypicalTypes.call> cl, final Pair<String> res) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<TypicalTypes.call> arg$3162 = Analyzer.cast(cl);

          if ((null == arg$3162)) {
            return null;
          }
          if (TypicalSupport.match$3163(arg$3162)) {
            return Analyzer.cast(res);
          }
          if (true) {
            final Pair<TypicalTypes.call> list$3164 = Analyzer.cast(Analyzer.cast(arg$3162));
            final TypicalTypes.call x = Analyzer.cast(Primitives.wrapHead(list$3164));
            final Pair<TypicalTypes.call> xs = Analyzer.cast(Primitives.wrapTail(list$3164));

            return Analyzer.cast(new Let<Pair<String>>() {
              final String name;

              {
                name = Analyzer.cast(null == x ? null : x.callee);
              }

              public Pair<String> apply() {
                return Analyzer.cast(getCallees.apply(xs, Primitives.wrapCons(name, res)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, String, Node> getTypeNames = new Function.F2<Pair<String>, String, Node>() {
    public Pair<String> apply(final String s, final Node n) {
      return (null == Primitives.isBottom.apply(n) ? null : Primitives.isBottom.apply(n) ? Pair.<String>empty() : new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Node arg$3166 = GNode.cast(n);

          if ((null == arg$3166)) {
            return null;
          }
          if (TypicalSupport.match$192(arg$3166)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3166, 0, arg$3166.size()));

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3170 = Analyzer.cast(getTypeNameList.apply(s, nl));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3170);
          }
          if (TypicalSupport.match$200(arg$3166)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3166, 0, arg$3166.size()));

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3174 = Analyzer.cast(getTypeNameList.apply(s, nl));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3174);
          }
          if (TypicalSupport.match$2868(arg$3166)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3166, 0, arg$3166.size()));

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3178 = Analyzer.cast(getTypeNameList.apply(s, nl));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3178);
          }
          if (TypicalSupport.match$2864(arg$3166)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3166, 0, arg$3166.size()));

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3182 = Analyzer.cast(getTypeNameList.apply(s, nl));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3182);
          }
          if (TypicalSupport.match$13(arg$3166)) {
            final Node no = (arg$3166.size() > 1 ? arg$3166.getGeneric(1) : null);

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3186 = Analyzer.cast(getTypeNames.apply(s, no));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3186);
          }
          if (TypicalSupport.match$29(arg$3166)) {
            final String str = (arg$3166.size() > 0 ? arg$3166.getString(0) : null);

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3190 = Analyzer.cast(null == Primitives.or.apply(Primitives.equal.apply(s, str), Primitives.not.apply(isDefined.apply(GNode.create("UserDefinedType", str), getNameSpace))) ? null : Primitives.or.apply(Primitives.equal.apply(s, str), Primitives.not.apply(isDefined.apply(GNode.create("UserDefinedType", str), getNameSpace))) ? Pair.<String>empty() : new Pair<String>(str));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3190);
          }
          if (TypicalSupport.match$17(arg$3166)) {
            final String str = (arg$3166.size() > 1 ? arg$3166.getString(1) : null);

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3194 = Analyzer.cast(null == isDefined.apply(GNode.create("UserDefinedType", str), getNameSpace) ? null : isDefined.apply(GNode.create("UserDefinedType", str), getNameSpace) ? new Let<Pair<String>>() {
              final Node no;

              {
                no = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", str, null, null), getNameSpace)));
                Primitives.annotate.apply(no, "monomorphic", wildt);
              }

              public Pair<String> apply() {
                return Analyzer.cast(null == Primitives.equal.apply(s, str) ? null : Primitives.equal.apply(s, str) ? Pair.<String>empty() : new Pair<String>(str));
              }
            }.apply() : Pair.<String>empty());

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3194);
          }
          if (TypicalSupport.match$25(arg$3166)) {
            final Node tn = (arg$3166.size() > 0 ? arg$3166.getGeneric(0) : null);

            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3198 = Analyzer.cast(getTypeNames.apply(s, tn));

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3198);
          }
          if (true) {
            matching_nodes.add(arg$3166);
            if ((null != arg$3166 && processScopeNodes.contains(arg$3166.getName()))) {
              processScope(arg$3166, getScope);
            }
            checkEnterScope(arg$3166);

            final Object retValue$3201 = Analyzer.cast(Pair.<String>empty());

            checkExitScope(arg$3166);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3201);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F2<Pair<String>, String, Pair<Node>> getTypeNameList = new Function.F2<Pair<String>, String, Pair<Node>>() {
    public Pair<String> apply(final String s, final Pair<Node> nl) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<Node> arg$3203 = Analyzer.cast(nl);

          if ((null == arg$3203)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3203)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<Node> list$3205 = Analyzer.cast(Analyzer.cast(arg$3203));
            final Node x = GNode.cast(Primitives.wrapHead(list$3205));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3205));

            return Analyzer.cast(TypicalSupport.union$313.apply(getTypeNames.apply(s, x), getTypeNameList.apply(s, xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, String, Pair<Node>> getReachableTypes = new Function.F2<Pair<String>, String, Pair<Node>>() {
    public Pair<String> apply(final String s, final Pair<Node> nl) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<Node> arg$3207 = Analyzer.cast(nl);

          if ((null == arg$3207)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3207)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<Node> list$3209 = Analyzer.cast(Analyzer.cast(arg$3207));
            final Node x = GNode.cast(Primitives.wrapHead(list$3209));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3209));

            return Analyzer.cast(new Match<Pair<String>>() {
              public Pair<String> apply() {
                final Node arg$3219 = GNode.cast(x);

                if ((null == arg$3219)) {
                  return null;
                }
                if (TypicalSupport.match$21(arg$3219)) {
                  final String str = (arg$3219.size() > 1 ? arg$3219.getString(1) : null);
                  final Node n = (arg$3219.size() > 2 ? arg$3219.getGeneric(2) : null);

                  matching_nodes.add(arg$3219);
                  if ((null != arg$3219 && processScopeNodes.contains(arg$3219.getName()))) {
                    processScope(arg$3219, getScope);
                  }
                  checkEnterScope(arg$3219);

                  final Object retValue$3223 = Analyzer.cast(null == Primitives.equal.apply(str, s) ? null : Primitives.equal.apply(str, s) ? new Let<Pair<String>>() {
                    {
                      Primitives.annotate.apply(x, "__node", wildt);
                    }

                    public Pair<String> apply() {
                      return Analyzer.cast(getTypeNames.apply(s, n));
                    }
                  }.apply() : getReachableTypes.apply(s, xs));

                  checkExitScope(arg$3219);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3223);
                }
                if (true) {
                  matching_nodes.add(arg$3219);
                  if ((null != arg$3219 && processScopeNodes.contains(arg$3219.getName()))) {
                    processScope(arg$3219, getScope);
                  }
                  checkEnterScope(arg$3219);

                  final Object retValue$3226 = Analyzer.cast(getReachableTypes.apply(s, xs));

                  checkExitScope(arg$3219);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3226);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<String>, Pair<Node>> getNodeTypes = new Function.F1<Pair<String>, Pair<Node>>() {
    public Pair<String> apply(final Pair<Node> nl) {
      return new Let<Pair<String>>() {
        final Pair<String> strL;

        {
          strL = Analyzer.cast(getReachableTypes.apply(nodeType, nl));
        }

        public Pair<String> apply() {
          return Analyzer.cast(null == Primitives.isBottom.apply(strL) ? null : Primitives.isBottom.apply(strL) ? error("Can not find the root node definition", null) : processNodeType.apply(strL, nl, new Pair<String>(nodeType)));
        }
      }.apply();
    }
  };

  final Function.F3<Pair<String>, Pair<String>, Pair<Node>, Pair<String>> processNodeType = new Function.F3<Pair<String>, Pair<String>, Pair<Node>, Pair<String>>() {
    public Pair<String> apply(final Pair<String> strL, final Pair<Node> nl, final Pair<String> resL) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<String> arg$3229 = Analyzer.cast(strL);

          if ((null == arg$3229)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$3229)) {
            return Analyzer.cast(resL);
          }
          if (true) {
            final Pair<String> list$3231 = Analyzer.cast(Analyzer.cast(arg$3229));
            final String x = Analyzer.cast(Primitives.wrapHead(list$3231));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$3231));

            return Analyzer.cast(null == Primitives.contains.apply(x, resL) ? null : Primitives.contains.apply(x, resL) ? processNodeType.apply(xs, nl, resL) : new Let<Pair<String>>() {
              final Pair<String> l;
              final Pair<String> newStrL;

              {
                l = Analyzer.cast(getReachableTypes.apply(x, nl));
                newStrL = Analyzer.cast(unionAppend.apply(xs, l));
              }

              public Pair<String> apply() {
                return Analyzer.cast(processNodeType.apply(newStrL, nl, Primitives.wrapCons(x, resL)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, Pair<String>, Pair<String>> unionAppend = new Function.F2<Pair<String>, Pair<String>, Pair<String>>() {
    public Pair<String> apply(final Pair<String> l1, final Pair<String> l2) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<String> arg$3233 = Analyzer.cast(l2);

          if ((null == arg$3233)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$3233)) {
            return Analyzer.cast(l1);
          }
          if (true) {
            final Pair<String> list$3235 = Analyzer.cast(Analyzer.cast(arg$3233));
            final String x = Analyzer.cast(Primitives.wrapHead(list$3235));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$3235));

            return Analyzer.cast(null == Primitives.contains.apply(x, l1) ? null : Primitives.contains.apply(x, l1) ? unionAppend.apply(l1, xs) : new Let<Pair<String>>() {
              final Pair<String> l;

              {
                l = Analyzer.cast(TypicalSupport.append$297.apply(l1, new Pair<String>(x)));
              }

              public Pair<String> apply() {
                return Analyzer.cast(unionAppend.apply(l, xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, String> reachableFromNode = new Function.F1<Boolean, String>() {
    public Boolean apply(final String s) {
      return (null == Primitives.equal.apply(nodeType, s) ? null : Primitives.equal.apply(nodeType, s) ? Boolean.TRUE : null == isDefined.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace) ? null : isDefined.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace) ? new Let<Boolean>() {
        final Node nod;

        {
          nod = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace)));
        }

        public Boolean apply() {
          return Analyzer.cast(Primitives.hasAnnotation.apply(nod, "__node"));
        }
      }.apply() : Boolean.FALSE);
    }
  };

  final Function.F2<Boolean, Node, Node> checkMonomorphic = new Function.F2<Boolean, Node, Node>() {
    public Boolean apply(final Node n, final Node dec) {
      return (null == Primitives.not.apply(Primitives.hasAnnotation.apply(n, "monomorphic")) ? null : Primitives.not.apply(Primitives.hasAnnotation.apply(n, "monomorphic")) ? Boolean.TRUE : new Match<Boolean>() {
        public Boolean apply() {
          final Node arg$3237 = GNode.cast(dec);

          if ((null == arg$3237)) {
            return null;
          }
          if (TypicalSupport.match$3238(arg$3237)) {
            matching_nodes.add(arg$3237);
            if ((null != arg$3237 && processScopeNodes.contains(arg$3237.getName()))) {
              processScope(arg$3237, getScope);
            }
            checkEnterScope(arg$3237);

            final Object retValue$3241 = Analyzer.cast(Boolean.FALSE);

            checkExitScope(arg$3237);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3241);
          }
          if (true) {
            matching_nodes.add(arg$3237);
            if ((null != arg$3237 && processScopeNodes.contains(arg$3237.getName()))) {
              processScope(arg$3237, getScope);
            }
            checkEnterScope(arg$3237);

            final Object retValue$3244 = Analyzer.cast(Boolean.TRUE);

            checkExitScope(arg$3237);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3244);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F2<Pair<TypicalTypes.entry>, Pair<Node>, Pair<TypicalTypes.entry>> analyzeBindings = new Function.F2<Pair<TypicalTypes.entry>, Pair<Node>, Pair<TypicalTypes.entry>>() {
    public Pair<TypicalTypes.entry> apply(final Pair<Node> nl, final Pair<TypicalTypes.entry> enList) {
      return new Match<Pair<TypicalTypes.entry>>() {
        public Pair<TypicalTypes.entry> apply() {
          final Pair<Node> arg$3246 = Analyzer.cast(nl);

          if ((null == arg$3246)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3246)) {
            return Analyzer.cast(enList);
          }
          if (true) {
            final Pair<Node> list$3248 = Analyzer.cast(Analyzer.cast(arg$3246));
            final Node x = GNode.cast(Primitives.wrapHead(list$3248));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3248));

            return Analyzer.cast(new Let<Pair<TypicalTypes.entry>>() {
              final TypicalTypes.entry en;

              {
                en = Analyzer.cast(analyzeBinding.apply(x));
              }

              public Pair<TypicalTypes.entry> apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(en) ? null : Primitives.isNotBottom.apply(en) ? (null == Primitives.isBottom.apply(null == en ? null : en.entryName) ? null : Primitives.isBottom.apply(null == en ? null : en.entryName) ? analyzeBindings.apply(xs, enList) : null == Primitives.not.apply(checkDefined.apply(null == en ? null : en.entryName, enList)) ? null : Primitives.not.apply(checkDefined.apply(null == en ? null : en.entryName, enList)) ? analyzeBindings.apply(xs, TypicalSupport.append$3249.apply(enList, new Pair<TypicalTypes.entry>(en))) : new Let<Pair<TypicalTypes.entry>>() {
                  {
                    error(Primitives.concat.apply(null == en ? null : en.entryName, " has been previously defined"), x);
                  }

                  public Pair<TypicalTypes.entry> apply() {
                    return Analyzer.cast(analyzeBindings.apply(xs, TypicalSupport.append$3249.apply(enList, null)));
                  }
                }.apply()) : analyzeBindings.apply(xs, TypicalSupport.append$3249.apply(enList, new Pair<TypicalTypes.entry>(en))));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, String, Pair<TypicalTypes.entry>> checkDefined = new Function.F2<Boolean, String, Pair<TypicalTypes.entry>>() {
    public Boolean apply(final String name, final Pair<TypicalTypes.entry> enList) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.entry> arg$3251 = Analyzer.cast(enList);

          if ((null == arg$3251)) {
            return null;
          }
          if (TypicalSupport.match$3252(arg$3251)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<TypicalTypes.entry> list$3253 = Analyzer.cast(Analyzer.cast(arg$3251));
            final TypicalTypes.entry x = Analyzer.cast(Primitives.wrapHead(list$3253));
            final Pair<TypicalTypes.entry> xs = Analyzer.cast(Primitives.wrapTail(list$3253));

            return Analyzer.cast(null == Primitives.equal.apply(name, null == x ? null : x.entryName) ? null : Primitives.equal.apply(name, null == x ? null : x.entryName) ? Boolean.TRUE : checkDefined.apply(name, xs));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.entry, Node> analyzeBinding = new Function.F1<TypicalTypes.entry, Node>() {
    public TypicalTypes.entry apply(final Node n) {
      return new Match<TypicalTypes.entry>() {
        public TypicalTypes.entry apply() {
          final Node arg$3255 = GNode.cast(n);

          if ((null == arg$3255)) {
            return null;
          }
          if (TypicalSupport.match$3256(arg$3255)) {
            final Node l = (arg$3255.size() > 0 ? arg$3255.getGeneric(0) : null);
            final Node r = (arg$3255.size() > 1 ? arg$3255.getGeneric(1) : null);

            matching_nodes.add(arg$3255);
            if ((null != arg$3255 && processScopeNodes.contains(arg$3255.getName()))) {
              processScope(arg$3255, getScope);
            }
            checkEnterScope(arg$3255);

            final Object retValue$3289 = Analyzer.cast(new Let<TypicalTypes.entry>() {
              final TypicalTypes.raw_type<?> tr;

              {
                tr = Analyzer.cast(analyze.apply(r));
              }

              public TypicalTypes.entry apply() {
                return Analyzer.cast(null == Primitives.isNotBottom.apply(tr) || !Primitives.isNotBottom.apply(tr) ? null : new Match<TypicalTypes.entry>() {
                  public TypicalTypes.entry apply() {
                    final Node arg$3272 = GNode.cast(l);

                    if ((null == arg$3272)) {
                      return null;
                    }
                    if (TypicalSupport.match$3258(arg$3272)) {
                      final Node var = Analyzer.cast(arg$3272.getGeneric(0));
                      final Node typ = (arg$3272.size() > 1 ? arg$3272.getGeneric(1) : null);

                      matching_nodes.add(arg$3272);
                      if ((null != arg$3272 && processScopeNodes.contains(arg$3272.getName()))) {
                        processScope(arg$3272, getScope);
                      }
                      checkEnterScope(arg$3272);

                      final Object retValue$3278 = Analyzer.cast(new Let<TypicalTypes.entry>() {
                        final TypicalTypes.raw_type<?> ty;
                        final String s;

                        {
                          ty = Analyzer.cast(analyze.apply(typ));
                          s = Analyzer.cast(getString.apply(var));
                          new Guard<TypicalTypes.raw_type<?>>() {
                            public TypicalTypes.raw_type<?> apply() {
                              if ((null == unify)) {
                                return null;
                              }
                              if ((null == ty)) {
                                return null;
                              }
                              if ((null == tr)) {
                                return null;
                              }

                              final TypicalTypes.raw_type<?> result$3275 = unify.apply(tr, ty);

                              if ((null == result$3275)) {
                                return Analyzer.cast(error("types of left and right expressions do not match", null));
                              }
                              return result$3275;
                            }
                          }.apply();
                          Primitives.annotate.apply(var, "__type", ty);
                          Primitives.annotate.apply(l, "__type", ty);
                          Primitives.annotate.apply(n, "__type", ty);
                        }

                        public TypicalTypes.entry apply() {
                          return Analyzer.cast(new TypicalTypes.entry(s, ty));
                        }
                      }.apply());

                      checkExitScope(arg$3272);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$3278);
                    }
                    if (TypicalSupport.match$65(arg$3272)) {
                      final String s = (arg$3272.size() > 0 ? arg$3272.getString(0) : null);

                      matching_nodes.add(arg$3272);
                      if ((null != arg$3272 && processScopeNodes.contains(arg$3272.getName()))) {
                        processScope(arg$3272, getScope);
                      }
                      checkEnterScope(arg$3272);

                      final Object retValue$3282 = Analyzer.cast(new Let<TypicalTypes.entry>() {
                        {
                          Primitives.annotate.apply(l, "__type", tr);
                          Primitives.annotate.apply(n, "__type", tr);
                        }

                        public TypicalTypes.entry apply() {
                          return Analyzer.cast(new TypicalTypes.entry(s, tr));
                        }
                      }.apply());

                      checkExitScope(arg$3272);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$3282);
                    }
                    if (true) {
                      matching_nodes.add(arg$3272);
                      if ((null != arg$3272 && processScopeNodes.contains(arg$3272.getName()))) {
                        processScope(arg$3272, getScope);
                      }
                      checkEnterScope(arg$3272);

                      final Object retValue$3285 = Analyzer.cast(new Let<TypicalTypes.entry>() {
                        {
                          Primitives.annotate.apply(l, "__type", tr);
                          Primitives.annotate.apply(n, "__type", tr);
                        }

                        public TypicalTypes.entry apply() {
                          return Analyzer.cast(new TypicalTypes.entry(null, tr));
                        }
                      }.apply());

                      checkExitScope(arg$3272);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$3285);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$3255);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3289);
          }
          if (true) {
            matching_nodes.add(arg$3255);
            if ((null != arg$3255 && processScopeNodes.contains(arg$3255.getName()))) {
              processScope(arg$3255, getScope);
            }
            checkEnterScope(arg$3255);

            final Object retValue$3292 = Analyzer.cast(null);

            checkExitScope(arg$3255);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3292);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.raw_type<?>, Node, Pair<TypicalTypes.entry>> analyzeExpression = new Function.F2<TypicalTypes.raw_type<?>, Node, Pair<TypicalTypes.entry>>() {
    public TypicalTypes.raw_type<?> apply(final Node n, final Pair<TypicalTypes.entry> enList) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Node arg$3294 = GNode.cast(n);

          if ((null == arg$3294)) {
            return null;
          }
          if (true) {
            matching_nodes.add(arg$3294);
            if ((null != arg$3294 && processScopeNodes.contains(arg$3294.getName()))) {
              processScope(arg$3294, getScope);
            }
            checkEnterScope(arg$3294);

            final Object retValue$3298 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              {
                TypicalSupport.map$3295.apply(defineEntry, enList);
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(analyze.apply(n));
              }
            }.apply());

            checkExitScope(arg$3294);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3298);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Object, TypicalTypes.entry> defineEntry = new Function.F1<Object, TypicalTypes.entry>() {
    public Object apply(final TypicalTypes.entry en) {
      return new Let<Object>() {
        {
          redefine.apply(GNode.create("LowerID", null == en ? null : en.entryName), null == en ? null : en.entryType, getNameSpace);
        }

        public Object apply() {
          return Analyzer.cast(null);
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, TypicalTypes.raw_type<?>> isNodeType = new Function.F1<Boolean, TypicalTypes.raw_type<?>>() {
    public Boolean apply(final TypicalTypes.raw_type<?> t) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final TypicalTypes.raw_type<?> arg$3300 = Analyzer.cast(t);

          if ((null == arg$3300)) {
            return null;
          }
          if ((null != arg$3300))
                        switch (arg$3300.tag()) {
            case VariableT:
              if (TypicalSupport.match$117(arg$3300)) {
                final String str = Analyzer.cast(arg$3300.getTuple().get1());

                return Analyzer.cast(new Let<Boolean>() {
                  final TypicalTypes.raw_type<?> t1;

                  {
                    t1 = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public Boolean apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(t1) ? null : Primitives.isBottom.apply(t1) ? Boolean.FALSE : isNodeType.apply(t1));
                  }
                }.apply());
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$3314(arg$3300)) {
                return Analyzer.cast(Boolean.TRUE);
              }
              break;
            case VariantT:
              if (TypicalSupport.match$100(arg$3300)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3300.getTuple().get1());

                return Analyzer.cast(new Let<Boolean>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(TypicalSupport.head$98.apply(tl));
                  }

                  public Boolean apply() {
                    return Analyzer.cast(new Match<Boolean>() {
                      public Boolean apply() {
                        final TypicalTypes.raw_type<?> arg$3308 = Analyzer.cast(ty);

                        if ((null == arg$3308)) {
                          return null;
                        }
                        if ((null != arg$3308))
                                                    switch (arg$3308.tag()) {
                          case ConstructorT:
                            if (TypicalSupport.match$94(arg$3308)) {
                              final String s = Analyzer.cast(arg$3308.getTuple().get1());

                              return Analyzer.cast(reachableFromNode.apply(s));
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case TypeName:
              if (TypicalSupport.match$95(arg$3300)) {
                final String s = Analyzer.cast(arg$3300.getTuple().get1());

                return Analyzer.cast(reachableFromNode.apply(s));
              }
              break;
            case ConstructorT:
              if (TypicalSupport.match$94(arg$3300)) {
                final String s = Analyzer.cast(arg$3300.getTuple().get1());

                return Analyzer.cast(reachableFromNode.apply(s));
              }
              break;
            case PolyVariantT:
              if (TypicalSupport.match$118(arg$3300)) {
                return Analyzer.cast(Boolean.TRUE);
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$3300)) {
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3300.getTuple().get3());

                return Analyzer.cast(isNodeType.apply(ty));
              }
              break;
            case NodeTypeT:
              if (TypicalSupport.match$119(arg$3300)) {
                return Analyzer.cast(Boolean.TRUE);
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> ensureNodeType = new Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$3316 = Analyzer.cast(t);

          if ((null == arg$3316)) {
            return null;
          }
          if ((null != arg$3316))
                        switch (arg$3316.tag()) {
            case VariableT:
              if (TypicalSupport.match$117(arg$3316)) {
                final String str = Analyzer.cast(arg$3316.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> t1;

                  {
                    t1 = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(t1) ? null : Primitives.isBottom.apply(t1) ? new Let<TypicalTypes.raw_type<?>>() {
                      {
                        Analyzer.cast(Primitives.put.apply(str, nodet, hashTable));
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(nodet);
                      }
                    }.apply() : ensureNodeType.apply(t1));
                  }
                }.apply());
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$3314(arg$3316)) {
                return Analyzer.cast(nodet);
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null == isNodeType.apply(t) || !isNodeType.apply(t) ? null : nodet);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> ensureNodeList = new Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$3320 = Analyzer.cast(t);

          if ((null == arg$3320)) {
            return null;
          }
          if ((null != arg$3320))
                        switch (arg$3320.tag()) {
            case VariableT:
              if (TypicalSupport.match$117(arg$3320)) {
                final String str = Analyzer.cast(arg$3320.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> t1;

                  {
                    t1 = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(t1) ? null : Primitives.isBottom.apply(t1) ? new Let<TypicalTypes.raw_type<?>>() {
                      {
                        Analyzer.cast(Primitives.put.apply(str, new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(nodet), "list"), hashTable));
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(nodet);
                      }
                    }.apply() : ensureNodeList.apply(t1));
                  }
                }.apply());
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$3322(arg$3320)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3320.getTuple().get1());

                return Analyzer.cast(ensureNodeType.apply(TypicalSupport.head$98.apply(tl)));
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, Pair<TypicalTypes.raw_type<?>>> checkNodeList = new Function.F1<TypicalTypes.raw_type<?>, Pair<TypicalTypes.raw_type<?>>>() {
    public TypicalTypes.raw_type<?> apply(final Pair<TypicalTypes.raw_type<?>> tl) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3324 = Analyzer.cast(tl);

          if ((null == arg$3324)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3324)) {
            return Analyzer.cast(nodet);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3326 = Analyzer.cast(Analyzer.cast(arg$3324));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3326));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3326));

            return Analyzer.cast(null == isNodeType.apply(x) ? null : isNodeType.apply(x) ? checkNodeList.apply(xs) : error(Primitives.concat.apply("expected node, found ", getTypeName.apply(x)), null));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, TypicalTypes.raw_type<?>> isNodeList = new Function.F1<Boolean, TypicalTypes.raw_type<?>>() {
    public Boolean apply(final TypicalTypes.raw_type<?> t) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final TypicalTypes.raw_type<?> arg$3328 = Analyzer.cast(t);

          if ((null == arg$3328)) {
            return null;
          }
          if ((null != arg$3328))
                        switch (arg$3328.tag()) {
            case VariableT:
              if (TypicalSupport.match$117(arg$3328)) {
                final String str = Analyzer.cast(arg$3328.getTuple().get1());

                return Analyzer.cast(new Let<Boolean>() {
                  final TypicalTypes.raw_type<?> t1;

                  {
                    t1 = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public Boolean apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(t1) ? null : Primitives.isBottom.apply(t1) ? Boolean.FALSE : isNodeList.apply(t1));
                  }
                }.apply());
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$3322(arg$3328)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3328.getTuple().get1());

                return Analyzer.cast(isNodeType.apply(TypicalSupport.head$98.apply(tl)));
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, TypicalTypes.raw_type<?>> isListType = new Function.F1<Boolean, TypicalTypes.raw_type<?>>() {
    public Boolean apply(final TypicalTypes.raw_type<?> t) {
      return new Let<Boolean>() {
        final TypicalTypes.raw_type<?> lt;

        {
          lt = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(wildt), "list"));
        }

        public Boolean apply() {
          return Analyzer.cast(new Match<Boolean>() {
            public Boolean apply() {
              final TypicalTypes.raw_type<?> arg$3332 = Analyzer.cast(t);

              if ((null == arg$3332)) {
                return null;
              }
              if ((null != arg$3332))
                                switch (arg$3332.tag()) {
                case VariableT:
                  if (TypicalSupport.match$117(arg$3332)) {
                    return Analyzer.cast(Boolean.TRUE);
                  }
                  break;
                case WildcardT:
                  if (TypicalSupport.match$92(arg$3332)) {
                    return Analyzer.cast(Boolean.TRUE);
                  }
                  break;
                case ConstructedT:
                  if (TypicalSupport.match$3322(arg$3332)) {
                    return Analyzer.cast(Boolean.TRUE);
                  }
                  break;
                case TypeName:
                  if (TypicalSupport.match$95(arg$3332)) {
                    return Analyzer.cast(Primitives.isNotBottom.apply(unify.apply(t, lt)));
                  }
                  break;
                case FieldT:
                  if (TypicalSupport.match$96(arg$3332)) {
                    final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3332.getTuple().get3());

                    return Analyzer.cast(Primitives.isNotBottom.apply(unify.apply(ty, lt)));
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(Boolean.FALSE);
              }
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F3<Boolean, Pair<Node>, BigInteger, BigInteger> checkBindings = new Function.F3<Boolean, Pair<Node>, BigInteger, BigInteger>() {
    public Boolean apply(final Pair<Node> nl, final BigInteger index, final BigInteger var) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<Node> arg$3339 = Analyzer.cast(nl);

          if ((null == arg$3339)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3339)) {
            return Analyzer.cast(Primitives.lessEqualInt.apply(index, BigInteger.valueOf(1)));
          }
          if (true) {
            final Pair<Node> list$3341 = Analyzer.cast(Analyzer.cast(arg$3339));
            final Node x = GNode.cast(Primitives.wrapHead(list$3341));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3341));

            return Analyzer.cast(null == Primitives.hasAnnotation.apply(x, "has_bindings") ? null : Primitives.hasAnnotation.apply(x, "has_bindings") ? (null == Primitives.and.apply(Primitives.equal.apply(index, BigInteger.valueOf(0)), Primitives.equal.apply(var, BigInteger.valueOf(0))) ? null : Primitives.and.apply(Primitives.equal.apply(index, BigInteger.valueOf(0)), Primitives.equal.apply(var, BigInteger.valueOf(0))) ? checkBindings.apply(xs, BigInteger.valueOf(1), BigInteger.valueOf(0)) : Boolean.FALSE) : null == Primitives.hasAnnotation.apply(x, "variables") ? null : Primitives.hasAnnotation.apply(x, "variables") ? (null == Primitives.equal.apply(index, BigInteger.valueOf(0)) ? null : Primitives.equal.apply(index, BigInteger.valueOf(0)) ? checkBindings.apply(xs, BigInteger.valueOf(0), Primitives.addInt.apply(var, BigInteger.valueOf(1))) : Boolean.FALSE) : checkBindings.apply(xs, index, var));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<String>, Pair<Node>> combineVariables = new Function.F1<Pair<String>, Pair<Node>>() {
    public Pair<String> apply(final Pair<Node> nl) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<Node> arg$3343 = Analyzer.cast(nl);

          if ((null == arg$3343)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3343)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<Node> list$3345 = Analyzer.cast(Analyzer.cast(arg$3343));
            final Node x = GNode.cast(Primitives.wrapHead(list$3345));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3345));

            return Analyzer.cast(TypicalSupport.union$313.apply(retrieveVariables.apply(x), combineVariables.apply(xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<String>, Pair<Node>> haveSameVariables = new Function.F2<Boolean, Pair<String>, Pair<Node>>() {
    public Boolean apply(final Pair<String> strList, final Pair<Node> nl) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<Node> arg$3347 = Analyzer.cast(nl);

          if ((null == arg$3347)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3347)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<Node> list$3349 = Analyzer.cast(Analyzer.cast(arg$3347));
            final Node x = GNode.cast(Primitives.wrapHead(list$3349));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3349));

            return Analyzer.cast(new Let<Boolean>() {
              final Pair<String> xList;

              {
                xList = Analyzer.cast(retrieveVariables.apply(x));
              }

              public Boolean apply() {
                return Analyzer.cast(null == Primitives.and.apply(listContains.apply(strList, xList), listContains.apply(xList, strList)) ? null : Primitives.and.apply(listContains.apply(strList, xList), listContains.apply(xList, strList)) ? haveSameVariables.apply(strList, xs) : Boolean.FALSE);
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<String>, Node> retrieveVariables = new Function.F1<Pair<String>, Node>() {
    public Pair<String> apply(final Node n) {
      return (null == Primitives.hasAnnotation.apply(n, "variables") ? null : Primitives.hasAnnotation.apply(n, "variables") ? new Let<Pair<String>>() {
        final TypicalTypes.raw_type<?> ty;

        {
          ty = Analyzer.cast(Primitives.getAnnotation.apply(n, "variables"));
        }

        public Pair<String> apply() {
          return Analyzer.cast(new Match<Pair<String>>() {
            public Pair<String> apply() {
              final TypicalTypes.raw_type<?> arg$3351 = Analyzer.cast(ty);

              if ((null == arg$3351)) {
                return null;
              }
              if ((null != arg$3351))
                                switch (arg$3351.tag()) {
                case StringList:
                  if (TypicalSupport.match$3352(arg$3351)) {
                    final Pair<String> res = Analyzer.cast(arg$3351.getTuple().get1());

                    return Analyzer.cast(res);
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(null);
              }
              return null;
            }
          }.apply());
        }
      }.apply() : Pair.<String>empty());
    }
  };

  final Function.F2<Boolean, Pair<String>, Pair<String>> listContains = new Function.F2<Boolean, Pair<String>, Pair<String>>() {
    public Boolean apply(final Pair<String> l1, final Pair<String> l2) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<String> arg$3354 = Analyzer.cast(l2);

          if ((null == arg$3354)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$3354)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<String> list$3356 = Analyzer.cast(Analyzer.cast(arg$3354));
            final String x = Analyzer.cast(Primitives.wrapHead(list$3356));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$3356));

            return Analyzer.cast(Primitives.and.apply(Primitives.contains.apply(x, l1), listContains.apply(l1, xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<String, Node> getString = new Function.F1<String, Node>() {
    public String apply(final Node n) {
      return new Match<String>() {
        public String apply() {
          final Node arg$3358 = GNode.cast(n);

          if ((null == arg$3358)) {
            return null;
          }
          if (TypicalSupport.match$61(arg$3358)) {
            final String str = (arg$3358.size() > 0 ? arg$3358.getString(0) : null);

            matching_nodes.add(arg$3358);
            if ((null != arg$3358 && processScopeNodes.contains(arg$3358.getName()))) {
              processScope(arg$3358, getScope);
            }
            checkEnterScope(arg$3358);

            final Object retValue$3362 = Analyzer.cast(str);

            checkExitScope(arg$3358);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3362);
          }
          if (TypicalSupport.match$1(arg$3358)) {
            final String str = (arg$3358.size() > 0 ? arg$3358.getString(0) : null);

            matching_nodes.add(arg$3358);
            if ((null != arg$3358 && processScopeNodes.contains(arg$3358.getName()))) {
              processScope(arg$3358, getScope);
            }
            checkEnterScope(arg$3358);

            final Object retValue$3366 = Analyzer.cast(str);

            checkExitScope(arg$3358);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3366);
          }
          if (TypicalSupport.match$2856(arg$3358)) {
            final String str = (arg$3358.size() > 0 ? arg$3358.getString(0) : null);

            matching_nodes.add(arg$3358);
            if ((null != arg$3358 && processScopeNodes.contains(arg$3358.getName()))) {
              processScope(arg$3358, getScope);
            }
            checkEnterScope(arg$3358);

            final Object retValue$3370 = Analyzer.cast(str);

            checkExitScope(arg$3358);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3370);
          }
          if (TypicalSupport.match$65(arg$3358)) {
            final String str = (arg$3358.size() > 0 ? arg$3358.getString(0) : null);

            matching_nodes.add(arg$3358);
            if ((null != arg$3358 && processScopeNodes.contains(arg$3358.getName()))) {
              processScope(arg$3358, getScope);
            }
            checkEnterScope(arg$3358);

            final Object retValue$3374 = Analyzer.cast(str);

            checkExitScope(arg$3358);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3374);
          }
          if (TypicalSupport.match$69(arg$3358)) {
            final String str = (arg$3358.size() > 0 ? arg$3358.getString(0) : null);

            matching_nodes.add(arg$3358);
            if ((null != arg$3358 && processScopeNodes.contains(arg$3358.getName()))) {
              processScope(arg$3358, getScope);
            }
            checkEnterScope(arg$3358);

            final Object retValue$3378 = Analyzer.cast(str);

            checkExitScope(arg$3358);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3378);
          }
          if (true) {
            matching_nodes.add(arg$3358);
            if ((null != arg$3358 && processScopeNodes.contains(arg$3358.getName()))) {
              processScope(arg$3358, getScope);
            }
            checkEnterScope(arg$3358);

            final Object retValue$3381 = Analyzer.cast(null);

            checkExitScope(arg$3358);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3381);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<String>, Node> getStringList = new Function.F1<Pair<String>, Node>() {
    public Pair<String> apply(final Node n) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Node arg$3383 = GNode.cast(n);

          if ((null == arg$3383)) {
            return null;
          }
          if (TypicalSupport.match$2838(arg$3383)) {
            final Pair<String> strL = Analyzer.cast(Primitives.getChildren(arg$3383, 0, arg$3383.size()));

            matching_nodes.add(arg$3383);
            if ((null != arg$3383 && processScopeNodes.contains(arg$3383.getName()))) {
              processScope(arg$3383, getScope);
            }
            checkEnterScope(arg$3383);

            final Object retValue$3387 = Analyzer.cast(strL);

            checkExitScope(arg$3383);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3387);
          }
          if (true) {
            matching_nodes.add(arg$3383);
            if ((null != arg$3383 && processScopeNodes.contains(arg$3383.getName()))) {
              processScope(arg$3383, getScope);
            }
            checkEnterScope(arg$3383);

            final Object retValue$3390 = Analyzer.cast(null);

            checkExitScope(arg$3383);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3390);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<String, TypicalTypes.raw_type<?>> getParent = new Function.F1<String, TypicalTypes.raw_type<?>>() {
    public String apply(final TypicalTypes.raw_type<?> t) {
      return new Match<String>() {
        public String apply() {
          final TypicalTypes.raw_type<?> arg$3392 = Analyzer.cast(t);

          if ((null == arg$3392)) {
            return null;
          }
          if ((null != arg$3392))
                        switch (arg$3392.tag()) {
            case ConstructorT:
              if (TypicalSupport.match$94(arg$3392)) {
                final String s = Analyzer.cast(arg$3392.getTuple().get1());

                return Analyzer.cast(s);
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$3392)) {
                final String s = Analyzer.cast(arg$3392.getTuple().get1());

                return Analyzer.cast(s);
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Node>, Node> getNodeList = new Function.F1<Pair<Node>, Node>() {
    public Pair<Node> apply(final Node n) {
      return new Match<Pair<Node>>() {
        public Pair<Node> apply() {
          final Node arg$3396 = GNode.cast(n);

          if ((null == arg$3396)) {
            return null;
          }
          if (TypicalSupport.match$3397(arg$3396)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3396, 0, arg$3396.size()));

            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            final Object retValue$3400 = Analyzer.cast(nl);

            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3400);
          }
          if (TypicalSupport.match$3401(arg$3396)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3396, 0, arg$3396.size()));

            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            final Object retValue$3404 = Analyzer.cast(nl);

            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3404);
          }
          if (TypicalSupport.match$3405(arg$3396)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3396, 0, arg$3396.size()));

            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            final Object retValue$3408 = Analyzer.cast(nl);

            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3408);
          }
          if (TypicalSupport.match$245(arg$3396)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3396, 0, arg$3396.size()));

            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            final Object retValue$3412 = Analyzer.cast(nl);

            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3412);
          }
          if (TypicalSupport.match$3413(arg$3396)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3396, 0, arg$3396.size()));

            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            final Object retValue$3416 = Analyzer.cast(nl);

            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3416);
          }
          if (TypicalSupport.match$3417(arg$3396)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3396.getGeneric(0), 0, arg$3396.getGeneric(0).size()));

            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            List<Node> listName$3419 = new ArrayList<Node>();
            Node nodeName$3418 = arg$3396;

            nodeName$3418 = nodeName$3418.getGeneric(0);
            if ((null != nodeName$3418 && processScopeNodes.contains(nodeName$3418.getName()))) {
              processScope(nodeName$3418, getScope);
            }
            checkEnterScope(nodeName$3418);
            listName$3419.add(0, nodeName$3418);

            final Object retValue$3420 = Analyzer.cast(nl);

            for (Node no : listName$3419) {
              checkExitScope(no);
            }
            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3420);
          }
          if (true) {
            matching_nodes.add(arg$3396);
            if ((null != arg$3396 && processScopeNodes.contains(arg$3396.getName()))) {
              processScope(arg$3396, getScope);
            }
            checkEnterScope(arg$3396);

            final Object retValue$3423 = Analyzer.cast(null);

            checkExitScope(arg$3396);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3423);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, Pair<Node>, Pair<String>> getTypeVariables = new Function.F2<Pair<String>, Pair<Node>, Pair<String>>() {
    public Pair<String> apply(final Pair<Node> nl, final Pair<String> resList) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<Node> arg$3425 = Analyzer.cast(nl);

          if ((null == arg$3425)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3425)) {
            return Analyzer.cast(resList);
          }
          if (true) {
            final Pair<Node> list$3427 = Analyzer.cast(Analyzer.cast(arg$3425));
            final Node x = GNode.cast(Primitives.wrapHead(list$3427));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3427));

            return Analyzer.cast(new Let<Pair<String>>() {
              final String s;

              {
                s = Analyzer.cast(getString.apply(x));
              }

              public Pair<String> apply() {
                return Analyzer.cast(null == Primitives.not.apply(Primitives.contains.apply(s, resList)) ? null : Primitives.not.apply(Primitives.contains.apply(s, resList)) ? getTypeVariables.apply(xs, TypicalSupport.append$297.apply(resList, new Pair<String>(s))) : error(Primitives.concat.apply(Primitives.concat.apply("type variable ", s), " has been previously defined"), null));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, String, Pair<Node>> isUsedInList = new Function.F2<Boolean, String, Pair<Node>>() {
    public Boolean apply(final String s, final Pair<Node> nl) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<Node> arg$3429 = Analyzer.cast(nl);

          if ((null == arg$3429)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3429)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<Node> list$3431 = Analyzer.cast(Analyzer.cast(arg$3429));
            final Node x = GNode.cast(Primitives.wrapHead(list$3431));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3431));

            return Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, x), isUsedInList.apply(s, xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, String, Node> isUsedVariable = new Function.F2<Boolean, String, Node>() {
    public Boolean apply(final String s, final Node no) {
      return (null == Primitives.isBottom.apply(no) ? null : Primitives.isBottom.apply(no) ? Boolean.FALSE : new Match<Boolean>() {
        public Boolean apply() {
          final Node arg$3433 = GNode.cast(no);

          if ((null == arg$3433)) {
            return null;
          }
          if (TypicalSupport.match$479(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3437 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3437);
          }
          if (TypicalSupport.match$679(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3441 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3441);
          }
          if (TypicalSupport.match$3405(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3445 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3445);
          }
          if (TypicalSupport.match$2400(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3449 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3449);
          }
          if (TypicalSupport.match$9(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 1, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3453 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3453);
          }
          if (TypicalSupport.match$2509(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3457 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3457);
          }
          if (TypicalSupport.match$2809(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3461 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3461);
          }
          if (TypicalSupport.match$269(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3465 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3465);
          }
          if (TypicalSupport.match$277(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3469 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3469);
          }
          if (TypicalSupport.match$283(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3473 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3473);
          }
          if (TypicalSupport.match$3474(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3477 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3477);
          }
          if (TypicalSupport.match$321(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3481 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3481);
          }
          if (TypicalSupport.match$339(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3485 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3485);
          }
          if (TypicalSupport.match$3413(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3489 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3489);
          }
          if (TypicalSupport.match$5(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 1, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3493 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3493);
          }
          if (TypicalSupport.match$192(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3497 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3497);
          }
          if (TypicalSupport.match$183(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3501 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3501);
          }
          if (TypicalSupport.match$2868(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3505 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3505);
          }
          if (TypicalSupport.match$3401(arg$3433)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3433, 0, arg$3433.size()));

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3509 = Analyzer.cast(isUsedInList.apply(s, nl));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3509);
          }
          if (TypicalSupport.match$2273(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3513 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3513);
          }
          if (TypicalSupport.match$49(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3517 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3517);
          }
          if (TypicalSupport.match$2379(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3521 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3521);
          }
          if (TypicalSupport.match$2390(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3525 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3525);
          }
          if (TypicalSupport.match$45(arg$3433)) {
            final Node n = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3529 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3529);
          }
          if (TypicalSupport.match$3256(arg$3433)) {
            final Node n = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3533 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3533);
          }
          if (TypicalSupport.match$13(arg$3433)) {
            final Node n = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3537 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3537);
          }
          if (TypicalSupport.match$41(arg$3433)) {
            final Node n = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3541 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3541);
          }
          if (TypicalSupport.match$2884(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3545 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3545);
          }
          if (TypicalSupport.match$25(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3549 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3549);
          }
          if (TypicalSupport.match$2910(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3553 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3553);
          }
          if (TypicalSupport.match$2860(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3557 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3557);
          }
          if (TypicalSupport.match$2537(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3561 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3561);
          }
          if (TypicalSupport.match$57(arg$3433)) {
            final Node n = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3565 = Analyzer.cast(isUsedVariable.apply(s, n));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3565);
          }
          if (TypicalSupport.match$84(arg$3433)) {
            final Node n = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3569 = Analyzer.cast(new Let<Boolean>() {
              final Pair<String> strList;

              {
                strList = Analyzer.cast(retrieveVariables.apply(no));
              }

              public Boolean apply() {
                return Analyzer.cast(null == Primitives.contains.apply(s, strList) ? null : Primitives.contains.apply(s, strList) ? Boolean.FALSE : isUsedVariable.apply(s, n));
              }
            }.apply());

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3569);
          }
          if (TypicalSupport.match$83(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3573 = Analyzer.cast(new Let<Boolean>() {
              final Pair<String> strList;

              {
                strList = Analyzer.cast(retrieveVariables.apply(no));
              }

              public Boolean apply() {
                return Analyzer.cast(null == Primitives.contains.apply(s, strList) ? null : Primitives.contains.apply(s, strList) ? Boolean.FALSE : Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));
              }
            }.apply());

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3573);
          }
          if (TypicalSupport.match$483(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3577 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3577);
          }
          if (TypicalSupport.match$491(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3581 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3581);
          }
          if (TypicalSupport.match$499(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3585 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3585);
          }
          if (TypicalSupport.match$505(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3589 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3589);
          }
          if (TypicalSupport.match$553(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3593 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3593);
          }
          if (TypicalSupport.match$609(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3597 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3597);
          }
          if (TypicalSupport.match$673(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3601 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3601);
          }
          if (TypicalSupport.match$2267(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3605 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3605);
          }
          if (TypicalSupport.match$255(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3609 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3609);
          }
          if (TypicalSupport.match$665(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3613 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3613);
          }
          if (TypicalSupport.match$2795(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3617 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3617);
          }
          if (TypicalSupport.match$287(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3621 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3621);
          }
          if (TypicalSupport.match$306(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3625 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3625);
          }
          if (TypicalSupport.match$312(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3629 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3629);
          }
          if (TypicalSupport.match$363(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3633 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3633);
          }
          if (TypicalSupport.match$2415(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3637 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3637);
          }
          if (TypicalSupport.match$2427(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3641 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3641);
          }
          if (TypicalSupport.match$2888(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3645 = Analyzer.cast(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3645);
          }
          if (TypicalSupport.match$65(arg$3433)) {
            final String str = (arg$3433.size() > 0 ? arg$3433.getString(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3649 = Analyzer.cast(Primitives.equal.apply(s, str));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3649);
          }
          if (TypicalSupport.match$61(arg$3433)) {
            final String str = (arg$3433.size() > 0 ? arg$3433.getString(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3653 = Analyzer.cast(Primitives.equal.apply(s, str));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3653);
          }
          if (TypicalSupport.match$2856(arg$3433)) {
            final String str = (arg$3433.size() > 0 ? arg$3433.getString(0) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3657 = Analyzer.cast(Primitives.equal.apply(s, str));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3657);
          }
          if (TypicalSupport.match$692(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);
            final Node n3 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3661 = Analyzer.cast(Primitives.or.apply(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)), isUsedVariable.apply(s, n3)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3661);
          }
          if (TypicalSupport.match$2828(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);
            final Node n3 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3665 = Analyzer.cast(Primitives.or.apply(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)), isUsedVariable.apply(s, n3)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3665);
          }
          if (TypicalSupport.match$2801(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);
            final Node n3 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3669 = Analyzer.cast(Primitives.or.apply(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)), isUsedVariable.apply(s, n3)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3669);
          }
          if (TypicalSupport.match$2405(arg$3433)) {
            final Node n1 = (arg$3433.size() > 0 ? arg$3433.getGeneric(0) : null);
            final Node n2 = (arg$3433.size() > 1 ? arg$3433.getGeneric(1) : null);
            final Node n3 = (arg$3433.size() > 2 ? arg$3433.getGeneric(2) : null);
            final Node n4 = (arg$3433.size() > 3 ? arg$3433.getGeneric(3) : null);

            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3673 = Analyzer.cast(Primitives.or.apply(Primitives.or.apply(Primitives.or.apply(isUsedVariable.apply(s, n1), isUsedVariable.apply(s, n2)), isUsedVariable.apply(s, n3)), isUsedVariable.apply(s, n4)));

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3673);
          }
          if (true) {
            matching_nodes.add(arg$3433);
            if ((null != arg$3433 && processScopeNodes.contains(arg$3433.getName()))) {
              processScope(arg$3433, getScope);
            }
            checkEnterScope(arg$3433);

            final Object retValue$3676 = Analyzer.cast(Boolean.FALSE);

            checkExitScope(arg$3433);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3676);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F2<Object, Pair<String>, Node> checkUnusedVariables = new Function.F2<Object, Pair<String>, Node>() {
    public Object apply(final Pair<String> strList, final Node no) {
      return new Match<Object>() {
        public Object apply() {
          final Pair<String> arg$3678 = Analyzer.cast(strList);

          if ((null == arg$3678)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$3678)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<String> list$3680 = Analyzer.cast(Analyzer.cast(arg$3678));
            final String x = Analyzer.cast(Primitives.wrapHead(list$3680));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$3680));

            return Analyzer.cast(null == Primitives.not.apply(isUsedVariable.apply(x, no)) ? null : Primitives.not.apply(isUsedVariable.apply(x, no)) ? new Let<Object>() {
              {
                warning(Primitives.concat.apply(x, " is an unused variable"), null);
              }

              public Object apply() {
                return Analyzer.cast(checkUnusedVariables.apply(xs, no));
              }
            }.apply() : checkUnusedVariables.apply(xs, no));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<String>, Pair<TypicalTypes.entry>> getNames = new Function.F1<Pair<String>, Pair<TypicalTypes.entry>>() {
    public Pair<String> apply(final Pair<TypicalTypes.entry> enList) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<TypicalTypes.entry> arg$3682 = Analyzer.cast(enList);

          if ((null == arg$3682)) {
            return null;
          }
          if (TypicalSupport.match$3252(arg$3682)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<TypicalTypes.entry> list$3684 = Analyzer.cast(Analyzer.cast(arg$3682));
            final TypicalTypes.entry x = Analyzer.cast(Primitives.wrapHead(list$3684));
            final Pair<TypicalTypes.entry> xs = Analyzer.cast(Primitives.wrapTail(list$3684));

            return Analyzer.cast(TypicalSupport.append$297.apply(new Pair<String>(null == x ? null : x.entryName), getNames.apply(xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<BigInteger, String, Pair<Node>> countInList = new Function.F2<BigInteger, String, Pair<Node>>() {
    public BigInteger apply(final String s, final Pair<Node> nl) {
      return new Match<BigInteger>() {
        public BigInteger apply() {
          final Pair<Node> arg$3686 = Analyzer.cast(nl);

          if ((null == arg$3686)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3686)) {
            return Analyzer.cast(BigInteger.valueOf(0));
          }
          if (true) {
            final Pair<Node> list$3688 = Analyzer.cast(Analyzer.cast(arg$3686));
            final Node x = GNode.cast(Primitives.wrapHead(list$3688));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3688));

            return Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, x), countInList.apply(s, xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<BigInteger, String, Node> countAppearance = new Function.F2<BigInteger, String, Node>() {
    public BigInteger apply(final String s, final Node no) {
      return (null == Primitives.isBottom.apply(no) ? null : Primitives.isBottom.apply(no) ? BigInteger.valueOf(0) : new Match<BigInteger>() {
        public BigInteger apply() {
          final Node arg$3690 = GNode.cast(no);

          if ((null == arg$3690)) {
            return null;
          }
          if (TypicalSupport.match$479(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3694 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3694);
          }
          if (TypicalSupport.match$679(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3698 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3698);
          }
          if (TypicalSupport.match$3405(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3702 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3702);
          }
          if (TypicalSupport.match$2400(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3706 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3706);
          }
          if (TypicalSupport.match$9(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 1, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3710 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3710);
          }
          if (TypicalSupport.match$2509(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3714 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3714);
          }
          if (TypicalSupport.match$2809(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3718 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3718);
          }
          if (TypicalSupport.match$269(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3722 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3722);
          }
          if (TypicalSupport.match$277(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3726 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3726);
          }
          if (TypicalSupport.match$283(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3730 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3730);
          }
          if (TypicalSupport.match$3474(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3734 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3734);
          }
          if (TypicalSupport.match$321(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3738 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3738);
          }
          if (TypicalSupport.match$339(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3742 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3742);
          }
          if (TypicalSupport.match$3413(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 0, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3746 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3746);
          }
          if (TypicalSupport.match$5(arg$3690)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$3690, 1, arg$3690.size()));

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3750 = Analyzer.cast(countInList.apply(s, nl));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3750);
          }
          if (TypicalSupport.match$2273(arg$3690)) {
            final Node n = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3754 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3754);
          }
          if (TypicalSupport.match$49(arg$3690)) {
            final Node n = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3758 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3758);
          }
          if (TypicalSupport.match$2379(arg$3690)) {
            final Node n = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3762 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3762);
          }
          if (TypicalSupport.match$2390(arg$3690)) {
            final Node n = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3766 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3766);
          }
          if (TypicalSupport.match$45(arg$3690)) {
            final Node n = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3770 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3770);
          }
          if (TypicalSupport.match$3256(arg$3690)) {
            final Node n = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3774 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3774);
          }
          if (TypicalSupport.match$57(arg$3690)) {
            final Node n = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3778 = Analyzer.cast(countAppearance.apply(s, n));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3778);
          }
          if (TypicalSupport.match$84(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3782 = Analyzer.cast(new Let<BigInteger>() {
              final Pair<String> strList;

              {
                strList = Analyzer.cast(retrieveVariables.apply(no));
              }

              public BigInteger apply() {
                return Analyzer.cast(null == Primitives.contains.apply(s, strList) ? null : Primitives.contains.apply(s, strList) ? BigInteger.valueOf(0) : Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));
              }
            }.apply());

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3782);
          }
          if (TypicalSupport.match$83(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3786 = Analyzer.cast(new Let<BigInteger>() {
              final Pair<String> strList;

              {
                strList = Analyzer.cast(retrieveVariables.apply(no));
              }

              public BigInteger apply() {
                return Analyzer.cast(null == Primitives.contains.apply(s, strList) ? null : Primitives.contains.apply(s, strList) ? BigInteger.valueOf(0) : Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));
              }
            }.apply());

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3786);
          }
          if (TypicalSupport.match$483(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3790 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3790);
          }
          if (TypicalSupport.match$491(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3794 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3794);
          }
          if (TypicalSupport.match$499(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3798 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3798);
          }
          if (TypicalSupport.match$505(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3802 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3802);
          }
          if (TypicalSupport.match$553(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3806 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3806);
          }
          if (TypicalSupport.match$609(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3810 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3810);
          }
          if (TypicalSupport.match$673(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3814 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3814);
          }
          if (TypicalSupport.match$2267(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3818 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3818);
          }
          if (TypicalSupport.match$255(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3822 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3822);
          }
          if (TypicalSupport.match$665(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3826 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3826);
          }
          if (TypicalSupport.match$2795(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3830 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3830);
          }
          if (TypicalSupport.match$287(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3834 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3834);
          }
          if (TypicalSupport.match$306(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3838 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3838);
          }
          if (TypicalSupport.match$312(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3842 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3842);
          }
          if (TypicalSupport.match$363(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3846 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3846);
          }
          if (TypicalSupport.match$2415(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3850 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3850);
          }
          if (TypicalSupport.match$2427(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3854 = Analyzer.cast(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3854);
          }
          if (TypicalSupport.match$65(arg$3690)) {
            final String str = (arg$3690.size() > 0 ? arg$3690.getString(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3858 = Analyzer.cast(null == Primitives.equal.apply(s, str) ? null : Primitives.equal.apply(s, str) ? BigInteger.valueOf(1) : BigInteger.valueOf(0));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3858);
          }
          if (TypicalSupport.match$61(arg$3690)) {
            final String str = (arg$3690.size() > 0 ? arg$3690.getString(0) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3862 = Analyzer.cast(null == Primitives.equal.apply(s, str) ? null : Primitives.equal.apply(s, str) ? BigInteger.valueOf(1) : BigInteger.valueOf(0));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3862);
          }
          if (TypicalSupport.match$692(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);
            final Node n3 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3866 = Analyzer.cast(Primitives.addInt.apply(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)), countAppearance.apply(s, n3)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3866);
          }
          if (TypicalSupport.match$2828(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);
            final Node n3 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3870 = Analyzer.cast(Primitives.addInt.apply(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)), countAppearance.apply(s, n3)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3870);
          }
          if (TypicalSupport.match$2801(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);
            final Node n3 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3874 = Analyzer.cast(Primitives.addInt.apply(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)), countAppearance.apply(s, n3)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3874);
          }
          if (TypicalSupport.match$2405(arg$3690)) {
            final Node n1 = (arg$3690.size() > 0 ? arg$3690.getGeneric(0) : null);
            final Node n2 = (arg$3690.size() > 1 ? arg$3690.getGeneric(1) : null);
            final Node n3 = (arg$3690.size() > 2 ? arg$3690.getGeneric(2) : null);
            final Node n4 = (arg$3690.size() > 3 ? arg$3690.getGeneric(3) : null);

            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3878 = Analyzer.cast(Primitives.addInt.apply(Primitives.addInt.apply(Primitives.addInt.apply(countAppearance.apply(s, n1), countAppearance.apply(s, n2)), countAppearance.apply(s, n3)), countAppearance.apply(s, n4)));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3878);
          }
          if (true) {
            matching_nodes.add(arg$3690);
            if ((null != arg$3690 && processScopeNodes.contains(arg$3690.getName()))) {
              processScope(arg$3690, getScope);
            }
            checkEnterScope(arg$3690);

            final Object retValue$3881 = Analyzer.cast(BigInteger.valueOf(0));

            checkExitScope(arg$3690);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$3881);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F2<Pair<String>, Pair<String>, Node> removeUsedVariables = new Function.F2<Pair<String>, Pair<String>, Node>() {
    public Pair<String> apply(final Pair<String> strList, final Node no) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<String> arg$3883 = Analyzer.cast(strList);

          if ((null == arg$3883)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$3883)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<String> list$3885 = Analyzer.cast(Analyzer.cast(arg$3883));
            final String x = Analyzer.cast(Primitives.wrapHead(list$3885));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$3885));

            return Analyzer.cast(null == Primitives.greaterInt.apply(countAppearance.apply(x, no), BigInteger.valueOf(1)) ? null : Primitives.greaterInt.apply(countAppearance.apply(x, no), BigInteger.valueOf(1)) ? removeUsedVariables.apply(xs, no) : TypicalSupport.append$297.apply(new Pair<String>(x), removeUsedVariables.apply(xs, no)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Object, Pair<Node>> checkUnusedParameters = new Function.F1<Object, Pair<Node>>() {
    public Object apply(final Pair<Node> nl) {
      return new Match<Object>() {
        public Object apply() {
          final Pair<Node> arg$3887 = Analyzer.cast(nl);

          if ((null == arg$3887)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3887)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<Node> list$3889 = Analyzer.cast(Analyzer.cast(arg$3887));
            final Node x = GNode.cast(Primitives.wrapHead(list$3889));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$3889));

            return Analyzer.cast(new Match<Object>() {
              public Object apply() {
                final Node arg$3900 = GNode.cast(x);

                if ((null == arg$3900)) {
                  return null;
                }
                if (TypicalSupport.match$73(arg$3900)) {
                  final Node p = (arg$3900.size() > 1 ? arg$3900.getGeneric(1) : null);
                  final Node v = (arg$3900.size() > 2 ? arg$3900.getGeneric(2) : null);

                  matching_nodes.add(arg$3900);
                  if ((null != arg$3900 && processScopeNodes.contains(arg$3900.getName()))) {
                    processScope(arg$3900, getScope);
                  }
                  checkEnterScope(arg$3900);

                  final Object retValue$3904 = Analyzer.cast(new Let<Object>() {
                    final TypicalTypes.raw_type<?> t;

                    {
                      t = Analyzer.cast(Analyzer.cast(lookup2.apply(x, getNameSpace)));
                    }

                    public Object apply() {
                      return Analyzer.cast(null == Primitives.isBottom.apply(t) ? null : Primitives.isBottom.apply(t) ? checkUnusedParameters.apply(xs) : null == Primitives.isNotBottom.apply(p) || !Primitives.isNotBottom.apply(p) ? null : new Let<Object>() {
                        final Pair<Node> nl;
                        final Pair<String> vars;

                        {
                          nl = Analyzer.cast(getNodeList.apply(p));
                          vars = Analyzer.cast(TypicalSupport.map$3892.apply(getString, nl));
                          checkUnusedVariables.apply(vars, v);
                        }

                        public Object apply() {
                          return Analyzer.cast(checkUnusedParameters.apply(xs));
                        }
                      }.apply());
                    }
                  }.apply());

                  checkExitScope(arg$3900);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3904);
                }
                if (true) {
                  matching_nodes.add(arg$3900);
                  if ((null != arg$3900 && processScopeNodes.contains(arg$3900.getName()))) {
                    processScope(arg$3900, getScope);
                  }
                  checkEnterScope(arg$3900);

                  final Object retValue$3907 = Analyzer.cast(checkUnusedParameters.apply(xs));

                  checkExitScope(arg$3900);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$3907);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<String, Node, String> getAnnotatedString = new Function.F2<String, Node, String>() {
    public String apply(final Node n, final String s) {
      return new Let<String>() {
        final TypicalTypes.raw_type<?> t;

        {
          t = Analyzer.cast(Primitives.getAnnotation.apply(n, s));
        }

        public String apply() {
          return Analyzer.cast(new Match<String>() {
            public String apply() {
              final TypicalTypes.raw_type<?> arg$3910 = Analyzer.cast(t);

              if ((null == arg$3910)) {
                return null;
              }
              if ((null != arg$3910))
                                switch (arg$3910.tag()) {
                case StringName:
                  if (TypicalSupport.match$3911(arg$3910)) {
                    final String res = Analyzer.cast(arg$3910.getTuple().get1());

                    return Analyzer.cast(res);
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(null);
              }
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, Node, String> getAnnotatedStringList = new Function.F2<Pair<String>, Node, String>() {
    public Pair<String> apply(final Node n, final String s) {
      return new Let<Pair<String>>() {
        final TypicalTypes.raw_type<?> t;

        {
          t = Analyzer.cast(Primitives.getAnnotation.apply(n, s));
        }

        public Pair<String> apply() {
          return Analyzer.cast(new Match<Pair<String>>() {
            public Pair<String> apply() {
              final TypicalTypes.raw_type<?> arg$3913 = Analyzer.cast(t);

              if ((null == arg$3913)) {
                return null;
              }
              if ((null != arg$3913))
                                switch (arg$3913.tag()) {
                case StringList:
                  if (TypicalSupport.match$3352(arg$3913)) {
                    final Pair<String> res = Analyzer.cast(arg$3913.getTuple().get1());

                    return Analyzer.cast(res);
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(null);
              }
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, String> hasTypeVariables = new Function.F1<Boolean, String>() {
    public Boolean apply(final String s) {
      return (null == isDefined.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace) ? null : isDefined.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace) ? new Let<Boolean>() {
        final Node nod;

        {
          nod = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace)));
        }

        public Boolean apply() {
          return Analyzer.cast(Primitives.hasAnnotation.apply(nod, "type_variables"));
        }
      }.apply() : Boolean.FALSE);
    }
  };

  protected class removeLast {
    public <T0> Pair<T0> apply(final Pair<T0> nl) {
      return new Match<Pair<T0>>() {
        public Pair<T0> apply() {
          final Pair<Object> arg$3916 = Analyzer.cast(nl);

          if ((null == arg$3916)) {
            return null;
          }
          if (TypicalSupport.match$3917(arg$3916)) {
            return Analyzer.cast(Pair.empty());
          }
          if (TypicalSupport.match$3918(arg$3916)) {
            return Analyzer.cast(Pair.empty());
          }
          if (true) {
            final Pair<Object> list$3919 = Analyzer.cast(Analyzer.cast(arg$3916));
            final Object x = Analyzer.cast(Primitives.wrapHead(list$3919));
            final Pair<Object> xs = Analyzer.cast(Primitives.wrapTail(list$3919));

            return Analyzer.cast(TypicalSupport.append$3920.apply(new Pair<Object>(x), removeLast.apply(xs)));
          }
          return null;
        }
      }.apply();
    }
  }

  final removeLast removeLast = new removeLast();

  final Function.F2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>, Pair<Node>> processFunctionApplication = new Function.F2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>, Pair<Node>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t, final Pair<Node> nl) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$3922 = Analyzer.cast(t);

          if ((null == arg$3922)) {
            return null;
          }
          if ((null != arg$3922))
                        switch (arg$3922.tag()) {
            case VariableT:
              if (TypicalSupport.match$117(arg$3922)) {
                final String str = Analyzer.cast(arg$3922.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isNotBottom.apply(ty) ? null : Primitives.isNotBottom.apply(ty) ? processFunctionApplication.apply(ty, nl) : new Let<TypicalTypes.raw_type<?>>() {
                      final Pair<TypicalTypes.raw_type<?>> tnl;

                      {
                        tnl = Analyzer.cast(TypicalSupport.map$129.apply(analyze, nl));
                      }

                      public TypicalTypes.raw_type<?> apply() {
                        return Analyzer.cast(null == Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tnl)) || !Primitives.not.apply(TypicalSupport.exists$184.apply(Primitives.isBottom, tnl)) ? null : new Let<TypicalTypes.raw_type<?>>() {
                          final TypicalTypes.raw_type<?> ret;

                          {
                            ret = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                            Analyzer.cast(Primitives.put.apply(str, new TypicalTypes.FunctionT(tnl, ret), hashTable));
                          }

                          public TypicalTypes.raw_type<?> apply() {
                            return Analyzer.cast(ret);
                          }
                        }.apply());
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case FunctionT:
              if (TypicalSupport.match$97(arg$3922)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3922.getTuple().get1());
                final TypicalTypes.raw_type<?> ret = Analyzer.cast(arg$3922.getTuple().get2());

                return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(nl), Primitives.length.apply(tl)) ? error("too many arguments in function application", null) : processArguments.apply(nl, tl, ret));
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(error(Primitives.concat.apply("expected function, found ", getTypeName.apply(t)), null));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> copy = new Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$3926 = Analyzer.cast(t);

          if ((null == arg$3926)) {
            return null;
          }
          if ((null != arg$3926))
                        switch (arg$3926.tag()) {
            case FunctionT:
              if (TypicalSupport.match$97(arg$3926)) {
                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;

                  {
                    vars = Analyzer.cast(collectTypeVariables.apply(t));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(replaceTypeVariables.apply(vars, t));
                  }
                }.apply());
              }
              break;
            case VariantT:
              if (TypicalSupport.match$100(arg$3926)) {
                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;

                  {
                    vars = Analyzer.cast(collectTypeVariables.apply(t));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(replaceTypeVariables.apply(vars, t));
                  }
                }.apply());
              }
              break;
            case TypeName:
              if (TypicalSupport.match$95(arg$3926)) {
                final String s = Analyzer.cast(arg$3926.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> t;

                  {
                    t = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(copy.apply(t));
                  }
                }.apply());
              }
              break;
            case ConstructorT:
              if (TypicalSupport.match$94(arg$3926)) {
                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;

                  {
                    vars = Analyzer.cast(collectTypeVariables.apply(t));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(replaceTypeVariables.apply(vars, t));
                  }
                }.apply());
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$3926)) {
                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;

                  {
                    vars = Analyzer.cast(collectTypeVariables.apply(t));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(replaceTypeVariables.apply(vars, t));
                  }
                }.apply());
              }
              break;
            case RecordT:
              if (TypicalSupport.match$107(arg$3926)) {
                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<String> vars;

                  {
                    vars = Analyzer.cast(collectTypeVariables.apply(t));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(replaceTypeVariables.apply(vars, t));
                  }
                }.apply());
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(t);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.raw_type<?>, Pair<String>, TypicalTypes.raw_type<?>> replaceTypeVariables = new Function.F2<TypicalTypes.raw_type<?>, Pair<String>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final Pair<String> vars, final TypicalTypes.raw_type<?> t) {
      return (null == Primitives.isBottom.apply(vars) ? null : Primitives.isBottom.apply(vars) ? t : new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Pair<String> arg$3934 = Analyzer.cast(vars);

          if ((null == arg$3934)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$3934)) {
            return Analyzer.cast(t);
          }
          if (true) {
            final Pair<String> list$3936 = Analyzer.cast(Analyzer.cast(arg$3934));
            final String x = Analyzer.cast(Primitives.wrapHead(list$3936));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$3936));

            return Analyzer.cast(replaceTypeVariables.apply(xs, replace.apply(t, x, freshName.apply("type"))));
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F1<Pair<String>, TypicalTypes.raw_type<?>> collectTypeVariables = new Function.F1<Pair<String>, TypicalTypes.raw_type<?>>() {
    public Pair<String> apply(final TypicalTypes.raw_type<?> t) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final TypicalTypes.raw_type<?> arg$3938 = Analyzer.cast(t);

          if ((null == arg$3938)) {
            return null;
          }
          if ((null != arg$3938))
                        switch (arg$3938.tag()) {
            case PairOfType:
              if (TypicalSupport.match$116(arg$3938)) {
                final TypicalTypes.raw_type<?> t1 = Analyzer.cast(arg$3938.getTuple().get1());
                final TypicalTypes.raw_type<?> t2 = Analyzer.cast(arg$3938.getTuple().get2());

                return Analyzer.cast(new Let<Pair<String>>() {
                  final Pair<String> vars1;
                  final Pair<String> vars2;

                  {
                    vars1 = Analyzer.cast(collectTypeVariables.apply(t1));
                    vars2 = Analyzer.cast(collectTypeVariables.apply(t2));
                  }

                  public Pair<String> apply() {
                    return Analyzer.cast(TypicalSupport.union$313.apply(vars1, vars2));
                  }
                }.apply());
              }
              break;
            case VariableT:
              if (TypicalSupport.match$3939(arg$3938)) {
                final String str = Analyzer.cast(arg$3938.getTuple().get1());

                return Analyzer.cast(new Pair<String>(str));
              }
              break;
            case FunctionT:
              if (TypicalSupport.match$97(arg$3938)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3938.getTuple().get1());
                final TypicalTypes.raw_type<?> ret = Analyzer.cast(arg$3938.getTuple().get2());

                return Analyzer.cast(new Let<Pair<String>>() {
                  final Pair<String> vars1;
                  final Pair<String> vars2;

                  {
                    vars1 = Analyzer.cast(collectTypeVariables.apply(ret));
                    vars2 = Analyzer.cast(makeUnion.apply(tl));
                  }

                  public Pair<String> apply() {
                    return Analyzer.cast(TypicalSupport.union$313.apply(vars1, vars2));
                  }
                }.apply());
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$115(arg$3938)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3938.getTuple().get1());

                return Analyzer.cast(makeUnion.apply(tl));
              }
              break;
            case VariantT:
              if (TypicalSupport.match$100(arg$3938)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3938.getTuple().get1());

                return Analyzer.cast(makeUnion.apply(tl));
              }
              break;
            case ConstructorT:
              if (TypicalSupport.match$94(arg$3938)) {
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3938.getTuple().get3());

                return Analyzer.cast(collectTypeVariables.apply(ty));
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$3938)) {
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3938.getTuple().get3());

                return Analyzer.cast(collectTypeVariables.apply(ty));
              }
              break;
            case TupleT:
              if (TypicalSupport.match$114(arg$3938)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3938.getTuple().get1());

                return Analyzer.cast(makeUnion.apply(tl));
              }
              break;
            case RecordT:
              if (TypicalSupport.match$107(arg$3938)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3938.getTuple().get1());

                return Analyzer.cast(makeUnion.apply(tl));
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(Pair.<String>empty());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<String>, Pair<TypicalTypes.raw_type<?>>> makeUnion = new Function.F1<Pair<String>, Pair<TypicalTypes.raw_type<?>>>() {
    public Pair<String> apply(final Pair<TypicalTypes.raw_type<?>> tl) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3949 = Analyzer.cast(tl);

          if ((null == arg$3949)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3949)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3951 = Analyzer.cast(Analyzer.cast(arg$3949));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3951));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3951));

            return Analyzer.cast(TypicalSupport.union$313.apply(collectTypeVariables.apply(x), makeUnion.apply(xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>, String, String> replace = new Function.F3<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>, String, String>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t, final String str, final String newVar) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$3953 = Analyzer.cast(t);

          if ((null == arg$3953)) {
            return null;
          }
          if ((null != arg$3953))
                        switch (arg$3953.tag()) {
            case PairOfType:
              if (TypicalSupport.match$116(arg$3953)) {
                final TypicalTypes.raw_type<?> t1 = Analyzer.cast(arg$3953.getTuple().get1());
                final TypicalTypes.raw_type<?> t2 = Analyzer.cast(arg$3953.getTuple().get2());

                return Analyzer.cast(new TypicalTypes.PairOfType(replace.apply(t1, str, newVar), replace.apply(t2, str, newVar)));
              }
              break;
            case VariableT:
              if (TypicalSupport.match$117(arg$3953)) {
                final String s = Analyzer.cast(arg$3953.getTuple().get1());

                return Analyzer.cast(null == Primitives.equal.apply(s, str) ? null : Primitives.equal.apply(s, str) ? new TypicalTypes.VariableT(newVar, Boolean.FALSE) : t);
              }
              break;
            case FunctionT:
              if (TypicalSupport.match$97(arg$3953)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3953.getTuple().get1());
                final TypicalTypes.raw_type<?> ret = Analyzer.cast(arg$3953.getTuple().get2());

                return Analyzer.cast(new TypicalTypes.FunctionT(replaceList.apply(tl, str, newVar), replace.apply(ret, str, newVar)));
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$115(arg$3953)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3953.getTuple().get1());
                final String s = Analyzer.cast(arg$3953.getTuple().get2());

                return Analyzer.cast(new TypicalTypes.ConstructedT(replaceList.apply(tl, str, newVar), s));
              }
              break;
            case VariantT:
              if (TypicalSupport.match$100(arg$3953)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3953.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(TypicalSupport.head$98.apply(tl));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final TypicalTypes.raw_type<?> arg$3962 = Analyzer.cast(ty);

                        if ((null == arg$3962)) {
                          return null;
                        }
                        if ((null != arg$3962))
                                                    switch (arg$3962.tag()) {
                          case ConstructorT:
                            if (TypicalSupport.match$94(arg$3962)) {
                              final String s = Analyzer.cast(arg$3962.getTuple().get1());

                              return Analyzer.cast(null == hasTypeVariables.apply(s) ? null : hasTypeVariables.apply(s) ? new TypicalTypes.VariantT(replaceList.apply(tl, str, newVar)) : t);
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case ConstructorT:
              if (TypicalSupport.match$94(arg$3953)) {
                final String s1 = Analyzer.cast(arg$3953.getTuple().get1());
                final String s2 = Analyzer.cast(arg$3953.getTuple().get2());
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3953.getTuple().get3());

                return Analyzer.cast(new TypicalTypes.ConstructorT(s1, s2, replace.apply(ty, str, newVar)));
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$3953)) {
                final String s1 = Analyzer.cast(arg$3953.getTuple().get1());
                final String s2 = Analyzer.cast(arg$3953.getTuple().get2());
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3953.getTuple().get3());

                return Analyzer.cast(new TypicalTypes.FieldT(s1, s2, replace.apply(ty, str, newVar)));
              }
              break;
            case TupleT:
              if (TypicalSupport.match$114(arg$3953)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3953.getTuple().get1());

                return Analyzer.cast(new TypicalTypes.TupleT(replaceList.apply(tl, str, newVar)));
              }
              break;
            case RecordT:
              if (TypicalSupport.match$107(arg$3953)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3953.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(TypicalSupport.head$98.apply(tl));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final TypicalTypes.raw_type<?> arg$3969 = Analyzer.cast(ty);

                        if ((null == arg$3969)) {
                          return null;
                        }
                        if ((null != arg$3969))
                                                    switch (arg$3969.tag()) {
                          case FieldT:
                            if (TypicalSupport.match$96(arg$3969)) {
                              final String s = Analyzer.cast(arg$3969.getTuple().get1());

                              return Analyzer.cast(null == hasTypeVariables.apply(s) ? null : hasTypeVariables.apply(s) ? new TypicalTypes.RecordT(replaceList.apply(tl, str, newVar)) : t);
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(t);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.raw_type<?>>, String, String> replaceList = new Function.F3<Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.raw_type<?>>, String, String>() {
    public Pair<TypicalTypes.raw_type<?>> apply(final Pair<TypicalTypes.raw_type<?>> tl, final String str, final String newStr) {
      return new Match<Pair<TypicalTypes.raw_type<?>>>() {
        public Pair<TypicalTypes.raw_type<?>> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$3976 = Analyzer.cast(tl);

          if ((null == arg$3976)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$3976)) {
            return Analyzer.cast(Pair.<TypicalTypes.raw_type<?>>empty());
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$3978 = Analyzer.cast(Analyzer.cast(arg$3976));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$3978));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$3978));

            return Analyzer.cast(Primitives.wrapCons(replace.apply(x, str, newStr), replaceList.apply(xs, str, newStr)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> resolveType = new Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$3980 = Analyzer.cast(t);

          if ((null == arg$3980)) {
            return null;
          }
          if ((null != arg$3980))
                        switch (arg$3980.tag()) {
            case PairOfType:
              if (TypicalSupport.match$116(arg$3980)) {
                final TypicalTypes.raw_type<?> t1 = Analyzer.cast(arg$3980.getTuple().get1());
                final TypicalTypes.raw_type<?> t2 = Analyzer.cast(arg$3980.getTuple().get2());

                return Analyzer.cast(new TypicalTypes.PairOfType(resolveType.apply(t1), resolveType.apply(t2)));
              }
              break;
            case VariableT:
              if (TypicalSupport.match$117(arg$3980)) {
                final String str = Analyzer.cast(arg$3980.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> newT;

                  {
                    newT = Analyzer.cast(Analyzer.cast(Primitives.get.apply(str, hashTable)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(null == Primitives.isBottom.apply(newT) ? null : Primitives.isBottom.apply(newT) ? new TypicalTypes.VariableT(str, Boolean.TRUE) : resolveType.apply(newT));
                  }
                }.apply());
              }
              break;
            case FunctionT:
              if (TypicalSupport.match$97(arg$3980)) {
                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$3980.getTuple().get1());
                final TypicalTypes.raw_type<?> ret = Analyzer.cast(arg$3980.getTuple().get2());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<TypicalTypes.raw_type<?>> left;

                  {
                    left = Analyzer.cast(TypicalSupport.map$3983.apply(resolveType, tl));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.FunctionT(left, resolveType.apply(ret)));
                  }
                }.apply());
              }
              break;
            case VariantT:
              if (TypicalSupport.match$100(arg$3980)) {
                final Pair<TypicalTypes.raw_type<?>> tyList = Analyzer.cast(arg$3980.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> con;

                  {
                    con = Analyzer.cast(TypicalSupport.head$98.apply(tyList));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                      public TypicalTypes.raw_type<?> apply() {
                        final TypicalTypes.raw_type<?> arg$3990 = Analyzer.cast(con);

                        if ((null == arg$3990)) {
                          return null;
                        }
                        if ((null != arg$3990))
                                                    switch (arg$3990.tag()) {
                          case ConstructorT:
                            if (TypicalSupport.match$94(arg$3990)) {
                              final String s = Analyzer.cast(arg$3990.getTuple().get1());

                              return Analyzer.cast(null == Primitives.not.apply(hasTypeVariables.apply(s)) ? null : Primitives.not.apply(hasTypeVariables.apply(s)) ? t : new Let<TypicalTypes.raw_type<?>>() {
                                final Pair<TypicalTypes.raw_type<?>> tl;

                                {
                                  tl = Analyzer.cast(TypicalSupport.map$3983.apply(resolveType, tyList));
                                }

                                public TypicalTypes.raw_type<?> apply() {
                                  return Analyzer.cast(new TypicalTypes.VariantT(tl));
                                }
                              }.apply());
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case ConstructedT:
              if (TypicalSupport.match$115(arg$3980)) {
                final Pair<TypicalTypes.raw_type<?>> tyList = Analyzer.cast(arg$3980.getTuple().get1());
                final String s = Analyzer.cast(arg$3980.getTuple().get2());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<TypicalTypes.raw_type<?>> tl;

                  {
                    tl = Analyzer.cast(TypicalSupport.map$3983.apply(resolveType, tyList));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.ConstructedT(tl, s));
                  }
                }.apply());
              }
              break;
            case ConstructorT:
              if (TypicalSupport.match$94(arg$3980)) {
                final String s1 = Analyzer.cast(arg$3980.getTuple().get1());
                final String s2 = Analyzer.cast(arg$3980.getTuple().get2());
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3980.getTuple().get3());

                return Analyzer.cast(new TypicalTypes.ConstructorT(s1, s2, resolveType.apply(ty)));
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$3980)) {
                final String s1 = Analyzer.cast(arg$3980.getTuple().get1());
                final String s2 = Analyzer.cast(arg$3980.getTuple().get2());
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$3980.getTuple().get3());

                return Analyzer.cast(new TypicalTypes.FieldT(s1, s2, resolveType.apply(ty)));
              }
              break;
            case TupleT:
              if (TypicalSupport.match$114(arg$3980)) {
                final Pair<TypicalTypes.raw_type<?>> tyList = Analyzer.cast(arg$3980.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<TypicalTypes.raw_type<?>> tl;

                  {
                    tl = Analyzer.cast(TypicalSupport.map$3983.apply(resolveType, tyList));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.TupleT(tl));
                  }
                }.apply());
              }
              break;
            case RecordT:
              if (TypicalSupport.match$107(arg$3980)) {
                final Pair<TypicalTypes.raw_type<?>> tyList = Analyzer.cast(arg$3980.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final Pair<TypicalTypes.raw_type<?>> tl;

                  {
                    tl = Analyzer.cast(TypicalSupport.map$3983.apply(resolveType, tyList));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(new TypicalTypes.RecordT(tl));
                  }
                }.apply());
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(t);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<TypicalTypes.raw_type<?>, Pair<Node>, Pair<TypicalTypes.raw_type<?>>, TypicalTypes.raw_type<?>> processArguments = new Function.F3<TypicalTypes.raw_type<?>, Pair<Node>, Pair<TypicalTypes.raw_type<?>>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final Pair<Node> nl, final Pair<TypicalTypes.raw_type<?>> tl, final TypicalTypes.raw_type<?> retType) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Pair<Node> arg$3998 = Analyzer.cast(nl);

          if ((null == arg$3998)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$3998)) {
            return Analyzer.cast(null == Primitives.isEmpty.apply(tl) ? null : Primitives.isEmpty.apply(tl) ? retType : new TypicalTypes.FunctionT(tl, retType));
          }
          if (true) {
            final Pair<Node> list$4000 = Analyzer.cast(Analyzer.cast(arg$3998));
            final Node x = GNode.cast(Primitives.wrapHead(list$4000));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$4000));

            return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
              public TypicalTypes.raw_type<?> apply() {
                final Pair<TypicalTypes.raw_type<?>> arg$4006 = Analyzer.cast(tl);

                if ((null == arg$4006)) {
                  return null;
                }
                if (true) {
                  final Pair<TypicalTypes.raw_type<?>> list$4007 = Analyzer.cast(Analyzer.cast(arg$4006));
                  final TypicalTypes.raw_type<?> y = Analyzer.cast(Primitives.wrapHead(list$4007));
                  final Pair<TypicalTypes.raw_type<?>> ys = Analyzer.cast(Primitives.wrapTail(list$4007));

                  return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                    final TypicalTypes.raw_type<?> tx;
                    final Pair<String> muts;
                    final String preStr;

                    {
                      tx = Analyzer.cast(analyze.apply(x));
                      muts = Analyzer.cast(getAnnotatedStringList.apply(x, "mutual"));
                      preStr = Analyzer.cast(null == Primitives.isNotBottom.apply(muts) ? null : Primitives.isNotBottom.apply(muts) ? Primitives.concat.apply(Primitives.concat.apply("in mutual functions: ", joinStringList.apply(muts, "")), "; ") : "");
                      new Guard<TypicalTypes.raw_type<?>>() {
                        public TypicalTypes.raw_type<?> apply() {
                          if ((null == unify)) {
                            return null;
                          }
                          if ((null == tx)) {
                            return null;
                          }
                          if ((null == y)) {
                            return null;
                          }

                          final TypicalTypes.raw_type<?> result$4009 = unify.apply(tx, y);

                          if ((null == result$4009)) {
                            return Analyzer.cast(error(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(preStr, " expected "), getTypeName.apply(y)), ", found "), getTypeName.apply(tx)), x));
                          }
                          return result$4009;
                        }
                      }.apply();
                    }

                    public TypicalTypes.raw_type<?> apply() {
                      return Analyzer.cast(processArguments.apply(xs, ys, retType));
                    }
                  }.apply());
                }
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> resolveRecordType = new Function.F1<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>() {
    public TypicalTypes.raw_type<?> apply(final TypicalTypes.raw_type<?> t) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final TypicalTypes.raw_type<?> arg$4012 = Analyzer.cast(t);

          if ((null == arg$4012)) {
            return null;
          }
          if ((null != arg$4012))
                        switch (arg$4012.tag()) {
            case VariableT:
              if (TypicalSupport.match$117(arg$4012)) {
                final String str = Analyzer.cast(arg$4012.getTuple().get1());

                return Analyzer.cast(null == isDefined.apply(GNode.create("UserDefinedType", str), getNameSpace) ? null : isDefined.apply(GNode.create("UserDefinedType", str), getNameSpace) ? new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", str), getNameSpace)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(resolveRecordType.apply(ty));
                  }
                }.apply() : t);
              }
              break;
            case TypeName:
              if (TypicalSupport.match$95(arg$4012)) {
                final String s = Analyzer.cast(arg$4012.getTuple().get1());

                return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", s), getNameSpace)));
                  }

                  public TypicalTypes.raw_type<?> apply() {
                    return Analyzer.cast(resolveRecordType.apply(ty));
                  }
                }.apply());
              }
              break;
            case FieldT:
              if (TypicalSupport.match$96(arg$4012)) {
                final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$4012.getTuple().get3());

                return Analyzer.cast(resolveRecordType.apply(ty));
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(t);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Object>, Pair<Node>> processFunctionCalls = new Function.F1<Pair<Object>, Pair<Node>>() {
    public Pair<Object> apply(final Pair<Node> nl) {
      return new Let<Pair<Object>>() {
        final TypicalTypes.graph tl;
        final Pair<TypicalTypes.call> edges;
        final Pair<Pair<String>> circles;
        final Pair<Pair<String>> g;
        final Pair<TypicalTypes.nodeRec> res;

        {
          tl = Analyzer.cast(buildGraph.apply(nl));
          edges = Analyzer.cast(removeWrongEdges.apply(null == tl ? null : tl.edges, null == tl ? null : tl.functionList));
          circles = Analyzer.cast(findCircles.apply(edges));
          g = Analyzer.cast(groupCircles.apply(circles, null == tl ? null : tl.functionList));
          res = Analyzer.cast(getResult.apply(null == tl ? null : tl.functionList, edges, g));
        }

        public Pair<Object> apply() {
          return Analyzer.cast(TypicalSupport.map$4017.apply(rememberOnNode, res));
        }
      }.apply();
    }
  };

  final Function.F1<Object, TypicalTypes.nodeRec> rememberOnNode = new Function.F1<Object, TypicalTypes.nodeRec>() {
    public Object apply(final TypicalTypes.nodeRec n) {
      return new Let<Object>() {
        final Node nod;

        {
          nod = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", null == n ? null : n.name, null, null), getNameSpace)));
          Primitives.annotate.apply(nod, "mutual", new TypicalTypes.StringList(null == n ? null : n.mutualList));
          Primitives.annotate.apply(nod, "depend", new TypicalTypes.StringList(null == n ? null : n.dependList));
        }

        public Object apply() {
          return Analyzer.cast(null);
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.graph, Pair<Node>> buildGraph = new Function.F1<TypicalTypes.graph, Pair<Node>>() {
    public TypicalTypes.graph apply(final Pair<Node> l) {
      return new Match<TypicalTypes.graph>() {
        public TypicalTypes.graph apply() {
          final Pair<Node> arg$4018 = Analyzer.cast(l);

          if ((null == arg$4018)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$4018)) {
            return Analyzer.cast(new TypicalTypes.graph(Pair.<String>empty(), Pair.<TypicalTypes.call>empty()));
          }
          if (true) {
            final Pair<Node> list$4020 = Analyzer.cast(Analyzer.cast(arg$4018));
            final Node x = GNode.cast(Primitives.wrapHead(list$4020));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$4020));

            return Analyzer.cast(new Match<TypicalTypes.graph>() {
              public TypicalTypes.graph apply() {
                final Node arg$4031 = GNode.cast(x);

                if ((null == arg$4031)) {
                  return null;
                }
                if (TypicalSupport.match$73(arg$4031)) {
                  final String s = (arg$4031.size() > 0 ? arg$4031.getString(0) : null);
                  final Node n = (arg$4031.size() > 2 ? arg$4031.getGeneric(2) : null);

                  matching_nodes.add(arg$4031);
                  if ((null != arg$4031 && processScopeNodes.contains(arg$4031.getName()))) {
                    processScope(arg$4031, getScope);
                  }
                  checkEnterScope(arg$4031);

                  final Object retValue$4035 = Analyzer.cast(new Let<TypicalTypes.graph>() {
                    final Pair<TypicalTypes.call> cal;
                    final TypicalTypes.graph grap;

                    {
                      cal = Analyzer.cast(getCall.apply(n, s, Pair.<TypicalTypes.call>empty()));
                      grap = Analyzer.cast(buildGraph.apply(xs));
                    }

                    public TypicalTypes.graph apply() {
                      return Analyzer.cast(new TypicalTypes.graph(Primitives.wrapCons(s, null == grap ? null : grap.functionList), TypicalSupport.union$4023.apply(cal, null == grap ? null : grap.edges)));
                    }
                  }.apply());

                  checkExitScope(arg$4031);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$4035);
                }
                if (true) {
                  matching_nodes.add(arg$4031);
                  if ((null != arg$4031 && processScopeNodes.contains(arg$4031.getName()))) {
                    processScope(arg$4031, getScope);
                  }
                  checkEnterScope(arg$4031);

                  final Object retValue$4038 = Analyzer.cast(buildGraph.apply(xs));

                  checkExitScope(arg$4031);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$4038);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<TypicalTypes.call>, Pair<TypicalTypes.call>, Pair<String>> removeWrongEdges = new Function.F2<Pair<TypicalTypes.call>, Pair<TypicalTypes.call>, Pair<String>>() {
    public Pair<TypicalTypes.call> apply(final Pair<TypicalTypes.call> edList, final Pair<String> strList) {
      return new Match<Pair<TypicalTypes.call>>() {
        public Pair<TypicalTypes.call> apply() {
          final Pair<TypicalTypes.call> arg$4041 = Analyzer.cast(edList);

          if ((null == arg$4041)) {
            return null;
          }
          if (TypicalSupport.match$3163(arg$4041)) {
            return Analyzer.cast(Pair.<TypicalTypes.call>empty());
          }
          if (true) {
            final Pair<TypicalTypes.call> list$4043 = Analyzer.cast(Analyzer.cast(arg$4041));
            final TypicalTypes.call x = Analyzer.cast(Primitives.wrapHead(list$4043));
            final Pair<TypicalTypes.call> xs = Analyzer.cast(Primitives.wrapTail(list$4043));

            return Analyzer.cast(null == Primitives.contains.apply(null == x ? null : x.callee, strList) ? null : Primitives.contains.apply(null == x ? null : x.callee, strList) ? Primitives.wrapCons(x, removeWrongEdges.apply(xs, strList)) : removeWrongEdges.apply(xs, strList));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<TypicalTypes.call>, Pair<Node>, String, Pair<TypicalTypes.call>> getCallList = new Function.F3<Pair<TypicalTypes.call>, Pair<Node>, String, Pair<TypicalTypes.call>>() {
    public Pair<TypicalTypes.call> apply(final Pair<Node> nl, final String s, final Pair<TypicalTypes.call> li) {
      return new Match<Pair<TypicalTypes.call>>() {
        public Pair<TypicalTypes.call> apply() {
          final Pair<Node> arg$4045 = Analyzer.cast(nl);

          if ((null == arg$4045)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$4045)) {
            return Analyzer.cast(Pair.<TypicalTypes.call>empty());
          }
          if (true) {
            final Pair<Node> list$4047 = Analyzer.cast(Analyzer.cast(arg$4045));
            final Node x = GNode.cast(Primitives.wrapHead(list$4047));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$4047));

            return Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> li1;
              final Pair<TypicalTypes.call> li2;

              {
                li1 = Analyzer.cast(getCall.apply(x, s, li));
                li2 = Analyzer.cast(getCallList.apply(xs, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li1, li2));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<TypicalTypes.call>, Node, String, Pair<TypicalTypes.call>> getCall = new Function.F3<Pair<TypicalTypes.call>, Node, String, Pair<TypicalTypes.call>>() {
    public Pair<TypicalTypes.call> apply(final Node no, final String s, final Pair<TypicalTypes.call> li) {
      return (null == Primitives.isBottom.apply(no) ? null : Primitives.isBottom.apply(no) ? li : new Match<Pair<TypicalTypes.call>>() {
        public Pair<TypicalTypes.call> apply() {
          final Node arg$4049 = GNode.cast(no);

          if ((null == arg$4049)) {
            return null;
          }
          if (TypicalSupport.match$479(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4053 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4053);
          }
          if (TypicalSupport.match$3413(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4057 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4057);
          }
          if (TypicalSupport.match$269(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4061 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4061);
          }
          if (TypicalSupport.match$2400(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4065 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4065);
          }
          if (TypicalSupport.match$9(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 1, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4069 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4069);
          }
          if (TypicalSupport.match$2509(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4073 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4073);
          }
          if (TypicalSupport.match$2809(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4077 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4077);
          }
          if (TypicalSupport.match$220(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4081 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caList;

              {
                caList = Analyzer.cast(getCallList.apply(nl, s, li));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, caList));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4081);
          }
          if (TypicalSupport.match$483(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4085 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4085);
          }
          if (TypicalSupport.match$491(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4089 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4089);
          }
          if (TypicalSupport.match$499(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4093 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4093);
          }
          if (TypicalSupport.match$505(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4097 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4097);
          }
          if (TypicalSupport.match$553(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4101 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4101);
          }
          if (TypicalSupport.match$609(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4105 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4105);
          }
          if (TypicalSupport.match$673(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4109 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4109);
          }
          if (TypicalSupport.match$83(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4113 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4113);
          }
          if (TypicalSupport.match$255(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4117 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4117);
          }
          if (TypicalSupport.match$2405(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4121 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4121);
          }
          if (TypicalSupport.match$2795(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4125 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4125);
          }
          if (TypicalSupport.match$2415(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4129 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4129);
          }
          if (TypicalSupport.match$2427(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4133 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4133);
          }
          if (TypicalSupport.match$665(arg$4049)) {
            final Node left = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node right = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4137 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> caLeft;
              final Pair<TypicalTypes.call> caRight;
              final Pair<TypicalTypes.call> res;

              {
                caLeft = Analyzer.cast(getCall.apply(left, s, li));
                caRight = Analyzer.cast(getCall.apply(right, s, li));
                res = Analyzer.cast(TypicalSupport.union$4023.apply(caLeft, caRight));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, res));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4137);
          }
          if (TypicalSupport.match$2801(arg$4049)) {
            final Node e1 = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);
            final Node e2 = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);
            final Node e3 = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4141 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final Pair<TypicalTypes.call> ca1;
              final Pair<TypicalTypes.call> ca2;
              final Pair<TypicalTypes.call> ca3;
              final Pair<TypicalTypes.call> ca4;

              {
                ca1 = Analyzer.cast(getCall.apply(e1, s, li));
                ca2 = Analyzer.cast(getCall.apply(e2, s, li));
                ca3 = Analyzer.cast(getCall.apply(e3, s, li));
                ca4 = Analyzer.cast(TypicalSupport.union$4023.apply(TypicalSupport.union$4023.apply(ca1, ca2), ca3));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, ca4));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4141);
          }
          if (TypicalSupport.match$679(arg$4049)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4049, 0, arg$4049.size()));

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4153 = Analyzer.cast(new Match<Pair<TypicalTypes.call>>() {
              public Pair<TypicalTypes.call> apply() {
                final Pair<Node> arg$4147 = Analyzer.cast(nl);

                if ((null == arg$4147)) {
                  return null;
                }
                if (TypicalSupport.match$4144(arg$4147)) {
                  final Node name = Analyzer.cast(arg$4147.get(0));
                  final Node args = Analyzer.cast(arg$4147.get(1));

                  return Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
                    final Pair<Node> el;
                    final String str;
                    final Pair<TypicalTypes.call> caList;
                    final TypicalTypes.call ca;

                    {
                      el = Analyzer.cast(getNodeList.apply(args));
                      str = Analyzer.cast(getString.apply(name));
                      caList = Analyzer.cast(getCallList.apply(el, s, li));
                      ca = Analyzer.cast(new TypicalTypes.call(s, str));
                    }

                    public Pair<TypicalTypes.call> apply() {
                      return Analyzer.cast(TypicalSupport.union$4023.apply(li, Primitives.wrapCons(ca, caList)));
                    }
                  }.apply());
                }
                if (TypicalSupport.match$4145(arg$4147)) {
                  final Pair<Node> el = Analyzer.cast(Primitives.getChildren(arg$4147.get(2), 0, arg$4147.get(2).size()));

                  return Analyzer.cast(TypicalSupport.union$4023.apply(li, getCallList.apply(el, s, li)));
                }
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4153);
          }
          if (TypicalSupport.match$61(arg$4049)) {
            final String str = (arg$4049.size() > 0 ? arg$4049.getString(0) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4157 = Analyzer.cast(new Let<Pair<TypicalTypes.call>>() {
              final TypicalTypes.call ca;

              {
                ca = Analyzer.cast(new TypicalTypes.call(s, str));
              }

              public Pair<TypicalTypes.call> apply() {
                return Analyzer.cast(TypicalSupport.union$4023.apply(li, new Pair<TypicalTypes.call>(ca)));
              }
            }.apply());

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4157);
          }
          if (TypicalSupport.match$2267(arg$4049)) {
            final Node e = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4161 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4161);
          }
          if (TypicalSupport.match$49(arg$4049)) {
            final Node e = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4165 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4165);
          }
          if (TypicalSupport.match$2379(arg$4049)) {
            final Node e = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4169 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4169);
          }
          if (TypicalSupport.match$3256(arg$4049)) {
            final Node e = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4173 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4173);
          }
          if (TypicalSupport.match$2390(arg$4049)) {
            final Node e = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4177 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4177);
          }
          if (TypicalSupport.match$84(arg$4049)) {
            final Node e = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4181 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4181);
          }
          if (TypicalSupport.match$45(arg$4049)) {
            final Node e = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4185 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4185);
          }
          if (TypicalSupport.match$216(arg$4049)) {
            final Node e = (arg$4049.size() > 0 ? arg$4049.getGeneric(0) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4189 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4189);
          }
          if (TypicalSupport.match$77(arg$4049)) {
            final Node e = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4193 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4193);
          }
          if (TypicalSupport.match$2828(arg$4049)) {
            final Node e = (arg$4049.size() > 2 ? arg$4049.getGeneric(2) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4197 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4197);
          }
          if (TypicalSupport.match$692(arg$4049)) {
            final Node e = (arg$4049.size() > 1 ? arg$4049.getGeneric(1) : null);

            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4201 = Analyzer.cast(TypicalSupport.union$4023.apply(li, getCall.apply(e, s, li)));

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4201);
          }
          if (true) {
            matching_nodes.add(arg$4049);
            if ((null != arg$4049 && processScopeNodes.contains(arg$4049.getName()))) {
              processScope(arg$4049, getScope);
            }
            checkEnterScope(arg$4049);

            final Object retValue$4204 = Analyzer.cast(li);

            checkExitScope(arg$4049);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4204);
          }
          return null;
        }
      }.apply());
    }
  };

  final Function.F6<Pair<Pair<String>>, Pair<String>, String, Pair<String>, Pair<String>, Pair<Pair<String>>, Pair<TypicalTypes.call>> findPathsList = new Function.F6<Pair<Pair<String>>, Pair<String>, String, Pair<String>, Pair<String>, Pair<Pair<String>>, Pair<TypicalTypes.call>>() {
    public Pair<Pair<String>> apply(final Pair<String> fromList, final String des, final Pair<String> curPath, final Pair<String> visitedNodes, final Pair<Pair<String>> paths, final Pair<TypicalTypes.call> edges) {
      return new Match<Pair<Pair<String>>>() {
        public Pair<Pair<String>> apply() {
          final Pair<String> arg$4206 = Analyzer.cast(fromList);

          if ((null == arg$4206)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4206)) {
            return Analyzer.cast(paths);
          }
          if (true) {
            final Pair<String> list$4208 = Analyzer.cast(Analyzer.cast(arg$4206));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4208));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4208));

            return Analyzer.cast(new Let<Pair<Pair<String>>>() {
              final Pair<Pair<String>> paths1;

              {
                paths1 = Analyzer.cast(findPaths.apply(x, des, curPath, visitedNodes, paths, edges));
              }

              public Pair<Pair<String>> apply() {
                return Analyzer.cast(findPathsList.apply(xs, des, curPath, visitedNodes, paths1, edges));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F6<Pair<Pair<String>>, String, String, Pair<String>, Pair<String>, Pair<Pair<String>>, Pair<TypicalTypes.call>> findPaths = new Function.F6<Pair<Pair<String>>, String, String, Pair<String>, Pair<String>, Pair<Pair<String>>, Pair<TypicalTypes.call>>() {
    public Pair<Pair<String>> apply(final String from, final String des, final Pair<String> curPath, final Pair<String> visitedNodes, final Pair<Pair<String>> paths, final Pair<TypicalTypes.call> edges) {
      return (null == Primitives.not.apply(Primitives.contains.apply(from, visitedNodes)) ? null : Primitives.not.apply(Primitives.contains.apply(from, visitedNodes)) ? (null == Primitives.not.apply(Primitives.equal.apply(from, des)) ? null : Primitives.not.apply(Primitives.equal.apply(from, des)) ? new Let<Pair<Pair<String>>>() {
        final Pair<String> newVisited;
        final Pair<String> newCur;
        final Pair<String> children;

        {
          newVisited = Analyzer.cast(Primitives.wrapCons(from, visitedNodes));
          newCur = Analyzer.cast(Primitives.wrapCons(from, curPath));
          children = Analyzer.cast(getChildren.apply(from, edges));
        }

        public Pair<Pair<String>> apply() {
          return Analyzer.cast(findPathsList.apply(children, des, newCur, newVisited, paths, edges));
        }
      }.apply() : new Let<Pair<Pair<String>>>() {
        final Pair<String> res;

        {
          res = Analyzer.cast(Primitives.wrapCons(from, curPath));
        }

        public Pair<Pair<String>> apply() {
          return Analyzer.cast(Primitives.wrapCons(res, paths));
        }
      }.apply()) : paths);
    }
  };

  final Function.F2<Pair<String>, String, Pair<TypicalTypes.call>> getChildren = new Function.F2<Pair<String>, String, Pair<TypicalTypes.call>>() {
    public Pair<String> apply(final String parent, final Pair<TypicalTypes.call> edges) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<TypicalTypes.call> arg$4210 = Analyzer.cast(edges);

          if ((null == arg$4210)) {
            return null;
          }
          if (TypicalSupport.match$3163(arg$4210)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<TypicalTypes.call> list$4212 = Analyzer.cast(Analyzer.cast(arg$4210));
            final TypicalTypes.call x = Analyzer.cast(Primitives.wrapHead(list$4212));
            final Pair<TypicalTypes.call> xs = Analyzer.cast(Primitives.wrapTail(list$4212));

            return Analyzer.cast(null == Primitives.equal.apply(null == x ? null : x.caller, parent) ? null : Primitives.equal.apply(null == x ? null : x.caller, parent) ? Primitives.wrapCons(null == x ? null : x.callee, getChildren.apply(parent, xs)) : getChildren.apply(parent, xs));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Pair<String>>, Pair<TypicalTypes.call>> findCircles = new Function.F1<Pair<Pair<String>>, Pair<TypicalTypes.call>>() {
    public Pair<Pair<String>> apply(final Pair<TypicalTypes.call> edges) {
      return new Match<Pair<Pair<String>>>() {
        public Pair<Pair<String>> apply() {
          final Pair<TypicalTypes.call> arg$4214 = Analyzer.cast(edges);

          if ((null == arg$4214)) {
            return null;
          }
          if (TypicalSupport.match$3163(arg$4214)) {
            return Analyzer.cast(Pair.<Pair<String>>empty());
          }
          if (true) {
            final Pair<TypicalTypes.call> list$4216 = Analyzer.cast(Analyzer.cast(arg$4214));
            final TypicalTypes.call x = Analyzer.cast(Primitives.wrapHead(list$4216));
            final Pair<TypicalTypes.call> xs = Analyzer.cast(Primitives.wrapTail(list$4216));

            return Analyzer.cast(new Let<Pair<Pair<String>>>() {
              final Pair<Pair<String>> paths1;
              final Pair<Pair<String>> paths2;

              {
                paths1 = Analyzer.cast(findPaths.apply(null == x ? null : x.callee, null == x ? null : x.caller, Pair.<String>empty(), Pair.<String>empty(), Pair.<Pair<String>>empty(), xs));
                paths2 = Analyzer.cast(findCircles.apply(xs));
              }

              public Pair<Pair<String>> apply() {
                return Analyzer.cast(TypicalSupport.union$4217.apply(paths1, paths2));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<Pair<String>>, Pair<Pair<String>>, Pair<String>> groupCircles = new Function.F2<Pair<Pair<String>>, Pair<Pair<String>>, Pair<String>>() {
    public Pair<Pair<String>> apply(final Pair<Pair<String>> circles, final Pair<String> vertices) {
      return new Match<Pair<Pair<String>>>() {
        public Pair<Pair<String>> apply() {
          final Pair<String> arg$4219 = Analyzer.cast(vertices);

          if ((null == arg$4219)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4219)) {
            return Analyzer.cast(circles);
          }
          if (true) {
            final Pair<String> list$4221 = Analyzer.cast(Analyzer.cast(arg$4219));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4221));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4221));

            return Analyzer.cast(new Let<Pair<Pair<String>>>() {
              final TypicalTypes.group g;
              final Pair<Pair<String>> newCir;

              {
                g = Analyzer.cast(groupBy.apply(x, circles, Pair.<String>empty(), Pair.<Pair<String>>empty()));
                newCir = Analyzer.cast(TypicalSupport.append$4222.apply(new Pair<Pair<String>>(null == g ? null : g.group), null == g ? null : g.circles));
              }

              public Pair<Pair<String>> apply() {
                return Analyzer.cast(groupCircles.apply(newCir, xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F4<TypicalTypes.group, String, Pair<Pair<String>>, Pair<String>, Pair<Pair<String>>> groupBy = new Function.F4<TypicalTypes.group, String, Pair<Pair<String>>, Pair<String>, Pair<Pair<String>>>() {
    public TypicalTypes.group apply(final String str, final Pair<Pair<String>> circles, final Pair<String> res, final Pair<Pair<String>> ret) {
      return new Match<TypicalTypes.group>() {
        public TypicalTypes.group apply() {
          final Pair<Pair<String>> arg$4224 = Analyzer.cast(circles);

          if ((null == arg$4224)) {
            return null;
          }
          if (TypicalSupport.match$4225(arg$4224)) {
            return Analyzer.cast(new TypicalTypes.group(res, ret));
          }
          if (true) {
            final Pair<Pair<String>> list$4226 = Analyzer.cast(Analyzer.cast(arg$4224));
            final Pair<String> x = Analyzer.cast(Primitives.wrapHead(list$4226));
            final Pair<Pair<String>> xs = Analyzer.cast(Primitives.wrapTail(list$4226));

            return Analyzer.cast(null == Primitives.contains.apply(str, x) ? null : Primitives.contains.apply(str, x) ? new Let<TypicalTypes.group>() {
              final Pair<String> newRes;

              {
                newRes = Analyzer.cast(TypicalSupport.union$313.apply(x, res));
              }

              public TypicalTypes.group apply() {
                return Analyzer.cast(groupBy.apply(str, xs, newRes, ret));
              }
            }.apply() : new Let<TypicalTypes.group>() {
              final Pair<Pair<String>> newRet;

              {
                newRet = Analyzer.cast(Primitives.wrapCons(x, ret));
              }

              public TypicalTypes.group apply() {
                return Analyzer.cast(groupBy.apply(str, xs, res, newRet));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<TypicalTypes.nodeRec>, Pair<String>, Pair<TypicalTypes.call>, Pair<Pair<String>>> getResult = new Function.F3<Pair<TypicalTypes.nodeRec>, Pair<String>, Pair<TypicalTypes.call>, Pair<Pair<String>>>() {
    public Pair<TypicalTypes.nodeRec> apply(final Pair<String> vertices, final Pair<TypicalTypes.call> edges, final Pair<Pair<String>> groups) {
      return new Match<Pair<TypicalTypes.nodeRec>>() {
        public Pair<TypicalTypes.nodeRec> apply() {
          final Pair<String> arg$4228 = Analyzer.cast(vertices);

          if ((null == arg$4228)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4228)) {
            return Analyzer.cast(Pair.<TypicalTypes.nodeRec>empty());
          }
          if (true) {
            final Pair<String> list$4230 = Analyzer.cast(Analyzer.cast(arg$4228));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4230));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4230));

            return Analyzer.cast(new Let<Pair<TypicalTypes.nodeRec>>() {
              final TypicalTypes.nodeRec rec;

              {
                rec = Analyzer.cast(getResultNode.apply(x, edges, groups));
              }

              public Pair<TypicalTypes.nodeRec> apply() {
                return Analyzer.cast(Primitives.wrapCons(rec, getResult.apply(xs, edges, groups)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<TypicalTypes.nodeRec, String, Pair<TypicalTypes.call>, Pair<Pair<String>>> getResultNode = new Function.F3<TypicalTypes.nodeRec, String, Pair<TypicalTypes.call>, Pair<Pair<String>>>() {
    public TypicalTypes.nodeRec apply(final String str, final Pair<TypicalTypes.call> edges, final Pair<Pair<String>> groups) {
      return new Let<TypicalTypes.nodeRec>() {
        final Pair<String> mutual;
        final Pair<String> depend;

        {
          mutual = Analyzer.cast(getMutual.apply(str, groups));
          depend = Analyzer.cast(getDepend.apply(str, edges, mutual));
        }

        public TypicalTypes.nodeRec apply() {
          return Analyzer.cast(new TypicalTypes.nodeRec(str, mutual, depend));
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, String, Pair<Pair<String>>> getMutual = new Function.F2<Pair<String>, String, Pair<Pair<String>>>() {
    public Pair<String> apply(final String str, final Pair<Pair<String>> groups) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<Pair<String>> arg$4232 = Analyzer.cast(groups);

          if ((null == arg$4232)) {
            return null;
          }
          if (TypicalSupport.match$4225(arg$4232)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<Pair<String>> list$4234 = Analyzer.cast(Analyzer.cast(arg$4232));
            final Pair<String> x = Analyzer.cast(Primitives.wrapHead(list$4234));
            final Pair<Pair<String>> xs = Analyzer.cast(Primitives.wrapTail(list$4234));

            return Analyzer.cast(null == Primitives.contains.apply(str, x) ? null : Primitives.contains.apply(str, x) ? remove.apply(str, x) : getMutual.apply(str, xs));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<String>, String, Pair<TypicalTypes.call>, Pair<String>> getDepend = new Function.F3<Pair<String>, String, Pair<TypicalTypes.call>, Pair<String>>() {
    public Pair<String> apply(final String str, final Pair<TypicalTypes.call> edges, final Pair<String> mutual) {
      return new Let<Pair<String>>() {
        final Pair<String> children;

        {
          children = Analyzer.cast(getChildren.apply(str, edges));
        }

        public Pair<String> apply() {
          return Analyzer.cast(removeMutual.apply(children, mutual));
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, Pair<String>, Pair<String>> removeMutual = new Function.F2<Pair<String>, Pair<String>, Pair<String>>() {
    public Pair<String> apply(final Pair<String> children, final Pair<String> mutual) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<String> arg$4236 = Analyzer.cast(children);

          if ((null == arg$4236)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4236)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<String> list$4238 = Analyzer.cast(Analyzer.cast(arg$4236));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4238));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4238));

            return Analyzer.cast(null == Primitives.contains.apply(x, mutual) ? null : Primitives.contains.apply(x, mutual) ? removeMutual.apply(xs, mutual) : Primitives.wrapCons(x, removeMutual.apply(xs, mutual)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<String>, String, Pair<String>> remove = new Function.F2<Pair<String>, String, Pair<String>>() {
    public Pair<String> apply(final String s, final Pair<String> li) {
      return new Match<Pair<String>>() {
        public Pair<String> apply() {
          final Pair<String> arg$4240 = Analyzer.cast(li);

          if ((null == arg$4240)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4240)) {
            return Analyzer.cast(Pair.<String>empty());
          }
          if (true) {
            final Pair<String> list$4242 = Analyzer.cast(Analyzer.cast(arg$4240));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4242));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4242));

            return Analyzer.cast(null == Primitives.equal.apply(s, x) ? null : Primitives.equal.apply(s, x) ? xs : Primitives.wrapCons(x, remove.apply(s, xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.raw_type<?>>, Node> visitDepend = new Function.F1<Pair<TypicalTypes.raw_type<?>>, Node>() {
    public Pair<TypicalTypes.raw_type<?>> apply(final Node no) {
      return new Let<Pair<TypicalTypes.raw_type<?>>>() {
        final Pair<String> deps;

        {
          deps = Analyzer.cast(getAnnotatedStringList.apply(no, "depend"));
        }

        public Pair<TypicalTypes.raw_type<?>> apply() {
          return Analyzer.cast(TypicalSupport.map$4244.apply(visitDependNode, deps));
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, String> visitDependNode = new Function.F1<TypicalTypes.raw_type<?>, String>() {
    public TypicalTypes.raw_type<?> apply(final String s) {
      return new Let<TypicalTypes.raw_type<?>>() {
        final Node no;

        {
          no = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", s, null, null), getNameSpace)));
        }

        public TypicalTypes.raw_type<?> apply() {
          return Analyzer.cast(analyze.apply(no));
        }
      }.apply();
    }
  };

  final Function.F1<Object, Node> processMutual = new Function.F1<Object, Node>() {
    public Object apply(final Node no) {
      return new Let<Object>() {
        final Pair<String> muts;
        final Pair<Node> nl;
        final Pair<TypicalTypes.raw_type<?>> recList;

        {
          muts = Analyzer.cast(getAnnotatedStringList.apply(no, "mutual"));
          nl = Analyzer.cast(getNodes.apply(muts));
          Primitives.annotateList.apply(nl, "secondary", wildt);
          TypicalSupport.map$129.apply(analyze, nl);
          recList = Analyzer.cast(TypicalSupport.map$129.apply(createFunctionType, nl));
          processBodies.apply(nl, recList);
        }

        public Object apply() {
          return Analyzer.cast(null);
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.raw_type<?>, Node> createFunctionType = new Function.F1<TypicalTypes.raw_type<?>, Node>() {
    public TypicalTypes.raw_type<?> apply(final Node n) {
      return new Match<TypicalTypes.raw_type<?>>() {
        public TypicalTypes.raw_type<?> apply() {
          final Node arg$4245 = GNode.cast(n);

          if ((null == arg$4245)) {
            return null;
          }
          if (TypicalSupport.match$73(arg$4245)) {
            final Node p = (arg$4245.size() > 1 ? arg$4245.getGeneric(1) : null);

            matching_nodes.add(arg$4245);
            if ((null != arg$4245 && processScopeNodes.contains(arg$4245.getName()))) {
              processScope(arg$4245, getScope);
            }
            checkEnterScope(arg$4245);

            final Object retValue$4257 = Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
              final TypicalTypes.raw_type<?> varT;
              final TypicalTypes.raw_type<?> tp;

              {
                varT = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.FALSE));
                tp = Analyzer.cast(analyze.apply(p));
              }

              public TypicalTypes.raw_type<?> apply() {
                return Analyzer.cast(new Match<TypicalTypes.raw_type<?>>() {
                  public TypicalTypes.raw_type<?> apply() {
                    final TypicalTypes.raw_type<?> arg$4251 = Analyzer.cast(tp);

                    if ((null == arg$4251)) {
                      return null;
                    }
                    if ((null != arg$4251))
                                            switch (arg$4251.tag()) {
                      case TupleT:
                        if (TypicalSupport.match$235(arg$4251)) {
                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                            {
                              redefine.apply(n, varT, getNameSpace);
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(varT);
                            }
                          }.apply());
                        }
                        if (TypicalSupport.match$114(arg$4251)) {
                          final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$4251.getTuple().get1());

                          return Analyzer.cast(new Let<TypicalTypes.raw_type<?>>() {
                            {
                              redefine.apply(n, new TypicalTypes.FunctionT(tl, varT), getNameSpace);
                            }

                            public TypicalTypes.raw_type<?> apply() {
                              return Analyzer.cast(varT);
                            }
                          }.apply());
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4245);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4257);
          }
          if (true) {
            matching_nodes.add(arg$4245);
            if ((null != arg$4245 && processScopeNodes.contains(arg$4245.getName()))) {
              processScope(arg$4245, getScope);
            }
            checkEnterScope(arg$4245);

            final Object retValue$4260 = Analyzer.cast(null);

            checkExitScope(arg$4245);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4260);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<Object>, Pair<Node>, Pair<TypicalTypes.raw_type<?>>> processBodies = new Function.F2<Pair<Object>, Pair<Node>, Pair<TypicalTypes.raw_type<?>>>() {
    public Pair<Object> apply(final Pair<Node> nl, final Pair<TypicalTypes.raw_type<?>> recList) {
      return new Match<Pair<Object>>() {
        public Pair<Object> apply() {
          final Pair<Node> arg$4262 = Analyzer.cast(nl);

          if ((null == arg$4262)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$4262)) {
            return Analyzer.cast(Pair.empty());
          }
          if (true) {
            final Pair<Node> list$4264 = Analyzer.cast(Analyzer.cast(arg$4262));
            final Node x = GNode.cast(Primitives.wrapHead(list$4264));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$4264));

            return Analyzer.cast(new Match<Pair<Object>>() {
              public Pair<Object> apply() {
                final Node arg$4282 = GNode.cast(x);

                if ((null == arg$4282)) {
                  return null;
                }
                if (TypicalSupport.match$73(arg$4282)) {
                  final Node e = (arg$4282.size() > 2 ? arg$4282.getGeneric(2) : null);

                  matching_nodes.add(arg$4282);
                  if ((null != arg$4282 && processScopeNodes.contains(arg$4282.getName()))) {
                    processScope(arg$4282, getScope);
                  }
                  checkEnterScope(arg$4282);

                  final Object retValue$4294 = Analyzer.cast(new Match<Pair<Object>>() {
                    public Pair<Object> apply() {
                      final Pair<TypicalTypes.raw_type<?>> arg$4288 = Analyzer.cast(recList);

                      if ((null == arg$4288)) {
                        return null;
                      }
                      if (TypicalSupport.match$122(arg$4288)) {
                        return Analyzer.cast(null);
                      }
                      if (true) {
                        final Pair<TypicalTypes.raw_type<?>> list$4290 = Analyzer.cast(Analyzer.cast(arg$4288));
                        final TypicalTypes.raw_type<?> y = Analyzer.cast(Primitives.wrapHead(list$4290));
                        final Pair<TypicalTypes.raw_type<?>> ys = Analyzer.cast(Primitives.wrapTail(list$4290));

                        return Analyzer.cast(new Let<Pair<Object>>() {
                          final TypicalTypes.raw_type<?> te;

                          {
                            te = Analyzer.cast(analyze.apply(e));
                            unify.apply(y, te);
                          }

                          public Pair<Object> apply() {
                            return Analyzer.cast(processBodies.apply(xs, ys));
                          }
                        }.apply());
                      }
                      return null;
                    }
                  }.apply());

                  checkExitScope(arg$4282);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$4294);
                }
                if (true) {
                  matching_nodes.add(arg$4282);
                  if ((null != arg$4282 && processScopeNodes.contains(arg$4282.getName()))) {
                    processScope(arg$4282, getScope);
                  }
                  checkEnterScope(arg$4282);

                  final Object retValue$4297 = Analyzer.cast(null);

                  checkExitScope(arg$4282);
                  matching_nodes.remove(matching_nodes.size() - 1);
                  return Analyzer.cast(retValue$4297);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Node>, Pair<String>> getNodes = new Function.F1<Pair<Node>, Pair<String>>() {
    public Pair<Node> apply(final Pair<String> names) {
      return new Match<Pair<Node>>() {
        public Pair<Node> apply() {
          final Pair<String> arg$4300 = Analyzer.cast(names);

          if ((null == arg$4300)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4300)) {
            return Analyzer.cast(Pair.<Node>empty());
          }
          if (true) {
            final Pair<String> list$4302 = Analyzer.cast(Analyzer.cast(arg$4300));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4302));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4302));

            return Analyzer.cast(new Let<Pair<Node>>() {
              final Node no;

              {
                no = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", x, null, null), getNameSpace)));
              }

              public Pair<Node> apply() {
                return Analyzer.cast(TypicalSupport.union$4303.apply(new Pair<Node>(no), getNodes.apply(xs)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Object>, Node> resolveMutual = new Function.F1<Pair<Object>, Node>() {
    public Pair<Object> apply(final Node no) {
      return new Match<Pair<Object>>() {
        public Pair<Object> apply() {
          final Node arg$4305 = GNode.cast(no);

          if ((null == arg$4305)) {
            return null;
          }
          if (TypicalSupport.match$73(arg$4305)) {
            final String s = (arg$4305.size() > 0 ? arg$4305.getString(0) : null);

            matching_nodes.add(arg$4305);
            if ((null != arg$4305 && processScopeNodes.contains(arg$4305.getName()))) {
              processScope(arg$4305, getScope);
            }
            checkEnterScope(arg$4305);

            final Object retValue$4310 = Analyzer.cast(new Let<Pair<Object>>() {
              final Pair<String> muts;

              {
                muts = Analyzer.cast(getAnnotatedStringList.apply(no, "mutual"));
              }

              public Pair<Object> apply() {
                return Analyzer.cast(TypicalSupport.map$4307.apply(resolveMutualName, Primitives.wrapCons(s, muts)));
              }
            }.apply());

            checkExitScope(arg$4305);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4310);
          }
          if (true) {
            matching_nodes.add(arg$4305);
            if ((null != arg$4305 && processScopeNodes.contains(arg$4305.getName()))) {
              processScope(arg$4305, getScope);
            }
            checkEnterScope(arg$4305);

            final Object retValue$4313 = Analyzer.cast(null);

            checkExitScope(arg$4305);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4313);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Object, String> resolveMutualName = new Function.F1<Object, String>() {
    public Object apply(final String str) {
      return new Let<Object>() {
        final Node nod;
        final TypicalTypes.raw_type<?> tx;
        final TypicalTypes.raw_type<?> res;

        {
          nod = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("NameSpaceStructure", str, null, null), getNameSpace)));
          tx = Analyzer.cast(Analyzer.cast(lookup2.apply(nod, getNameSpace)));
          res = Analyzer.cast(resolveType.apply(tx));
          redefine.apply(nod, res, getNameSpace);
          Primitives.annotate.apply(nod, "visited", wildt);
        }

        public Object apply() {
          return Analyzer.cast(null);
        }
      }.apply();
    }
  };

  final Function.F1<Object, Pair<TypicalTypes.raw_type<?>>> createTypeRecord = new Function.F1<Object, Pair<TypicalTypes.raw_type<?>>>() {
    public Object apply(final Pair<TypicalTypes.raw_type<?>> tl) {
      return new Let<Object>() {
        final TypicalTypes.raw_type<?> ty;

        {
          ty = Analyzer.cast(Analyzer.cast(lookup4.apply(GNode.create("UserDefinedType", "raw_type"), "error", "raw_type must be defined", getNameSpace)));
        }

        public Object apply() {
          return Analyzer.cast(null == Primitives.isNotBottom.apply(ty) || !Primitives.isNotBottom.apply(ty) ? null : new Let<Object>() {
            final TypicalTypes.raw_type<?> t;

            {
              t = Analyzer.cast(new TypicalTypes.FieldT("type", "type", new TypicalTypes.TypeName("raw_type")));
              redefine.apply(GNode.create("FieldType", "type", null), t, getNameSpace);
              redefine.apply(GNode.create("UserDefinedType", "type"), new TypicalTypes.RecordT(Primitives.wrapCons(t, tl)), getNameSpace);
            }

            public Object apply() {
              return Analyzer.cast(null);
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<String, Pair<String>, String> joinStringList = new Function.F2<String, Pair<String>, String>() {
    public String apply(final Pair<String> sl, final String res) {
      return new Match<String>() {
        public String apply() {
          final Pair<String> arg$4315 = Analyzer.cast(sl);

          if ((null == arg$4315)) {
            return null;
          }
          if (TypicalSupport.match$3230(arg$4315)) {
            return Analyzer.cast(res);
          }
          if (TypicalSupport.match$4317(arg$4315)) {
            final String x = Analyzer.cast(arg$4315.get(0));

            return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(res, "'"), x), "'"));
          }
          if (true) {
            final Pair<String> list$4318 = Analyzer.cast(Analyzer.cast(arg$4315));
            final String x = Analyzer.cast(Primitives.wrapHead(list$4318));
            final Pair<String> xs = Analyzer.cast(Primitives.wrapTail(list$4318));

            return Analyzer.cast(joinStringList.apply(xs, Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(res, "'"), x), "'"), ", ")));
          }
          return null;
        }
      }.apply();
    }
  };

  protected class preload {
    public <T0> Pair<T0> apply(final T0 n) {
      return new Let<Pair<T0>>() {
        final TypicalTypes.raw_type<?> strL;
        final TypicalTypes.raw_type<?> t1;
        final TypicalTypes.raw_type<?> t2;
        final TypicalTypes.raw_type<?> t3;
        final TypicalTypes.raw_type<?> t6;
        final TypicalTypes.raw_type<?> t7;
        final TypicalTypes.raw_type<?> t9;
        final TypicalTypes.raw_type<?> l1;
        final TypicalTypes.raw_type<?> l2;
        final TypicalTypes.raw_type<?> l4;
        final TypicalTypes.raw_type<?> t14;
        final TypicalTypes.raw_type<?> tup;
        final TypicalTypes.raw_type<?> t4;
        final TypicalTypes.raw_type<?> t5;
        final TypicalTypes.raw_type<?> t11;
        final TypicalTypes.raw_type<?> l3;
        final TypicalTypes.raw_type<?> l5;
        final TypicalTypes.raw_type<?> l6;
        final TypicalTypes.raw_type<?> l7;
        final TypicalTypes.raw_type<?> l8;
        final TypicalTypes.raw_type<?> t8;
        final TypicalTypes.raw_type<?> t12;
        final TypicalTypes.raw_type<?> t13;

        {
          strL = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(strt), "list"));
          t1 = Analyzer.cast(new TypicalTypes.ConstructorT("name", "SimpleName", strt));
          t2 = Analyzer.cast(new TypicalTypes.TypeName("name"));
          t3 = Analyzer.cast(new TypicalTypes.ConstructorT("name", "QualifiedName", new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(strt), "list")));
          t6 = Analyzer.cast(new TypicalTypes.ConstructorT("scope_kind", "Anonymous", strt));
          t7 = Analyzer.cast(new TypicalTypes.ConstructorT("scope_kind", "Temporary", strt));
          t9 = Analyzer.cast(new TypicalTypes.TypeName("scope_kind"));
          l1 = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(wildt), "list"));
          l2 = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.TRUE));
          l4 = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.TRUE));
          t14 = Analyzer.cast(new TypicalTypes.VariableT(freshName.apply("type"), Boolean.TRUE));
          tup = Analyzer.cast(new TypicalTypes.TupleT(new Pair<TypicalTypes.raw_type<?>>(new TypicalTypes.TypeName("name")).append(new Pair<TypicalTypes.raw_type<?>>(strt)).append(new Pair<TypicalTypes.raw_type<?>>(strt))));
          load.apply("SimpleName", "constructor", t1);
          load.apply("QualifiedName", "constructor", t3);
          t4 = Analyzer.cast(new TypicalTypes.VariantT(new Pair<TypicalTypes.raw_type<?>>(t1).append(new Pair<TypicalTypes.raw_type<?>>(t3))));
          t5 = Analyzer.cast(new TypicalTypes.ConstructorT("scope_kind", "Named", t2));
          t11 = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(nodet), "list"));
          l3 = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(l2), "list"));
          l5 = Analyzer.cast(new TypicalTypes.ConstructedT(new Pair<TypicalTypes.raw_type<?>>(l4), "list"));
          l6 = Analyzer.cast(new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l2), l4));
          l7 = Analyzer.cast(new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l2), boolt));
          l8 = Analyzer.cast(new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l4).append(new Pair<TypicalTypes.raw_type<?>>(l2)), l2));
          load.apply("name", "type", t4);
          load.apply("Named", "constructor", t5);
          load.apply("Anonymous", "constructor", t6);
          load.apply("Temporary", "constructor", t7);
          t8 = Analyzer.cast(new TypicalTypes.VariantT(new Pair<TypicalTypes.raw_type<?>>(t5).append(new Pair<TypicalTypes.raw_type<?>>(t6)).append(new Pair<TypicalTypes.raw_type<?>>(t7))));
          t12 = Analyzer.cast(new TypicalTypes.TupleT(new Pair<TypicalTypes.raw_type<?>>(t9).append(new Pair<TypicalTypes.raw_type<?>>(t11))));
          load.apply("scope_kind", "type", t8);
          t13 = Analyzer.cast(new TypicalTypes.ConstructorT("scopeT", "Scope", t12));
          load.apply("Scope", "constructor", t13);
          load.apply("scopeT", "type", new TypicalTypes.VariantT(new Pair<TypicalTypes.raw_type<?>>(t13)));
          redefine.apply(GNode.create("UserDefinedType", "scopeT"), new TypicalTypes.VariantT(new Pair<TypicalTypes.raw_type<?>>(t13)), getNameSpace);
          load.apply("node_type", "value", strt);
          load.apply("String.stoi", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), intt));
          load.apply("String.stof", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt), floatt));
          load.apply("String.itos", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt), strt));
          load.apply("String.ftos", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(floatt), strt));
          load.apply("String.concat", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(strt)), strt));
          load.apply("String.ends_with", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(strt)), boolt));
          load.apply("String.ends_withi", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(strt)), boolt));
          load.apply("String.join_strings", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strL), strt));
          load.apply("String.ssize", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt), intt));
          load.apply("String.starts_with", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(strt)), boolt));
          load.apply("String.starts_withi", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(strt)), boolt));
          load.apply("String.substring", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), strt));
          load.apply("String.substring2", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(intt)).append(new Pair<TypicalTypes.raw_type<?>>(intt)), strt));
          load.apply("abs_float", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(floatt), floatt));
          load.apply("abs_int", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt), intt));
          load.apply("ftoi", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(floatt), intt));
          load.apply("shift_left", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), intt));
          load.apply("shift_right", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), intt));
          load.apply("and_bits", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), intt));
          load.apply("or_bits", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), intt));
          load.apply("xor_bits", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt).append(new Pair<TypicalTypes.raw_type<?>>(intt)), intt));
          load.apply("negate_bits", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt), intt));
          load.apply("negate_float", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(floatt), floatt));
          load.apply("negate_int", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(intt), intt));
          load.apply("List.is_empty", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l1), boolt));
          load.apply("List.length", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l1), intt));
          load.apply("List.mem", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l2).append(new Pair<TypicalTypes.raw_type<?>>(l3)), boolt));
          load.apply("List.append", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3).append(new Pair<TypicalTypes.raw_type<?>>(l3)), l3));
          load.apply("List.head", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3), l2));
          load.apply("List.tail", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3), l3));
          load.apply("List.nth", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3).append(new Pair<TypicalTypes.raw_type<?>>(intt)), l2));
          load.apply("List.union", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3).append(new Pair<TypicalTypes.raw_type<?>>(l3)), l3));
          load.apply("List.subtraction", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3).append(new Pair<TypicalTypes.raw_type<?>>(l3)), l3));
          load.apply("List.intersection", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l3).append(new Pair<TypicalTypes.raw_type<?>>(l3)), l3));
          load.apply("List.map", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l6).append(new Pair<TypicalTypes.raw_type<?>>(l3)), l5));
          load.apply("List.iter", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l6).append(new Pair<TypicalTypes.raw_type<?>>(l3)), l4));
          load.apply("List.exists", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l7).append(new Pair<TypicalTypes.raw_type<?>>(l5)), boolt));
          load.apply("List.foldl", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l8).append(new Pair<TypicalTypes.raw_type<?>>(l5)).append(new Pair<TypicalTypes.raw_type<?>>(l2)), l2));
          load.apply("List.cons", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(l2), l3));
          load.apply("trace", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(t14), t14));
          load.apply("trace2", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(t14)), t14));
          load.apply("show_symbols", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt), boolt));
          load.apply("is_defined", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet), boolt));
          load.apply("is_defined_locally", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet), boolt));
          load.apply("annotate", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet).append(new Pair<TypicalTypes.raw_type<?>>(strt)).append(new Pair<TypicalTypes.raw_type<?>>(l2)), l2));
          load.apply("has_annotation", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet).append(new Pair<TypicalTypes.raw_type<?>>(strt)), boolt));
          load.apply("get_annotation", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet).append(new Pair<TypicalTypes.raw_type<?>>(strt)), wildt));
          load.apply("annotate_list", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(t11).append(new Pair<TypicalTypes.raw_type<?>>(strt)).append(new Pair<TypicalTypes.raw_type<?>>(l2)), l2));
          load.apply("Map.get", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt), typet));
          load.apply("Map.put", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(typet)), wildt));
          load.apply("fresh_name", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt), strt));
          load.apply("not_bottom", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(wildt), boolt));
          load.apply("is_bottom", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(wildt), boolt));
          load.apply("is_not_bottom", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(wildt), boolt));
          load.apply("node_name", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet), strt));
          load.apply("load", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(strt).append(new Pair<TypicalTypes.raw_type<?>>(strt)).append(new Pair<TypicalTypes.raw_type<?>>(wildt)), wildt));
          load.apply("ancestor", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(wildt), nodet));
          load.apply("parent", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(wildt), nodet));
          load.apply("getNameSpace", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet), tup));
          load.apply("getScope", "value", new TypicalTypes.FunctionT(new Pair<TypicalTypes.raw_type<?>>(nodet), new TypicalTypes.TypeName("scopeT")));
          load.apply("Limits.int_size", "value", intt);
          load.apply("Limits.short_size", "value", intt);
          load.apply("Limits.long_size", "value", intt);
          load.apply("Limits.long_long_size", "value", intt);
          load.apply("Limits.float_size", "value", intt);
          load.apply("Limits.double_size", "value", intt);
          load.apply("Limits.pointer_size", "value", intt);
          load.apply("Limits.long_double_size", "value", intt);
          load.apply("Limits.array_max", "value", intt);
          load.apply("nonce", "value", intt);
        }

        public Pair<T0> apply() {
          return Analyzer.cast(new Pair<Object>(n));
        }
      }.apply();
    }
  }

  final preload preload = new preload();

  final Function.F1<Object, Node> resolveNode = new Function.F1<Object, Node>() {
    public Object apply(final Node no) {
      return new Match<Object>() {
        public Object apply() {
          final Node arg$4320 = GNode.cast(no);

          if ((null == arg$4320)) {
            return null;
          }
          if (TypicalSupport.match$147(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 1, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4324 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4324);
          }
          if (TypicalSupport.match$220(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4328 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4328);
          }
          if (TypicalSupport.match$245(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4332 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4332);
          }
          if (TypicalSupport.match$277(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4336 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4336);
          }
          if (TypicalSupport.match$283(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4340 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4340);
          }
          if (TypicalSupport.match$3474(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4344 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4344);
          }
          if (TypicalSupport.match$321(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4348 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4348);
          }
          if (TypicalSupport.match$339(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4352 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4352);
          }
          if (TypicalSupport.match$479(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4356 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4356);
          }
          if (TypicalSupport.match$679(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4360 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4360);
          }
          if (TypicalSupport.match$3405(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4364 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4364);
          }
          if (TypicalSupport.match$3413(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4368 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4368);
          }
          if (TypicalSupport.match$2400(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4372 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4372);
          }
          if (TypicalSupport.match$9(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 1, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4376 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4376);
          }
          if (TypicalSupport.match$2509(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4380 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4380);
          }
          if (TypicalSupport.match$2809(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4384 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4384);
          }
          if (TypicalSupport.match$2868(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4388 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4388);
          }
          if (TypicalSupport.match$3397(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4392 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4392);
          }
          if (TypicalSupport.match$192(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4396 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4396);
          }
          if (TypicalSupport.match$183(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4400 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4400);
          }
          if (TypicalSupport.match$269(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4404 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4404);
          }
          if (TypicalSupport.match$3401(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 0, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4408 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4408);
          }
          if (TypicalSupport.match$5(arg$4320)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 1, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4412 = Analyzer.cast(new Let<Object>() {
              {
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4412);
          }
          if (TypicalSupport.match$216(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4416 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4416);
          }
          if (TypicalSupport.match$33(arg$4320)) {
            final Node n = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4420 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4420);
          }
          if (TypicalSupport.match$2910(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4424 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4424);
          }
          if (TypicalSupport.match$37(arg$4320)) {
            final Node n = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4428 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4428);
          }
          if (TypicalSupport.match$77(arg$4320)) {
            final Node n = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4432 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4432);
          }
          if (TypicalSupport.match$69(arg$4320)) {
            final Node n = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4436 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4436);
          }
          if (TypicalSupport.match$57(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4440 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4440);
          }
          if (TypicalSupport.match$2273(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4444 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4444);
          }
          if (TypicalSupport.match$49(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4448 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4448);
          }
          if (TypicalSupport.match$2379(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4452 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4452);
          }
          if (TypicalSupport.match$2390(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4456 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4456);
          }
          if (TypicalSupport.match$45(arg$4320)) {
            final Node n = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4460 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4460);
          }
          if (TypicalSupport.match$25(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4464 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4464);
          }
          if (TypicalSupport.match$13(arg$4320)) {
            final Node n = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4468 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4468);
          }
          if (TypicalSupport.match$41(arg$4320)) {
            final Node n = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4472 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4472);
          }
          if (TypicalSupport.match$2860(arg$4320)) {
            final Node n = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4476 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4476);
          }
          if (TypicalSupport.match$21(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4480 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4480);
          }
          if (TypicalSupport.match$73(arg$4320)) {
            final Node n1 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4484 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4484);
          }
          if (TypicalSupport.match$84(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4488 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4488);
          }
          if (TypicalSupport.match$287(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4492 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4492);
          }
          if (TypicalSupport.match$306(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4496 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4496);
          }
          if (TypicalSupport.match$312(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4500 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4500);
          }
          if (TypicalSupport.match$363(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4504 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4504);
          }
          if (TypicalSupport.match$483(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4508 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4508);
          }
          if (TypicalSupport.match$491(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4512 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4512);
          }
          if (TypicalSupport.match$499(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4516 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4516);
          }
          if (TypicalSupport.match$505(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4520 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4520);
          }
          if (TypicalSupport.match$553(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4524 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4524);
          }
          if (TypicalSupport.match$609(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4528 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4528);
          }
          if (TypicalSupport.match$673(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4532 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4532);
          }
          if (TypicalSupport.match$2267(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4536 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4536);
          }
          if (TypicalSupport.match$83(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4540 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4540);
          }
          if (TypicalSupport.match$3256(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4544 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4544);
          }
          if (TypicalSupport.match$255(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4548 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4548);
          }
          if (TypicalSupport.match$2884(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4552 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4552);
          }
          if (TypicalSupport.match$2888(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4556 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4556);
          }
          if (TypicalSupport.match$665(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4560 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4560);
          }
          if (TypicalSupport.match$2795(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4564 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4564);
          }
          if (TypicalSupport.match$2415(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4568 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4568);
          }
          if (TypicalSupport.match$2427(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4572 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4572);
          }
          if (TypicalSupport.match$153(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4320, 2, arg$4320.size()));

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4576 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
                TypicalSupport.map$128.apply(resolveNode, nl);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4576);
          }
          if (TypicalSupport.match$4577(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4580 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4580);
          }
          if (TypicalSupport.match$4581(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4584 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4584);
          }
          if (TypicalSupport.match$4585(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4588 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4588);
          }
          if (TypicalSupport.match$4589(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4592 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4592);
          }
          if (TypicalSupport.match$4593(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4596 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4596);
          }
          if (TypicalSupport.match$4597(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4600 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4600);
          }
          if (TypicalSupport.match$4601(arg$4320)) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4604 = Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
              final TypicalTypes.raw_type<?> t;
              final TypicalTypes.raw_type<?> ty;

              {
                t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                ty = Analyzer.cast(resolveType.apply(t));
                Primitives.annotate.apply(no, "__type", ty);
              }

              public Object apply() {
                return Analyzer.cast(null);
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4604);
          }
          if (TypicalSupport.match$692(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);
            final Node n3 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4608 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
                resolveNode.apply(n3);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4608);
          }
          if (TypicalSupport.match$2828(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);
            final Node n3 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4612 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
                resolveNode.apply(n3);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4612);
          }
          if (TypicalSupport.match$2801(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);
            final Node n3 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4616 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
                resolveNode.apply(n3);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4616);
          }
          if (TypicalSupport.match$2405(arg$4320)) {
            final Node n1 = (arg$4320.size() > 0 ? arg$4320.getGeneric(0) : null);
            final Node n2 = (arg$4320.size() > 1 ? arg$4320.getGeneric(1) : null);
            final Node n3 = (arg$4320.size() > 2 ? arg$4320.getGeneric(2) : null);
            final Node n4 = (arg$4320.size() > 3 ? arg$4320.getGeneric(3) : null);

            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4620 = Analyzer.cast(new Let<Object>() {
              {
                resolveNode.apply(n1);
                resolveNode.apply(n2);
                resolveNode.apply(n3);
                resolveNode.apply(n4);
              }

              public Object apply() {
                return Analyzer.cast(null == Primitives.hasAnnotation.apply(no, "__type") || !Primitives.hasAnnotation.apply(no, "__type") ? null : new Let<Object>() {
                  final TypicalTypes.raw_type<?> t;
                  final TypicalTypes.raw_type<?> ty;

                  {
                    t = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
                    ty = Analyzer.cast(resolveType.apply(t));
                    Primitives.annotate.apply(no, "__type", ty);
                  }

                  public Object apply() {
                    return Analyzer.cast(null);
                  }
                }.apply());
              }
            }.apply());

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4620);
          }
          if (true) {
            matching_nodes.add(arg$4320);
            if ((null != arg$4320 && processScopeNodes.contains(arg$4320.getName()))) {
              processScope(arg$4320, getScope);
            }
            checkEnterScope(arg$4320);

            final Object retValue$4623 = Analyzer.cast(null);

            checkExitScope(arg$4320);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4623);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Node>, Pair<Node>> getPatternNodes = new Function.F1<Pair<Node>, Pair<Node>>() {
    public Pair<Node> apply(final Pair<Node> nl) {
      return new Match<Pair<Node>>() {
        public Pair<Node> apply() {
          final Pair<Node> arg$4625 = Analyzer.cast(nl);

          if ((null == arg$4625)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$4625)) {
            return Analyzer.cast(Pair.<Node>empty());
          }
          if (true) {
            final Pair<Node> list$4627 = Analyzer.cast(Analyzer.cast(arg$4625));
            final Node x = GNode.cast(Primitives.wrapHead(list$4627));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$4627));

            return Analyzer.cast(new Let<Pair<Node>>() {
              final Pair<Node> pl;

              {
                pl = Analyzer.cast(getNodeList.apply(x));
              }

              public Pair<Node> apply() {
                return Analyzer.cast(TypicalSupport.append$127.apply(pl, getPatternNodes.apply(xs)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.patternRecord>, Pair<Node>> getPatternRecords = new Function.F1<Pair<TypicalTypes.patternRecord>, Pair<Node>>() {
    public Pair<TypicalTypes.patternRecord> apply(final Pair<Node> nl) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final Pair<Node> arg$4629 = Analyzer.cast(nl);

          if ((null == arg$4629)) {
            return null;
          }
          if (TypicalSupport.match$323(arg$4629)) {
            return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
          }
          if (true) {
            final Pair<Node> list$4631 = Analyzer.cast(Analyzer.cast(arg$4629));
            final Node x = GNode.cast(Primitives.wrapHead(list$4631));
            final Pair<Node> xs = Analyzer.cast(Primitives.wrapTail(list$4631));

            return Analyzer.cast(Primitives.wrapCons(getPatternRecord.apply(x), getPatternRecords.apply(xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.patternRecord, Node> getPatternRecord = new Function.F1<TypicalTypes.patternRecord, Node>() {
    public TypicalTypes.patternRecord apply(final Node n) {
      return new Match<TypicalTypes.patternRecord>() {
        public TypicalTypes.patternRecord apply() {
          final Node arg$4633 = GNode.cast(n);

          if ((null == arg$4633)) {
            return null;
          }
          if (TypicalSupport.match$283(arg$4633)) {
            final Pair<Node> pl = Analyzer.cast(Primitives.getChildren(arg$4633, 0, arg$4633.size()));

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4637 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.TupPattern(getPatternRecords.apply(pl)), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4637);
          }
          if (TypicalSupport.match$287(arg$4633)) {
            final Node p = (arg$4633.size() > 0 ? arg$4633.getGeneric(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4641 = Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
              final TypicalTypes.patternRecord pa;

              {
                pa = Analyzer.cast(getPatternRecord.apply(p));
              }

              public TypicalTypes.patternRecord apply() {
                return Analyzer.cast(new TypicalTypes.patternRecord(null == pa ? null : pa.pat, n, Boolean.TRUE));
              }
            }.apply());

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4641);
          }
          if (TypicalSupport.match$57(arg$4633)) {
            final Node p = (arg$4633.size() > 0 ? arg$4633.getGeneric(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4645 = Analyzer.cast(getPatternRecord.apply(p));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4645);
          }
          if (TypicalSupport.match$306(arg$4633)) {
            final Node p = (arg$4633.size() > 0 ? arg$4633.getGeneric(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4649 = Analyzer.cast(getPatternRecord.apply(p));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4649);
          }
          if (TypicalSupport.match$312(arg$4633)) {
            final Node p1 = (arg$4633.size() > 0 ? arg$4633.getGeneric(0) : null);
            final Node p2 = (arg$4633.size() > 1 ? arg$4633.getGeneric(1) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4653 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.PairPattern(getPatternRecord.apply(p1), getPatternRecord.apply(p2)), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4653);
          }
          if (TypicalSupport.match$65(arg$4633)) {
            final String s = (arg$4633.size() > 0 ? arg$4633.getString(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4657 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.VariablePattern(s), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4657);
          }
          if (TypicalSupport.match$5(arg$4633)) {
            final String s = (arg$4633.size() > 0 ? arg$4633.getString(0) : null);
            final Pair<Node> nodList = Analyzer.cast(Primitives.getChildren(arg$4633, 1, arg$4633.size()));

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4669 = Analyzer.cast(new Match<TypicalTypes.patternRecord>() {
              public TypicalTypes.patternRecord apply() {
                final Pair<Node> arg$4663 = Analyzer.cast(nodList);

                if ((null == arg$4663)) {
                  return null;
                }
                if (TypicalSupport.match$387(arg$4663)) {
                  final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4663.get(0), 0, arg$4663.get(0).size()));

                  return Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
                    final Pair<TypicalTypes.patternRecord> pl;

                    {
                      pl = Analyzer.cast(getPatternRecords.apply(nl));
                    }

                    public TypicalTypes.patternRecord apply() {
                      return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstructorPattern(s, pl), n, Boolean.FALSE));
                    }
                  }.apply());
                }
                if (TypicalSupport.match$422(arg$4663)) {
                  return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstructorPattern(s, null), n, Boolean.FALSE));
                }
                if (true) {
                  return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstructorPattern(s, Pair.<TypicalTypes.patternRecord>empty()), n, Boolean.FALSE));
                }
                return null;
              }
            }.apply());

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4669);
          }
          if (TypicalSupport.match$2918(arg$4633)) {
            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4673 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.BotPattern(), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4673);
          }
          if (TypicalSupport.match$321(arg$4633)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4633, 0, arg$4633.size()));

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4677 = Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
              final Pair<TypicalTypes.patternRecord> pl;
              final TypicalTypes.patternRecord res;

              {
                pl = Analyzer.cast(getPatternRecords.apply(nl));
                res = Analyzer.cast(getPairFromList.apply(pl));
              }

              public TypicalTypes.patternRecord apply() {
                return Analyzer.cast(new TypicalTypes.patternRecord(null == res ? null : res.pat, n, Boolean.FALSE));
              }
            }.apply());

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4677);
          }
          if (TypicalSupport.match$339(arg$4633)) {
            final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4633, 0, arg$4633.size()));

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4681 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.RecPattern(getPatternRecords.apply(nl)), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4681);
          }
          if (TypicalSupport.match$363(arg$4633)) {
            final Node lowID = (arg$4633.size() > 0 ? arg$4633.getGeneric(0) : null);
            final Node p = (arg$4633.size() > 1 ? arg$4633.getGeneric(1) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4685 = Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
              final String s;

              {
                s = Analyzer.cast(getString.apply(lowID));
              }

              public TypicalTypes.patternRecord apply() {
                return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.RecFieldPattern(s, getPatternRecord.apply(p)), n, Boolean.FALSE));
              }
            }.apply());

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4685);
          }
          if (TypicalSupport.match$4686(arg$4633)) {
            final String s = (arg$4633.size() > 0 ? arg$4633.getString(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4689 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstantPattern(new TypicalTypes.StringValue(s)), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4689);
          }
          if (TypicalSupport.match$4690(arg$4633)) {
            final String s = (arg$4633.size() > 0 ? arg$4633.getString(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4693 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstantPattern(new TypicalTypes.IntValue(Primitives.stoi.apply(s, BigInteger.valueOf(10)))), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4693);
          }
          if (TypicalSupport.match$4694(arg$4633)) {
            final String s = (arg$4633.size() > 0 ? arg$4633.getString(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4697 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstantPattern(new TypicalTypes.FloatValue(Primitives.stof.apply(s))), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4697);
          }
          if (TypicalSupport.match$4698(arg$4633)) {
            final String s = (arg$4633.size() > 0 ? arg$4633.getString(0) : null);

            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4701 = Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
              final Boolean res;

              {
                res = Analyzer.cast(null == Primitives.equal.apply("true", s) ? null : Primitives.equal.apply("true", s) ? Boolean.TRUE : Boolean.FALSE);
              }

              public TypicalTypes.patternRecord apply() {
                return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.ConstantPattern(new TypicalTypes.BoolValue(res)), n, Boolean.FALSE));
              }
            }.apply());

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4701);
          }
          if (TypicalSupport.match$2922(arg$4633)) {
            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4705 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.WildCardPattern(), n, Boolean.FALSE));

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4705);
          }
          if (true) {
            matching_nodes.add(arg$4633);
            if ((null != arg$4633 && processScopeNodes.contains(arg$4633.getName()))) {
              processScope(arg$4633, getScope);
            }
            checkEnterScope(arg$4633);

            final Object retValue$4708 = Analyzer.cast(null);

            checkExitScope(arg$4633);
            matching_nodes.remove(matching_nodes.size() - 1);
            return Analyzer.cast(retValue$4708);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.patternRecord, Pair<TypicalTypes.patternRecord>> getPairFromList = new Function.F1<TypicalTypes.patternRecord, Pair<TypicalTypes.patternRecord>>() {
    public TypicalTypes.patternRecord apply(final Pair<TypicalTypes.patternRecord> pl) {
      return new Match<TypicalTypes.patternRecord>() {
        public TypicalTypes.patternRecord apply() {
          final Pair<TypicalTypes.patternRecord> arg$4710 = Analyzer.cast(pl);

          if ((null == arg$4710)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4710)) {
            return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.EmptyPattern(), GNode.create("ListPattern", Pair.<Node>empty()), Boolean.FALSE));
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4712 = Analyzer.cast(Analyzer.cast(arg$4710));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4712));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4712));

            return Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
              final TypicalTypes.patternRecord pt;

              {
                pt = Analyzer.cast(getPairFromList.apply(xs));
              }

              public TypicalTypes.patternRecord apply() {
                return Analyzer.cast(new Match<TypicalTypes.patternRecord>() {
                  public TypicalTypes.patternRecord apply() {
                    final Node arg$4722 = GNode.cast(null == pt ? null : pt.nod);

                    if ((null == arg$4722)) {
                      return null;
                    }
                    if (TypicalSupport.match$321(arg$4722)) {
                      final Pair<Node> nl = Analyzer.cast(Primitives.getChildren(arg$4722, 0, arg$4722.size()));

                      matching_nodes.add(arg$4722);
                      if ((null != arg$4722 && processScopeNodes.contains(arg$4722.getName()))) {
                        processScope(arg$4722, getScope);
                      }
                      checkEnterScope(arg$4722);

                      final Object retValue$4726 = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.PairPattern(x, pt), GNode.create("ListPattern", TypicalSupport.append$127.apply(new Pair<Node>(null == x ? null : x.nod), nl)), Boolean.FALSE));

                      checkExitScope(arg$4722);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$4726);
                    }
                    if (true) {
                      matching_nodes.add(arg$4722);
                      if ((null != arg$4722 && processScopeNodes.contains(arg$4722.getName()))) {
                        processScope(arg$4722, getScope);
                      }
                      checkEnterScope(arg$4722);

                      final Object retValue$4729 = Analyzer.cast(null);

                      checkExitScope(arg$4722);
                      matching_nodes.remove(matching_nodes.size() - 1);
                      return Analyzer.cast(retValue$4729);
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Object, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> checkPatterns = new Function.F2<Object, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Object apply(final Pair<TypicalTypes.patternRecord> preList, final Pair<TypicalTypes.patternRecord> posList) {
      return new Match<Object>() {
        public Object apply() {
          final Pair<TypicalTypes.patternRecord> arg$4732 = Analyzer.cast(posList);

          if ((null == arg$4732)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4732)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4734 = Analyzer.cast(Analyzer.cast(arg$4732));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4734));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4734));

            return Analyzer.cast(new Let<Object>() {
              {
                checkUnused.apply(preList, x);
              }

              public Object apply() {
                return Analyzer.cast(checkPatterns.apply(TypicalSupport.append$4735.apply(preList, new Pair<TypicalTypes.patternRecord>(x)), xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord> checkUnused = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> preList, final TypicalTypes.patternRecord pat) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4737 = Analyzer.cast(preList);

          if ((null == arg$4737)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4737)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4739 = Analyzer.cast(Analyzer.cast(arg$4737));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4739));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4739));

            return Analyzer.cast(null == isMoreGeneral.apply(x, pat) ? null : isMoreGeneral.apply(x, pat) ? new Let<Boolean>() {
              final Node nod;

              {
                nod = Analyzer.cast(null == pat ? null : pat.nod);
                error("unused pattern", nod);
              }

              public Boolean apply() {
                return Analyzer.cast(Boolean.TRUE);
              }
            }.apply() : checkUnused.apply(xs, pat));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, TypicalTypes.patternRecord, TypicalTypes.patternRecord> isMoreGeneral = new Function.F2<Boolean, TypicalTypes.patternRecord, TypicalTypes.patternRecord>() {
    public Boolean apply(final TypicalTypes.patternRecord p, final TypicalTypes.patternRecord q) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final TypicalTypes.pattern arg$4741 = Analyzer.cast(null == p ? null : p.pat);

          if ((null == arg$4741)) {
            return null;
          }
          if ((null != arg$4741))
                        switch (arg$4741.tag()) {
            case WildCardPattern:
              if (TypicalSupport.match$4742(arg$4741)) {
                return Analyzer.cast(Boolean.TRUE);
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null == (null == p ? null : p.guarded) ? null : (null == p ? null : p.guarded) ? Boolean.FALSE : null == Primitives.and.apply(null == q ? null : q.guarded, equalPattern.apply(p, q)) ? null : Primitives.and.apply(null == q ? null : q.guarded, equalPattern.apply(p, q)) ? Boolean.TRUE : new Match<Boolean>() {
              public Boolean apply() {
                final TypicalTypes.pattern arg$4826 = Analyzer.cast(null == p ? null : p.pat);

                if ((null == arg$4826)) {
                  return null;
                }
                if ((null != arg$4826))
                                    switch (arg$4826.tag()) {
                  case PairPattern:
                    if (TypicalSupport.match$4804(arg$4826)) {
                      final TypicalTypes.patternRecord hd1 = Analyzer.cast(arg$4826.getTuple().get1());
                      final TypicalTypes.patternRecord tl1 = Analyzer.cast(arg$4826.getTuple().get2());

                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4891 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4891)) {
                            return null;
                          }
                          if ((null != arg$4891))
                                                        switch (arg$4891.tag()) {
                            case PairPattern:
                              if (TypicalSupport.match$4804(arg$4891)) {
                                final TypicalTypes.patternRecord hd2 = Analyzer.cast(arg$4891.getTuple().get1());
                                final TypicalTypes.patternRecord tl2 = Analyzer.cast(arg$4891.getTuple().get2());

                                return Analyzer.cast(Primitives.and.apply(isMoreGeneral.apply(hd1, hd2), isMoreGeneral.apply(tl1, tl2)));
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case ConstructorPattern:
                    if (TypicalSupport.match$4790(arg$4826)) {
                      final String s1 = Analyzer.cast(arg$4826.getTuple().get1());
                      final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$4826.getTuple().get2());

                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4877 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4877)) {
                            return null;
                          }
                          if ((null != arg$4877))
                                                        switch (arg$4877.tag()) {
                            case ConstructorPattern:
                              if (TypicalSupport.match$4790(arg$4877)) {
                                final String s2 = Analyzer.cast(arg$4877.getTuple().get1());
                                final Pair<TypicalTypes.patternRecord> ql = Analyzer.cast(arg$4877.getTuple().get2());

                                return Analyzer.cast(null == Primitives.not.apply(Primitives.equal.apply(s1, s2)) ? null : Primitives.not.apply(Primitives.equal.apply(s1, s2)) ? Boolean.FALSE : null == Primitives.isBottom.apply(pl) ? null : Primitives.isBottom.apply(pl) ? Boolean.TRUE : null == Primitives.isBottom.apply(ql) ? null : Primitives.isBottom.apply(ql) ? Boolean.FALSE : lessPatternList.apply(pl, ql));
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case RecFieldPattern:
                    if (TypicalSupport.match$4818(arg$4826)) {
                      final String str1 = Analyzer.cast(arg$4826.getTuple().get1());
                      final TypicalTypes.patternRecord p1 = Analyzer.cast(arg$4826.getTuple().get2());

                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4905 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4905)) {
                            return null;
                          }
                          if ((null != arg$4905))
                                                        switch (arg$4905.tag()) {
                            case RecFieldPattern:
                              if (TypicalSupport.match$4818(arg$4905)) {
                                final String str2 = Analyzer.cast(arg$4905.getTuple().get1());
                                final TypicalTypes.patternRecord p2 = Analyzer.cast(arg$4905.getTuple().get2());

                                return Analyzer.cast(Primitives.and.apply(Primitives.equal.apply(str1, str2), isMoreGeneral.apply(p1, p2)));
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case VariablePattern:
                    if (TypicalSupport.match$4744(arg$4826)) {
                      return Analyzer.cast(Boolean.TRUE);
                    }
                    break;
                  case TupPattern:
                    if (TypicalSupport.match$4783(arg$4826)) {
                      final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$4826.getTuple().get1());

                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4870 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4870)) {
                            return null;
                          }
                          if ((null != arg$4870))
                                                        switch (arg$4870.tag()) {
                            case TupPattern:
                              if (TypicalSupport.match$4783(arg$4870)) {
                                final Pair<TypicalTypes.patternRecord> ql = Analyzer.cast(arg$4870.getTuple().get1());

                                return Analyzer.cast(lessPatternList.apply(pl, ql));
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case BotPattern:
                    if (TypicalSupport.match$4745(arg$4826)) {
                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4832 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4832)) {
                            return null;
                          }
                          if ((null != arg$4832))
                                                        switch (arg$4832.tag()) {
                            case BotPattern:
                              if (TypicalSupport.match$4745(arg$4832)) {
                                return Analyzer.cast(Boolean.TRUE);
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case RecPattern:
                    if (TypicalSupport.match$4811(arg$4826)) {
                      final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$4826.getTuple().get1());

                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4898 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4898)) {
                            return null;
                          }
                          if ((null != arg$4898))
                                                        switch (arg$4898.tag()) {
                            case RecPattern:
                              if (TypicalSupport.match$4811(arg$4898)) {
                                final Pair<TypicalTypes.patternRecord> ql = Analyzer.cast(arg$4898.getTuple().get1());

                                return Analyzer.cast(checkListInList.apply(ql, pl));
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case EmptyPattern:
                    if (TypicalSupport.match$4797(arg$4826)) {
                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4884 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4884)) {
                            return null;
                          }
                          if ((null != arg$4884))
                                                        switch (arg$4884.tag()) {
                            case EmptyPattern:
                              if (TypicalSupport.match$4797(arg$4884)) {
                                return Analyzer.cast(Boolean.TRUE);
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  case ConstantPattern:
                    if (TypicalSupport.match$4752(arg$4826)) {
                      final TypicalTypes.value val = Analyzer.cast(arg$4826.getTuple().get1());

                      return Analyzer.cast(new Match<Boolean>() {
                        public Boolean apply() {
                          final TypicalTypes.pattern arg$4851 = Analyzer.cast(null == q ? null : q.pat);

                          if ((null == arg$4851)) {
                            return null;
                          }
                          if ((null != arg$4851))
                                                        switch (arg$4851.tag()) {
                            case ConstantPattern:
                              if (TypicalSupport.match$4752(arg$4851)) {
                                final TypicalTypes.value va = Analyzer.cast(arg$4851.getTuple().get1());

                                return Analyzer.cast(new Match<Boolean>() {
                                  public Boolean apply() {
                                    final Tuple.T2<TypicalTypes.value, TypicalTypes.value> arg$4859 = Analyzer.cast(new Tuple.T2<TypicalTypes.value, TypicalTypes.value>(val, va));

                                    if ((null == arg$4859)) {
                                      return null;
                                    }
                                    if (TypicalSupport.match$4756(arg$4859)) {
                                      final String s1 = Analyzer.cast(arg$4859.get1().getTuple().get1());
                                      final String s2 = Analyzer.cast(arg$4859.get2().getTuple().get1());

                                      return Analyzer.cast(Primitives.equal.apply(s1, s2));
                                    }
                                    if (TypicalSupport.match$4757(arg$4859)) {
                                      final Double f1 = Analyzer.cast(arg$4859.get1().getTuple().get1());
                                      final Double f2 = Analyzer.cast(arg$4859.get2().getTuple().get1());

                                      return Analyzer.cast(Primitives.equal.apply(f1, f2));
                                    }
                                    if (TypicalSupport.match$4758(arg$4859)) {
                                      final BigInteger in1 = Analyzer.cast(arg$4859.get1().getTuple().get1());
                                      final BigInteger in2 = Analyzer.cast(arg$4859.get2().getTuple().get1());

                                      return Analyzer.cast(Primitives.equal.apply(in1, in2));
                                    }
                                    if (TypicalSupport.match$4759(arg$4859)) {
                                      final Boolean b1 = Analyzer.cast(arg$4859.get1().getTuple().get1());
                                      final Boolean b2 = Analyzer.cast(arg$4859.get2().getTuple().get1());

                                      return Analyzer.cast(Primitives.equal.apply(b1, b2));
                                    }
                                    if (true) {
                                      return Analyzer.cast(Boolean.FALSE);
                                    }
                                    return null;
                                  }
                                }.apply());
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                          return null;
                        }
                      }.apply());
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(Boolean.FALSE);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> lessPatternList = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> pl, final Pair<TypicalTypes.patternRecord> ql) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4910 = Analyzer.cast(pl);

          if ((null == arg$4910)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4910)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4912 = Analyzer.cast(Analyzer.cast(arg$4910));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4912));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4912));

            return Analyzer.cast(null == isMoreGeneral.apply(x, TypicalSupport.head$4913.apply(ql)) ? null : isMoreGeneral.apply(x, TypicalSupport.head$4913.apply(ql)) ? lessPatternList.apply(xs, TypicalSupport.tail$4914.apply(ql)) : Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, TypicalTypes.patternRecord, TypicalTypes.patternRecord> equalPattern = new Function.F2<Boolean, TypicalTypes.patternRecord, TypicalTypes.patternRecord>() {
    public Boolean apply(final TypicalTypes.patternRecord p, final TypicalTypes.patternRecord q) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> arg$4916 = Analyzer.cast(new Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern>(null == p ? null : p.pat, null == q ? null : q.pat));

          if ((null == arg$4916)) {
            return null;
          }
          if (TypicalSupport.match$4917(arg$4916)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (TypicalSupport.match$4918(arg$4916)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (TypicalSupport.match$4919(arg$4916)) {
            final TypicalTypes.value val1 = Analyzer.cast(arg$4916.get1().getTuple().get1());
            final TypicalTypes.value val2 = Analyzer.cast(arg$4916.get2().getTuple().get1());

            return Analyzer.cast(new Match<Boolean>() {
              public Boolean apply() {
                final Tuple.T2<TypicalTypes.value, TypicalTypes.value> arg$4926 = Analyzer.cast(new Tuple.T2<TypicalTypes.value, TypicalTypes.value>(val1, val2));

                if ((null == arg$4926)) {
                  return null;
                }
                if (TypicalSupport.match$4756(arg$4926)) {
                  final String str1 = Analyzer.cast(arg$4926.get1().getTuple().get1());
                  final String str2 = Analyzer.cast(arg$4926.get2().getTuple().get1());

                  return Analyzer.cast(Primitives.equal.apply(str1, str2));
                }
                if (TypicalSupport.match$4757(arg$4926)) {
                  final Double f1 = Analyzer.cast(arg$4926.get1().getTuple().get1());
                  final Double f2 = Analyzer.cast(arg$4926.get2().getTuple().get1());

                  return Analyzer.cast(Primitives.equal.apply(f1, f2));
                }
                if (TypicalSupport.match$4758(arg$4926)) {
                  final BigInteger in1 = Analyzer.cast(arg$4926.get1().getTuple().get1());
                  final BigInteger in2 = Analyzer.cast(arg$4926.get2().getTuple().get1());

                  return Analyzer.cast(Primitives.equal.apply(in1, in2));
                }
                if (TypicalSupport.match$4759(arg$4926)) {
                  final Boolean b1 = Analyzer.cast(arg$4926.get1().getTuple().get1());
                  final Boolean b2 = Analyzer.cast(arg$4926.get2().getTuple().get1());

                  return Analyzer.cast(Primitives.equal.apply(b1, b2));
                }
                if (true) {
                  return Analyzer.cast(Boolean.FALSE);
                }
                return null;
              }
            }.apply());
          }
          if (TypicalSupport.match$4932(arg$4916)) {
            final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$4916.get1().getTuple().get1());
            final Pair<TypicalTypes.patternRecord> ql = Analyzer.cast(arg$4916.get2().getTuple().get1());

            return Analyzer.cast(equalPatternList.apply(pl, ql));
          }
          if (TypicalSupport.match$4933(arg$4916)) {
            final String s1 = Analyzer.cast(arg$4916.get1().getTuple().get1());
            final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$4916.get1().getTuple().get2());
            final String s2 = Analyzer.cast(arg$4916.get2().getTuple().get1());
            final Pair<TypicalTypes.patternRecord> ql = Analyzer.cast(arg$4916.get2().getTuple().get2());

            return Analyzer.cast(null == Primitives.not.apply(Primitives.equal.apply(s1, s2)) ? null : Primitives.not.apply(Primitives.equal.apply(s1, s2)) ? Boolean.FALSE : null == Primitives.and.apply(Primitives.isBottom.apply(pl), Primitives.isBottom.apply(ql)) ? null : Primitives.and.apply(Primitives.isBottom.apply(pl), Primitives.isBottom.apply(ql)) ? Boolean.TRUE : null == Primitives.or.apply(Primitives.isBottom.apply(pl), Primitives.isBottom.apply(ql)) ? null : Primitives.or.apply(Primitives.isBottom.apply(pl), Primitives.isBottom.apply(ql)) ? Boolean.FALSE : equalPatternList.apply(pl, ql));
          }
          if (true) {
            return Analyzer.cast(Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> equalPatternList = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> pl, final Pair<TypicalTypes.patternRecord> ql) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4935 = Analyzer.cast(pl);

          if ((null == arg$4935)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4935)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4937 = Analyzer.cast(Analyzer.cast(arg$4935));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4937));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4937));

            return Analyzer.cast(null == equalPattern.apply(x, TypicalSupport.head$4913.apply(ql)) ? null : equalPattern.apply(x, TypicalSupport.head$4913.apply(ql)) ? equalPatternList.apply(xs, TypicalSupport.tail$4914.apply(ql)) : Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> checkListInList = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> pl, final Pair<TypicalTypes.patternRecord> ql) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4939 = Analyzer.cast(ql);

          if ((null == arg$4939)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4939)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4941 = Analyzer.cast(Analyzer.cast(arg$4939));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4941));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4941));

            return Analyzer.cast(null == checkInList.apply(pl, x) ? null : checkInList.apply(pl, x) ? checkListInList.apply(pl, xs) : Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord> checkInList = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> pl, final TypicalTypes.patternRecord q) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4943 = Analyzer.cast(pl);

          if ((null == arg$4943)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4943)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4945 = Analyzer.cast(Analyzer.cast(arg$4943));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4945));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4945));

            return Analyzer.cast(null == isMoreGeneral.apply(q, x) ? null : isMoreGeneral.apply(q, x) ? Boolean.TRUE : checkInList.apply(xs, q));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Object, Pair<Node>> checkIrredundant = new Function.F1<Object, Pair<Node>>() {
    public Object apply(final Pair<Node> nl) {
      return new Let<Object>() {
        final Pair<Node> pl;

        {
          pl = Analyzer.cast(getPatternNodes.apply(nl));
        }

        public Object apply() {
          return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(pl), BigInteger.valueOf(1)) || !Primitives.greaterInt.apply(Primitives.length.apply(pl), BigInteger.valueOf(1)) ? null : new Let<Object>() {
            final Pair<TypicalTypes.patternRecord> patList;

            {
              patList = Analyzer.cast(getPatternRecords.apply(pl));
            }

            public Object apply() {
              return Analyzer.cast(checkPatterns.apply(new Pair<TypicalTypes.patternRecord>(TypicalSupport.head$4913.apply(patList)), TypicalSupport.tail$4914.apply(patList)));
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F1<Object, Pair<Node>> checkReduceMatching = new Function.F1<Object, Pair<Node>>() {
    public Object apply(final Pair<Node> nl) {
      return new Let<Object>() {
        final Pair<Node> pl;

        {
          pl = Analyzer.cast(getPatternNodes.apply(nl));
        }

        public Object apply() {
          return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(pl), BigInteger.valueOf(1)) || !Primitives.greaterInt.apply(Primitives.length.apply(pl), BigInteger.valueOf(1)) ? null : new Let<Object>() {
            final Pair<TypicalTypes.patternRecord> patList;

            {
              patList = Analyzer.cast(getPatternRecords.apply(pl));
            }

            public Object apply() {
              return Analyzer.cast(checkReducePatterns.apply(new Pair<TypicalTypes.patternRecord>(TypicalSupport.head$4913.apply(patList)), TypicalSupport.tail$4914.apply(patList)));
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<Object, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> checkReducePatterns = new Function.F2<Object, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Object apply(final Pair<TypicalTypes.patternRecord> preList, final Pair<TypicalTypes.patternRecord> posList) {
      return new Match<Object>() {
        public Object apply() {
          final Pair<TypicalTypes.patternRecord> arg$4947 = Analyzer.cast(posList);

          if ((null == arg$4947)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4947)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4949 = Analyzer.cast(Analyzer.cast(arg$4947));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4949));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4949));

            return Analyzer.cast(new Let<Object>() {
              {
                checkReduceUnused.apply(preList, x);
              }

              public Object apply() {
                return Analyzer.cast(checkReducePatterns.apply(TypicalSupport.append$4735.apply(preList, new Pair<TypicalTypes.patternRecord>(x)), xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Object, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord> checkReduceUnused = new Function.F2<Object, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord>() {
    public Object apply(final Pair<TypicalTypes.patternRecord> preList, final TypicalTypes.patternRecord pat) {
      return new Match<Object>() {
        public Object apply() {
          final Pair<TypicalTypes.patternRecord> arg$4951 = Analyzer.cast(preList);

          if ((null == arg$4951)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4951)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4953 = Analyzer.cast(Analyzer.cast(arg$4951));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4953));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4953));

            return Analyzer.cast(null == containPattern.apply(x, pat) ? null : containPattern.apply(x, pat) ? new Let<Object>() {
              final Node nod;

              {
                nod = Analyzer.cast(null == pat ? null : pat.nod);
              }

              public Object apply() {
                return Analyzer.cast(error("unused pattern", nod));
              }
            }.apply() : checkReduceUnused.apply(xs, pat));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, TypicalTypes.patternRecord, TypicalTypes.patternRecord> containPattern = new Function.F2<Boolean, TypicalTypes.patternRecord, TypicalTypes.patternRecord>() {
    public Boolean apply(final TypicalTypes.patternRecord p, final TypicalTypes.patternRecord q) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final TypicalTypes.pattern arg$4955 = Analyzer.cast(null == p ? null : p.pat);

          if ((null == arg$4955)) {
            return null;
          }
          if ((null != arg$4955))
                        switch (arg$4955.tag()) {
            case PairPattern:
              if (TypicalSupport.match$4804(arg$4955)) {
                return Analyzer.cast(new Let<Boolean>() {
                  final Pair<TypicalTypes.patternRecord> pl;

                  {
                    pl = Analyzer.cast(getListFromPair.apply(p));
                  }

                  public Boolean apply() {
                    return Analyzer.cast(new Match<Boolean>() {
                      public Boolean apply() {
                        final TypicalTypes.pattern arg$4971 = Analyzer.cast(null == q ? null : q.pat);

                        if ((null == arg$4971)) {
                          return null;
                        }
                        if ((null != arg$4971))
                                                    switch (arg$4971.tag()) {
                          case PairPattern:
                            if (TypicalSupport.match$4804(arg$4971)) {
                              return Analyzer.cast(new Let<Boolean>() {
                                final Pair<TypicalTypes.patternRecord> ql;

                                {
                                  ql = Analyzer.cast(getListFromPair.apply(q));
                                }

                                public Boolean apply() {
                                  return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? Boolean.FALSE : checkContain.apply(ql, pl));
                                }
                              }.apply());
                            }
                            break;
                          case EmptyPattern:
                            if (TypicalSupport.match$4797(arg$4971)) {
                              return Analyzer.cast(new Let<Boolean>() {
                                final Pair<TypicalTypes.patternRecord> ql;

                                {
                                  ql = Analyzer.cast(getListFromPair.apply(q));
                                }

                                public Boolean apply() {
                                  return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? Boolean.FALSE : checkContain.apply(ql, pl));
                                }
                              }.apply());
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(Boolean.FALSE);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case EmptyPattern:
              if (TypicalSupport.match$4797(arg$4955)) {
                return Analyzer.cast(new Let<Boolean>() {
                  final Pair<TypicalTypes.patternRecord> pl;

                  {
                    pl = Analyzer.cast(getListFromPair.apply(p));
                  }

                  public Boolean apply() {
                    return Analyzer.cast(new Match<Boolean>() {
                      public Boolean apply() {
                        final TypicalTypes.pattern arg$4962 = Analyzer.cast(null == q ? null : q.pat);

                        if ((null == arg$4962)) {
                          return null;
                        }
                        if ((null != arg$4962))
                                                    switch (arg$4962.tag()) {
                          case PairPattern:
                            if (TypicalSupport.match$4804(arg$4962)) {
                              return Analyzer.cast(new Let<Boolean>() {
                                final Pair<TypicalTypes.patternRecord> ql;

                                {
                                  ql = Analyzer.cast(getListFromPair.apply(q));
                                }

                                public Boolean apply() {
                                  return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? Boolean.FALSE : checkContain.apply(ql, pl));
                                }
                              }.apply());
                            }
                            break;
                          case EmptyPattern:
                            if (TypicalSupport.match$4797(arg$4962)) {
                              return Analyzer.cast(new Let<Boolean>() {
                                final Pair<TypicalTypes.patternRecord> ql;

                                {
                                  ql = Analyzer.cast(getListFromPair.apply(q));
                                }

                                public Boolean apply() {
                                  return Analyzer.cast(null == Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(pl), Primitives.length.apply(ql)) ? Boolean.FALSE : checkContain.apply(ql, pl));
                                }
                              }.apply());
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(Boolean.FALSE);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case WildCardPattern:
              if (TypicalSupport.match$4742(arg$4955)) {
                return Analyzer.cast(Boolean.TRUE);
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(Boolean.FALSE);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord> getListFromPair = new Function.F1<Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord>() {
    public Pair<TypicalTypes.patternRecord> apply(final TypicalTypes.patternRecord p) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final TypicalTypes.pattern arg$4976 = Analyzer.cast(null == p ? null : p.pat);

          if ((null == arg$4976)) {
            return null;
          }
          if ((null != arg$4976))
                        switch (arg$4976.tag()) {
            case PairPattern:
              if (TypicalSupport.match$4804(arg$4976)) {
                final TypicalTypes.patternRecord hd = Analyzer.cast(arg$4976.getTuple().get1());
                final TypicalTypes.patternRecord tl = Analyzer.cast(arg$4976.getTuple().get2());

                return Analyzer.cast(TypicalSupport.append$4735.apply(new Pair<TypicalTypes.patternRecord>(hd), getListFromPair.apply(tl)));
              }
              break;
            case EmptyPattern:
              if (TypicalSupport.match$4797(arg$4976)) {
                return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> checkContain = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> ql, final Pair<TypicalTypes.patternRecord> pl) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4980 = Analyzer.cast(pl);

          if ((null == arg$4980)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4980)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4982 = Analyzer.cast(Analyzer.cast(arg$4980));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4982));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4982));

            return Analyzer.cast(new Let<Boolean>() {
              final Pair<TypicalTypes.patternRecord> rem;

              {
                rem = Analyzer.cast(checkRemovePattern.apply(ql, x, Pair.<TypicalTypes.patternRecord>empty()));
              }

              public Boolean apply() {
                return Analyzer.cast(null == Primitives.isBottom.apply(rem) ? null : Primitives.isBottom.apply(rem) ? Boolean.FALSE : checkContain.apply(rem, xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord, Pair<TypicalTypes.patternRecord>> checkRemovePattern = new Function.F3<Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord, Pair<TypicalTypes.patternRecord>>() {
    public Pair<TypicalTypes.patternRecord> apply(final Pair<TypicalTypes.patternRecord> ql, final TypicalTypes.patternRecord pat, final Pair<TypicalTypes.patternRecord> rem) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final Pair<TypicalTypes.patternRecord> arg$4984 = Analyzer.cast(ql);

          if ((null == arg$4984)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4984)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4986 = Analyzer.cast(Analyzer.cast(arg$4984));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4986));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4986));

            return Analyzer.cast(null == isMoreGeneral.apply(x, pat) ? null : isMoreGeneral.apply(x, pat) ? TypicalSupport.append$4735.apply(rem, xs) : checkRemovePattern.apply(xs, pat, TypicalSupport.append$4735.apply(rem, new Pair<TypicalTypes.patternRecord>(x))));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord> checkUsed = new Function.F2<Boolean, Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> preList, final TypicalTypes.patternRecord pat) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$4988 = Analyzer.cast(preList);

          if ((null == arg$4988)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4988)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4990 = Analyzer.cast(Analyzer.cast(arg$4988));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4990));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4990));

            return Analyzer.cast(null == isMoreGeneral.apply(x, pat) ? null : isMoreGeneral.apply(x, pat) ? Boolean.FALSE : checkUsed.apply(xs, pat));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F3<Pair<Pair<TypicalTypes.patternRecord>>, Pair<Pair<TypicalTypes.patternRecord>>, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>> buildMatrix = new Function.F3<Pair<Pair<TypicalTypes.patternRecord>>, Pair<Pair<TypicalTypes.patternRecord>>, Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.patternRecord>>() {
    public Pair<Pair<TypicalTypes.patternRecord>> apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix, final Pair<TypicalTypes.patternRecord> preList, final Pair<TypicalTypes.patternRecord> postList) {
      return new Match<Pair<Pair<TypicalTypes.patternRecord>>>() {
        public Pair<Pair<TypicalTypes.patternRecord>> apply() {
          final Pair<TypicalTypes.patternRecord> arg$4992 = Analyzer.cast(postList);

          if ((null == arg$4992)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$4992)) {
            return Analyzer.cast(matrix);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$4994 = Analyzer.cast(Analyzer.cast(arg$4992));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$4994));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$4994));

            return Analyzer.cast(null == (null == x ? null : x.guarded) ? null : (null == x ? null : x.guarded) ? buildMatrix.apply(matrix, TypicalSupport.append$4735.apply(preList, new Pair<TypicalTypes.patternRecord>(x)), xs) : null == Primitives.not.apply(checkUsed.apply(preList, x)) ? null : Primitives.not.apply(checkUsed.apply(preList, x)) ? buildMatrix.apply(matrix, preList, xs) : new Let<Pair<Pair<TypicalTypes.patternRecord>>>() {
              final Pair<TypicalTypes.patternRecord> row;

              {
                row = Analyzer.cast(new Pair<TypicalTypes.patternRecord>(x));
              }

              public Pair<Pair<TypicalTypes.patternRecord>> apply() {
                return Analyzer.cast(buildMatrix.apply(TypicalSupport.append$4995.apply(matrix, new Pair<Pair<TypicalTypes.patternRecord>>(row)), TypicalSupport.append$4735.apply(preList, new Pair<TypicalTypes.patternRecord>(x)), xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<TypicalTypes.constr>, Pair<TypicalTypes.constr>, Pair<Pair<TypicalTypes.patternRecord>>> getSigma = new Function.F2<Pair<TypicalTypes.constr>, Pair<TypicalTypes.constr>, Pair<Pair<TypicalTypes.patternRecord>>>() {
    public Pair<TypicalTypes.constr> apply(final Pair<TypicalTypes.constr> sigma, final Pair<Pair<TypicalTypes.patternRecord>> matrix) {
      return new Match<Pair<TypicalTypes.constr>>() {
        public Pair<TypicalTypes.constr> apply() {
          final Pair<Pair<TypicalTypes.patternRecord>> arg$4997 = Analyzer.cast(matrix);

          if ((null == arg$4997)) {
            return null;
          }
          if (TypicalSupport.match$4998(arg$4997)) {
            return Analyzer.cast(sigma);
          }
          if (true) {
            final Pair<Pair<TypicalTypes.patternRecord>> list$4999 = Analyzer.cast(Analyzer.cast(arg$4997));
            final Pair<TypicalTypes.patternRecord> x = Analyzer.cast(Primitives.wrapHead(list$4999));
            final Pair<Pair<TypicalTypes.patternRecord>> xs = Analyzer.cast(Primitives.wrapTail(list$4999));

            return Analyzer.cast(new Let<Pair<TypicalTypes.constr>>() {
              final TypicalTypes.patternRecord patRec;
              final TypicalTypes.constr constructor;

              {
                patRec = Analyzer.cast(TypicalSupport.head$4913.apply(x));
                constructor = Analyzer.cast(getConstructor.apply(patRec));
              }

              public Pair<TypicalTypes.constr> apply() {
                return Analyzer.cast(getSigma.apply(TypicalSupport.append$5000.apply(sigma, new Pair<TypicalTypes.constr>(constructor)), xs));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.constr, TypicalTypes.patternRecord> getConstructor = new Function.F1<TypicalTypes.constr, TypicalTypes.patternRecord>() {
    public TypicalTypes.constr apply(final TypicalTypes.patternRecord patRec) {
      return new Match<TypicalTypes.constr>() {
        public TypicalTypes.constr apply() {
          final TypicalTypes.pattern arg$5002 = Analyzer.cast(null == patRec ? null : patRec.pat);

          if ((null == arg$5002)) {
            return null;
          }
          if ((null != arg$5002))
                        switch (arg$5002.tag()) {
            case PairPattern:
              if (TypicalSupport.match$4804(arg$5002)) {
                return Analyzer.cast(new TypicalTypes.PairConstr());
              }
              break;
            case ConstructorPattern:
              if (TypicalSupport.match$4790(arg$5002)) {
                final String s = Analyzer.cast(arg$5002.getTuple().get1());
                final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5002.getTuple().get2());

                return Analyzer.cast(null == Primitives.isBottom.apply(pl) ? null : Primitives.isBottom.apply(pl) ? new TypicalTypes.CConstr(s, getConstructorSize.apply(s)) : new TypicalTypes.CConstr(s, Primitives.length.apply(pl)));
              }
              break;
            case RecFieldPattern:
              if (TypicalSupport.match$4818(arg$5002)) {
                final TypicalTypes.patternRecord p = Analyzer.cast(arg$5002.getTuple().get2());

                return Analyzer.cast(getConstructor.apply(p));
              }
              break;
            case VariablePattern:
              if (TypicalSupport.match$4744(arg$5002)) {
                return Analyzer.cast(new TypicalTypes.WildConstr());
              }
              break;
            case TupPattern:
              if (TypicalSupport.match$4783(arg$5002)) {
                final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5002.getTuple().get1());

                return Analyzer.cast(new TypicalTypes.TupleConstr(Primitives.length.apply(pl)));
              }
              break;
            case BotPattern:
              if (TypicalSupport.match$4745(arg$5002)) {
                return Analyzer.cast(new TypicalTypes.BotConstr());
              }
              break;
            case RecPattern:
              if (TypicalSupport.match$4811(arg$5002)) {
                return Analyzer.cast(new Let<TypicalTypes.constr>() {
                  final TypicalTypes.raw_type<?> ty;

                  {
                    ty = Analyzer.cast(Primitives.getAnnotation.apply(null == patRec ? null : patRec.nod, "__type"));
                  }

                  public TypicalTypes.constr apply() {
                    return Analyzer.cast(new Match<TypicalTypes.constr>() {
                      public TypicalTypes.constr apply() {
                        final TypicalTypes.raw_type<?> arg$5012 = Analyzer.cast(ty);

                        if ((null == arg$5012)) {
                          return null;
                        }
                        if ((null != arg$5012))
                                                    switch (arg$5012.tag()) {
                          case RecordT:
                            if (TypicalSupport.match$107(arg$5012)) {
                              final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$5012.getTuple().get1());

                              return Analyzer.cast(new TypicalTypes.RecordConstr(Primitives.length.apply(tl)));
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                }.apply());
              }
              break;
            case EmptyPattern:
              if (TypicalSupport.match$4797(arg$5002)) {
                return Analyzer.cast(new TypicalTypes.EmptyConstr());
              }
              break;
            case ConstantPattern:
              if (TypicalSupport.match$4752(arg$5002)) {
                final TypicalTypes.value val = Analyzer.cast(arg$5002.getTuple().get1());

                return Analyzer.cast(new TypicalTypes.Const(val));
              }
              break;
            case WildCardPattern:
              if (TypicalSupport.match$4742(arg$5002)) {
                return Analyzer.cast(new TypicalTypes.WildConstr());
              }
              break;
            default:
              break;
            };
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, Pair<Node>> checkExhaustive = new Function.F1<Boolean, Pair<Node>>() {
    public Boolean apply(final Pair<Node> nl) {
      return new Let<Boolean>() {
        final Node nod;
        final Pair<Node> pl;
        final Pair<TypicalTypes.patternRecord> patList;
        final Pair<Pair<TypicalTypes.patternRecord>> matrix;

        {
          nod = Analyzer.cast(TypicalSupport.head$279.apply(nl));
          pl = Analyzer.cast(getPatternNodes.apply(nl));
          patList = Analyzer.cast(getPatternRecords.apply(pl));
          matrix = Analyzer.cast(buildMatrix.apply(Pair.<Pair<TypicalTypes.patternRecord>>empty(), Pair.<TypicalTypes.patternRecord>empty(), patList));
        }

        public Boolean apply() {
          return Analyzer.cast(null == Primitives.equal.apply(Primitives.length.apply(matrix), BigInteger.valueOf(0)) ? null : Primitives.equal.apply(Primitives.length.apply(matrix), BigInteger.valueOf(0)) ? new Let<Boolean>() {
            {
              warning("all patterns are guarded", nod);
            }

            public Boolean apply() {
              return Analyzer.cast(Boolean.TRUE);
            }
          }.apply() : null == quickPartialCheck.apply(matrix) ? null : quickPartialCheck.apply(matrix) ? Boolean.TRUE : new Let<Boolean>() {
            final TypicalTypes.result res;

            {
              res = Analyzer.cast(checkPartial.apply(matrix, BigInteger.valueOf(1)));
            }

            public Boolean apply() {
              return Analyzer.cast(new Match<Boolean>() {
                public Boolean apply() {
                  final TypicalTypes.result arg$5020 = Analyzer.cast(res);

                  if ((null == arg$5020)) {
                    return null;
                  }
                  if ((null != arg$5020))
                                        switch (arg$5020.tag()) {
                    case None:
                      if (TypicalSupport.match$5021(arg$5020)) {
                        return Analyzer.cast(Boolean.TRUE);
                      }
                      break;
                    case Some:
                      if (TypicalSupport.match$5022(arg$5020)) {
                        final Pair<TypicalTypes.pattern> p = Analyzer.cast(arg$5020.getTuple().get1());

                        return Analyzer.cast(new Let<Boolean>() {
                          final String mes;

                          {
                            mes = Analyzer.cast(showPatterns.apply(p));
                            error(Primitives.concat.apply(Primitives.concat.apply("non-exhaustive match, ", "an example of an unmatched value is: "), mes), nod);
                          }

                          public Boolean apply() {
                            return Analyzer.cast(Boolean.FALSE);
                          }
                        }.apply());
                      }
                      break;
                    default:
                      break;
                    };
                  return null;
                }
              }.apply());
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.result, Pair<Pair<TypicalTypes.patternRecord>>, BigInteger> checkPartial = new Function.F2<TypicalTypes.result, Pair<Pair<TypicalTypes.patternRecord>>, BigInteger>() {
    public TypicalTypes.result apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix, final BigInteger n) {
      return (null == Primitives.equal.apply(BigInteger.valueOf(0), n) ? null : Primitives.equal.apply(BigInteger.valueOf(0), n) ? (null == Primitives.greaterInt.apply(Primitives.length.apply(matrix), BigInteger.valueOf(0)) ? null : Primitives.greaterInt.apply(Primitives.length.apply(matrix), BigInteger.valueOf(0)) ? new TypicalTypes.None() : new TypicalTypes.Some(Pair.<TypicalTypes.pattern>empty())) : new Let<TypicalTypes.result>() {
        final Pair<TypicalTypes.constr> sigma;

        {
          sigma = Analyzer.cast(getSigma.apply(Pair.<TypicalTypes.constr>empty(), matrix));
        }

        public TypicalTypes.result apply() {
          return Analyzer.cast(null == completeSigma.apply(sigma) ? null : completeSigma.apply(sigma) ? checkSubPartials.apply(matrix, sigma) : new Let<TypicalTypes.result>() {
            final Pair<Pair<TypicalTypes.patternRecord>> dMatrix;
            final TypicalTypes.result res;

            {
              dMatrix = Analyzer.cast(buildDMatrix.apply(matrix));
              res = Analyzer.cast(checkPartial.apply(dMatrix, Primitives.subtractInt.apply(n, BigInteger.valueOf(1))));
            }

            public TypicalTypes.result apply() {
              return Analyzer.cast(new Match<TypicalTypes.result>() {
                public TypicalTypes.result apply() {
                  final TypicalTypes.result arg$5024 = Analyzer.cast(res);

                  if ((null == arg$5024)) {
                    return null;
                  }
                  if ((null != arg$5024))
                                        switch (arg$5024.tag()) {
                    case None:
                      if (TypicalSupport.match$5021(arg$5024)) {
                        return Analyzer.cast(new TypicalTypes.None());
                      }
                      break;
                    case Some:
                      if (TypicalSupport.match$5022(arg$5024)) {
                        final Pair<TypicalTypes.pattern> pl = Analyzer.cast(arg$5024.getTuple().get1());

                        return Analyzer.cast(null == emptySigma.apply(sigma) ? null : emptySigma.apply(sigma) ? new TypicalTypes.Some(TypicalSupport.append$5027.apply(new Pair<TypicalTypes.pattern>(new TypicalTypes.WildCardPattern()), pl)) : new Let<TypicalTypes.result>() {
                          final TypicalTypes.pattern p;

                          {
                            p = Analyzer.cast(findUnmatchedPattern.apply(sigma));
                          }

                          public TypicalTypes.result apply() {
                            return Analyzer.cast(new TypicalTypes.Some(TypicalSupport.append$5027.apply(new Pair<TypicalTypes.pattern>(p), pl)));
                          }
                        }.apply());
                      }
                      break;
                    default:
                      break;
                    };
                  return null;
                }
              }.apply());
            }
          }.apply());
        }
      }.apply());
    }
  };

  final Function.F2<TypicalTypes.result, Pair<Pair<TypicalTypes.patternRecord>>, Pair<TypicalTypes.constr>> checkSubPartials = new Function.F2<TypicalTypes.result, Pair<Pair<TypicalTypes.patternRecord>>, Pair<TypicalTypes.constr>>() {
    public TypicalTypes.result apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix, final Pair<TypicalTypes.constr> sigma) {
      return new Match<TypicalTypes.result>() {
        public TypicalTypes.result apply() {
          final Pair<TypicalTypes.constr> arg$5029 = Analyzer.cast(sigma);

          if ((null == arg$5029)) {
            return null;
          }
          if (TypicalSupport.match$5030(arg$5029)) {
            return Analyzer.cast(new TypicalTypes.None());
          }
          if (true) {
            final Pair<TypicalTypes.constr> list$5031 = Analyzer.cast(Analyzer.cast(arg$5029));
            final TypicalTypes.constr x = Analyzer.cast(Primitives.wrapHead(list$5031));
            final Pair<TypicalTypes.constr> xs = Analyzer.cast(Primitives.wrapTail(list$5031));

            return Analyzer.cast(new Match<TypicalTypes.result>() {
              public TypicalTypes.result apply() {
                final TypicalTypes.constr arg$5041 = Analyzer.cast(x);

                if ((null == arg$5041)) {
                  return null;
                }
                if ((null != arg$5041))
                                    switch (arg$5041.tag()) {
                  case WildConstr:
                    if (TypicalSupport.match$5033(arg$5041)) {
                      return Analyzer.cast(checkSubPartials.apply(matrix, xs));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(new Let<TypicalTypes.result>() {
                    final TypicalTypes.result res;

                    {
                      res = Analyzer.cast(checkSubPartial.apply(matrix, x));
                    }

                    public TypicalTypes.result apply() {
                      return Analyzer.cast(new Match<TypicalTypes.result>() {
                        public TypicalTypes.result apply() {
                          final TypicalTypes.result arg$5046 = Analyzer.cast(res);

                          if ((null == arg$5046)) {
                            return null;
                          }
                          if ((null != arg$5046))
                                                        switch (arg$5046.tag()) {
                            case Some:
                              if (TypicalSupport.match$5022(arg$5046)) {
                                return Analyzer.cast(res);
                              }
                              break;
                            default:
                              break;
                            };
                          if (true) {
                            return Analyzer.cast(checkSubPartials.apply(matrix, xs));
                          }
                          return null;
                        }
                      }.apply());
                    }
                  }.apply());
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.result, Pair<Pair<TypicalTypes.patternRecord>>, TypicalTypes.constr> checkSubPartial = new Function.F2<TypicalTypes.result, Pair<Pair<TypicalTypes.patternRecord>>, TypicalTypes.constr>() {
    public TypicalTypes.result apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix, final TypicalTypes.constr ck) {
      return new Let<TypicalTypes.result>() {
        final Pair<Pair<TypicalTypes.patternRecord>> sMatrix;
        final BigInteger len;
        final TypicalTypes.result res;

        {
          sMatrix = Analyzer.cast(buildSMatrix.apply(matrix, ck, Pair.<Pair<TypicalTypes.patternRecord>>empty()));
          len = Analyzer.cast(Primitives.length.apply(TypicalSupport.head$5055.apply(sMatrix)));
          res = Analyzer.cast(checkPartial.apply(sMatrix, len));
        }

        public TypicalTypes.result apply() {
          return Analyzer.cast(new Match<TypicalTypes.result>() {
            public TypicalTypes.result apply() {
              final TypicalTypes.result arg$5051 = Analyzer.cast(res);

              if ((null == arg$5051)) {
                return null;
              }
              if ((null != arg$5051))
                                switch (arg$5051.tag()) {
                case None:
                  if (TypicalSupport.match$5021(arg$5051)) {
                    return Analyzer.cast(new TypicalTypes.None());
                  }
                  break;
                case Some:
                  if (TypicalSupport.match$5022(arg$5051)) {
                    final Pair<TypicalTypes.pattern> pl = Analyzer.cast(arg$5051.getTuple().get1());

                    return Analyzer.cast(new TypicalTypes.Some(buildResultPattern.apply(pl, ck)));
                  }
                  break;
                default:
                  break;
                };
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F3<Pair<Pair<TypicalTypes.patternRecord>>, Pair<Pair<TypicalTypes.patternRecord>>, TypicalTypes.constr, Pair<Pair<TypicalTypes.patternRecord>>> buildSMatrix = new Function.F3<Pair<Pair<TypicalTypes.patternRecord>>, Pair<Pair<TypicalTypes.patternRecord>>, TypicalTypes.constr, Pair<Pair<TypicalTypes.patternRecord>>>() {
    public Pair<Pair<TypicalTypes.patternRecord>> apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix, final TypicalTypes.constr ck, final Pair<Pair<TypicalTypes.patternRecord>> res) {
      return new Match<Pair<Pair<TypicalTypes.patternRecord>>>() {
        public Pair<Pair<TypicalTypes.patternRecord>> apply() {
          final Pair<Pair<TypicalTypes.patternRecord>> arg$5056 = Analyzer.cast(matrix);

          if ((null == arg$5056)) {
            return null;
          }
          if (TypicalSupport.match$4998(arg$5056)) {
            return Analyzer.cast(res);
          }
          if (true) {
            final Pair<Pair<TypicalTypes.patternRecord>> list$5058 = Analyzer.cast(Analyzer.cast(arg$5056));
            final Pair<TypicalTypes.patternRecord> x = Analyzer.cast(Primitives.wrapHead(list$5058));
            final Pair<Pair<TypicalTypes.patternRecord>> xs = Analyzer.cast(Primitives.wrapTail(list$5058));

            return Analyzer.cast(new Let<Pair<Pair<TypicalTypes.patternRecord>>>() {
              final TypicalTypes.constr co;

              {
                co = Analyzer.cast(getConstructor.apply(TypicalSupport.head$4913.apply(x)));
              }

              public Pair<Pair<TypicalTypes.patternRecord>> apply() {
                return Analyzer.cast(null == Primitives.equal.apply(co, ck) ? null : Primitives.equal.apply(co, ck) ? new Let<Pair<Pair<TypicalTypes.patternRecord>>>() {
                  final Pair<TypicalTypes.patternRecord> subList;
                  final Pair<TypicalTypes.patternRecord> newRow;

                  {
                    subList = Analyzer.cast(expandPattern.apply(TypicalSupport.head$4913.apply(x), ck));
                    newRow = Analyzer.cast(TypicalSupport.append$4735.apply(subList, TypicalSupport.tail$4914.apply(x)));
                  }

                  public Pair<Pair<TypicalTypes.patternRecord>> apply() {
                    return Analyzer.cast(buildSMatrix.apply(xs, ck, TypicalSupport.append$4995.apply(res, new Pair<Pair<TypicalTypes.patternRecord>>(newRow))));
                  }
                }.apply() : buildSMatrix.apply(xs, ck, res));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord, TypicalTypes.constr> expandPattern = new Function.F2<Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord, TypicalTypes.constr>() {
    public Pair<TypicalTypes.patternRecord> apply(final TypicalTypes.patternRecord p, final TypicalTypes.constr ck) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final TypicalTypes.constr arg$5060 = Analyzer.cast(ck);

          if ((null == arg$5060)) {
            return null;
          }
          if ((null != arg$5060))
                        switch (arg$5060.tag()) {
            case RecordConstr:
              if (TypicalSupport.match$5065(arg$5060)) {
                return Analyzer.cast(expandRecPattern.apply(p));
              }
              break;
            case Const:
              if (TypicalSupport.match$5063(arg$5060)) {
                return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
              }
              break;
            case TupleConstr:
              if (TypicalSupport.match$5066(arg$5060)) {
                return Analyzer.cast(new Match<Pair<TypicalTypes.patternRecord>>() {
                  public Pair<TypicalTypes.patternRecord> apply() {
                    final TypicalTypes.pattern arg$5070 = Analyzer.cast(null == p ? null : p.pat);

                    if ((null == arg$5070)) {
                      return null;
                    }
                    if ((null != arg$5070))
                                            switch (arg$5070.tag()) {
                      case TupPattern:
                        if (TypicalSupport.match$4783(arg$5070)) {
                          final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5070.getTuple().get1());

                          return Analyzer.cast(pl);
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
              break;
            case WildConstr:
              if (TypicalSupport.match$5033(arg$5060)) {
                return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
              }
              break;
            case CConstr:
              if (TypicalSupport.match$5080(arg$5060)) {
                return Analyzer.cast(new Match<Pair<TypicalTypes.patternRecord>>() {
                  public Pair<TypicalTypes.patternRecord> apply() {
                    final TypicalTypes.pattern arg$5084 = Analyzer.cast(null == p ? null : p.pat);

                    if ((null == arg$5084)) {
                      return null;
                    }
                    if ((null != arg$5084))
                                            switch (arg$5084.tag()) {
                      case ConstructorPattern:
                        if (TypicalSupport.match$4790(arg$5084)) {
                          final String s = Analyzer.cast(arg$5084.getTuple().get1());
                          final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5084.getTuple().get2());

                          return Analyzer.cast(null == Primitives.isBottom.apply(pl) ? null : Primitives.isBottom.apply(pl) ? new Let<Pair<TypicalTypes.patternRecord>>() {
                            final BigInteger si;

                            {
                              si = Analyzer.cast(getConstructorSize.apply(s));
                            }

                            public Pair<TypicalTypes.patternRecord> apply() {
                              return Analyzer.cast(makeWildCards.apply(si));
                            }
                          }.apply() : pl);
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
              break;
            case BotConstr:
              if (TypicalSupport.match$5061(arg$5060)) {
                return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
              }
              break;
            case EmptyConstr:
              if (TypicalSupport.match$5064(arg$5060)) {
                return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
              }
              break;
            case PairConstr:
              if (TypicalSupport.match$5073(arg$5060)) {
                return Analyzer.cast(new Match<Pair<TypicalTypes.patternRecord>>() {
                  public Pair<TypicalTypes.patternRecord> apply() {
                    final TypicalTypes.pattern arg$5077 = Analyzer.cast(null == p ? null : p.pat);

                    if ((null == arg$5077)) {
                      return null;
                    }
                    if ((null != arg$5077))
                                            switch (arg$5077.tag()) {
                      case PairPattern:
                        if (TypicalSupport.match$4804(arg$5077)) {
                          final TypicalTypes.patternRecord hd = Analyzer.cast(arg$5077.getTuple().get1());
                          final TypicalTypes.patternRecord tl = Analyzer.cast(arg$5077.getTuple().get2());

                          return Analyzer.cast(new Pair<TypicalTypes.patternRecord>(hd).append(new Pair<TypicalTypes.patternRecord>(tl)));
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
              }
              break;
            default:
              break;
            };
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<BigInteger, String> getConstructorSize = new Function.F1<BigInteger, String>() {
    public BigInteger apply(final String s) {
      return new Let<BigInteger>() {
        final TypicalTypes.raw_type<?> t;

        {
          t = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("TypeConstructor", s, null), getNameSpace)));
        }

        public BigInteger apply() {
          return Analyzer.cast(new Match<BigInteger>() {
            public BigInteger apply() {
              final TypicalTypes.raw_type<?> arg$5088 = Analyzer.cast(t);

              if ((null == arg$5088)) {
                return null;
              }
              if ((null != arg$5088))
                                switch (arg$5088.tag()) {
                case ConstructorT:
                  if (TypicalSupport.match$94(arg$5088)) {
                    final TypicalTypes.raw_type<?> ty = Analyzer.cast(arg$5088.getTuple().get3());

                    return Analyzer.cast(null == Primitives.isBottom.apply(ty) ? null : Primitives.isBottom.apply(ty) ? BigInteger.valueOf(0) : new Match<BigInteger>() {
                      public BigInteger apply() {
                        final TypicalTypes.raw_type<?> arg$5093 = Analyzer.cast(ty);

                        if ((null == arg$5093)) {
                          return null;
                        }
                        if ((null != arg$5093))
                                                    switch (arg$5093.tag()) {
                          case TupleT:
                            if (TypicalSupport.match$114(arg$5093)) {
                              final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$5093.getTuple().get1());

                              return Analyzer.cast(Primitives.length.apply(tl));
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(BigInteger.valueOf(1));
                        }
                        return null;
                      }
                    }.apply());
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(null);
              }
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord> expandRecPattern = new Function.F1<Pair<TypicalTypes.patternRecord>, TypicalTypes.patternRecord>() {
    public Pair<TypicalTypes.patternRecord> apply(final TypicalTypes.patternRecord p) {
      return new Let<Pair<TypicalTypes.patternRecord>>() {
        final Node no;
        final TypicalTypes.raw_type<?> ty;

        {
          no = Analyzer.cast(null == p ? null : p.nod);
          ty = Analyzer.cast(Primitives.getAnnotation.apply(no, "__type"));
        }

        public Pair<TypicalTypes.patternRecord> apply() {
          return Analyzer.cast(new Match<Pair<TypicalTypes.patternRecord>>() {
            public Pair<TypicalTypes.patternRecord> apply() {
              final TypicalTypes.raw_type<?> arg$5097 = Analyzer.cast(ty);

              if ((null == arg$5097)) {
                return null;
              }
              if ((null != arg$5097))
                                switch (arg$5097.tag()) {
                case RecordT:
                  if (TypicalSupport.match$107(arg$5097)) {
                    final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$5097.getTuple().get1());

                    return Analyzer.cast(new Match<Pair<TypicalTypes.patternRecord>>() {
                      public Pair<TypicalTypes.patternRecord> apply() {
                        final TypicalTypes.pattern arg$5102 = Analyzer.cast(null == p ? null : p.pat);

                        if ((null == arg$5102)) {
                          return null;
                        }
                        if ((null != arg$5102))
                                                    switch (arg$5102.tag()) {
                          case RecPattern:
                            if (TypicalSupport.match$4811(arg$5102)) {
                              final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5102.getTuple().get1());

                              return Analyzer.cast(makeFieldPatterns.apply(tl, pl));
                            }
                            break;
                          default:
                            break;
                          };
                        if (true) {
                          return Analyzer.cast(null);
                        }
                        return null;
                      }
                    }.apply());
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(null);
              }
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.patternRecord>> makeFieldPatterns = new Function.F2<Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.patternRecord>>() {
    public Pair<TypicalTypes.patternRecord> apply(final Pair<TypicalTypes.raw_type<?>> tl, final Pair<TypicalTypes.patternRecord> pl) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$5106 = Analyzer.cast(tl);

          if ((null == arg$5106)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$5106)) {
            return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$5108 = Analyzer.cast(Analyzer.cast(arg$5106));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$5108));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$5108));

            return Analyzer.cast(new Let<Pair<TypicalTypes.patternRecord>>() {
              final String s;
              final TypicalTypes.patternRecord p;

              {
                s = Analyzer.cast(new Match<String>() {
                  public String apply() {
                    final TypicalTypes.raw_type<?> arg$5112 = Analyzer.cast(x);

                    if ((null == arg$5112)) {
                      return null;
                    }
                    if ((null != arg$5112))
                                            switch (arg$5112.tag()) {
                      case FieldT:
                        if (TypicalSupport.match$96(arg$5112)) {
                          final String str = Analyzer.cast(arg$5112.getTuple().get2());

                          return Analyzer.cast(str);
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(null);
                    }
                    return null;
                  }
                }.apply());
                p = Analyzer.cast(makeFieldPattern.apply(s, pl));
              }

              public Pair<TypicalTypes.patternRecord> apply() {
                return Analyzer.cast(TypicalSupport.append$4735.apply(new Pair<TypicalTypes.patternRecord>(p), makeFieldPatterns.apply(xs, pl)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.patternRecord, String, Pair<TypicalTypes.patternRecord>> makeFieldPattern = new Function.F2<TypicalTypes.patternRecord, String, Pair<TypicalTypes.patternRecord>>() {
    public TypicalTypes.patternRecord apply(final String s, final Pair<TypicalTypes.patternRecord> pl) {
      return new Match<TypicalTypes.patternRecord>() {
        public TypicalTypes.patternRecord apply() {
          final Pair<TypicalTypes.patternRecord> arg$5116 = Analyzer.cast(pl);

          if ((null == arg$5116)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$5116)) {
            return Analyzer.cast(new Let<TypicalTypes.patternRecord>() {
              final TypicalTypes.patternRecord wild;

              {
                wild = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.WildCardPattern(), null, Boolean.FALSE));
              }

              public TypicalTypes.patternRecord apply() {
                return Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.RecFieldPattern(s, wild), null, Boolean.FALSE));
              }
            }.apply());
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$5118 = Analyzer.cast(Analyzer.cast(arg$5116));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$5118));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$5118));

            return Analyzer.cast(new Match<TypicalTypes.patternRecord>() {
              public TypicalTypes.patternRecord apply() {
                final TypicalTypes.pattern arg$5122 = Analyzer.cast(null == x ? null : x.pat);

                if ((null == arg$5122)) {
                  return null;
                }
                if ((null != arg$5122))
                                    switch (arg$5122.tag()) {
                  case RecFieldPattern:
                    if (TypicalSupport.match$4818(arg$5122)) {
                      final String str = Analyzer.cast(arg$5122.getTuple().get1());

                      return Analyzer.cast(null == Primitives.equal.apply(str, s) ? null : Primitives.equal.apply(str, s) ? x : makeFieldPattern.apply(s, xs));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.patternRecord>, BigInteger> makeWildCards = new Function.F1<Pair<TypicalTypes.patternRecord>, BigInteger>() {
    public Pair<TypicalTypes.patternRecord> apply(final BigInteger n) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final BigInteger arg$5126 = Analyzer.cast(n);

          if ((null == arg$5126)) {
            return null;
          }
          if ((null != BigInteger.valueOf(0) && BigInteger.valueOf(0).equals(arg$5126))) {
            return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
          }
          if (true) {
            return Analyzer.cast(new Let<Pair<TypicalTypes.patternRecord>>() {
              final TypicalTypes.patternRecord wild;

              {
                wild = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.WildCardPattern(), null, Boolean.FALSE));
              }

              public Pair<TypicalTypes.patternRecord> apply() {
                return Analyzer.cast(TypicalSupport.append$4735.apply(new Pair<TypicalTypes.patternRecord>(wild), makeWildCards.apply(Primitives.subtractInt.apply(n, BigInteger.valueOf(1)))));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>, TypicalTypes.constr> buildResultPattern = new Function.F2<Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>, TypicalTypes.constr>() {
    public Pair<TypicalTypes.pattern> apply(final Pair<TypicalTypes.pattern> pl, final TypicalTypes.constr ck) {
      return new Match<Pair<TypicalTypes.pattern>>() {
        public Pair<TypicalTypes.pattern> apply() {
          final TypicalTypes.constr arg$5128 = Analyzer.cast(ck);

          if ((null == arg$5128)) {
            return null;
          }
          if ((null != arg$5128))
                        switch (arg$5128.tag()) {
            case RecordConstr:
              if (TypicalSupport.match$5065(arg$5128)) {
                final BigInteger size = Analyzer.cast(arg$5128.getTuple().get1());

                return Analyzer.cast(reduceRecordPattern.apply(size, pl, Pair.<TypicalTypes.pattern>empty()));
              }
              break;
            case Const:
              if (TypicalSupport.match$5063(arg$5128)) {
                final TypicalTypes.value val = Analyzer.cast(arg$5128.getTuple().get1());

                return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.ConstantPattern(val), pl));
              }
              break;
            case TupleConstr:
              if (TypicalSupport.match$5066(arg$5128)) {
                final BigInteger size = Analyzer.cast(arg$5128.getTuple().get1());

                return Analyzer.cast(reduceTuplePattern.apply(size, pl, Pair.<TypicalTypes.pattern>empty()));
              }
              break;
            case WildConstr:
              if (TypicalSupport.match$5033(arg$5128)) {
                return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.WildCardPattern(), pl));
              }
              break;
            case CConstr:
              if (TypicalSupport.match$5080(arg$5128)) {
                final String s = Analyzer.cast(arg$5128.getTuple().get1());
                final BigInteger size = Analyzer.cast(arg$5128.getTuple().get2());

                return Analyzer.cast(reduceTypeConstructorPattern.apply(s, size, pl, Pair.<TypicalTypes.pattern>empty()));
              }
              break;
            case BotConstr:
              if (TypicalSupport.match$5061(arg$5128)) {
                return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.BotPattern(), pl));
              }
              break;
            case EmptyConstr:
              if (TypicalSupport.match$5064(arg$5128)) {
                return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.EmptyPattern(), pl));
              }
              break;
            case PairConstr:
              if (TypicalSupport.match$5073(arg$5128)) {
                return Analyzer.cast(new Let<Pair<TypicalTypes.pattern>>() {
                  final TypicalTypes.pattern h1;
                  final TypicalTypes.patternRecord p1;
                  final Pair<TypicalTypes.pattern> ta;
                  final TypicalTypes.pattern h2;
                  final TypicalTypes.patternRecord p2;
                  final Pair<TypicalTypes.pattern> tai;

                  {
                    h1 = Analyzer.cast(TypicalSupport.head$5134.apply(pl));
                    p1 = Analyzer.cast(new TypicalTypes.patternRecord(h1, null, Boolean.FALSE));
                    ta = Analyzer.cast(TypicalSupport.tail$5135.apply(pl));
                    h2 = Analyzer.cast(TypicalSupport.head$5134.apply(ta));
                    p2 = Analyzer.cast(new TypicalTypes.patternRecord(h2, null, Boolean.FALSE));
                    tai = Analyzer.cast(TypicalSupport.tail$5135.apply(ta));
                  }

                  public Pair<TypicalTypes.pattern> apply() {
                    return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.PairPattern(p1, p2), tai));
                  }
                }.apply());
              }
              break;
            default:
              break;
            };
          return null;
        }
      }.apply();
    }
  };

  final Function.F4<Pair<TypicalTypes.pattern>, String, BigInteger, Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>> reduceTypeConstructorPattern = new Function.F4<Pair<TypicalTypes.pattern>, String, BigInteger, Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>>() {
    public Pair<TypicalTypes.pattern> apply(final String s, final BigInteger size, final Pair<TypicalTypes.pattern> pl, final Pair<TypicalTypes.pattern> children) {
      return (null == Primitives.equal.apply(size, BigInteger.valueOf(0)) ? null : Primitives.equal.apply(size, BigInteger.valueOf(0)) ? new Let<Pair<TypicalTypes.pattern>>() {
        final Pair<TypicalTypes.patternRecord> recList;

        {
          recList = Analyzer.cast(makePatternRecords.apply(children));
        }

        public Pair<TypicalTypes.pattern> apply() {
          return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.ConstructorPattern(s, recList), pl));
        }
      }.apply() : reduceTypeConstructorPattern.apply(s, Primitives.subtractInt.apply(size, BigInteger.valueOf(1)), TypicalSupport.tail$5135.apply(pl), TypicalSupport.append$5027.apply(children, new Pair<TypicalTypes.pattern>(TypicalSupport.head$5134.apply(pl)))));
    }
  };

  final Function.F3<Pair<TypicalTypes.pattern>, BigInteger, Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>> reduceRecordPattern = new Function.F3<Pair<TypicalTypes.pattern>, BigInteger, Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>>() {
    public Pair<TypicalTypes.pattern> apply(final BigInteger size, final Pair<TypicalTypes.pattern> pl, final Pair<TypicalTypes.pattern> children) {
      return (null == Primitives.equal.apply(size, BigInteger.valueOf(0)) ? null : Primitives.equal.apply(size, BigInteger.valueOf(0)) ? new Let<Pair<TypicalTypes.pattern>>() {
        final Pair<TypicalTypes.patternRecord> recList;

        {
          recList = Analyzer.cast(makePatternRecords.apply(children));
        }

        public Pair<TypicalTypes.pattern> apply() {
          return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.RecPattern(recList), pl));
        }
      }.apply() : reduceRecordPattern.apply(Primitives.subtractInt.apply(size, BigInteger.valueOf(1)), TypicalSupport.tail$5135.apply(pl), TypicalSupport.append$5027.apply(children, new Pair<TypicalTypes.pattern>(TypicalSupport.head$5134.apply(pl)))));
    }
  };

  final Function.F3<Pair<TypicalTypes.pattern>, BigInteger, Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>> reduceTuplePattern = new Function.F3<Pair<TypicalTypes.pattern>, BigInteger, Pair<TypicalTypes.pattern>, Pair<TypicalTypes.pattern>>() {
    public Pair<TypicalTypes.pattern> apply(final BigInteger size, final Pair<TypicalTypes.pattern> pl, final Pair<TypicalTypes.pattern> children) {
      return (null == Primitives.equal.apply(size, BigInteger.valueOf(0)) ? null : Primitives.equal.apply(size, BigInteger.valueOf(0)) ? new Let<Pair<TypicalTypes.pattern>>() {
        final Pair<TypicalTypes.patternRecord> recList;

        {
          recList = Analyzer.cast(makePatternRecords.apply(children));
        }

        public Pair<TypicalTypes.pattern> apply() {
          return Analyzer.cast(Primitives.wrapCons(new TypicalTypes.TupPattern(recList), pl));
        }
      }.apply() : reduceTuplePattern.apply(Primitives.subtractInt.apply(size, BigInteger.valueOf(1)), TypicalSupport.tail$5135.apply(pl), TypicalSupport.append$5027.apply(children, new Pair<TypicalTypes.pattern>(TypicalSupport.head$5134.apply(pl)))));
    }
  };

  final Function.F1<Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.pattern>> makePatternRecords = new Function.F1<Pair<TypicalTypes.patternRecord>, Pair<TypicalTypes.pattern>>() {
    public Pair<TypicalTypes.patternRecord> apply(final Pair<TypicalTypes.pattern> pl) {
      return new Match<Pair<TypicalTypes.patternRecord>>() {
        public Pair<TypicalTypes.patternRecord> apply() {
          final Pair<TypicalTypes.pattern> arg$5140 = Analyzer.cast(pl);

          if ((null == arg$5140)) {
            return null;
          }
          if (TypicalSupport.match$5141(arg$5140)) {
            return Analyzer.cast(Pair.<TypicalTypes.patternRecord>empty());
          }
          if (true) {
            final Pair<TypicalTypes.pattern> list$5142 = Analyzer.cast(Analyzer.cast(arg$5140));
            final TypicalTypes.pattern x = Analyzer.cast(Primitives.wrapHead(list$5142));
            final Pair<TypicalTypes.pattern> xs = Analyzer.cast(Primitives.wrapTail(list$5142));

            return Analyzer.cast(new Let<Pair<TypicalTypes.patternRecord>>() {
              final TypicalTypes.patternRecord pr;

              {
                pr = Analyzer.cast(new TypicalTypes.patternRecord(x, null, Boolean.FALSE));
              }

              public Pair<TypicalTypes.patternRecord> apply() {
                return Analyzer.cast(Primitives.wrapCons(pr, makePatternRecords.apply(xs)));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<Pair<TypicalTypes.patternRecord>>, Pair<Pair<TypicalTypes.patternRecord>>> buildDMatrix = new Function.F1<Pair<Pair<TypicalTypes.patternRecord>>, Pair<Pair<TypicalTypes.patternRecord>>>() {
    public Pair<Pair<TypicalTypes.patternRecord>> apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix) {
      return new Match<Pair<Pair<TypicalTypes.patternRecord>>>() {
        public Pair<Pair<TypicalTypes.patternRecord>> apply() {
          final Pair<Pair<TypicalTypes.patternRecord>> arg$5144 = Analyzer.cast(matrix);

          if ((null == arg$5144)) {
            return null;
          }
          if (TypicalSupport.match$4998(arg$5144)) {
            return Analyzer.cast(Pair.<Pair<TypicalTypes.patternRecord>>empty());
          }
          if (true) {
            final Pair<Pair<TypicalTypes.patternRecord>> list$5146 = Analyzer.cast(Analyzer.cast(arg$5144));
            final Pair<TypicalTypes.patternRecord> x = Analyzer.cast(Primitives.wrapHead(list$5146));
            final Pair<Pair<TypicalTypes.patternRecord>> xs = Analyzer.cast(Primitives.wrapTail(list$5146));

            return Analyzer.cast(new Let<Pair<Pair<TypicalTypes.patternRecord>>>() {
              final TypicalTypes.patternRecord p;

              {
                p = Analyzer.cast(TypicalSupport.head$4913.apply(x));
              }

              public Pair<Pair<TypicalTypes.patternRecord>> apply() {
                return Analyzer.cast(new Match<Pair<Pair<TypicalTypes.patternRecord>>>() {
                  public Pair<Pair<TypicalTypes.patternRecord>> apply() {
                    final TypicalTypes.pattern arg$5152 = Analyzer.cast(null == p ? null : p.pat);

                    if ((null == arg$5152)) {
                      return null;
                    }
                    if ((null != arg$5152))
                                            switch (arg$5152.tag()) {
                      case RecFieldPattern:
                        if (TypicalSupport.match$4818(arg$5152)) {
                          final TypicalTypes.patternRecord pt = Analyzer.cast(arg$5152.getTuple().get2());

                          return Analyzer.cast(new Let<Pair<Pair<TypicalTypes.patternRecord>>>() {
                            final TypicalTypes.constr co;

                            {
                              co = Analyzer.cast(getConstructor.apply(pt));
                            }

                            public Pair<Pair<TypicalTypes.patternRecord>> apply() {
                              return Analyzer.cast(null == Primitives.equal.apply(co, new TypicalTypes.WildConstr()) ? null : Primitives.equal.apply(co, new TypicalTypes.WildConstr()) ? Primitives.wrapCons(TypicalSupport.tail$4914.apply(x), buildDMatrix.apply(xs)) : buildDMatrix.apply(xs));
                            }
                          }.apply());
                        }
                        break;
                      case VariablePattern:
                        if (TypicalSupport.match$4744(arg$5152)) {
                          return Analyzer.cast(Primitives.wrapCons(TypicalSupport.tail$4914.apply(x), buildDMatrix.apply(xs)));
                        }
                        break;
                      case WildCardPattern:
                        if (TypicalSupport.match$4742(arg$5152)) {
                          return Analyzer.cast(Primitives.wrapCons(TypicalSupport.tail$4914.apply(x), buildDMatrix.apply(xs)));
                        }
                        break;
                      default:
                        break;
                      };
                    if (true) {
                      return Analyzer.cast(buildDMatrix.apply(xs));
                    }
                    return null;
                  }
                }.apply());
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, Pair<TypicalTypes.constr>> emptySigma = new Function.F1<Boolean, Pair<TypicalTypes.constr>>() {
    public Boolean apply(final Pair<TypicalTypes.constr> sigma) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.constr> arg$5158 = Analyzer.cast(sigma);

          if ((null == arg$5158)) {
            return null;
          }
          if (TypicalSupport.match$5030(arg$5158)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.constr> list$5160 = Analyzer.cast(Analyzer.cast(arg$5158));
            final TypicalTypes.constr x = Analyzer.cast(Primitives.wrapHead(list$5160));
            final Pair<TypicalTypes.constr> xs = Analyzer.cast(Primitives.wrapTail(list$5160));

            return Analyzer.cast(new Match<Boolean>() {
              public Boolean apply() {
                final TypicalTypes.constr arg$5164 = Analyzer.cast(x);

                if ((null == arg$5164)) {
                  return null;
                }
                if ((null != arg$5164))
                                    switch (arg$5164.tag()) {
                  case WildConstr:
                    if (TypicalSupport.match$5033(arg$5164)) {
                      return Analyzer.cast(emptySigma.apply(xs));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(Boolean.FALSE);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, Pair<TypicalTypes.constr>> completeSigma = new Function.F1<Boolean, Pair<TypicalTypes.constr>>() {
    public Boolean apply(final Pair<TypicalTypes.constr> sigma) {
      return new Let<Boolean>() {
        final Pair<TypicalTypes.constr> si;

        {
          si = Analyzer.cast(removeWildConstr.apply(sigma));
        }

        public Boolean apply() {
          return Analyzer.cast(null == Primitives.equal.apply(Primitives.length.apply(si), BigInteger.valueOf(0)) ? null : Primitives.equal.apply(Primitives.length.apply(si), BigInteger.valueOf(0)) ? Boolean.FALSE : new Let<Boolean>() {
            final TypicalTypes.constr h;

            {
              h = Analyzer.cast(TypicalSupport.head$5200.apply(si));
            }

            public Boolean apply() {
              return Analyzer.cast(new Match<Boolean>() {
                public Boolean apply() {
                  final TypicalTypes.constr arg$5168 = Analyzer.cast(h);

                  if ((null == arg$5168)) {
                    return null;
                  }
                  if ((null != arg$5168))
                                        switch (arg$5168.tag()) {
                    case RecordConstr:
                      if (TypicalSupport.match$5065(arg$5168)) {
                        return Analyzer.cast(Boolean.TRUE);
                      }
                      break;
                    case Const:
                      if (TypicalSupport.match$5063(arg$5168)) {
                        final TypicalTypes.value val = Analyzer.cast(arg$5168.getTuple().get1());

                        return Analyzer.cast(new Match<Boolean>() {
                          public Boolean apply() {
                            final TypicalTypes.value arg$5173 = Analyzer.cast(val);

                            if ((null == arg$5173)) {
                              return null;
                            }
                            if ((null != arg$5173))
                                                            switch (arg$5173.tag()) {
                              case BoolValue:
                                if (TypicalSupport.match$5171(arg$5173)) {
                                  return Analyzer.cast(Primitives.and.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.BoolValue(Boolean.TRUE)), sigma), Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.BoolValue(Boolean.FALSE)), sigma)));
                                }
                                break;
                              default:
                                break;
                              };
                            if (true) {
                              return Analyzer.cast(Boolean.FALSE);
                            }
                            return null;
                          }
                        }.apply());
                      }
                      break;
                    case TupleConstr:
                      if (TypicalSupport.match$5066(arg$5168)) {
                        return Analyzer.cast(Boolean.TRUE);
                      }
                      break;
                    case CConstr:
                      if (TypicalSupport.match$5080(arg$5168)) {
                        final String s = Analyzer.cast(arg$5168.getTuple().get1());

                        return Analyzer.cast(new Let<Boolean>() {
                          final TypicalTypes.raw_type<?> ty;

                          {
                            ty = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("TypeConstructor", s, null), getNameSpace)));
                          }

                          public Boolean apply() {
                            return Analyzer.cast(new Match<Boolean>() {
                              public Boolean apply() {
                                final TypicalTypes.raw_type<?> arg$5190 = Analyzer.cast(ty);

                                if ((null == arg$5190)) {
                                  return null;
                                }
                                if ((null != arg$5190))
                                                                    switch (arg$5190.tag()) {
                                  case ConstructorT:
                                    if (TypicalSupport.match$94(arg$5190)) {
                                      final String str = Analyzer.cast(arg$5190.getTuple().get1());

                                      return Analyzer.cast(new Let<Boolean>() {
                                        final TypicalTypes.raw_type<?> t;

                                        {
                                          t = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", str), getNameSpace)));
                                        }

                                        public Boolean apply() {
                                          return Analyzer.cast(new Match<Boolean>() {
                                            public Boolean apply() {
                                              final TypicalTypes.raw_type<?> arg$5195 = Analyzer.cast(t);

                                              if ((null == arg$5195)) {
                                                return null;
                                              }
                                              if ((null != arg$5195))
                                                                                                switch (arg$5195.tag()) {
                                                case VariantT:
                                                  if (TypicalSupport.match$100(arg$5195)) {
                                                    final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$5195.getTuple().get1());

                                                    return Analyzer.cast(checkComplete.apply(tl, si));
                                                  }
                                                  break;
                                                default:
                                                  break;
                                                };
                                              if (true) {
                                                return Analyzer.cast(null);
                                              }
                                              return null;
                                            }
                                          }.apply());
                                        }
                                      }.apply());
                                    }
                                    break;
                                  default:
                                    break;
                                  };
                                if (true) {
                                  return Analyzer.cast(null);
                                }
                                return null;
                              }
                            }.apply());
                          }
                        }.apply());
                      }
                      break;
                    case EmptyConstr:
                      if (TypicalSupport.match$5064(arg$5168)) {
                        return Analyzer.cast(Primitives.and.apply(Primitives.contains.apply(new TypicalTypes.EmptyConstr(), si), Primitives.contains.apply(new TypicalTypes.PairConstr(), si)));
                      }
                      break;
                    case PairConstr:
                      if (TypicalSupport.match$5073(arg$5168)) {
                        return Analyzer.cast(Primitives.and.apply(Primitives.contains.apply(new TypicalTypes.EmptyConstr(), si), Primitives.contains.apply(new TypicalTypes.PairConstr(), si)));
                      }
                      break;
                    default:
                      break;
                    };
                  if (true) {
                    return Analyzer.cast(null);
                  }
                  return null;
                }
              }.apply());
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.constr>> checkComplete = new Function.F2<Boolean, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.constr>>() {
    public Boolean apply(final Pair<TypicalTypes.raw_type<?>> tl, final Pair<TypicalTypes.constr> sigma) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$5201 = Analyzer.cast(tl);

          if ((null == arg$5201)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$5201)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$5203 = Analyzer.cast(Analyzer.cast(arg$5201));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$5203));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$5203));

            return Analyzer.cast(new Match<Boolean>() {
              public Boolean apply() {
                final TypicalTypes.raw_type<?> arg$5207 = Analyzer.cast(x);

                if ((null == arg$5207)) {
                  return null;
                }
                if ((null != arg$5207))
                                    switch (arg$5207.tag()) {
                  case ConstructorT:
                    if (TypicalSupport.match$94(arg$5207)) {
                      final String str = Analyzer.cast(arg$5207.getTuple().get2());

                      return Analyzer.cast(null == sigmaContains.apply(sigma, str) ? null : sigmaContains.apply(sigma, str) ? checkComplete.apply(xs, sigma) : Boolean.FALSE);
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F2<Boolean, Pair<TypicalTypes.constr>, String> sigmaContains = new Function.F2<Boolean, Pair<TypicalTypes.constr>, String>() {
    public Boolean apply(final Pair<TypicalTypes.constr> sigma, final String s) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.constr> arg$5211 = Analyzer.cast(sigma);

          if ((null == arg$5211)) {
            return null;
          }
          if (TypicalSupport.match$5030(arg$5211)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<TypicalTypes.constr> list$5213 = Analyzer.cast(Analyzer.cast(arg$5211));
            final TypicalTypes.constr x = Analyzer.cast(Primitives.wrapHead(list$5213));
            final Pair<TypicalTypes.constr> xs = Analyzer.cast(Primitives.wrapTail(list$5213));

            return Analyzer.cast(new Match<Boolean>() {
              public Boolean apply() {
                final TypicalTypes.constr arg$5217 = Analyzer.cast(x);

                if ((null == arg$5217)) {
                  return null;
                }
                if ((null != arg$5217))
                                    switch (arg$5217.tag()) {
                  case CConstr:
                    if (TypicalSupport.match$5080(arg$5217)) {
                      final String str = Analyzer.cast(arg$5217.getTuple().get1());

                      return Analyzer.cast(null == Primitives.equal.apply(s, str) ? null : Primitives.equal.apply(s, str) ? Boolean.TRUE : sigmaContains.apply(xs, s));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<TypicalTypes.pattern, Pair<TypicalTypes.constr>> findUnmatchedPattern = new Function.F1<TypicalTypes.pattern, Pair<TypicalTypes.constr>>() {
    public TypicalTypes.pattern apply(final Pair<TypicalTypes.constr> sigma) {
      return new Let<TypicalTypes.pattern>() {
        final Pair<TypicalTypes.constr> si;
        final TypicalTypes.constr h;

        {
          si = Analyzer.cast(removeWildConstr.apply(sigma));
          h = Analyzer.cast(TypicalSupport.head$5200.apply(si));
        }

        public TypicalTypes.pattern apply() {
          return Analyzer.cast(new Match<TypicalTypes.pattern>() {
            public TypicalTypes.pattern apply() {
              final TypicalTypes.constr arg$5221 = Analyzer.cast(h);

              if ((null == arg$5221)) {
                return null;
              }
              if ((null != arg$5221))
                                switch (arg$5221.tag()) {
                case Const:
                  if (TypicalSupport.match$5063(arg$5221)) {
                    final TypicalTypes.value val = Analyzer.cast(arg$5221.getTuple().get1());

                    return Analyzer.cast(new Match<TypicalTypes.pattern>() {
                      public TypicalTypes.pattern apply() {
                        final TypicalTypes.value arg$5229 = Analyzer.cast(val);

                        if ((null == arg$5229)) {
                          return null;
                        }
                        if ((null != arg$5229))
                                                    switch (arg$5229.tag()) {
                          case BoolValue:
                            if (TypicalSupport.match$5171(arg$5229)) {
                              return Analyzer.cast(null == Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.BoolValue(Boolean.TRUE)), sigma)) ? null : Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.BoolValue(Boolean.TRUE)), sigma)) ? new TypicalTypes.ConstantPattern(new TypicalTypes.BoolValue(Boolean.TRUE)) : new TypicalTypes.ConstantPattern(new TypicalTypes.BoolValue(Boolean.FALSE)));
                            }
                            break;
                          case IntValue:
                            if (TypicalSupport.match$5225(arg$5229)) {
                              final BigInteger i = Analyzer.cast(arg$5229.getTuple().get1());

                              return Analyzer.cast(findIntPattern.apply(i, sigma));
                            }
                            break;
                          case FloatValue:
                            if (TypicalSupport.match$5226(arg$5229)) {
                              final Double f = Analyzer.cast(arg$5229.getTuple().get1());

                              return Analyzer.cast(findFloatPattern.apply(f, sigma));
                            }
                            break;
                          case StringValue:
                            if (TypicalSupport.match$5227(arg$5229)) {
                              final String s = Analyzer.cast(arg$5229.getTuple().get1());

                              return Analyzer.cast(findStringPattern.apply(s, sigma));
                            }
                            break;
                          default:
                            break;
                          };
                        return null;
                      }
                    }.apply());
                  }
                  break;
                case CConstr:
                  if (TypicalSupport.match$5080(arg$5221)) {
                    final String s = Analyzer.cast(arg$5221.getTuple().get1());

                    return Analyzer.cast(new Let<TypicalTypes.pattern>() {
                      final TypicalTypes.raw_type<?> ty;

                      {
                        ty = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("TypeConstructor", s, null), getNameSpace)));
                      }

                      public TypicalTypes.pattern apply() {
                        return Analyzer.cast(new Match<TypicalTypes.pattern>() {
                          public TypicalTypes.pattern apply() {
                            final TypicalTypes.raw_type<?> arg$5247 = Analyzer.cast(ty);

                            if ((null == arg$5247)) {
                              return null;
                            }
                            if ((null != arg$5247))
                                                            switch (arg$5247.tag()) {
                              case ConstructorT:
                                if (TypicalSupport.match$94(arg$5247)) {
                                  final String str = Analyzer.cast(arg$5247.getTuple().get1());

                                  return Analyzer.cast(new Let<TypicalTypes.pattern>() {
                                    final TypicalTypes.raw_type<?> t;

                                    {
                                      t = Analyzer.cast(Analyzer.cast(lookup2.apply(GNode.create("UserDefinedType", str), getNameSpace)));
                                    }

                                    public TypicalTypes.pattern apply() {
                                      return Analyzer.cast(new Match<TypicalTypes.pattern>() {
                                        public TypicalTypes.pattern apply() {
                                          final TypicalTypes.raw_type<?> arg$5252 = Analyzer.cast(t);

                                          if ((null == arg$5252)) {
                                            return null;
                                          }
                                          if ((null != arg$5252))
                                                                                        switch (arg$5252.tag()) {
                                            case VariantT:
                                              if (TypicalSupport.match$100(arg$5252)) {
                                                final Pair<TypicalTypes.raw_type<?>> tl = Analyzer.cast(arg$5252.getTuple().get1());

                                                return Analyzer.cast(findUnmatchedConstructor.apply(tl, si));
                                              }
                                              break;
                                            default:
                                              break;
                                            };
                                          if (true) {
                                            return Analyzer.cast(null);
                                          }
                                          return null;
                                        }
                                      }.apply());
                                    }
                                  }.apply());
                                }
                                break;
                              default:
                                break;
                              };
                            if (true) {
                              return Analyzer.cast(null);
                            }
                            return null;
                          }
                        }.apply());
                      }
                    }.apply());
                  }
                  break;
                case EmptyConstr:
                  if (TypicalSupport.match$5064(arg$5221)) {
                    return Analyzer.cast(null == Primitives.contains.apply(new TypicalTypes.EmptyConstr(), sigma) ? null : Primitives.contains.apply(new TypicalTypes.EmptyConstr(), sigma) ? new Let<TypicalTypes.pattern>() {
                      final TypicalTypes.patternRecord wild;

                      {
                        wild = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.WildCardPattern(), null, Boolean.FALSE));
                      }

                      public TypicalTypes.pattern apply() {
                        return Analyzer.cast(new TypicalTypes.PairPattern(wild, wild));
                      }
                    }.apply() : new TypicalTypes.EmptyPattern());
                  }
                  break;
                case PairConstr:
                  if (TypicalSupport.match$5073(arg$5221)) {
                    return Analyzer.cast(null == Primitives.contains.apply(new TypicalTypes.EmptyConstr(), sigma) ? null : Primitives.contains.apply(new TypicalTypes.EmptyConstr(), sigma) ? new Let<TypicalTypes.pattern>() {
                      final TypicalTypes.patternRecord wild;

                      {
                        wild = Analyzer.cast(new TypicalTypes.patternRecord(new TypicalTypes.WildCardPattern(), null, Boolean.FALSE));
                      }

                      public TypicalTypes.pattern apply() {
                        return Analyzer.cast(new TypicalTypes.PairPattern(wild, wild));
                      }
                    }.apply() : new TypicalTypes.EmptyPattern());
                  }
                  break;
                default:
                  break;
                };
              if (true) {
                return Analyzer.cast(null);
              }
              return null;
            }
          }.apply());
        }
      }.apply();
    }
  };

  final Function.F2<TypicalTypes.pattern, BigInteger, Pair<TypicalTypes.constr>> findIntPattern = new Function.F2<TypicalTypes.pattern, BigInteger, Pair<TypicalTypes.constr>>() {
    public TypicalTypes.pattern apply(final BigInteger i, final Pair<TypicalTypes.constr> sigma) {
      return (null == Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.IntValue(Primitives.addInt.apply(i, BigInteger.valueOf(1)))), sigma)) ? null : Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.IntValue(Primitives.addInt.apply(i, BigInteger.valueOf(1)))), sigma)) ? new TypicalTypes.ConstantPattern(new TypicalTypes.IntValue(Primitives.addInt.apply(i, BigInteger.valueOf(1)))) : findIntPattern.apply(Primitives.addInt.apply(i, BigInteger.valueOf(1)), sigma));
    }
  };

  final Function.F2<TypicalTypes.pattern, Double, Pair<TypicalTypes.constr>> findFloatPattern = new Function.F2<TypicalTypes.pattern, Double, Pair<TypicalTypes.constr>>() {
    public TypicalTypes.pattern apply(final Double f, final Pair<TypicalTypes.constr> sigma) {
      return (null == Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.FloatValue(Primitives.addFloat64.apply(f, new Double(1.0)))), sigma)) ? null : Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.FloatValue(Primitives.addFloat64.apply(f, new Double(1.0)))), sigma)) ? new TypicalTypes.ConstantPattern(new TypicalTypes.FloatValue(Primitives.addFloat64.apply(f, new Double(1.0)))) : findFloatPattern.apply(Primitives.addFloat64.apply(f, new Double(1.0)), sigma));
    }
  };

  final Function.F2<TypicalTypes.pattern, String, Pair<TypicalTypes.constr>> findStringPattern = new Function.F2<TypicalTypes.pattern, String, Pair<TypicalTypes.constr>>() {
    public TypicalTypes.pattern apply(final String s, final Pair<TypicalTypes.constr> sigma) {
      return (null == Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.StringValue(Primitives.concat.apply("z", s))), sigma)) ? null : Primitives.not.apply(Primitives.contains.apply(new TypicalTypes.Const(new TypicalTypes.StringValue(Primitives.concat.apply("z", s))), sigma)) ? new TypicalTypes.ConstantPattern(new TypicalTypes.StringValue(Primitives.concat.apply("z", s))) : findStringPattern.apply(Primitives.concat.apply("z", s), sigma));
    }
  };

  final Function.F2<TypicalTypes.pattern, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.constr>> findUnmatchedConstructor = new Function.F2<TypicalTypes.pattern, Pair<TypicalTypes.raw_type<?>>, Pair<TypicalTypes.constr>>() {
    public TypicalTypes.pattern apply(final Pair<TypicalTypes.raw_type<?>> tl, final Pair<TypicalTypes.constr> sigma) {
      return new Match<TypicalTypes.pattern>() {
        public TypicalTypes.pattern apply() {
          final Pair<TypicalTypes.raw_type<?>> arg$5257 = Analyzer.cast(tl);

          if ((null == arg$5257)) {
            return null;
          }
          if (TypicalSupport.match$122(arg$5257)) {
            return Analyzer.cast(null);
          }
          if (true) {
            final Pair<TypicalTypes.raw_type<?>> list$5259 = Analyzer.cast(Analyzer.cast(arg$5257));
            final TypicalTypes.raw_type<?> x = Analyzer.cast(Primitives.wrapHead(list$5259));
            final Pair<TypicalTypes.raw_type<?>> xs = Analyzer.cast(Primitives.wrapTail(list$5259));

            return Analyzer.cast(new Match<TypicalTypes.pattern>() {
              public TypicalTypes.pattern apply() {
                final TypicalTypes.raw_type<?> arg$5263 = Analyzer.cast(x);

                if ((null == arg$5263)) {
                  return null;
                }
                if ((null != arg$5263))
                                    switch (arg$5263.tag()) {
                  case ConstructorT:
                    if (TypicalSupport.match$94(arg$5263)) {
                      final String str = Analyzer.cast(arg$5263.getTuple().get2());

                      return Analyzer.cast(null == sigmaContains.apply(sigma, str) ? null : sigmaContains.apply(sigma, str) ? findUnmatchedConstructor.apply(xs, sigma) : new Let<TypicalTypes.pattern>() {
                        final BigInteger size;
                        final Pair<TypicalTypes.patternRecord> li;

                        {
                          size = Analyzer.cast(getConstructorSize.apply(str));
                          li = Analyzer.cast(makeWildCards.apply(size));
                        }

                        public TypicalTypes.pattern apply() {
                          return Analyzer.cast(new TypicalTypes.ConstructorPattern(str, li));
                        }
                      }.apply());
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(null);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Pair<TypicalTypes.constr>, Pair<TypicalTypes.constr>> removeWildConstr = new Function.F1<Pair<TypicalTypes.constr>, Pair<TypicalTypes.constr>>() {
    public Pair<TypicalTypes.constr> apply(final Pair<TypicalTypes.constr> sigma) {
      return new Match<Pair<TypicalTypes.constr>>() {
        public Pair<TypicalTypes.constr> apply() {
          final Pair<TypicalTypes.constr> arg$5267 = Analyzer.cast(sigma);

          if ((null == arg$5267)) {
            return null;
          }
          if (TypicalSupport.match$5030(arg$5267)) {
            return Analyzer.cast(Pair.<TypicalTypes.constr>empty());
          }
          if (true) {
            final Pair<TypicalTypes.constr> list$5269 = Analyzer.cast(Analyzer.cast(arg$5267));
            final TypicalTypes.constr x = Analyzer.cast(Primitives.wrapHead(list$5269));
            final Pair<TypicalTypes.constr> xs = Analyzer.cast(Primitives.wrapTail(list$5269));

            return Analyzer.cast(null == Primitives.equal.apply(x, new TypicalTypes.WildConstr()) ? null : Primitives.equal.apply(x, new TypicalTypes.WildConstr()) ? removeWildConstr.apply(xs) : Primitives.wrapCons(x, removeWildConstr.apply(xs)));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, Pair<Pair<TypicalTypes.patternRecord>>> quickPartialCheck = new Function.F1<Boolean, Pair<Pair<TypicalTypes.patternRecord>>>() {
    public Boolean apply(final Pair<Pair<TypicalTypes.patternRecord>> matrix) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<Pair<TypicalTypes.patternRecord>> arg$5271 = Analyzer.cast(matrix);

          if ((null == arg$5271)) {
            return null;
          }
          if (TypicalSupport.match$4998(arg$5271)) {
            return Analyzer.cast(Boolean.FALSE);
          }
          if (true) {
            final Pair<Pair<TypicalTypes.patternRecord>> list$5273 = Analyzer.cast(Analyzer.cast(arg$5271));
            final Pair<TypicalTypes.patternRecord> x = Analyzer.cast(Primitives.wrapHead(list$5273));
            final Pair<Pair<TypicalTypes.patternRecord>> xs = Analyzer.cast(Primitives.wrapTail(list$5273));

            return Analyzer.cast(null == allWildCard.apply(x) ? null : allWildCard.apply(x) ? Boolean.TRUE : quickPartialCheck.apply(xs));
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<Boolean, Pair<TypicalTypes.patternRecord>> allWildCard = new Function.F1<Boolean, Pair<TypicalTypes.patternRecord>>() {
    public Boolean apply(final Pair<TypicalTypes.patternRecord> row) {
      return new Match<Boolean>() {
        public Boolean apply() {
          final Pair<TypicalTypes.patternRecord> arg$5275 = Analyzer.cast(row);

          if ((null == arg$5275)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$5275)) {
            return Analyzer.cast(Boolean.TRUE);
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$5277 = Analyzer.cast(Analyzer.cast(arg$5275));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$5277));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$5277));

            return Analyzer.cast(new Match<Boolean>() {
              public Boolean apply() {
                final TypicalTypes.pattern arg$5282 = Analyzer.cast(null == x ? null : x.pat);

                if ((null == arg$5282)) {
                  return null;
                }
                if ((null != arg$5282))
                                    switch (arg$5282.tag()) {
                  case VariablePattern:
                    if (TypicalSupport.match$4744(arg$5282)) {
                      return Analyzer.cast(allWildCard.apply(xs));
                    }
                    break;
                  case WildCardPattern:
                    if (TypicalSupport.match$4742(arg$5282)) {
                      return Analyzer.cast(allWildCard.apply(xs));
                    }
                    break;
                  default:
                    break;
                  };
                if (true) {
                  return Analyzer.cast(Boolean.FALSE);
                }
                return null;
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<String, TypicalTypes.pattern> showPattern = new Function.F1<String, TypicalTypes.pattern>() {
    public String apply(final TypicalTypes.pattern p) {
      return new Match<String>() {
        public String apply() {
          final TypicalTypes.pattern arg$5287 = Analyzer.cast(p);

          if ((null == arg$5287)) {
            return null;
          }
          if ((null != arg$5287))
                        switch (arg$5287.tag()) {
            case PairPattern:
              if (TypicalSupport.match$4804(arg$5287)) {
                final TypicalTypes.patternRecord hd = Analyzer.cast(arg$5287.getTuple().get1());
                final TypicalTypes.patternRecord tl = Analyzer.cast(arg$5287.getTuple().get2());

                return Analyzer.cast(new Let<String>() {
                  final String mes1;
                  final String mes2;

                  {
                    mes1 = Analyzer.cast(showPattern.apply(null == hd ? null : hd.pat));
                    mes2 = Analyzer.cast(showPattern.apply(null == tl ? null : tl.pat));
                  }

                  public String apply() {
                    return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(mes1, "::("), mes2), ")"));
                  }
                }.apply());
              }
              break;
            case ConstructorPattern:
              if (TypicalSupport.match$4790(arg$5287)) {
                final String s = Analyzer.cast(arg$5287.getTuple().get1());
                final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5287.getTuple().get2());

                return Analyzer.cast(new Let<String>() {
                  final String mes;

                  {
                    mes = Analyzer.cast(showPatternRecords.apply(pl));
                  }

                  public String apply() {
                    return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(Primitives.concat.apply(s, "("), mes), ")"));
                  }
                }.apply());
              }
              break;
            case RecFieldPattern:
              if (TypicalSupport.match$4818(arg$5287)) {
                final String s = Analyzer.cast(arg$5287.getTuple().get1());
                final TypicalTypes.patternRecord pt = Analyzer.cast(arg$5287.getTuple().get2());

                return Analyzer.cast(new Let<String>() {
                  final String mes;

                  {
                    mes = Analyzer.cast(showPattern.apply(null == pt ? null : pt.pat));
                  }

                  public String apply() {
                    return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(s, "="), mes));
                  }
                }.apply());
              }
              break;
            case VariablePattern:
              if (TypicalSupport.match$4744(arg$5287)) {
                return Analyzer.cast("_");
              }
              break;
            case TupPattern:
              if (TypicalSupport.match$4783(arg$5287)) {
                final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5287.getTuple().get1());

                return Analyzer.cast(new Let<String>() {
                  final String mes;

                  {
                    mes = Analyzer.cast(showPatternRecords.apply(pl));
                  }

                  public String apply() {
                    return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply("(", mes), ")"));
                  }
                }.apply());
              }
              break;
            case BotPattern:
              if (TypicalSupport.match$4745(arg$5287)) {
                return Analyzer.cast("_|_");
              }
              break;
            case RecPattern:
              if (TypicalSupport.match$4811(arg$5287)) {
                final Pair<TypicalTypes.patternRecord> pl = Analyzer.cast(arg$5287.getTuple().get1());

                return Analyzer.cast(new Let<String>() {
                  final String mes;

                  {
                    mes = Analyzer.cast(showPatternRecords.apply(pl));
                  }

                  public String apply() {
                    return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply("{", mes), "}"));
                  }
                }.apply());
              }
              break;
            case EmptyPattern:
              if (TypicalSupport.match$4797(arg$5287)) {
                return Analyzer.cast("[]");
              }
              break;
            case ConstantPattern:
              if (TypicalSupport.match$4752(arg$5287)) {
                final TypicalTypes.value val = Analyzer.cast(arg$5287.getTuple().get1());

                return Analyzer.cast(new Match<String>() {
                  public String apply() {
                    final TypicalTypes.value arg$5298 = Analyzer.cast(val);

                    if ((null == arg$5298)) {
                      return null;
                    }
                    if ((null != arg$5298))
                                            switch (arg$5298.tag()) {
                      case BoolValue:
                        if (TypicalSupport.match$5171(arg$5298)) {
                          final Boolean b = Analyzer.cast(arg$5298.getTuple().get1());

                          return Analyzer.cast(null == b ? null : b ? "true" : "false");
                        }
                        break;
                      case IntValue:
                        if (TypicalSupport.match$5225(arg$5298)) {
                          final BigInteger i = Analyzer.cast(arg$5298.getTuple().get1());

                          return Analyzer.cast(Primitives.itos.apply(i));
                        }
                        break;
                      case FloatValue:
                        if (TypicalSupport.match$5226(arg$5298)) {
                          final Double f = Analyzer.cast(arg$5298.getTuple().get1());

                          return Analyzer.cast(Primitives.ftos.apply(f));
                        }
                        break;
                      case StringValue:
                        if (TypicalSupport.match$5227(arg$5298)) {
                          final String s = Analyzer.cast(arg$5298.getTuple().get1());

                          return Analyzer.cast(s);
                        }
                        break;
                      default:
                        break;
                      };
                    return null;
                  }
                }.apply());
              }
              break;
            case WildCardPattern:
              if (TypicalSupport.match$4742(arg$5287)) {
                return Analyzer.cast("_");
              }
              break;
            default:
              break;
            };
          if (true) {
            return Analyzer.cast(null);
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<String, Pair<TypicalTypes.pattern>> showPatterns = new Function.F1<String, Pair<TypicalTypes.pattern>>() {
    public String apply(final Pair<TypicalTypes.pattern> pl) {
      return new Match<String>() {
        public String apply() {
          final Pair<TypicalTypes.pattern> arg$5311 = Analyzer.cast(pl);

          if ((null == arg$5311)) {
            return null;
          }
          if (TypicalSupport.match$5141(arg$5311)) {
            return Analyzer.cast("");
          }
          if (TypicalSupport.match$5313(arg$5311)) {
            final TypicalTypes.pattern x = Analyzer.cast(arg$5311.get(0));

            return Analyzer.cast(showPattern.apply(x));
          }
          if (true) {
            final Pair<TypicalTypes.pattern> list$5314 = Analyzer.cast(Analyzer.cast(arg$5311));
            final TypicalTypes.pattern x = Analyzer.cast(Primitives.wrapHead(list$5314));
            final Pair<TypicalTypes.pattern> xs = Analyzer.cast(Primitives.wrapTail(list$5314));

            return Analyzer.cast(new Let<String>() {
              final String me;
              final String mes;

              {
                me = Analyzer.cast(showPattern.apply(x));
                mes = Analyzer.cast(showPatterns.apply(xs));
              }

              public String apply() {
                return Analyzer.cast(Primitives.concat.apply(me, mes));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };

  final Function.F1<String, Pair<TypicalTypes.patternRecord>> showPatternRecords = new Function.F1<String, Pair<TypicalTypes.patternRecord>>() {
    public String apply(final Pair<TypicalTypes.patternRecord> pl) {
      return new Match<String>() {
        public String apply() {
          final Pair<TypicalTypes.patternRecord> arg$5316 = Analyzer.cast(pl);

          if ((null == arg$5316)) {
            return null;
          }
          if (TypicalSupport.match$4711(arg$5316)) {
            return Analyzer.cast("");
          }
          if (TypicalSupport.match$5318(arg$5316)) {
            final TypicalTypes.patternRecord x = Analyzer.cast(arg$5316.get(0));

            return Analyzer.cast(showPattern.apply(null == x ? null : x.pat));
          }
          if (true) {
            final Pair<TypicalTypes.patternRecord> list$5319 = Analyzer.cast(Analyzer.cast(arg$5316));
            final TypicalTypes.patternRecord x = Analyzer.cast(Primitives.wrapHead(list$5319));
            final Pair<TypicalTypes.patternRecord> xs = Analyzer.cast(Primitives.wrapTail(list$5319));

            return Analyzer.cast(new Let<String>() {
              final String me;
              final String mes;

              {
                me = Analyzer.cast(showPattern.apply(null == x ? null : x.pat));
                mes = Analyzer.cast(showPatternRecords.apply(xs));
              }

              public String apply() {
                return Analyzer.cast(Primitives.concat.apply(Primitives.concat.apply(me, ","), mes));
              }
            }.apply());
          }
          return null;
        }
      }.apply();
    }
  };
}

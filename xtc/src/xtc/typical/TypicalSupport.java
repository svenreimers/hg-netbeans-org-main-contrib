// ===========================================================================
// This file has been generated by
// Typical, version 1.13.2,
// (C) 2004-2007 Robert Grimm and New York University,
// on Thursday, November 29, 2007 at 11:36:01 PM.
// Edit at your own risk.
// ===========================================================================

package xtc.typical;

import xtc.util.Pair;

import xtc.tree.Node;

/** Helper functionality for Typical. */
public class TypicalSupport {
  static final Primitives.Head<TypicalTypes.raw_type<?>> head$98 = new Primitives.Head<TypicalTypes.raw_type<?>>();
  static final Primitives.Tail<TypicalTypes.raw_type<?>> tail$99 = new Primitives.Tail<TypicalTypes.raw_type<?>>();
  static final Primitives.Append<Node> append$127 = new Primitives.Append<Node>();
  static final Primitives.Map<Object, Node> map$128 = new Primitives.Map<Object, Node>();
  static final Primitives.Map<TypicalTypes.raw_type<?>, Node> map$129 = new Primitives.Map<TypicalTypes.raw_type<?>, Node>();
  static final Primitives.Exists<TypicalTypes.raw_type<?>> exists$184 = new Primitives.Exists<TypicalTypes.raw_type<?>>();
  static final Primitives.FoldLeft<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> foldl$222 = new Primitives.FoldLeft<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>();
  static final Primitives.Tail<Node> tail$278 = new Primitives.Tail<Node>();
  static final Primitives.Head<Node> head$279 = new Primitives.Head<Node>();
  static final Primitives.Append<String> append$297 = new Primitives.Append<String>();
  static final Primitives.Union<String> union$313 = new Primitives.Union<String>();
  static final Primitives.Exists<TypicalTypes.entry> exists$2386 = new Primitives.Exists<TypicalTypes.entry>();
  static final Primitives.Nth<Node> nth$2401 = new Primitives.Nth<Node>();
  static final Primitives.Append<TypicalTypes.entry> append$3249 = new Primitives.Append<TypicalTypes.entry>();
  static final Primitives.Map<Object, TypicalTypes.entry> map$3295 = new Primitives.Map<Object, TypicalTypes.entry>();
  static final Primitives.Map<String, Node> map$3892 = new Primitives.Map<String, Node>();
  static final Primitives.Append<Object> append$3920 = new Primitives.Append<Object>();
  static final Primitives.Map<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> map$3983 = new Primitives.Map<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>();
  static final Primitives.Map<Object, TypicalTypes.nodeRec> map$4017 = new Primitives.Map<Object, TypicalTypes.nodeRec>();
  static final Primitives.Union<TypicalTypes.call> union$4023 = new Primitives.Union<TypicalTypes.call>();
  static final Primitives.Union<Pair<String>> union$4217 = new Primitives.Union<Pair<String>>();
  static final Primitives.Append<Pair<String>> append$4222 = new Primitives.Append<Pair<String>>();
  static final Primitives.Map<TypicalTypes.raw_type<?>, String> map$4244 = new Primitives.Map<TypicalTypes.raw_type<?>, String>();
  static final Primitives.Union<Node> union$4303 = new Primitives.Union<Node>();
  static final Primitives.Map<Object, String> map$4307 = new Primitives.Map<Object, String>();
  static final Primitives.Append<TypicalTypes.patternRecord> append$4735 = new Primitives.Append<TypicalTypes.patternRecord>();
  static final Primitives.Head<TypicalTypes.patternRecord> head$4913 = new Primitives.Head<TypicalTypes.patternRecord>();
  static final Primitives.Tail<TypicalTypes.patternRecord> tail$4914 = new Primitives.Tail<TypicalTypes.patternRecord>();
  static final Primitives.Append<Pair<TypicalTypes.patternRecord>> append$4995 = new Primitives.Append<Pair<TypicalTypes.patternRecord>>();
  static final Primitives.Append<TypicalTypes.constr> append$5000 = new Primitives.Append<TypicalTypes.constr>();
  static final Primitives.Append<TypicalTypes.pattern> append$5027 = new Primitives.Append<TypicalTypes.pattern>();
  static final Primitives.Head<Pair<TypicalTypes.patternRecord>> head$5055 = new Primitives.Head<Pair<TypicalTypes.patternRecord>>();
  static final Primitives.Head<TypicalTypes.pattern> head$5134 = new Primitives.Head<TypicalTypes.pattern>();
  static final Primitives.Tail<TypicalTypes.pattern> tail$5135 = new Primitives.Tail<TypicalTypes.pattern>();
  static final Primitives.Head<TypicalTypes.constr> head$5200 = new Primitives.Head<TypicalTypes.constr>();

  static final boolean match$1(Node m) {
    return null != m && m.hasName("UpperID") && m.size() == 1;
  }

  static final boolean match$5(Node m) {
    return null != m && m.hasName("TypeConstructorPattern") && m.size() >= 1;
  }

  static final boolean match$9(Node m) {
    return null != m && m.hasName("TupleConstructor") && m.size() >= 1;
  }

  static final boolean match$13(Node m) {
    return null != m && m.hasName("TypeConstructor") && m.size() == 2;
  }

  static final boolean match$17(Node m) {
    return null != m && m.hasName("PolyTypeConstructor") && m.size() == 2;
  }

  static final boolean match$21(Node m) {
    return null != m && m.hasName("TypeDefinition") && m.size() == 3;
  }

  static final boolean match$25(Node m) {
    return null != m && m.hasName("ConstructedType") && m.size() == 2;
  }

  static final boolean match$29(Node m) {
    return null != m && m.hasName("UserDefinedType") && m.size() == 1;
  }

  static final boolean match$33(Node m) {
    return null != m && m.hasName("AttributeDefinition") && m.size() == 2;
  }

  static final boolean match$37(Node m) {
    return null != m && m.hasName("EqualAttributeDefinition") && m.size() == 2;
  }

  static final boolean match$41(Node m) {
    return null != m && m.hasName("FieldType") && m.size() == 2;
  }

  static final boolean match$45(Node m) {
    return null != m && m.hasName("FieldAssignment") && m.size() == 2;
  }

  static final boolean match$49(Node m) {
    return null != m && m.hasName("FieldExpression") && m.size() == 2;
  }

  static final boolean match$53(Node m) {
    return null != m && m.hasName("FieldPattern") && m.size() == 2 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("LowerID") && m.getGeneric(0).size() == 1);
  }

  static final boolean match$57(Node m) {
    return null != m && m.hasName("AsPattern") && m.size() == 2;
  }

  static final boolean match$61(Node m) {
    return null != m && m.hasName("LowerID") && m.size() == 1;
  }

  static final boolean match$65(Node m) {
    return null != m && m.hasName("Variable") && m.size() == 1;
  }

  static final boolean match$69(Node m) {
    return null != m && m.hasName("Parameter") && m.size() == 2;
  }

  static final boolean match$73(Node m) {
    return null != m && m.hasName("ValueDefinition") && m.size() == 3;
  }

  static final boolean match$77(Node m) {
    return null != m && m.hasName("NameSpaceStructure") && m.size() == 3;
  }

  static final boolean match$83(Node m) {
    return null != m && m.hasName("LetExpression") && m.size() == 2;
  }

  static final boolean match$84(Node m) {
    return null != m && m.hasName("PatternMatch") && m.size() == 2;
  }

  static final boolean match$87(TypicalTypes.raw_type<?> m) {
    return null != m && m.isBoolT();
  }

  static final boolean match$88(TypicalTypes.raw_type<?> m) {
    return null != m && m.isIntT();
  }

  static final boolean match$89(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFloat32T();
  }

  static final boolean match$90(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFloat64T();
  }

  static final boolean match$91(TypicalTypes.raw_type<?> m) {
    return null != m && m.isStringT();
  }

  static final boolean match$92(TypicalTypes.raw_type<?> m) {
    return null != m && m.isWildcardT();
  }

  static final boolean match$93(TypicalTypes.raw_type<?> m) {
    return null != m && m.isAnyT();
  }

  static final boolean match$94(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructorT();
  }

  static final boolean match$95(TypicalTypes.raw_type<?> m) {
    return null != m && m.isTypeName();
  }

  static final boolean match$96(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFieldT();
  }

  static final boolean match$97(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFunctionT();
  }

  static final boolean match$100(TypicalTypes.raw_type<?> m) {
    return null != m && m.isVariantT();
  }

  static final boolean match$107(TypicalTypes.raw_type<?> m) {
    return null != m && m.isRecordT();
  }

  static final boolean match$114(TypicalTypes.raw_type<?> m) {
    return null != m && m.isTupleT();
  }

  static final boolean match$115(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructedT();
  }

  static final boolean match$116(TypicalTypes.raw_type<?> m) {
    return null != m && m.isPairOfType();
  }

  static final boolean match$117(TypicalTypes.raw_type<?> m) {
    return null != m && m.isVariableT();
  }

  static final boolean match$118(TypicalTypes.raw_type<?> m) {
    return null != m && m.isPolyVariantT();
  }

  static final boolean match$119(TypicalTypes.raw_type<?> m) {
    return null != m && m.isNodeTypeT();
  }

  static final boolean match$122(Pair<TypicalTypes.raw_type<?>> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$126(Node m) {
    return null != m && m.hasName("Module") && m.size() >= 1;
  }

  static final boolean match$147(Node m) {
    return null != m && m.hasName("EqualityDefinition") && m.size() >= 1;
  }

  static final boolean match$153(Node m) {
    return null != m && m.hasName("EqualStructure") && m.size() >= 2;
  }

  static final boolean match$155(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructorT() && "raw_type".equals(m.getTuple().get1());
  }

  static final boolean match$183(Node m) {
    return null != m && m.hasName("RecordDeclaration") && m.size() >= 0;
  }

  static final boolean match$192(Node m) {
    return null != m && m.hasName("VariantDeclaration") && m.size() >= 0;
  }

  static final boolean match$200(Node m) {
    return null != m && m.hasName("PolyVariantDeclaration") && m.size() >= 0;
  }

  static final boolean match$216(Node m) {
    return null != m && m.hasName("ScopeDefinition") && m.size() == 1;
  }

  static final boolean match$220(Node m) {
    return null != m && m.hasName("NameSpaceDefinition") && m.size() >= 0;
  }

  static final boolean match$235(TypicalTypes.raw_type<?> m) {
    return null != m && m.isTupleT() && (null != m.getTuple().get1() && ((Pair)m.getTuple().get1()).isEmpty());
  }

  static final boolean match$245(Node m) {
    return null != m && m.hasName("Parameters") && m.size() >= 0;
  }

  static final boolean match$255(Node m) {
    return null != m && m.hasName("MatchExpression") && m.size() == 2;
  }

  static final boolean match$269(Node m) {
    return null != m && m.hasName("PatternMatching") && m.size() >= 0;
  }

  static final boolean match$277(Node m) {
    return null != m && m.hasName("Patterns") && m.size() >= 0;
  }

  static final boolean match$283(Node m) {
    return null != m && m.hasName("TuplePattern") && m.size() >= 0;
  }

  static final boolean match$287(Node m) {
    return null != m && m.hasName("WhenPattern") && m.size() == 2;
  }

  static final boolean match$306(Node m) {
    return null != m && m.hasName("TypedPattern") && m.size() == 2;
  }

  static final boolean match$312(Node m) {
    return null != m && m.hasName("ConsPattern") && m.size() == 2;
  }

  static final boolean match$321(Node m) {
    return null != m && m.hasName("ListPattern") && m.size() >= 0;
  }

  static final boolean match$323(Pair<Node> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$339(Node m) {
    return null != m && m.hasName("RecordPattern") && m.size() >= 0;
  }

  static final boolean match$363(Node m) {
    return null != m && m.hasName("FieldPattern") && m.size() == 2;
  }

  static final boolean match$387(Pair<Node> m) {
    return m.size() == 1 && (null != m.get(0) && m.get(0).hasName("PatternParameters") && m.get(0).size() >= 0);
  }

  static final boolean match$422(Pair<Node> m) {
    return m.size() == 1 && (null != m.get(0) && m.get(0).hasName("WildCard"));
  }

  static final boolean match$479(Node m) {
    return null != m && m.hasName("TupleLiteral") && m.size() >= 0;
  }

  static final boolean match$483(Node m) {
    return null != m && m.hasName("LogicalOrExpression") && m.size() == 2;
  }

  static final boolean match$491(Node m) {
    return null != m && m.hasName("LogicalAndExpression") && m.size() == 2;
  }

  static final boolean match$499(Node m) {
    return null != m && m.hasName("EqualityExpression") && m.size() == 3;
  }

  static final boolean match$505(Node m) {
    return null != m && m.hasName("RelationalExpression") && m.size() == 3;
  }

  static final boolean match$553(Node m) {
    return null != m && m.hasName("AdditiveExpression") && m.size() == 3;
  }

  static final boolean match$609(Node m) {
    return null != m && m.hasName("MultiplicativeExpression") && m.size() == 3;
  }

  static final boolean match$665(Node m) {
    return null != m && m.hasName("ConcatenationExpression") && m.size() == 3;
  }

  static final boolean match$673(Node m) {
    return null != m && m.hasName("ConsExpression") && m.size() == 2;
  }

  static final boolean match$679(Node m) {
    return null != m && m.hasName("FunctionApplication") && m.size() >= 0;
  }

  static final boolean match$681(Pair<Node> m) {
    return m.size() == 3;
  }

  static final boolean match$686(Pair<Node> m) {
    return m.size() == 2;
  }

  static final boolean match$689(Pair<Node> m) {
    return m.size() == 3 && (null != m.get(2) && m.get(2).hasName("ErrorClause"));
  }

  static final boolean match$692(Node m) {
    return null != m && m.hasName("ErrorClause") && m.size() == 3;
  }

  static final boolean match$714(Pair<Node> m) {
    return m.size() == 2 && (null != m.get(1) && m.get(1).hasName("ErrorClause"));
  }

  static final boolean match$737(Pair<Node> m) {
    return m.size() == 2 && (null != m.get(1) && m.get(1).hasName("LowerID"));
  }

  static final boolean match$742(Pair<Node> m) {
    return m.size() == 1;
  }

  static final boolean match$2267(Node m) {
    return null != m && m.hasName("PredicateExpression") && m.size() == 2;
  }

  static final boolean match$2273(Node m) {
    return null != m && m.hasName("PredicateArgument") && m.size() == 1;
  }

  static final boolean match$2379(Node m) {
    return null != m && m.hasName("LogicalNegationExpression") && m.size() == 1;
  }

  static final boolean match$2390(Node m) {
    return null != m && m.hasName("FunctionExpression") && m.size() == 1;
  }

  static final boolean match$2400(Node m) {
    return null != m && m.hasName("RequireExpression") && m.size() >= 0;
  }

  static final boolean match$2405(Node m) {
    return null != m && m.hasName("RequireArgs") && m.size() == 4;
  }

  static final boolean match$2415(Node m) {
    return null != m && m.hasName("GuardExpression") && m.size() == 2;
  }

  static final boolean match$2427(Node m) {
    return null != m && m.hasName("AssertClause") && m.size() == 2;
  }

  static final boolean match$2509(Node m) {
    return null != m && m.hasName("RecordExpression") && m.size() >= 0;
  }

  static final boolean match$2527(Node m) {
    return null != m && m.hasName("WithExpression") && m.size() == 1 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("Bottom"));
  }

  static final boolean match$2537(Node m) {
    return null != m && m.hasName("WithExpression") && m.size() == 1;
  }

  static final boolean match$2795(Node m) {
    return null != m && m.hasName("IfExpression") && m.size() == 2;
  }

  static final boolean match$2801(Node m) {
    return null != m && m.hasName("IfElseExpression") && m.size() == 3;
  }

  static final boolean match$2809(Node m) {
    return null != m && m.hasName("ListLiteral") && m.size() >= 0;
  }

  public static final Analyzer.NodeMatch nodeMatch$2813 = new Analyzer.NodeMatch() {
    public Boolean apply(Node m) {
      return (null != m && m.hasName("ScopeDefinition"));
    }
  };

  static final boolean match$2828(Node m) {
    return null != m && m.hasName("ReduceExpression") && m.size() == 3;
  }

  static final boolean match$2838(Node m) {
    return null != m && m.hasName("ReduceOptions") && m.size() >= 0;
  }

  static final boolean match$2856(Node m) {
    return null != m && m.hasName("TypeVariable") && m.size() == 1;
  }

  static final boolean match$2860(Node m) {
    return null != m && m.hasName("ConstraintType") && m.size() == 1;
  }

  static final boolean match$2864(Node m) {
    return null != m && m.hasName("PolyVariantType") && m.size() >= 0;
  }

  static final boolean match$2868(Node m) {
    return null != m && m.hasName("TupleType") && m.size() >= 0;
  }

  static final boolean match$2884(Node m) {
    return null != m && m.hasName("AliasedType") && m.size() == 2;
  }

  static final boolean match$2888(Node m) {
    return null != m && m.hasName("FunctionType") && m.size() == 2;
  }

  static final boolean match$2910(Node m) {
    return null != m && m.hasName("NaryConstructedType") && m.size() == 2;
  }

  static final boolean match$2914(Node m) {
    return null != m && m.hasName("Bottom");
  }

  static final boolean match$2918(Node m) {
    return null != m && m.hasName("BottomPattern");
  }

  static final boolean match$2922(Node m) {
    return null != m && m.hasName("WildCard");
  }

  static final boolean match$2926(Node m) {
    return null != m && m.hasName("AnyType");
  }

  static final boolean match$2930(Node m) {
    return null != m && m.hasName("StringLiteral");
  }

  static final boolean match$2934(Node m) {
    return null != m && m.hasName("StringType");
  }

  static final boolean match$2938(Node m) {
    return null != m && m.hasName("IntegerLiteral");
  }

  static final boolean match$2942(Node m) {
    return null != m && m.hasName("IntType");
  }

  static final boolean match$2946(Node m) {
    return null != m && m.hasName("BooleanLiteral");
  }

  static final boolean match$2950(Node m) {
    return null != m && m.hasName("BooleanType");
  }

  static final boolean match$2954(Node m) {
    return null != m && m.hasName("FloatingLiteral");
  }

  static final boolean match$2958(Node m) {
    return null != m && m.hasName("Float64");
  }

  static final boolean match$2962(Node m) {
    return null != m && m.hasName("Float32");
  }

  static final boolean match$2971(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isWildcardT());
  }

  static final boolean match$2972(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isWildcardT());
  }

  static final boolean match$2973(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isBoolT()) && (null != m.get2() && m.get2().isBoolT());
  }

  static final boolean match$2974(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isIntT()) && (null != m.get2() && m.get2().isIntT());
  }

  static final boolean match$2975(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isStringT()) && (null != m.get2() && m.get2().isStringT());
  }

  static final boolean match$2976(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFloat32T()) && (null != m.get2() && m.get2().isFloat32T());
  }

  static final boolean match$2977(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFloat64T()) && (null != m.get2() && m.get2().isFloat64T());
  }

  static final boolean match$2978(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isNodeTypeT()) && (null != m.get2() && m.get2().isNodeTypeT());
  }

  static final boolean match$2979(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isStringT()) && (null != m.get2() && m.get2().isAnyT());
  }

  static final boolean match$2980(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isAnyT()) && (null != m.get2() && m.get2().isStringT());
  }

  static final boolean match$2981(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isAnyT());
  }

  static final boolean match$2982(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isAnyT());
  }

  static final boolean match$2983(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isNodeTypeT());
  }

  static final boolean match$2984(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isNodeTypeT());
  }

  static final boolean match$2985(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTypeName()) && (null != m.get2() && m.get2().isTypeName());
  }

  static final boolean match$2986(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTypeName());
  }

  static final boolean match$2987(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isTypeName());
  }

  static final boolean match$2988(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariableT()) && (null != m.get2() && m.get2().isVariableT());
  }

  static final boolean match$2989(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariableT());
  }

  static final boolean match$2990(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isVariableT());
  }

  static final boolean match$2991(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isPairOfType()) && (null != m.get2() && m.get2().isPairOfType());
  }

  static final boolean match$2992(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFieldT()) && (null != m.get2() && m.get2().isFieldT());
  }

  static final boolean match$2993(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFieldT());
  }

  static final boolean match$2994(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isFieldT());
  }

  static final boolean match$2995(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isRecordT()) && (null != m.get2() && m.get2().isRecordT());
  }

  static final boolean match$2996(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTupleT()) && (null != m.get2() && m.get2().isTupleT());
  }

  static final boolean match$2997(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructedT()) && (null != m.get2() && m.get2().isConstructedT());
  }

  static final boolean match$2998(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructedT() && "var".equals(m.get1().getTuple().get2()));
  }

  static final boolean match$2999(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isConstructedT() && "var".equals(m.get2().getTuple().get2()));
  }

  static final boolean match$3000(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isPolyVariantT());
  }

  static final boolean match$3001(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isPolyVariantT());
  }

  static final boolean match$3002(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariantT()) && (null != m.get2() && m.get2().isVariantT());
  }

  static final boolean match$3004(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructorT()) && (null != m.get2() && m.get2().isConstructorT());
  }

  static final boolean match$3009(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariantT()) && (null != m.get2() && m.get2().isConstructorT());
  }

  static final boolean match$3016(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructorT()) && (null != m.get2() && m.get2().isVariantT());
  }

  static final boolean match$3018(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFunctionT()) && (null != m.get2() && m.get2().isFunctionT());
  }

  static final boolean match$3072(Node m) {
    return null != m && m.hasName("TypeDefinition");
  }

  static final boolean match$3084(Node m) {
    return null != m && m.hasName("AttributeDefinition");
  }

  static final boolean match$3088(Node m) {
    return null != m && m.hasName("EqualAttributeDefinition");
  }

  static final boolean match$3114(Node m) {
    return null != m && m.hasName("ScopeDefinition");
  }

  static final boolean match$3118(Node m) {
    return null != m && m.hasName("NameSpaceDefinition");
  }

  static final boolean match$3163(Pair<TypicalTypes.call> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3230(Pair<String> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3238(Node m) {
    return null != m && m.hasName("PolyVariantDeclaration");
  }

  static final boolean match$3252(Pair<TypicalTypes.entry> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3256(Node m) {
    return null != m && m.hasName("LetBinding") && m.size() == 2;
  }

  static final boolean match$3258(Node m) {
    return null != m && m.hasName("TypedPattern") && m.size() == 2 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("Variable"));
  }

  static final boolean match$3314(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructedT() && "var".equals(m.getTuple().get2());
  }

  static final boolean match$3322(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructedT() && "list".equals(m.getTuple().get2());
  }

  static final boolean match$3352(TypicalTypes.raw_type<?> m) {
    return null != m && m.isStringList();
  }

  static final boolean match$3397(Node m) {
    return null != m && m.hasName("TypeParameters") && m.size() >= 0;
  }

  static final boolean match$3401(Node m) {
    return null != m && m.hasName("NaryType") && m.size() >= 0;
  }

  static final boolean match$3405(Node m) {
    return null != m && m.hasName("Arguments") && m.size() >= 0;
  }

  static final boolean match$3413(Node m) {
    return null != m && m.hasName("LetBindings") && m.size() >= 0;
  }

  static final boolean match$3417(Node m) {
    return null != m && m.hasName("PatternMatch") && m.size() == 2 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("Patterns") && m.getGeneric(0).size() >= 0);
  }

  static final boolean match$3474(Node m) {
    return null != m && m.hasName("PatternParameters") && m.size() >= 0;
  }

  static final boolean match$3911(TypicalTypes.raw_type<?> m) {
    return null != m && m.isStringName();
  }

  static final boolean match$3917(Pair<?> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3918(Pair<?> m) {
    return m.size() == 1;
  }

  static final boolean match$3939(TypicalTypes.raw_type<?> m) {
    return null != m && m.isVariableT() && Boolean.TRUE.equals(m.getTuple().get2());
  }

  static final boolean match$4144(Pair<Node> m) {
    return m.size() == 2 && (null != m.get(1) && m.get(1).hasName("Arguments"));
  }

  static final boolean match$4145(Pair<Node> m) {
    return m.size() == 3 && (null != m.get(0) && m.get(0).hasName("UpperID")) && (null != m.get(1) && m.get(1).hasName("LowerID")) && (null != m.get(2) && m.get(2).hasName("Arguments") && m.get(2).size() >= 0);
  }

  static final boolean match$4225(Pair<Pair<String>> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$4317(Pair<String> m) {
    return m.size() == 1;
  }

  static final boolean match$4577(Node m) {
    return null != m && m.hasName("Variable");
  }

  static final boolean match$4581(Node m) {
    return null != m && m.hasName("MessageTag");
  }

  static final boolean match$4585(Node m) {
    return null != m && m.hasName("ReduceOptions");
  }

  static final boolean match$4589(Node m) {
    return null != m && m.hasName("LowerID");
  }

  static final boolean match$4593(Node m) {
    return null != m && m.hasName("UpperID");
  }

  static final boolean match$4597(Node m) {
    return null != m && m.hasName("UserDefinedType");
  }

  static final boolean match$4601(Node m) {
    return null != m && m.hasName("TypeVariable");
  }

  static final boolean match$4686(Node m) {
    return null != m && m.hasName("StringLiteral") && m.size() == 1;
  }

  static final boolean match$4690(Node m) {
    return null != m && m.hasName("IntegerLiteral") && m.size() == 1;
  }

  static final boolean match$4694(Node m) {
    return null != m && m.hasName("FloatingLiteral") && m.size() == 1;
  }

  static final boolean match$4698(Node m) {
    return null != m && m.hasName("BooleanLiteral") && m.size() == 1;
  }

  static final boolean match$4711(Pair<TypicalTypes.patternRecord> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$4742(TypicalTypes.pattern m) {
    return null != m && m.isWildCardPattern();
  }

  static final boolean match$4744(TypicalTypes.pattern m) {
    return null != m && m.isVariablePattern();
  }

  static final boolean match$4745(TypicalTypes.pattern m) {
    return null != m && m.isBotPattern();
  }

  static final boolean match$4752(TypicalTypes.pattern m) {
    return null != m && m.isConstantPattern();
  }

  static final boolean match$4756(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isStringValue()) && (null != m.get2() && m.get2().isStringValue());
  }

  static final boolean match$4757(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFloatValue()) && (null != m.get2() && m.get2().isFloatValue());
  }

  static final boolean match$4758(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isIntValue()) && (null != m.get2() && m.get2().isIntValue());
  }

  static final boolean match$4759(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isBoolValue()) && (null != m.get2() && m.get2().isBoolValue());
  }

  static final boolean match$4783(TypicalTypes.pattern m) {
    return null != m && m.isTupPattern();
  }

  static final boolean match$4790(TypicalTypes.pattern m) {
    return null != m && m.isConstructorPattern();
  }

  static final boolean match$4797(TypicalTypes.pattern m) {
    return null != m && m.isEmptyPattern();
  }

  static final boolean match$4804(TypicalTypes.pattern m) {
    return null != m && m.isPairPattern();
  }

  static final boolean match$4811(TypicalTypes.pattern m) {
    return null != m && m.isRecPattern();
  }

  static final boolean match$4818(TypicalTypes.pattern m) {
    return null != m && m.isRecFieldPattern();
  }

  static final boolean match$4917(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariablePattern()) && (null != m.get2() && m.get2().isVariablePattern());
  }

  static final boolean match$4918(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isBotPattern()) && (null != m.get2() && m.get2().isBotPattern());
  }

  static final boolean match$4919(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstantPattern()) && (null != m.get2() && m.get2().isConstantPattern());
  }

  static final boolean match$4932(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTupPattern()) && (null != m.get2() && m.get2().isTupPattern());
  }

  static final boolean match$4933(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructorPattern()) && (null != m.get2() && m.get2().isConstructorPattern());
  }

  static final boolean match$4998(Pair<Pair<TypicalTypes.patternRecord>> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$5021(TypicalTypes.result m) {
    return null != m && m.isNone();
  }

  static final boolean match$5022(TypicalTypes.result m) {
    return null != m && m.isSome();
  }

  static final boolean match$5030(Pair<TypicalTypes.constr> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$5033(TypicalTypes.constr m) {
    return null != m && m.isWildConstr();
  }

  static final boolean match$5061(TypicalTypes.constr m) {
    return null != m && m.isBotConstr();
  }

  static final boolean match$5063(TypicalTypes.constr m) {
    return null != m && m.isConst();
  }

  static final boolean match$5064(TypicalTypes.constr m) {
    return null != m && m.isEmptyConstr();
  }

  static final boolean match$5065(TypicalTypes.constr m) {
    return null != m && m.isRecordConstr();
  }

  static final boolean match$5066(TypicalTypes.constr m) {
    return null != m && m.isTupleConstr();
  }

  static final boolean match$5073(TypicalTypes.constr m) {
    return null != m && m.isPairConstr();
  }

  static final boolean match$5080(TypicalTypes.constr m) {
    return null != m && m.isCConstr();
  }

  static final boolean match$5141(Pair<TypicalTypes.pattern> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$5171(TypicalTypes.value m) {
    return null != m && m.isBoolValue();
  }

  static final boolean match$5225(TypicalTypes.value m) {
    return null != m && m.isIntValue();
  }

  static final boolean match$5226(TypicalTypes.value m) {
    return null != m && m.isFloatValue();
  }

  static final boolean match$5227(TypicalTypes.value m) {
    return null != m && m.isStringValue();
  }

  static final boolean match$5313(Pair<TypicalTypes.pattern> m) {
    return m.size() == 1;
  }

  static final boolean match$5318(Pair<TypicalTypes.patternRecord> m) {
    return m.size() == 1;
  }

  private TypicalSupport() {
  }
}

// ===========================================================================
// This file has been generated by
// Typical, version 1.13.3,
// (C) 2004-2007 Robert Grimm and New York University,
// on Wednesday, February 27, 2008 at 5:11:34 PM.
// Edit at your own risk.
// ===========================================================================

package xtc.typical;

import xtc.util.Pair;

import xtc.tree.Node;

/** Helper functionality for Typical. */
public class TypicalSupport {
  static final Primitives.Head<TypicalTypes.raw_type<?>> head$99 = new Primitives.Head<TypicalTypes.raw_type<?>>();
  static final Primitives.Tail<TypicalTypes.raw_type<?>> tail$100 = new Primitives.Tail<TypicalTypes.raw_type<?>>();
  static final Primitives.Append<Node> append$128 = new Primitives.Append<Node>();
  static final Primitives.Map<Object, Node> map$129 = new Primitives.Map<Object, Node>();
  static final Primitives.Map<TypicalTypes.raw_type<?>, Node> map$130 = new Primitives.Map<TypicalTypes.raw_type<?>, Node>();
  static final Primitives.Exists<TypicalTypes.raw_type<?>> exists$185 = new Primitives.Exists<TypicalTypes.raw_type<?>>();
  static final Primitives.FoldLeft<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> foldl$223 = new Primitives.FoldLeft<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>();
  static final Primitives.Tail<Node> tail$291 = new Primitives.Tail<Node>();
  static final Primitives.Head<Node> head$292 = new Primitives.Head<Node>();
  static final Primitives.Append<String> append$310 = new Primitives.Append<String>();
  static final Primitives.Union<String> union$326 = new Primitives.Union<String>();
  static final Primitives.Exists<TypicalTypes.entry> exists$2399 = new Primitives.Exists<TypicalTypes.entry>();
  static final Primitives.Nth<Node> nth$2414 = new Primitives.Nth<Node>();
  static final Primitives.Append<TypicalTypes.entry> append$3273 = new Primitives.Append<TypicalTypes.entry>();
  static final Primitives.Map<Object, TypicalTypes.entry> map$3319 = new Primitives.Map<Object, TypicalTypes.entry>();
  static final Primitives.Map<String, Node> map$3960 = new Primitives.Map<String, Node>();
  static final Primitives.Map<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> map$4050 = new Primitives.Map<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>>();
  static final Primitives.Map<Object, TypicalTypes.nodeRec> map$4084 = new Primitives.Map<Object, TypicalTypes.nodeRec>();
  static final Primitives.Union<TypicalTypes.call> union$4090 = new Primitives.Union<TypicalTypes.call>();
  static final Primitives.Union<Pair<String>> union$4288 = new Primitives.Union<Pair<String>>();
  static final Primitives.Append<Pair<String>> append$4293 = new Primitives.Append<Pair<String>>();
  static final Primitives.Map<TypicalTypes.raw_type<?>, String> map$4315 = new Primitives.Map<TypicalTypes.raw_type<?>, String>();
  static final Primitives.Union<Node> union$4374 = new Primitives.Union<Node>();
  static final Primitives.Map<Object, String> map$4378 = new Primitives.Map<Object, String>();
  static final Primitives.Append<TypicalTypes.patternRecord> append$4810 = new Primitives.Append<TypicalTypes.patternRecord>();
  static final Primitives.Head<TypicalTypes.patternRecord> head$4988 = new Primitives.Head<TypicalTypes.patternRecord>();
  static final Primitives.Tail<TypicalTypes.patternRecord> tail$4989 = new Primitives.Tail<TypicalTypes.patternRecord>();
  static final Primitives.Append<Pair<TypicalTypes.patternRecord>> append$5070 = new Primitives.Append<Pair<TypicalTypes.patternRecord>>();
  static final Primitives.Append<TypicalTypes.constr> append$5075 = new Primitives.Append<TypicalTypes.constr>();
  static final Primitives.Append<TypicalTypes.pattern> append$5102 = new Primitives.Append<TypicalTypes.pattern>();
  static final Primitives.Head<Pair<TypicalTypes.patternRecord>> head$5130 = new Primitives.Head<Pair<TypicalTypes.patternRecord>>();
  static final Primitives.Head<TypicalTypes.pattern> head$5209 = new Primitives.Head<TypicalTypes.pattern>();
  static final Primitives.Tail<TypicalTypes.pattern> tail$5210 = new Primitives.Tail<TypicalTypes.pattern>();
  static final Primitives.Head<TypicalTypes.constr> head$5275 = new Primitives.Head<TypicalTypes.constr>();

  static final boolean match$1(Node m) {
    return null != m && m.hasName("UpperID") && m.size() == 1;
  }

  static final boolean match$5(Node m) {
    return null != m && m.hasName("TypeConstructorPattern") && m.size() >= 1;
  }

  static final boolean match$9(Node m) {
    return null != m && m.hasName("TupleConstructor") && m.size() >= 1;
  }

  static final boolean match$13(Node m) {
    return null != m && m.hasName("TypeConstructor") && m.size() == 2;
  }

  static final boolean match$17(Node m) {
    return null != m && m.hasName("PolyTypeConstructor") && m.size() == 2;
  }

  static final boolean match$21(Node m) {
    return null != m && m.hasName("TypeDefinition") && m.size() == 3;
  }

  static final boolean match$25(Node m) {
    return null != m && m.hasName("ConstructedType") && m.size() == 2;
  }

  static final boolean match$29(Node m) {
    return null != m && m.hasName("UserDefinedType") && m.size() == 1;
  }

  static final boolean match$33(Node m) {
    return null != m && m.hasName("AttributeDefinition") && m.size() == 2;
  }

  static final boolean match$37(Node m) {
    return null != m && m.hasName("EqualAttributeDefinition") && m.size() == 2;
  }

  static final boolean match$41(Node m) {
    return null != m && m.hasName("FieldType") && m.size() == 2;
  }

  static final boolean match$45(Node m) {
    return null != m && m.hasName("FieldAssignment") && m.size() == 2;
  }

  static final boolean match$49(Node m) {
    return null != m && m.hasName("FieldExpression") && m.size() == 2;
  }

  static final boolean match$53(Node m) {
    return null != m && m.hasName("FieldPattern") && m.size() == 2 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("LowerID") && m.getGeneric(0).size() == 1);
  }

  static final boolean match$57(Node m) {
    return null != m && m.hasName("AsPattern") && m.size() == 2;
  }

  static final boolean match$61(Node m) {
    return null != m && m.hasName("LowerID") && m.size() == 1;
  }

  static final boolean match$65(Node m) {
    return null != m && m.hasName("Variable") && m.size() == 1;
  }

  static final boolean match$69(Node m) {
    return null != m && m.hasName("Parameter") && m.size() == 2;
  }

  static final boolean match$73(Node m) {
    return null != m && m.hasName("ValueDefinition") && m.size() == 3;
  }

  static final boolean match$77(Node m) {
    return null != m && m.hasName("NameSpaceStructure") && m.size() == 3;
  }

  static final boolean match$83(Node m) {
    return null != m && m.hasName("LetExpression") && m.size() == 2;
  }

  static final boolean match$84(Node m) {
    return null != m && m.hasName("FunExpression") && m.size() == 2;
  }

  static final boolean match$85(Node m) {
    return null != m && m.hasName("PatternMatch") && m.size() == 2;
  }

  static final boolean match$88(TypicalTypes.raw_type<?> m) {
    return null != m && m.isBoolT();
  }

  static final boolean match$89(TypicalTypes.raw_type<?> m) {
    return null != m && m.isIntT();
  }

  static final boolean match$90(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFloat32T();
  }

  static final boolean match$91(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFloat64T();
  }

  static final boolean match$92(TypicalTypes.raw_type<?> m) {
    return null != m && m.isStringT();
  }

  static final boolean match$93(TypicalTypes.raw_type<?> m) {
    return null != m && m.isWildcardT();
  }

  static final boolean match$94(TypicalTypes.raw_type<?> m) {
    return null != m && m.isAnyT();
  }

  static final boolean match$95(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructorT();
  }

  static final boolean match$96(TypicalTypes.raw_type<?> m) {
    return null != m && m.isTypeName();
  }

  static final boolean match$97(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFieldT();
  }

  static final boolean match$98(TypicalTypes.raw_type<?> m) {
    return null != m && m.isFunctionT();
  }

  static final boolean match$101(TypicalTypes.raw_type<?> m) {
    return null != m && m.isVariantT();
  }

  static final boolean match$108(TypicalTypes.raw_type<?> m) {
    return null != m && m.isRecordT();
  }

  static final boolean match$115(TypicalTypes.raw_type<?> m) {
    return null != m && m.isTupleT();
  }

  static final boolean match$116(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructedT();
  }

  static final boolean match$117(TypicalTypes.raw_type<?> m) {
    return null != m && m.isPairOfType();
  }

  static final boolean match$118(TypicalTypes.raw_type<?> m) {
    return null != m && m.isVariableT();
  }

  static final boolean match$119(TypicalTypes.raw_type<?> m) {
    return null != m && m.isPolyVariantT();
  }

  static final boolean match$120(TypicalTypes.raw_type<?> m) {
    return null != m && m.isNodeTypeT();
  }

  static final boolean match$123(Pair<TypicalTypes.raw_type<?>> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$127(Node m) {
    return null != m && m.hasName("Module") && m.size() >= 1;
  }

  static final boolean match$148(Node m) {
    return null != m && m.hasName("EqualityDefinition") && m.size() >= 1;
  }

  static final boolean match$154(Node m) {
    return null != m && m.hasName("EqualStructure") && m.size() >= 2;
  }

  static final boolean match$156(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructorT() && "raw_type".equals(m.getTuple().get1());
  }

  static final boolean match$184(Node m) {
    return null != m && m.hasName("RecordDeclaration") && m.size() >= 0;
  }

  static final boolean match$193(Node m) {
    return null != m && m.hasName("VariantDeclaration") && m.size() >= 0;
  }

  static final boolean match$201(Node m) {
    return null != m && m.hasName("PolyVariantDeclaration") && m.size() >= 0;
  }

  static final boolean match$217(Node m) {
    return null != m && m.hasName("ScopeDefinition") && m.size() == 1;
  }

  static final boolean match$221(Node m) {
    return null != m && m.hasName("NameSpaceDefinition") && m.size() >= 0;
  }

  static final boolean match$236(TypicalTypes.raw_type<?> m) {
    return null != m && m.isTupleT() && (null != m.getTuple().get1() && ((Pair)m.getTuple().get1()).isEmpty());
  }

  static final boolean match$258(Node m) {
    return null != m && m.hasName("Parameters") && m.size() >= 0;
  }

  static final boolean match$268(Node m) {
    return null != m && m.hasName("MatchExpression") && m.size() == 2;
  }

  static final boolean match$282(Node m) {
    return null != m && m.hasName("PatternMatching") && m.size() >= 0;
  }

  static final boolean match$290(Node m) {
    return null != m && m.hasName("Patterns") && m.size() >= 0;
  }

  static final boolean match$296(Node m) {
    return null != m && m.hasName("TuplePattern") && m.size() >= 0;
  }

  static final boolean match$300(Node m) {
    return null != m && m.hasName("WhenPattern") && m.size() == 2;
  }

  static final boolean match$319(Node m) {
    return null != m && m.hasName("TypedPattern") && m.size() == 2;
  }

  static final boolean match$325(Node m) {
    return null != m && m.hasName("ConsPattern") && m.size() == 2;
  }

  static final boolean match$334(Node m) {
    return null != m && m.hasName("ListPattern") && m.size() >= 0;
  }

  static final boolean match$336(Pair<Node> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$352(Node m) {
    return null != m && m.hasName("RecordPattern") && m.size() >= 0;
  }

  static final boolean match$376(Node m) {
    return null != m && m.hasName("FieldPattern") && m.size() == 2;
  }

  static final boolean match$400(Pair<Node> m) {
    return m.size() == 1 && (null != m.get(0) && m.get(0).hasName("PatternParameters") && m.get(0).size() >= 0);
  }

  static final boolean match$435(Pair<Node> m) {
    return m.size() == 1 && (null != m.get(0) && m.get(0).hasName("WildCard"));
  }

  static final boolean match$492(Node m) {
    return null != m && m.hasName("TupleLiteral") && m.size() >= 0;
  }

  static final boolean match$496(Node m) {
    return null != m && m.hasName("LogicalOrExpression") && m.size() == 2;
  }

  static final boolean match$504(Node m) {
    return null != m && m.hasName("LogicalAndExpression") && m.size() == 2;
  }

  static final boolean match$512(Node m) {
    return null != m && m.hasName("EqualityExpression") && m.size() == 3;
  }

  static final boolean match$518(Node m) {
    return null != m && m.hasName("RelationalExpression") && m.size() == 3;
  }

  static final boolean match$566(Node m) {
    return null != m && m.hasName("AdditiveExpression") && m.size() == 3;
  }

  static final boolean match$622(Node m) {
    return null != m && m.hasName("MultiplicativeExpression") && m.size() == 3;
  }

  static final boolean match$678(Node m) {
    return null != m && m.hasName("ConcatenationExpression") && m.size() == 3;
  }

  static final boolean match$686(Node m) {
    return null != m && m.hasName("ConsExpression") && m.size() == 2;
  }

  static final boolean match$692(Node m) {
    return null != m && m.hasName("FunctionApplication") && m.size() >= 0;
  }

  static final boolean match$694(Pair<Node> m) {
    return m.size() == 3;
  }

  static final boolean match$699(Pair<Node> m) {
    return m.size() == 2;
  }

  static final boolean match$702(Pair<Node> m) {
    return m.size() == 3 && (null != m.get(2) && m.get(2).hasName("ErrorClause"));
  }

  static final boolean match$705(Node m) {
    return null != m && m.hasName("ErrorClause") && m.size() == 3;
  }

  static final boolean match$727(Pair<Node> m) {
    return m.size() == 2 && (null != m.get(1) && m.get(1).hasName("ErrorClause"));
  }

  static final boolean match$750(Pair<Node> m) {
    return m.size() == 2 && (null != m.get(1) && m.get(1).hasName("LowerID"));
  }

  static final boolean match$755(Pair<Node> m) {
    return m.size() == 1;
  }

  static final boolean match$2280(Node m) {
    return null != m && m.hasName("PredicateExpression") && m.size() == 2;
  }

  static final boolean match$2286(Node m) {
    return null != m && m.hasName("PredicateArgument") && m.size() == 1;
  }

  static final boolean match$2392(Node m) {
    return null != m && m.hasName("LogicalNegationExpression") && m.size() == 1;
  }

  static final boolean match$2403(Node m) {
    return null != m && m.hasName("FunctionExpression") && m.size() == 1;
  }

  static final boolean match$2413(Node m) {
    return null != m && m.hasName("RequireExpression") && m.size() >= 0;
  }

  static final boolean match$2418(Node m) {
    return null != m && m.hasName("RequireArgs") && m.size() == 4;
  }

  static final boolean match$2428(Node m) {
    return null != m && m.hasName("GuardExpression") && m.size() == 2;
  }

  static final boolean match$2440(Node m) {
    return null != m && m.hasName("AssertClause") && m.size() == 2;
  }

  static final boolean match$2522(Node m) {
    return null != m && m.hasName("RecordExpression") && m.size() >= 0;
  }

  static final boolean match$2540(Node m) {
    return null != m && m.hasName("WithExpression") && m.size() == 1 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("Bottom"));
  }

  static final boolean match$2550(Node m) {
    return null != m && m.hasName("WithExpression") && m.size() == 1;
  }

  static final boolean match$2808(Node m) {
    return null != m && m.hasName("IfExpression") && m.size() == 2;
  }

  static final boolean match$2814(Node m) {
    return null != m && m.hasName("IfElseExpression") && m.size() == 3;
  }

  static final boolean match$2822(Node m) {
    return null != m && m.hasName("ListLiteral") && m.size() >= 0;
  }

  public static final Analyzer.NodeMatch nodeMatch$2826 = new Analyzer.NodeMatch() {
    public Boolean apply(Node m) {
      return (null != m && m.hasName("ScopeDefinition"));
    }
  };

  static final boolean match$2841(Node m) {
    return null != m && m.hasName("ReduceExpression") && m.size() == 3;
  }

  static final boolean match$2851(Node m) {
    return null != m && m.hasName("ReduceOptions") && m.size() >= 0;
  }

  static final boolean match$2869(Node m) {
    return null != m && m.hasName("TypeVariable") && m.size() == 1;
  }

  static final boolean match$2873(Node m) {
    return null != m && m.hasName("ConstraintType") && m.size() == 1;
  }

  static final boolean match$2877(Node m) {
    return null != m && m.hasName("PolyVariantType") && m.size() >= 0;
  }

  static final boolean match$2881(Node m) {
    return null != m && m.hasName("TupleType") && m.size() >= 0;
  }

  static final boolean match$2897(Node m) {
    return null != m && m.hasName("AliasedType") && m.size() == 2;
  }

  static final boolean match$2901(Node m) {
    return null != m && m.hasName("FunctionType") && m.size() == 2;
  }

  static final boolean match$2923(Node m) {
    return null != m && m.hasName("NaryConstructedType") && m.size() == 2;
  }

  static final boolean match$2927(Node m) {
    return null != m && m.hasName("Bottom");
  }

  static final boolean match$2931(Node m) {
    return null != m && m.hasName("BottomPattern");
  }

  static final boolean match$2935(Node m) {
    return null != m && m.hasName("WildCard");
  }

  static final boolean match$2939(Node m) {
    return null != m && m.hasName("AnyType");
  }

  static final boolean match$2943(Node m) {
    return null != m && m.hasName("StringLiteral");
  }

  static final boolean match$2947(Node m) {
    return null != m && m.hasName("StringType");
  }

  static final boolean match$2951(Node m) {
    return null != m && m.hasName("IntegerLiteral");
  }

  static final boolean match$2955(Node m) {
    return null != m && m.hasName("IntType");
  }

  static final boolean match$2959(Node m) {
    return null != m && m.hasName("BooleanLiteral");
  }

  static final boolean match$2963(Node m) {
    return null != m && m.hasName("BooleanType");
  }

  static final boolean match$2967(Node m) {
    return null != m && m.hasName("FloatingLiteral");
  }

  static final boolean match$2971(Node m) {
    return null != m && m.hasName("Float64");
  }

  static final boolean match$2975(Node m) {
    return null != m && m.hasName("Float32");
  }

  static final boolean match$2984(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isWildcardT());
  }

  static final boolean match$2985(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isWildcardT());
  }

  static final boolean match$2986(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isBoolT()) && (null != m.get2() && m.get2().isBoolT());
  }

  static final boolean match$2987(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isIntT()) && (null != m.get2() && m.get2().isIntT());
  }

  static final boolean match$2988(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isStringT()) && (null != m.get2() && m.get2().isStringT());
  }

  static final boolean match$2989(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFloat32T()) && (null != m.get2() && m.get2().isFloat32T());
  }

  static final boolean match$2990(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFloat64T()) && (null != m.get2() && m.get2().isFloat64T());
  }

  static final boolean match$2991(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isNodeTypeT()) && (null != m.get2() && m.get2().isNodeTypeT());
  }

  static final boolean match$2992(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isStringT()) && (null != m.get2() && m.get2().isAnyT());
  }

  static final boolean match$2993(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isAnyT()) && (null != m.get2() && m.get2().isStringT());
  }

  static final boolean match$2994(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isAnyT());
  }

  static final boolean match$2995(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isAnyT());
  }

  static final boolean match$2996(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isNodeTypeT());
  }

  static final boolean match$2997(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isNodeTypeT());
  }

  static final boolean match$2998(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTypeName()) && (null != m.get2() && m.get2().isTypeName());
  }

  static final boolean match$2999(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTypeName());
  }

  static final boolean match$3000(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isTypeName());
  }

  static final boolean match$3001(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariableT()) && (null != m.get2() && m.get2().isVariableT());
  }

  static final boolean match$3002(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariableT());
  }

  static final boolean match$3003(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isVariableT());
  }

  static final boolean match$3004(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isPairOfType()) && (null != m.get2() && m.get2().isPairOfType());
  }

  static final boolean match$3005(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFieldT()) && (null != m.get2() && m.get2().isFieldT());
  }

  static final boolean match$3006(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFieldT());
  }

  static final boolean match$3007(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isFieldT());
  }

  static final boolean match$3008(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isRecordT()) && (null != m.get2() && m.get2().isRecordT());
  }

  static final boolean match$3009(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTupleT()) && (null != m.get2() && m.get2().isTupleT());
  }

  static final boolean match$3010(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructedT()) && (null != m.get2() && m.get2().isConstructedT());
  }

  static final boolean match$3011(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructedT() && "var".equals(m.get1().getTuple().get2()));
  }

  static final boolean match$3012(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isConstructedT() && "var".equals(m.get2().getTuple().get2()));
  }

  static final boolean match$3013(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isPolyVariantT());
  }

  static final boolean match$3014(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get2() && m.get2().isPolyVariantT());
  }

  static final boolean match$3015(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariantT()) && (null != m.get2() && m.get2().isVariantT());
  }

  static final boolean match$3017(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructorT()) && (null != m.get2() && m.get2().isConstructorT());
  }

  static final boolean match$3022(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariantT()) && (null != m.get2() && m.get2().isConstructorT());
  }

  static final boolean match$3029(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructorT()) && (null != m.get2() && m.get2().isVariantT());
  }

  static final boolean match$3031(Tuple.T2<TypicalTypes.raw_type<?>, TypicalTypes.raw_type<?>> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFunctionT()) && (null != m.get2() && m.get2().isFunctionT());
  }

  static final boolean match$3096(Node m) {
    return null != m && m.hasName("TypeDefinition");
  }

  static final boolean match$3108(Node m) {
    return null != m && m.hasName("AttributeDefinition");
  }

  static final boolean match$3112(Node m) {
    return null != m && m.hasName("EqualAttributeDefinition");
  }

  static final boolean match$3138(Node m) {
    return null != m && m.hasName("ScopeDefinition");
  }

  static final boolean match$3142(Node m) {
    return null != m && m.hasName("NameSpaceDefinition");
  }

  static final boolean match$3187(Pair<TypicalTypes.call> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3254(Pair<String> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3262(Node m) {
    return null != m && m.hasName("PolyVariantDeclaration");
  }

  static final boolean match$3276(Pair<TypicalTypes.entry> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3280(Node m) {
    return null != m && m.hasName("LetBinding") && m.size() == 2;
  }

  static final boolean match$3282(Node m) {
    return null != m && m.hasName("TypedPattern") && m.size() == 2 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("Variable"));
  }

  static final boolean match$3338(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructedT() && "var".equals(m.getTuple().get2());
  }

  static final boolean match$3346(TypicalTypes.raw_type<?> m) {
    return null != m && m.isConstructedT() && "list".equals(m.getTuple().get2());
  }

  static final boolean match$3376(TypicalTypes.raw_type<?> m) {
    return null != m && m.isStringList();
  }

  static final boolean match$3421(Node m) {
    return null != m && m.hasName("TypeParameters") && m.size() >= 0;
  }

  static final boolean match$3425(Node m) {
    return null != m && m.hasName("NaryType") && m.size() >= 0;
  }

  static final boolean match$3429(Node m) {
    return null != m && m.hasName("Arguments") && m.size() >= 0;
  }

  static final boolean match$3437(Node m) {
    return null != m && m.hasName("LetBindings") && m.size() >= 0;
  }

  static final boolean match$3441(Node m) {
    return null != m && m.hasName("PatternMatch") && m.size() == 2 && (null != m.getGeneric(0) && m.getGeneric(0).hasName("Patterns") && m.getGeneric(0).size() >= 0);
  }

  static final boolean match$3520(Node m) {
    return null != m && m.hasName("PatternParameters") && m.size() >= 0;
  }

  static final boolean match$3979(TypicalTypes.raw_type<?> m) {
    return null != m && m.isStringName();
  }

  static final boolean match$3985(Pair<?> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$3986(Pair<?> m) {
    return m.size() == 1;
  }

  static final boolean match$4006(TypicalTypes.raw_type<?> m) {
    return null != m && m.isVariableT() && Boolean.TRUE.equals(m.getTuple().get2());
  }

  static final boolean match$4211(Pair<Node> m) {
    return m.size() == 2 && (null != m.get(1) && m.get(1).hasName("Arguments"));
  }

  static final boolean match$4212(Pair<Node> m) {
    return m.size() == 3 && (null != m.get(0) && m.get(0).hasName("UpperID")) && (null != m.get(1) && m.get(1).hasName("LowerID")) && (null != m.get(2) && m.get(2).hasName("Arguments") && m.get(2).size() >= 0);
  }

  static final boolean match$4296(Pair<Pair<String>> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$4388(Pair<String> m) {
    return m.size() == 1;
  }

  static final boolean match$4652(Node m) {
    return null != m && m.hasName("Variable");
  }

  static final boolean match$4656(Node m) {
    return null != m && m.hasName("MessageTag");
  }

  static final boolean match$4660(Node m) {
    return null != m && m.hasName("ReduceOptions");
  }

  static final boolean match$4664(Node m) {
    return null != m && m.hasName("LowerID");
  }

  static final boolean match$4668(Node m) {
    return null != m && m.hasName("UpperID");
  }

  static final boolean match$4672(Node m) {
    return null != m && m.hasName("UserDefinedType");
  }

  static final boolean match$4676(Node m) {
    return null != m && m.hasName("TypeVariable");
  }

  static final boolean match$4761(Node m) {
    return null != m && m.hasName("StringLiteral") && m.size() == 1;
  }

  static final boolean match$4765(Node m) {
    return null != m && m.hasName("IntegerLiteral") && m.size() == 1;
  }

  static final boolean match$4769(Node m) {
    return null != m && m.hasName("FloatingLiteral") && m.size() == 1;
  }

  static final boolean match$4773(Node m) {
    return null != m && m.hasName("BooleanLiteral") && m.size() == 1;
  }

  static final boolean match$4786(Pair<TypicalTypes.patternRecord> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$4817(TypicalTypes.pattern m) {
    return null != m && m.isWildCardPattern();
  }

  static final boolean match$4819(TypicalTypes.pattern m) {
    return null != m && m.isVariablePattern();
  }

  static final boolean match$4820(TypicalTypes.pattern m) {
    return null != m && m.isBotPattern();
  }

  static final boolean match$4827(TypicalTypes.pattern m) {
    return null != m && m.isConstantPattern();
  }

  static final boolean match$4831(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isStringValue()) && (null != m.get2() && m.get2().isStringValue());
  }

  static final boolean match$4832(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isFloatValue()) && (null != m.get2() && m.get2().isFloatValue());
  }

  static final boolean match$4833(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isIntValue()) && (null != m.get2() && m.get2().isIntValue());
  }

  static final boolean match$4834(Tuple.T2<TypicalTypes.value, TypicalTypes.value> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isBoolValue()) && (null != m.get2() && m.get2().isBoolValue());
  }

  static final boolean match$4858(TypicalTypes.pattern m) {
    return null != m && m.isTupPattern();
  }

  static final boolean match$4865(TypicalTypes.pattern m) {
    return null != m && m.isConstructorPattern();
  }

  static final boolean match$4872(TypicalTypes.pattern m) {
    return null != m && m.isEmptyPattern();
  }

  static final boolean match$4879(TypicalTypes.pattern m) {
    return null != m && m.isPairPattern();
  }

  static final boolean match$4886(TypicalTypes.pattern m) {
    return null != m && m.isRecPattern();
  }

  static final boolean match$4893(TypicalTypes.pattern m) {
    return null != m && m.isRecFieldPattern();
  }

  static final boolean match$4992(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isVariablePattern()) && (null != m.get2() && m.get2().isVariablePattern());
  }

  static final boolean match$4993(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isBotPattern()) && (null != m.get2() && m.get2().isBotPattern());
  }

  static final boolean match$4994(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstantPattern()) && (null != m.get2() && m.get2().isConstantPattern());
  }

  static final boolean match$5007(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isTupPattern()) && (null != m.get2() && m.get2().isTupPattern());
  }

  static final boolean match$5008(Tuple.T2<TypicalTypes.pattern, TypicalTypes.pattern> m) {
    return null != m && m.size() == 2 && (null != m.get1() && m.get1().isConstructorPattern()) && (null != m.get2() && m.get2().isConstructorPattern());
  }

  static final boolean match$5073(Pair<Pair<TypicalTypes.patternRecord>> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$5096(TypicalTypes.result m) {
    return null != m && m.isNone();
  }

  static final boolean match$5097(TypicalTypes.result m) {
    return null != m && m.isSome();
  }

  static final boolean match$5105(Pair<TypicalTypes.constr> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$5108(TypicalTypes.constr m) {
    return null != m && m.isWildConstr();
  }

  static final boolean match$5136(TypicalTypes.constr m) {
    return null != m && m.isBotConstr();
  }

  static final boolean match$5138(TypicalTypes.constr m) {
    return null != m && m.isConst();
  }

  static final boolean match$5139(TypicalTypes.constr m) {
    return null != m && m.isEmptyConstr();
  }

  static final boolean match$5140(TypicalTypes.constr m) {
    return null != m && m.isRecordConstr();
  }

  static final boolean match$5141(TypicalTypes.constr m) {
    return null != m && m.isTupleConstr();
  }

  static final boolean match$5148(TypicalTypes.constr m) {
    return null != m && m.isPairConstr();
  }

  static final boolean match$5155(TypicalTypes.constr m) {
    return null != m && m.isCConstr();
  }

  static final boolean match$5216(Pair<TypicalTypes.pattern> m) {
    return null != m && ((Pair)m).isEmpty();
  }

  static final boolean match$5246(TypicalTypes.value m) {
    return null != m && m.isBoolValue();
  }

  static final boolean match$5300(TypicalTypes.value m) {
    return null != m && m.isIntValue();
  }

  static final boolean match$5301(TypicalTypes.value m) {
    return null != m && m.isFloatValue();
  }

  static final boolean match$5302(TypicalTypes.value m) {
    return null != m && m.isStringValue();
  }

  static final boolean match$5390(Pair<TypicalTypes.pattern> m) {
    return m.size() == 1;
  }

  static final boolean match$5395(Pair<TypicalTypes.patternRecord> m) {
    return m.size() == 1;
  }

  private TypicalSupport() {
  }
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2010 Sun Microsystems, Inc.
 */

package org.netbeans.modules.java.editor.ext.refactoring.dataflow;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import org.netbeans.api.java.source.UiUtils;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd="-//org.netbeans.modules.java.editor.ext.refactoring.dataflow//DataFlow//EN",
    autostore=false
)
public final class DataFlowTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static DataFlowTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "DataFlowTopComponent";
    
    private final BeanTreeView beanTreeView;
    private final ExplorerManager manager = new ExplorerManager();
    
    public DataFlowTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DataFlowTopComponent.class, "CTL_DataFlowTopComponent"));
        setToolTipText(NbBundle.getMessage(DataFlowTopComponent.class, "HINT_DataFlowTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        beanTreeView = new BeanTreeView();
        result.setLayout(new BorderLayout());
        result.add(beanTreeView, BorderLayout.CENTER);

        manager.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName() != null && !ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                    return;
                }
                
                Node[] selected = manager.getSelectedNodes();

                if (selected.length == 1) {
                    UseDescription use = selected[0].getLookup().lookup(UseDescription.class);

                    if (use != null) {
                        UiUtils.open(use.tph.getFileObject(), use.offset);
                    }
                }
            }
        });
        
        updateNodes();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showValues = new javax.swing.JToggleButton();
        result = new javax.swing.JPanel();
        refresh = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();

        showValues.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/java/editor/ext/refactoring/resources/sort_by_values.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(showValues, org.openide.util.NbBundle.getMessage(DataFlowTopComponent.class, "DataFlowTopComponent.showValues.text")); // NOI18N
        showValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showValuesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resultLayout = new javax.swing.GroupLayout(result);
        result.setLayout(resultLayout);
        resultLayout.setHorizontalGroup(
            resultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 314, Short.MAX_VALUE)
        );
        resultLayout.setVerticalGroup(
            resultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );

        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/java/editor/ext/refactoring/resources/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(refresh, org.openide.util.NbBundle.getMessage(DataFlowTopComponent.class, "DataFlowTopComponent.refresh.text")); // NOI18N
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/java/editor/ext/refactoring/resources/follow_in_editor.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jToggleButton1, org.openide.util.NbBundle.getMessage(DataFlowTopComponent.class, "DataFlowTopComponent.jToggleButton1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToggleButton1, 0, 0, Short.MAX_VALUE)
                    .addComponent(showValues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showValues)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showValuesActionPerformed
        updateNodes();
    }//GEN-LAST:event_showValuesActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        updateNodes();
    }//GEN-LAST:event_refreshActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton refresh;
    private javax.swing.JPanel result;
    private javax.swing.JToggleButton showValues;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized DataFlowTopComponent getDefault() {
        if (instance == null) {
            instance = new DataFlowTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the DataFlowTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DataFlowTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DataFlowTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DataFlowTopComponent) {
            return (DataFlowTopComponent) win;
        }
        Logger.getLogger(DataFlowTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        DataFlowTopComponent singleton = DataFlowTopComponent.getDefault();
        singleton.readPropertiesImpl(p);
        return singleton;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    private UseDescription currentRoot;

    public void setContext(UseDescription use) {
        this.currentRoot = use;
        updateNodes();
    }

    private void updateNodes() {
        if (this.currentRoot == null) {
            refresh.setEnabled(false);
            showValues.setEnabled(false);
            jToggleButton1.setEnabled(false);
            beanTreeView.setRootVisible(false);
            return;
        }
        
        refresh.setEnabled(true);
        showValues.setEnabled(true);
        jToggleButton1.setEnabled(true);
            
        if (showValues.isSelected()) {
            manager.setRootContext(new ValuesNode(this.currentRoot));
            beanTreeView.setRootVisible(false);
        } else {
            manager.setRootContext(new UseDescriptionNode(this.currentRoot));
            beanTreeView.setRootVisible(true);
        }
    }
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 2009 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.java.editor.ext.fold.options;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.EnumMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.java.editor.ext.fold.FoldTypes;
import org.openide.util.NbBundle;

final class JavaExtEditorPanel extends javax.swing.JPanel {

    private final JavaExtEditorOptionsPanelController controller;

    JavaExtEditorPanel(JavaExtEditorOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        foldsPanel.setLayout(new GridBagLayout());

        for (final FoldTypes type : FoldTypes.values()) {
            GridBagConstraints c;

            c = new GridBagConstraints();
            c.anchor = GridBagConstraints.NORTHWEST;
            c.gridx = 0;
            c.gridy = 2 * type.ordinal();
            c.gridwidth = 1;
            c.gridheight = 1;
            c.fill = GridBagConstraints.HORIZONTAL;
            c.weightx = 1.0;

            final JCheckBox enabled = new JCheckBox(type.getDisplayName());
            final JCheckBox collapsed = new JCheckBox(NbBundle.getMessage(JavaExtEditorPanel.class, "CB_CollapseByDefault"));

            foldType2Enabled.put(type, enabled);
            foldsPanel.add(enabled, c);

            enabled.addChangeListener(new ChangeListener() {

                public void stateChanged(ChangeEvent e) {
                    collapsed.setEnabled(enabled.isSelected());
                }
            });

            c = new GridBagConstraints();
            c.anchor = GridBagConstraints.NORTHWEST;
            c.gridx = 0;
            c.gridy = 2 * type.ordinal() + 1;
            c.gridwidth = 1;
            c.gridheight = 1;
            c.insets = new Insets(0, 20, 0, 0);
            c.fill = GridBagConstraints.HORIZONTAL;
            c.weightx = 1.0;

            foldType2CollapsedByDefault.put(type, collapsed);
            foldsPanel.add(collapsed, c);
        }

        GridBagConstraints c;

        c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = FoldTypes.values().length * 2 + 1;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.fill = GridBagConstraints.VERTICAL | GridBagConstraints.HORIZONTAL;
        c.weightx = 1.0;
        c.weighty = 1.0;

        foldsPanel.add(new JPanel(), c);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        foldsPanel = new javax.swing.JPanel();

        foldsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JavaExtEditorPanel.class, "LBL_FoldPanel"))); // NOI18N

        javax.swing.GroupLayout foldsPanelLayout = new javax.swing.GroupLayout(foldsPanel);
        foldsPanel.setLayout(foldsPanelLayout);
        foldsPanelLayout.setHorizontalGroup(
            foldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );
        foldsPanelLayout.setVerticalGroup(
            foldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        for (Entry<FoldTypes, JCheckBox> e : foldType2Enabled.entrySet()) {
            e.getValue().setSelected(e.getKey().enabled());
        }
        for (Entry<FoldTypes, JCheckBox> e : foldType2CollapsedByDefault.entrySet()) {
            e.getValue().setEnabled(e.getKey().enabled());
            e.getValue().setSelected(e.getKey().collapsed());
        }
    }

    void store() {
        for (Entry<FoldTypes, JCheckBox> e : foldType2Enabled.entrySet()) {
            e.getKey().setEnabled(e.getValue().isSelected());
        }
        for (Entry<FoldTypes, JCheckBox> e : foldType2CollapsedByDefault.entrySet()) {
            e.getKey().setCollapsed(e.getValue().isSelected());
        }
    }

    boolean valid() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel foldsPanel;
    // End of variables declaration//GEN-END:variables

    private final Map<FoldTypes, JCheckBox> foldType2Enabled = new EnumMap<FoldTypes, JCheckBox>(FoldTypes.class);
    private final Map<FoldTypes, JCheckBox> foldType2CollapsedByDefault = new EnumMap<FoldTypes, JCheckBox>(FoldTypes.class);
}

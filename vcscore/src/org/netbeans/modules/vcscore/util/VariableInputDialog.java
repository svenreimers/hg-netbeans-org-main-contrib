/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.vcscore.util;

import java.util.*;
import java.awt.event.*;
import java.io.*;

import org.openide.TopManager;

import org.netbeans.modules.vcscore.VcsFileSystem;
import org.netbeans.modules.vcscore.commands.*;

/**
 * Dialog that enables users to set variable values before running the command.
 *
 * @author  Martin Entlicher
 */
public class VariableInputDialog extends javax.swing.JDialog {

    public static final String PROMPT_DIR = "_DIR";
    public static final String PROMPT_FILE = "_FILE";
    public static final String PROMPT_DATE_CVS = "_DATE_CVS";
    public static final String PROMPT_DEFAULT_VALUE_SEPARATOR = "\"";
    
    private static final int TEXTFIELD_COLUMNS = 20;
    private static final int TEXTAREA_COLUMNS = 40;
    private static final int TEXTAREA_ROWS = 6;
    private boolean validInput = false;
    private javax.swing.JLabel[] varPromptLabels = new javax.swing.JLabel[0];
    private javax.swing.JLabel[] filePromptLabels = new javax.swing.JLabel[0];
    private javax.swing.JLabel[] userPromptLabels = new javax.swing.JLabel[0];
    private String[]             userPromptLabelTexts = null;
    private javax.swing.JTextArea[] filePromptAreas = new javax.swing.JTextArea[0];
    private javax.swing.JTextField[] varPromptFields = new javax.swing.JTextField[0];
    private javax.swing.JTextField[] userPromptFields = new javax.swing.JTextField[0];
    private javax.swing.JCheckBox[] varAskCheckBoxes = new javax.swing.JCheckBox[0];
    private int labelOffset = 0;
    private String[] fileNames = new String[0];
    
    private VariableInputDialog.FilePromptDocumentListener docListener = null;
    private Object docIdentif = null;
    
    private VcsFileSystem fileSystem = null;
    private Hashtable vars = null;

    static final long serialVersionUID = 8363935602008486018L;
    /** Creates new form VariableInputDialog */
    public VariableInputDialog(java.awt.Frame parent, boolean modal) {
        this(parent, modal, null);
        /*
        super (parent, modal);
        initComponents ();
        getRootPane().setDefaultButton(okButton);
        cancelButton.setMnemonic(KeyEvent.VK_C);
        promptEachCheckBox.setMnemonic(KeyEvent.VK_P);
        setTitle(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.title"));
        pack ();
         */
    }

    /**
     * Creates VariableInputDialog.
     * @param parent the frame from which the dialog is displayed
     * @param modal true for a modal dialog, false for one that allows others windows to be active at the same time
     * @param file the name of the file for which we request input. If file ends with java.io.File.separator, it is supposed to be a folder.
     */
    public VariableInputDialog(java.awt.Frame parent, boolean modal, String file) {
        super (parent, modal);
        initComponents ();
        initFileLabel(file);
        getRootPane().setDefaultButton(okButton);
        cancelButton.setMnemonic(KeyEvent.VK_C);
        promptEachCheckBox.setMnemonic(KeyEvent.VK_P);
        setTitle(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.title"));
        pack ();
    }
    
    public void setFilePromptDocumentListener(VariableInputDialog.FilePromptDocumentListener docListener) {
        this.docListener = docListener;
    }
    
    public void setFilePromptDocumentListener(VariableInputDialog.FilePromptDocumentListener docListener, Object docIdentif) {
        this.docListener = docListener;
        this.docIdentif = docIdentif;
    }
    
    public VariableInputDialog.FilePromptDocumentListener getFilePromptDocumentListener() {
        return this.docListener;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        inputPanel = new javax.swing.JPanel();
        variablePanel = new javax.swing.JPanel();
        promptEachSeparator = new javax.swing.JSeparator();
        promptEachCheckBox = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        }
        );
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        }
        );
        
        inputPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        inputPanel.setBorder(new javax.swing.border.EtchedBorder());
        
        variablePanel.setLayout(new java.awt.GridBagLayout());
          java.awt.GridBagConstraints gridBagConstraints3;
          gridBagConstraints2 = new java.awt.GridBagConstraints();
          gridBagConstraints2.gridy = 1;
          gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
          gridBagConstraints2.insets = new java.awt.Insets(8, 8, 0, 8);
          gridBagConstraints2.weightx = 1.0;
          gridBagConstraints2.weighty = 1.0;
          inputPanel.add(variablePanel, gridBagConstraints2);
          
          
        gridBagConstraints2 = new java.awt.GridBagConstraints();
          gridBagConstraints2.gridy = 2;
          gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
          gridBagConstraints2.insets = new java.awt.Insets(0, 8, 0, 8);
          gridBagConstraints2.weightx = 1.0;
          inputPanel.add(promptEachSeparator, gridBagConstraints2);
          
          
        promptEachCheckBox.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/util/Bundle").getString("VariableInputDialog.promptEachCheckBox.text"));
          gridBagConstraints2 = new java.awt.GridBagConstraints();
          gridBagConstraints2.gridy = 3;
          gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
          gridBagConstraints2.insets = new java.awt.Insets(8, 8, 8, 8);
          gridBagConstraints2.weightx = 1.0;
          inputPanel.add(promptEachCheckBox, gridBagConstraints2);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(8, 8, 8, 8);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane().add(inputPanel, gridBagConstraints1);
        
        
        buttonPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints4;
        
        okButton.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/util/Bundle").getString("VariableInputDialog.okButton.text"));
          okButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  okButtonActionPerformed(evt);
              }
          }
          );
          gridBagConstraints4 = new java.awt.GridBagConstraints();
          gridBagConstraints4.weightx = 1.0;
          buttonPanel.add(okButton, gridBagConstraints4);
          
          
        cancelButton.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/util/Bundle").getString("VariableInputDialog.cancelButton.text"));
          cancelButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  cancelButtonActionPerformed(evt);
              }
          }
          );
          gridBagConstraints4 = new java.awt.GridBagConstraints();
          gridBagConstraints4.weightx = 1.0;
          buttonPanel.add(cancelButton, gridBagConstraints4);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(0, 8, 8, 8);
        gridBagConstraints1.weightx = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints1);
        
    }//GEN-END:initComponents

    private void formKeyPressed (java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // Add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cancelButtonActionPerformed(null);
        }
    }//GEN-LAST:event_formKeyPressed

    private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Add your handling code here:
        validInput = false;
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // Add your handling code here:
        validInput = true;
        writeFileContents();
        closeDialog(null);
    }//GEN-LAST:event_okButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible (false);
        fileSystem = null; // Free the reference to the file system
        docIdentif = null;
        docListener = null;
        dispose ();
    }//GEN-LAST:event_closeDialog



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel inputPanel;
    private javax.swing.JPanel variablePanel;
    private javax.swing.JSeparator promptEachSeparator;
    private javax.swing.JCheckBox promptEachCheckBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton cancelButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Set the VCS file system, that is needed to execute the selector command
     * and the variables table.
     */
    public void setVCSFileSystem(VcsFileSystem fileSystem, Hashtable vars) {
        this.fileSystem = fileSystem;
        this.vars = vars;
    }
    
    /**
     * Set the display name of the command, that needs the input.
     * The title of this dialog contains that name.
     * @param displayName the display name of the command
     */
    public void setCommandDisplayName(String displayName) {
        setTitle(java.text.MessageFormat.format(
            org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.titleWithName"),
            new Object[] { displayName }
            ));
    }

    /**
     * Set the file name.
     */
    private void initFileLabel(String file) {
        if (file == null || file.trim().length() == 0) return;
        javax.swing.JLabel label;
        if (file.endsWith(java.io.File.separator)) {
            file = file.substring(0, file.length() - 1);
            if (file.trim().length() == 0) return;
            label = new javax.swing.JLabel(
                java.text.MessageFormat.format(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.folderLabel"),
                                               new Object[] { file }));
        } else {
            label = new javax.swing.JLabel(
                java.text.MessageFormat.format(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.fileLabel"),
                                               new Object[] { file }));
        }
        java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints ();
        //gridBagConstraints1.gridx = 0;
        //gridBagConstraints1.gridy = i + labelOffset;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints1.insets = new java.awt.Insets (8, 8, 0, 8);
        inputPanel.add(label, gridBagConstraints1, 0);
        pack();
    }
        
    /**
     * Show the dialog and wait for user input.
     * @return <code>true</code> if OK,
     *         <code>false</code> if dialog was canceled
     */
    public boolean showDialog() {
        VcsUtilities.centerWindow(this);
        show();
        return validInput;
    }

    /**
     * Create variable labels and text fields.
     */
    public void setVarPromptLabels(Table varLabels) {
        Vector labels = new Vector();
        Vector fields = new Vector();
        //for(int i = 0; i < varLabels.size(); i++) {
        int i = 0;
        for(Enumeration enum = varLabels.keys(); enum.hasMoreElements(); i++) {
            String varLabel = (String) enum.nextElement();
            String varType = (String) varLabels.get(varLabel);
            javax.swing.JLabel label = new javax.swing.JLabel(varLabel+":");
            javax.swing.JTextField field = new javax.swing.JTextField(TEXTFIELD_COLUMNS);
            java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints ();
            java.awt.GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints1.gridx = 0;
            gridBagConstraints1.gridy = i + labelOffset;
            gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints1.insets = new java.awt.Insets (0, 0, 8, 8);
            gridBagConstraints2.gridx = 1;
            gridBagConstraints2.gridy = i + labelOffset;
            gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints2.weightx = 1.0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 8, 0);
            variablePanel.add(label, gridBagConstraints1);
            variablePanel.add(field, gridBagConstraints2);
            labels.addElement(label);
            fields.addElement(field);
            if (varType.startsWith(PROMPT_DEFAULT_VALUE_SEPARATOR)) {
                int index = varType.indexOf(PROMPT_DEFAULT_VALUE_SEPARATOR, 1);
                if (index > 0) {
                    String defaultValue = varType.substring(PROMPT_DEFAULT_VALUE_SEPARATOR.length(), index);
                    field.setText(defaultValue);
                    varType = varType.substring(index + PROMPT_DEFAULT_VALUE_SEPARATOR.length());
                }
            }
            VcsUtilities.removeEnterFromKeymap(field);
            if (PROMPT_DIR.equals(varType)) {
                addBrowseDir(variablePanel, field, i + labelOffset);
            } else if (PROMPT_DATE_CVS.equals(varType)) {
                addDateCVS(variablePanel, field, i + labelOffset);
            } else if (varType.startsWith("[") && varType.endsWith("]")) {
                addSelector(variablePanel, field, i + labelOffset,
                            varType.substring(1, varType.length() - 1));
            }
        }
        labelOffset += i;
        pack();
        this.varPromptLabels = (javax.swing.JLabel[]) labels.toArray(new javax.swing.JLabel[0]);
        this.varPromptFields = (javax.swing.JTextField[]) fields.toArray(new javax.swing.JTextField[0]);
    }
    
    private void addBrowseDir(final javax.swing.JPanel panel, final javax.swing.JTextField field, int y) {
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints ();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = y;
        gridBagConstraints.insets = new java.awt.Insets (0, 8, 8, 0);
        javax.swing.JButton button = new javax.swing.JButton(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.Browse"));
        panel.add(button, gridBagConstraints);
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseDirDialog chooseDir = new ChooseDirDialog(new javax.swing.JFrame(), new File(field.getText ()));
                VcsUtilities.centerWindow (chooseDir);
                chooseDir.show();
                String selected = chooseDir.getSelectedDir();
                if (selected == null) {
                    //D.deb("no directory selected"); // NOI18N
                    return ;
                }
                field.setText(selected);
            }
        });
    }
    
    private void addDateCVS(final javax.swing.JPanel panel, final javax.swing.JTextField field, int y) {
        field.setToolTipText(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.DateCVS"));
    }

    private void addSelector(final javax.swing.JPanel panel, final javax.swing.JTextField field, int y,
                             final String commandName) {
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints ();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = y;
        gridBagConstraints.insets = new java.awt.Insets (0, 8, 8, 0);
        javax.swing.JButton button = new javax.swing.JButton(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.Select"));
        panel.add(button, gridBagConstraints);
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Thread selection = new Thread("VCS Variable Selector Command") {
                    public void run() {
                        String selected = getSelectorText(commandName, field.getText());
                        //System.out.println("selected = "+selected);
                        if (selected != null) {
                            field.setText(selected);
                        }
                    }
                };
                selection.start();
            }
        });
    }
    
    private String getSelectorText(String commandName, String oldText) {
        VcsCommand cmd = fileSystem.getCommand(commandName);
        //OutputContainer container = new OutputContainer(cmd);
        VcsCommandExecutor ec = fileSystem.getVcsFactory().getCommandExecutor(cmd, vars);
        //ec.setErrorNoRegexListener(container);
        //ec.setOutputNoRegexListener(container);
        //ec.setErrorContainer(container);
        final StringBuffer selectorOutput = new StringBuffer();
        final boolean[] selectorMatched = new boolean[] { false };
        ec.addDataOutputListener(new CommandDataOutputListener() {
            public void outputData(String[] elements) {
                System.out.println("getSelectorText(): match = "+elements);
                if (elements != null) {
                    System.out.println("match:'"+VcsUtilities.array2string(elements).trim()+"'");
                    selectorMatched[0] = true;
                    selectorOutput.append(VcsUtilities.array2string(elements).trim());
                }
            }
        });
        CommandsPool pool = fileSystem.getCommandsPool();
        int preprocessStatus = pool.preprocessCommand(ec, vars);
        if (preprocessStatus != CommandsPool.PREPROCESS_DONE) return null;
        pool.startExecutor(ec);
        pool.waitToFinish(ec);
        if (ec.getExitStatus() == VcsCommandExecutor.SUCCEEDED
            && selectorMatched[0]) {
            return selectorOutput.toString();
        } else return null;
    }

    /**
     * Create variable labels and check boxes.
     */
    public void setVarAskLabels(String[] varLabels) {
        Vector chboxes = new Vector();
        for(int i = 0; i < varLabels.length; i++) {
            javax.swing.JCheckBox chbox = new javax.swing.JCheckBox(" "+varLabels[i]);
            java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints ();
            gridBagConstraints1.gridx = 0;
            gridBagConstraints1.gridy = i + labelOffset;
            gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints1.insets = new java.awt.Insets (0, 0, 8, 0);
            variablePanel.add(chbox, gridBagConstraints1);
            chboxes.addElement(chbox);
        }
        labelOffset += varLabels.length;
        pack();
        this.varAskCheckBoxes = (javax.swing.JCheckBox[]) chboxes.toArray(new javax.swing.JCheckBox[0]);
    }

    /**
     * Create file labels and text areas.
     */
    public void setFilePromptLabels(Hashtable filePrompts) {
        Vector fileLabels = new Vector();
        Vector areas = new Vector();
        Vector fileNames = new Vector();
        int i = 0;
        for(Enumeration enum = filePrompts.keys(); enum.hasMoreElements(); i++) {
            String message = (String) enum.nextElement();
            javax.swing.JLabel label = new javax.swing.JLabel(message+":");
            javax.swing.JTextArea area = new javax.swing.JTextArea(TEXTAREA_ROWS, TEXTAREA_COLUMNS);
            javax.swing.JScrollPane scrollArea = new javax.swing.JScrollPane(area);
            //javax.swing.JTextField field = new javax.swing.JTextField(TEXTFIELD_COLUMNS);
            java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints ();
            java.awt.GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints1.gridx = 0;
            gridBagConstraints1.gridy = 2*i + labelOffset;
            gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints1.insets = new java.awt.Insets (0, 0, 8, 0);
            gridBagConstraints1.gridwidth = 2;
            gridBagConstraints2.gridx = 0;
            gridBagConstraints2.gridy = 2*i + 1 + labelOffset;
            gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints2.weightx = 1.0;
            gridBagConstraints2.weighty = 1.0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 8, 0);
            gridBagConstraints2.gridwidth = 2;
            area.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
            variablePanel.add(label, gridBagConstraints1);
            variablePanel.add(scrollArea, gridBagConstraints2);
            fileLabels.addElement(label);
            areas.addElement(area);
            //VcsUtilities.removeEnterFromKeymap(field);
            fileNames.add(filePrompts.get(message));
        }
        labelOffset += 2*i;
        pack();
        this.filePromptLabels = (javax.swing.JLabel[]) fileLabels.toArray(new javax.swing.JLabel[0]);
        this.filePromptAreas = (javax.swing.JTextArea[]) areas.toArray(new javax.swing.JTextArea[0]);
        this.fileNames = (String[]) fileNames.toArray(new String[0]);
        initAreas();
    }

    /**
     * Create additional user labels and text fields.
     * @param varLabels Table of labels and default values.
     */
    public void setUserParamsPromptLabels(Table varLabels, String advancedName) {
        Vector labels = new Vector();
        Vector fields = new Vector();
	int i = 0;
	this.userPromptLabelTexts = new String[varLabels.size()];
        if (advancedName != null && varLabels.size() > 0) {
            javax.swing.JSeparator sep = new javax.swing.JSeparator();
            javax.swing.JLabel label = new javax.swing.JLabel(
                java.text.MessageFormat.format(org.openide.util.NbBundle.getBundle(VariableInputDialog.class).getString("VariableInputDialog.advancedNameLabel"),
                                               new Object[] { advancedName }));
            java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints ();
            java.awt.GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints1.gridwidth = 2;
            gridBagConstraints1.gridy = i + labelOffset;
            //gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints1.insets = new java.awt.Insets (0, 0, 8, 0);
            gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints1.weightx = 1.0;
            gridBagConstraints2.gridwidth = 2;
            gridBagConstraints2.gridy = i + labelOffset + 1;
            //gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
            //gridBagConstraints2.weightx = 1.0;
            gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 8, 0);
            variablePanel.add(sep, gridBagConstraints1);
            variablePanel.add(label, gridBagConstraints2);
            labelOffset += 2;
        }
        for(Enumeration enum = varLabels.keys(); enum.hasMoreElements(); i++) {
            String labelStr = (String) enum.nextElement();
            this.userPromptLabelTexts[i] = labelStr;
            javax.swing.JLabel label = new javax.swing.JLabel(labelStr+":");
            javax.swing.JTextField field = new javax.swing.JTextField(TEXTFIELD_COLUMNS);
            field.setText((String) varLabels.get(labelStr));
            java.awt.GridBagConstraints gridBagConstraints1 = new java.awt.GridBagConstraints ();
            java.awt.GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints ();
            gridBagConstraints1.gridx = 0;
            gridBagConstraints1.gridy = i + labelOffset;
            gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints1.insets = new java.awt.Insets (0, 0, 8, 8);
            gridBagConstraints2.gridx = 1;
            gridBagConstraints2.gridy = i + labelOffset;
            gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints2.weightx = 1.0;
            gridBagConstraints2.insets = new java.awt.Insets (0, 0, 8, 0);
            variablePanel.add(label, gridBagConstraints1);
            variablePanel.add(field, gridBagConstraints2);
            labels.addElement(label);
            fields.addElement(field);
            VcsUtilities.removeEnterFromKeymap(field);
        }
        labelOffset += varLabels.size();
        pack();
        this.userPromptLabels = (javax.swing.JLabel[]) labels.toArray(new javax.swing.JLabel[0]);
        this.userPromptFields = (javax.swing.JTextField[]) fields.toArray(new javax.swing.JTextField[0]);
    }

    /**
     * Set whether to show check box for prompt on next file. When not called default is true.
     * @param show true to show, false not to show
     */
    public void showPromptEach(boolean show) {
        promptEachCheckBox.setVisible(show);
        promptEachSeparator.setVisible(show);
        pack();
    }

    /**
     * Set whether the initial state of the check box for prompt on next file. When not called default is false.
     * @param prompt the initial state
     */
    public void setPromptEach(boolean prompt) {
        promptEachCheckBox.setSelected(prompt);
    }

    /**
     * Get the variable prompt values.
     */
    public String[] getVarPromptValues() {
        String[] varValues = new String[varPromptFields.length];
        for(int i = 0; i < varPromptFields.length; i++) {
            varValues[i] = varPromptFields[i].getText();
        }
        return varValues;
    }

    /**
     * Get the variable ask values.
     */
    public String[] getVarAskValues() {
        String[] varValues = new String[varAskCheckBoxes.length];
        for(int i = 0; i <  varAskCheckBoxes.length; i++) {
            varValues[i] = (varAskCheckBoxes[i].isSelected()) ? "true" : "";
        }
        return varValues;
    }

    /**
     * Get the table of additional user variables labels and values.
     */
    public Hashtable getUserParamsValuesTable() {
        Hashtable result = new Hashtable();
        for(int i = 0; i < userPromptLabels.length; i++) {
            result.put(userPromptLabelTexts[i], userPromptFields[i].getText());
        }
        return result;
    }

    /**
     * Whether to prompt for variables for each file separately or use these variables for all files.
     */
    public boolean getPromptForEachFile() {
        return promptEachCheckBox.isSelected();
    }
    
    /**
     * Read content of input files into Text Areas.
     */
    private void initAreas() {
        for(int i = 0; i < filePromptAreas.length; i++) {
            String name = fileNames[i];
            if (name.length() == 0) continue;
            File file = new File(name);
            if (file.exists() && file.canRead()) {
                try {
                    filePromptAreas[i].read(new FileReader(file), null);
                } catch (FileNotFoundException exc) {
                    TopManager.getDefault().notifyException(exc);
                } catch (IOException exc) {
                    TopManager.getDefault().notifyException(exc);
                }
            }
        }
    }
    
    private void writeFileContents() {
        for(int i = 0; i < filePromptAreas.length; i++) {
            if (docListener != null) docListener.filePromptDocumentCleanup(filePromptAreas[i], i, docIdentif);
            String name = fileNames[i];
            if (name.length() == 0) continue;
            File file = new File(name);
            try {
                filePromptAreas[i].write(new FileWriter(file));
            } catch (IOException exc) {
                TopManager.getDefault().notifyException(exc);
            }
        }
    }
    
    public interface FilePromptDocumentListener {
        public void filePromptDocumentCleanup(javax.swing.JTextArea ta, int promptNum, Object docIdentif);
    }
}

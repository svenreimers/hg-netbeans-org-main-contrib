/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.vcscore.search;

import org.openide.util.NbBundle;

import java.beans.*;
/**
 *
 * @author  Martin Entlicher
 * @version
 */
public class VcsSearchCustomizer extends javax.swing.JPanel implements Customizer {

    VcsSearchType peer;

    public static final long serialVersionUID = 23757326789765789L;

    /** Creates new customizer VcsSearchCustomizer */
    public VcsSearchCustomizer() {
        initComponents ();
        localizeComponents();
        initAccessibility();
    }

    private void initAccessibility() {
        findExceptCheckBox.getAccessibleContext().setAccessibleDescription(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/search/Bundle").getString("ACS_VcsSearchCustomizer.findExceptCheckBox.text"));
        statusList.getAccessibleContext().setAccessibleName(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/search/Bundle").getString("ACSN_VcsSearchCustomizer.statusList.text"));
        statusList.getAccessibleContext().setAccessibleDescription(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/search/Bundle").getString("ACSD_VcsSearchCustomizer.statusList.text"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        statusList = new javax.swing.JList();
        findExceptCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.TitledBorder(""));
        statusList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                statusListMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(statusList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(jScrollPane1, gridBagConstraints);

        findExceptCheckBox.setMnemonic((java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/search/Bundle").getString("VcsSearchCustomizer.findExceptCheckBox.text_mnem")).charAt(0));
        findExceptCheckBox.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/vcscore/search/Bundle").getString("VcsSearchCustomizer.findExceptCheckBox.text"));
        findExceptCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findExceptCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        add(findExceptCheckBox, gridBagConstraints);

    }//GEN-END:initComponents

  private void statusListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusListMouseReleased
// Add your handling code here:
    peer.setStatusIndexes(statusList.getSelectedIndices());
  }//GEN-LAST:event_statusListMouseReleased

  private void findExceptCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findExceptCheckBoxActionPerformed
// Add your handling code here:
    peer.setMatchExcept(findExceptCheckBox.isSelected());
  }//GEN-LAST:event_findExceptCheckBoxActionPerformed

    private void localizeComponents() {
        javax.swing.border.TitledBorder border = (javax.swing.border.TitledBorder) this.getBorder();
        border.setTitle(NbBundle.getBundle(VcsSearchType.class).getString ("VcsSearchCustomizer.findExceptCheckBox.borderTitle"));
    }

    private void fillStatuses(String[] statuses) {
        javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
        for(int i = 0; i < statuses.length; i++) {
            listModel.addElement(statuses[i]);
        }
        statusList.setModel(listModel);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList statusList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox findExceptCheckBox;
    // End of variables declaration//GEN-END:variables

    public void setObject(final Object obj) {
        peer = (VcsSearchType) obj;
        //statusTextField.setText(peer.getMatchStatus());
        findExceptCheckBox.setSelected(peer.getMatchExcept());
        fillStatuses(peer.getStatuses());
        if (peer.getStatusIndexes() != null) {
            statusList.setSelectedIndices(peer.getStatusIndexes());
            peer.setStatusIndexes(statusList.getSelectedIndices());
            // hack to put peer in the right state..
        }
    }

    public void addPropertyChangeListener(final java.beans.PropertyChangeListener p1) {
    }

    public void removePropertyChangeListener(final java.beans.PropertyChangeListener p1) {
    }

}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.gwtsupport;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;

/**
 * @author Tomas.Zezula@Sun.COM
 * @author Tomasz.Slota@Sun.COM
 */
public class GWTConfigPanelVisual extends javax.swing.JPanel {
    private GWTConfigPanel controller;
    private ChangeNotifier changeNotifier = new ChangeNotifier();
    
    /** Creates new form GWTConfigPanelVisual */
    public GWTConfigPanelVisual(GWTConfigPanel controller) {
        this.controller = controller;
        initComponents();
        gwtFolder.getDocument().addDocumentListener(changeNotifier);
        gwtModule.getDocument().addDocumentListener(changeNotifier);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGWTFolder = new javax.swing.JLabel();
        gwtFolder = new javax.swing.JTextField();
        btnGWTBrowse = new javax.swing.JButton();
        lblGWTModule = new javax.swing.JLabel();
        gwtModule = new javax.swing.JTextField();
        btnModuleBrowse = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/netbeans/modules/gwtsupport/Bundle"); // NOI18N
        lblGWTFolder.setText(bundle.getString("GWTConfigPanelVisual.lblGWTFolder.text")); // NOI18N

        btnGWTBrowse.setText(bundle.getString("GWTConfigPanelVisual.btnGWTBrowse.text")); // NOI18N
        btnGWTBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGWTBrowsebrowse(evt);
            }
        });

        lblGWTModule.setText(bundle.getString("GWTConfigPanelVisual.lblGWTModule.text")); // NOI18N

        gwtModule.setText(org.openide.util.NbBundle.getMessage(GWTConfigPanelVisual.class, "GWTConfigPanelVisual.gwtModule.text")); // NOI18N

        btnModuleBrowse.setText(bundle.getString("GWTConfigPanelVisual.btnModuleBrowse.text")); // NOI18N
        btnModuleBrowse.setEnabled(false);
        btnModuleBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModuleBrowsebrowse(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblGWTFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .add(lblGWTModule))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(layout.createSequentialGroup()
                        .add(gwtFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(gwtModule)
                        .add(9, 9, 9)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnGWTBrowse)
                    .add(btnModuleBrowse))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnGWTBrowse)
                    .add(lblGWTFolder)
                    .add(gwtFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnModuleBrowse)
                    .add(lblGWTModule)
                    .add(gwtModule, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnModuleBrowsebrowse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModuleBrowsebrowse
        // TODO add your handling code here:
}//GEN-LAST:event_btnModuleBrowsebrowse
    
    private void btnGWTBrowsebrowse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGWTBrowsebrowse
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(NbBundle.getMessage(GWTConfigPanelVisual.class,"LBL_SelectGWTLocation")); //NOI18N
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String path = gwtFolder.getText();
        if (path.length() > 0) {
            File f = new File(path);
            if (f.exists())
                chooser.setSelectedFile(f);
        }
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File projectDir = chooser.getSelectedFile();
            gwtFolder.setText(projectDir.getAbsolutePath());
        }
}//GEN-LAST:event_btnGWTBrowsebrowse
    
    public void enableComponents(boolean enabled){
        lblGWTFolder.setEnabled(enabled);
        gwtFolder.setEnabled(enabled);
        btnGWTBrowse.setEnabled(enabled);
        
        lblGWTModule.setEnabled(enabled);
        gwtModule.setEnabled(enabled);
    }
    
    public void setGWTFolder(File folder){
        gwtFolder.setText(String.valueOf(folder));
    }
    
    public File getGWTFolder(){
        return new File(gwtFolder.getText());
    }
    
    public void setGWTModule(String path){
        gwtModule.setText(path);
    }
    
    public String getGWTModule(){
        return gwtModule.getText();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGWTBrowse;
    private javax.swing.JButton btnModuleBrowse;
    private javax.swing.JTextField gwtFolder;
    private javax.swing.JTextField gwtModule;
    private javax.swing.JLabel lblGWTFolder;
    private javax.swing.JLabel lblGWTModule;
    // End of variables declaration//GEN-END:variables
    
    private class ChangeNotifier implements DocumentListener{
        public void insertUpdate(DocumentEvent arg0) {
            controller.fireChangeEvent();
        }
        
        public void removeUpdate(DocumentEvent arg0) {
            controller.fireChangeEvent();
        }
        
        public void changedUpdate(DocumentEvent arg0) {
            controller.fireChangeEvent();
        }
    }
}

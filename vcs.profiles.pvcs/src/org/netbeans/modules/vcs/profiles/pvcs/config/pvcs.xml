<?xml version="1.0"?>
<!DOCTYPE configuration PUBLIC '-//NetBeans//DTD VCS Configuration 1.1//EN' 'http://www.netbeans.org/dtds/vcs-configuration-1_1.dtd' [
    <!ENTITY versioned-statuses '"Current", "Missing", "Locally Modified", ""'>
    <!ENTITY local-statuses '"Local", "Ignored"'>
]>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2005 Sun
Microsystems, Inc. All Rights Reserved.
-->


<configuration type="netbeans.pvcs" splitloc="org/netbeans/modules/vcs/profiles/pvcs/config/BundleLocalizedPVCS">
  <resourceBundle>org/netbeans/modules/vcs/profiles/pvcs/config/Bundle</resourceBundle>
  <resourceBundle>org/netbeans/modules/vcs/profiles/pvcs/config/BundleLocalizedPVCS</resourceBundle>
  <label>$[? LOCALIZED_PROFILE_COPY] [ResourceMsg1(PVCS_Localized_Label)] [ResourceMsg1(PVCS_Label)]</label>
  
  <os>
    <compatible>"Unix", "Windows"</compatible>
    <uncompatible>"Windows 95", "Windows 98", "Windows Me"</uncompatible>
  </os>
  
  <condition var="IS_WINDOWS">
    <var name="os.name" valueContainsIgnoreCase="WINDOWS"/>
  </condition>
  
  <condition var="IS_WIN9X">
    <or>
      <var name="os.name" value="Windows 95"/>
      <var name="os.name" value="Windows 98"/>
      <var name="os.name" value="Windows Me"/>
    </or>
  </condition>
  
  <condition var="IS_WINNT">
    <var name="IS_WINDOWS" value="true"/>
    <not>
      <var name="IS_WIN9X" value="true"/>
    </not>
  </condition>
  
  <variables>
    <variable name="FS_DISPLAY_NAME" basic="false">
      <value>PVCS</value>
    </variable>
    <variable name="MODULE_INFORMATION_CODE_NAME_BASE" basic="false">
      <value>org.netbeans.modules.vcs.profiles.pvcs</value>
    </variable>
    <variable name="USER_LOCAL_PARAM_LABELS" basic="false">
      <value>"ResourceMsg(PVCS_CMD_Options)"</value>
    </variable>
    <variable name="RUN" basic="false">
      <value>/bin/sh -c "cd \"${WORKDIR}\";</value>
      <value if="IS_WINNT">cmd /X /C "cd /D \"${WORKDIR}\"&amp;&amp;</value>
    </variable>
    <variable name="RUNR" basic="false">
      <value>/bin/sh -c "cd \"${ROOTDIR}\"; </value>
      <value if="IS_WINNT">cmd /X /C "cd /D \"${ROOTDIR}\"&amp;&amp;</value>
    </variable>
    <variable name="PCLI_CMD">
      <value>org.netbeans.modules.vcs.profiles.pvcs.commands.PCLICommand.class</value>
    </variable>
    <variable name="PROJECT_DB" basic="true" label="ResourceMsg(PVCS_ProjectDatabase)" labelMnemonic="ResourceMsg(PVCS_ProjectDatabase_Menmonic)" localFile="false" localDir="true" executable="false" order="0">
      <value>/usr/pvcs/vm/sampledb</value>
      <value if="IS_WINDOWS">c:\Program Files\pvcs\vm\sampledb</value>
    </variable>
    <variable name="PROJECT" basic="true" label="ResourceMsg(PVCS_ProjectName)" labelMnemonic="ResourceMsg(PVCS_ProjectName_Mnemonic)" localFile="false" localDir="false" executable="false" order="1">
      <value>/</value>
    </variable>
    <variable name="USER_NAME" basic="true">
      <value></value>
    </variable>
    <!-- Quotation that is used for ordinary commands -->
    <variable name="CMD_QUOTE" basic="false">
      <value>\"</value>
    </variable>
    <!-- Quotation that is used for PCLI commands (it contains a workaround for bug in older versions of PVCS) -->
    <variable name="QUOTE" basic="false">
      <value>$[? PCLI_OLDSTYLE_QUOTING] [\"] ["]</value>
      <value if="IS_WINNT">"</value>
    </variable>
    <variable name="PCLI_OLDSTYLE_QUOTING" basic="false" unless="IS_WINNT">
      <value></value>
    </variable>
    <variable name="ESCAPED_(" basic="false">
      <value>\(</value>
      <value if="IS_WINNT">(</value>
    </variable>
    <variable name="ESCAPED_)" basic="false">
      <value>\)</value>
      <value if="IS_WINNT">)</value>
    </variable>
    <variable name="SHOWLOCALFILES" basic="false">
      <value>true</value>
    </variable>
    <variable name="WORKDIR" basic="false">
      <value>${ROOTDIR}$[? MODULE] [${PS}${MODULE}] []$[? DIR] [${PS}${DIR}] []</value>
    </variable>
    <variable name="WORKDIR_REL" basic="false">
      <value>$[? MODULE] [$[? DIR] [${MODULE}/${DIR}] [${MODULE}]] [${DIR}]</value>
      <value if="IS_WINDOWS">$[? MODULE] [$[? DIR] [${MODULE_\/}/${DIR_\/}] [${MODULE_\/}]] [${DIR_\/}]</value>
    </variable>
    <variable name="POSSIBLE_FILE_STATUSES_LOCALIZED" basic="false">
      <value>"ResourceMsg(PVCS_FileStatus_Current)", "ResourceMsg(PVCS_FileStatus_Missing)", "ResourceMsg(PVCS_FileStatus_LM)"</value>
    </variable>
    <variable name="POSSIBLE_FILE_STATUSES_LOCALIZED_SHORT" basic="false">
      <value>"ResourceMsg(PVCS_FileStatus_Short_Current)", "ResourceMsg(PVCS_FileStatus_Short_Missing)", "ResourceMsg(PVCS_FileStatus_Short_LM)"</value>
    </variable>
    <variable name="NOT_MODIFIABLE_FILE_STATUSES" basic="false">
      <value>"Local", ""</value>
    </variable>
    <variable name="NUR" basic="false">
      <value>"</value>
    </variable>
    <variable name="LOCAL_FILES_FILTERED_OUT" basic="false">
      <value>"vcs.cfg"</value>
    </variable>
    <variable name="LOCAL_FILES_FILTERED_OUT_CASE_SENSITIVE" basic="false">
      <value unless="IS_WINDOWS">true</value>
      <value if="IS_WINDOWS">false</value>
    </variable>
    <variable name="PS" basic="false">
      <value>${path.separator}</value>
    </variable>
    <variable name="POSSIBLE_FILE_STATUSES" basic="false">
      <value>"Current", "Missing", "Locally Modified"</value>
    </variable>
    <variable name="VCS_FILE_STATUS_MISSING" basic="false">
      <value>Missing</value>
    </variable>
    <variable name="VCS_FOLDER_STATUS_MISSING" basic="false">
      <value>Missing</value>
    </variable>
    <variable name="ICONS_FOR_FILE_STATUSES" basic="false">
      <value>"org/netbeans/modules/vcs/profiles/resources/badgeUpToDate.gif", "org/netbeans/modules/vcs/profiles/resources/badgeNeedsCheckout.gif"</value>
    </variable>
    <variable name="RUNW" basic="false">
      <value>/bin/sh -c "cd \"${ROOTDIR}\"; mkdir -p \"${WORKDIR}\"; cd \"${WORKDIR}\";</value>
      <value if="IS_WINNT">cmd /X /C "cd /D \"${ROOTDIR}\"&amp;&amp; (mkdir \"${WORKDIR}\" 2>nul || echo. >nul)&amp;&amp; cd /D \"${WORKDIR}\"&amp;&amp;</value>
    </variable>
    <variable name="PRID" basic="false">
      <value>-pr${QUOTE}${PROJECT_DB}${QUOTE} $[? USER_NAME] [-id${QUOTE}${USER_NAME}:${PASSWORD}${QUOTE}] []</value>
    </variable>
    <variable name="PRIDPP" basic="false">
      <value>${PRID} -pp${QUOTE}${PROJECT}$[? WORKDIR_REL] [/${WORKDIR_REL}] []${QUOTE}</value>
    </variable>
    <variable name="WRAPPER" basic="false">
      <value>vcs.list.PvcsListCommand.class</value>
    </variable>
    <variable name="BACKSLASH" basic="false">
      <value>\</value>
    </variable>
    <variable name="CD" basic="false">
      <value>cd</value>
    </variable>
    <variable name="REVISION_OPERATION_IDENT" basic="false">
      <value>R</value>
    </variable>
    <variable name="DATE_OPERATION_IDENT" basic="false">
      <value>D</value>
    </variable>
    <variable name="AUTO_FILL_VARS" basic="false">
      <value>PROJECT_DB, AUTO_FILL_CONFIG, PROJECT, AUTO_FILL_CONFIG, USER_NAME, AUTO_FILL_CONFIG</value>
    </variable>
    <variable name="ARGUMENT_FILES_TO_CLONE" basic="false">
      <value>DESCRIPTION_FILE</value>
    </variable>
    <variable name="MSG_PROMPT_FOR_AUTO_LOCK" basic = "false">
      <value>ResourceMsg(PVCS_MSG_PROMPT_FOR_AUTO_LOCK)</value>
    </variable>
    <variable name="MSG_PROMPT_FOR_AUTO_EDIT" basic = "false">
      <value>ResourceMsg(PVCS_MSG_PROMPT_FOR_AUTO_EDIT)</value>
    </variable>
    <variable name="LOCKER_USER_NAME" basic = "false">
      <value>${USER_NAME}</value>
    </variable>
    <variable name="MAX_CMD_LENGTH" basic="false" if="IS_WINDOWS">
      <value>1000</value>
    </variable>
    <variable name="ZERO" basic="false">
      <value>0</value>
    </variable>
    <variable name="CONFIG_INPUT_DESCRIPTOR" basic="false">
      <value>PROMPT_FOR(PROJECT_DB, "ResourceMsg(PVCS_CUST_ProjectDatabase)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_ProjectDatabase);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_ProjectDatabase_mnc)), SELECTOR_CMD_PROJECT_DATABASE_SELECTOR)
             PROMPT_FOR(USER_NAME, "ResourceMsg(PVCS_CUST_UserName)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_UserName);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_UserName_mnc)))
             PROMPT_FOR(PROJECT, "ResourceMsg(PVCS_CUST_ProjectName)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_ProjectName);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_ProjectName_mnc)), SELECTOR_CMD_PROJECT_SELECTOR)
             PROMPT_FOR(ROOTDIR, "ResourceMsg(PVCS_CUST_WorkfileLocation)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_WorkfileLocation);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_WorkfileLocation_mnc)), SELECTOR_DIR)
      </value>
    </variable>
    <variable name="WIZARD_INPUT_DESCRIPTOR" basic="false">
      <value>PROMPT_FOR(PROJECT_DB, "ResourceMsg(PVCS_CUST_ProjectDatabase)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_ProjectDatabase);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_ProjectDatabase_mnc)), VALIDATOR_FOLDER, SELECTOR_CMD_PROJECT_DATABASE_SELECTOR)
             PROMPT_FOR(USER_NAME, "ResourceMsg(PVCS_CUST_UserName)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_UserName);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_UserName_mnc)))
             PROMPT_FOR(PROJECT, "ResourceMsg(PVCS_CUST_ProjectName)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_ProjectName);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_ProjectName_mnc)), SELECTOR_CMD_PROJECT_SELECTOR)
             PROMPT_FOR(ROOTDIR, "ResourceMsg(PVCS_CUST_WorkfileLocation)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_WorkfileLocation);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_WorkfileLocation_mnc)), VALIDATOR_FOLDER, SELECTOR_DIR)
             ASK_FOR(DO_PVCS_CHECKOUT, ResourceMsg(WIZARD_PVCS_CHECKOUT), "true",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CHECKOUT);;;;MNEMONIC_ResourceMsg(WIZARD_PVCS_CHECKOUT_Mnemonic)))
      </value>
    </variable>
    <variable name="IS_FINISH_ENABLED" basic="false">
       <value>$[? DO_PVCS_CHECKOUT][]["true"]</value>
    </variable>
    <variable name="DO_PVCS_CHECKOUT" basic="false">
      <value></value>
    </variable>
    <variable name="INITIAL_CO_PROJECT" basic="false">
      <value>/</value>
    </variable>  
    <variable name="INITIAL_CO_SHOULD_LOCK" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_WRITABLE" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_REVISION" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_VERSION" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_DO_CHECKOUT_BY_DATE" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_CHECKOUT_BY_DATE" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_DATE_AFTER" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_DATE_BEFORE" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_SET_CURR_TIME" basic="false">
      <value></value>
    </variable>  
    <variable name="INITIAL_CO_RECURSIVE" basic="false">
      <value></value>
    </variable>  
    <variable name="WIZARD_INPUT_DESCRIPTOR1" basic="false">
      <value>LABEL(ResourceMsg(PVCS_CHECKOUT),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CHECKOUT)))
                 PROMPT_FOR(INITIAL_CO_PROJECT, "ResourceMsg(GCOMMAND_Project)", "/",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_Project);;MNEMONIC_ResourceMsg(GCOMMAND_GET_Project_Mnemonic)))                 
                 ASK_FOR(INITIAL_CO_SHOULD_LOCK, ResourceMsg(COMMAND_PVCS_CHECKOUT_Lock), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Lock);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Lock_mnc)), "-l", "")
                 ASK_FOR(INITIAL_CO_WRITABLE, ResourceMsg(COMMAND_PVCS_CHECKOUT_Writable), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Writable);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Writable_mnc)), "-w", "")
                 PROMPT_FOR_EXPERT(INITIAL_CO_REVISION, ResourceMsg(COMMAND_PVCS_CHECKOUT_Revision), "",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Revision);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Revision_mnc)))
                 PROMPT_FOR_EXPERT(INITIAL_CO_VERSION, ResourceMsg(COMMAND_PVCS_CHECKOUT_Version), "",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Version);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Version_mnc)))
                 ASK_FOR_EXPERT(INITIAL_CO_DO_CHECKOUT_BY_DATE, ResourceMsg(COMMAND_PVCS_CHECKOUT_ByDate), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_ByDate);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_ByDate_mnc)), ENABLE(CHECKOUT_BY_DATE))
                 SELECT_RADIO_EXPERT(INITIAL_CO_CHECKOUT_BY_DATE, "", "-u",
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_NewerThanWork), "-u", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_NewerThanWork);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_NewerThanWork_mnc))],
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_NewerThan), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_NewerThan);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_NewerThan_mnc)),
                    PROMPT_FOR_EXPERT(INITIAL_CO_DATE_AFTER, "")],
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_InBefore), "D", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_InBefore);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_InBefore_mnc)),
                    PROMPT_FOR_EXPERT(INITIAL_CO_DATE_BEFORE, "")])
                 ASK_FOR_EXPERT(INITIAL_CO_SET_CURR_TIME, ResourceMsg(COMMAND_PVCS_CHECKOUT_SetCurrTime), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_SetCurrTime);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_SetCurrTime_mnc)), "-t", "")
                 ASK_FOR(INITIAL_CO_RECURSIVE, ResourceMsg(COMMAND_PVCS_CHECKOUT_Recursive), "true", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Recursive_mnc)), "-z", "")
          </value>
    </variable>
    <variable name="AUTO_EXEC"> <!-- executed after filesystem instantiation if defined -->
      <value>$[? DO_PVCS_CHECKOUT][INITIAL_CHECKOUT][]</value>
    </variable>
  </variables>
  <commands>
    <command name="ROOT" displayName="ResourceMsg(PVCS)">
      <property name="labelMnemonic">
        <value>ResourceMsg(PVCS_Mnemonic)</value>
      </property>
      <command name="LIST" displayName="ResourceMsg(LIST)">
        <property name="labelMnemonic">
          <value>ResourceMsg(LIST_Mnemonic)</value>
        </property>
	<property name="data.fileName.index">
	  <value>0</value>
	</property>
	<property name="data.status.index">
	  <value>1</value>
	</property>
	<property name="exec">
	  <value>${WRAPPER} LIST_PROJECT DIFF_TEST_CMD</value>
	</property>
	<property name="data.time.index">
	  <value>-1</value>
	</property>
	<property name="data.size.index">
	  <value>5</value> <!-- The number of revisions is stored here -->
	</property>
	<property name="data.locker.index">
	  <value>2</value>
	</property>
	<property name="input">
	  <value></value>
	</property>
	<property name="data.revision.index">
	  <value>3</value>
	</property>
	<property name="data.attr.index">
	  <value>4</value>
	</property>
	<property name="data.date.index">
	  <value>-1</value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
      </command>
      <command name="LIST_SUB" displayName="ResourceMsg(LIST_SUB)">
        <property name="labelMnemonic">
          <value>ResourceMsg(LIST_SUB_Mnemonic)</value>
        </property>
	<property name="exec">
          <value>org.netbeans.modules.vcs.profiles.pvcs.list.PvcsListRecursive.class LIST_PROJECT_REC DIFF_TEST_CMD</value>
	</property>
	<property name="onFile">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="data.fileName.index">
	  <value>0</value>
	</property>
	<property name="data.status.index">
	  <value>1</value>
	</property>
	<property name="data.locker.index">
	  <value>2</value>
	</property>
	<property name="data.revision.index">
	  <value>3</value>
	</property>
	<property name="data.attr.index">
	  <value>4</value>
	</property>
	<property name="data.size.index">
	  <value>5</value> <!-- The number of revisions is stored here -->
	</property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
      </command>
      <separator />
      <command name="CREATE_PROJECT" displayName="ResourceMsg(PVCS_CREATE_PROJECT)">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="CreateProject ${PRIDPP} ${QFILE}"/>
        </run>
        <property name="onFile">
          <value>false</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="refreshParentFolder">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>38</value> <!-- SERIAL_ON_PACKAGE + SERIAL_WITH_PARENT + SERIAL_WITH_PENDING -->
        </property>
        <property name="needsHierarchicalOrder">
          <value>true</value>
        </property>
        <property name="preCommands">
          <value>ADD_LOCAL_PARENTS</value>
        </property>
        <property name="disabledOnStatus">
          <value>&versioned-statuses;</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.AddFolderCommand</value>
        </property>
      </command>
      <command name="CREATE_PROJECT_CMD">
        <!-- The same as CREATE_PROJECT, but without the pre-command to avoid loop -->
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="CreateProject ${PRIDPP} ${QFILE}"/>
        </run>
        <property name="onFile">
          <value>false</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="refreshParentFolder">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>38</value> <!-- SERIAL_ON_PACKAGE + SERIAL_WITH_PARENT + SERIAL_WITH_PENDING -->
        </property>
        <property name="needsHierarchicalOrder">
          <value>true</value>
        </property>
      </command>
      <separator />
      <command name="CHECKIN" displayName="ResourceMsg(PVCS_CHECKIN)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_CHECKIN_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Put ${PRIDPP} ${FORCE_PUT} $[? CHECK_IN_OUT] [$[? CHECK_IN_OUT_LOCK] [-l${QUOTE}${LOCK_DESCRIPTION}${QUOTE}] [-u]] [] $[? ASSIGN_REVISION] [-r${ASSIGN_REVISION}] [] $[? ASSIGN_VERSION] [-v${QUOTE}${ASSIGN_VERSION}${QUOTE}] [] $[? FLOATING_LABEL] [-fv] [] ${START_BRANCH} $[? DESCRIPTION_FILE] [-m@${QUOTE}${DESCRIPTION_FILE}${QUOTE}] [-m${QUOTE}${message}${QUOTE}] -ym ${QFILES}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_CHECKIN),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CHECKIN)))
                 VARIABLE_DEFAULTS(FORCE_PUT USER, CHECK_IN_OUT USER, CHECK_IN_OUT_LOCK USER)
                 PROMPT_FOR_FILE(DESCRIPTION_FILE, ResourceMsg(COMMAND_PVCS_CHECKIN_Reason), "{FILE_OUTPUT_OF_CHECKIN_TEMPLATE_GETTER(0)}", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_Reason);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_Reason_mnc)))
                 ASK_FOR(FORCE_PUT, ResourceMsg(COMMAND_PVCS_CHECKIN_Force), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_Force);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_Force_mnc)), "-f", "")
                 ASK_FOR(CHECK_IN_OUT, ResourceMsg(COMMAND_PVCS_CHECKIN_Out), "true", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_Out);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_Out_mnc)), "-u", "", ENABLE(CHECK_IN_OUT_LOCK))
                 ASK_FOR(CHECK_IN_OUT_LOCK, ResourceMsg(COMMAND_PVCS_CHECKIN_OutLock), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_OutLock);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_OutLock_mnc)), "-l", "", ENABLE(LOCK_DESCRIPTION))
                 PROMPT_FOR(LOCK_DESCRIPTION, ResourceMsg(COMMAND_PVCS_CHECKIN_OutLockDescription), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_OutLockDescription);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_OutLockDescription_mnc)))
                 PROMPT_FOR_EXPERT(ASSIGN_REVISION, ResourceMsg(COMMAND_PVCS_CHECKIN_AssignRevision), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_AssignRevision);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_AssignRevision_mnc)))
                 PROMPT_FOR_EXPERT(ASSIGN_VERSION, ResourceMsg(COMMAND_PVCS_CHECKIN_AssignVersion), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_AssignVersion);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_AssignVersion_mnc)))
                 ASK_FOR_EXPERT(FLOATING_LABEL, ResourceMsg(COMMAND_PVCS_CHECKIN_FloatingLabel), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_FloatingLabel);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_FloatingLabel_mnc)))
                 ASK_FOR_EXPERT(START_BRANCH, ResourceMsg(COMMAND_PVCS_CHECKIN_StartBranch), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_StartBranch);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_StartBranch_mnc)), "-fb", "")
          </value>
	</property>
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
        <property name="disabledWhenNotLockedConditioned">
          <value>$[? CACHED_SIZE] [$[? CACHED_SIZE-ZERO] [true] [false]] [true]</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="changingNumRevisions">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.CommitCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_COMMIT)</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.CheckInCommand</value>
        </property>
      </command>
      <command name="CHECKIN_TEMPLATE_GETTER">
	<property name="exec">
	  <value>$[? message] [org.netbeans.modules.vcs.profiles.commands.Echo.class "${message}"] []</value>
	</property>
      </command>
      <command name="CHECKOUT" displayName="ResourceMsg(PVCS_CHECKOUT)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_CHECKOUT_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Get ${PRIDPP} ${RECURSIVE} ${SHOULD_LOCK} ${WRITABLE} $[? REVISION] [-r${REVISION}] [$[? revision] [-r${revision}] []] $[? VERSION] [-v${QUOTE}${VERSION}${QUOTE}] [] $[? DO_CHECKOUT_BY_DATE] [$[? CHECKOUT_BY_DATE] [$[? CHECKOUT_BY_DATE - DATE_OPERATION_IDENT] [${CHECKOUT_BY_DATE}] [-d${DATE_BEFORE}]] [-u${DATE_AFTER}]] [] ${SET_CURR_TIME} $[? FILE] [${QFILES}] [.]"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_CHECKOUT),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CHECKOUT)))
                 VARIABLE_DEFAULTS(SHOULD_LOCK USER, WRITABLE USER, SET_CURR_TIME USER)
                 ASK_FOR(SHOULD_LOCK, ResourceMsg(COMMAND_PVCS_CHECKOUT_Lock), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Lock);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Lock_mnc)), "-l", "")
                 ASK_FOR(WRITABLE, ResourceMsg(COMMAND_PVCS_CHECKOUT_Writable), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Writable);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Writable_mnc)), "-w", "")
                 PROMPT_FOR_EXPERT(REVISION, ResourceMsg(COMMAND_PVCS_CHECKOUT_Revision), "${revision}",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Revision);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Revision_mnc)))
                 PROMPT_FOR_EXPERT(VERSION, ResourceMsg(COMMAND_PVCS_CHECKOUT_Version), "",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Version);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Version_mnc)))
                 ASK_FOR_EXPERT(DO_CHECKOUT_BY_DATE, ResourceMsg(COMMAND_PVCS_CHECKOUT_ByDate), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_ByDate);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_ByDate_mnc)), ENABLE(CHECKOUT_BY_DATE))
                 SELECT_RADIO_EXPERT(CHECKOUT_BY_DATE, "", "-u",
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_NewerThanWork), "-u", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_NewerThanWork);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_NewerThanWork_mnc))],
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_NewerThan), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_NewerThan);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_NewerThan_mnc)),
                    PROMPT_FOR_EXPERT(DATE_AFTER, "")],
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_InBefore), "D", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_InBefore);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_InBefore_mnc)),
                    PROMPT_FOR_EXPERT(DATE_BEFORE, "")])
                 ASK_FOR_EXPERT(SET_CURR_TIME, ResourceMsg(COMMAND_PVCS_CHECKOUT_SetCurrTime), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_SetCurrTime);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_SetCurrTime_mnc)), "-t", "")
                 IF_VAR_EMPTY"recursionBanned"_IF_VAR_NON_EMPTY"FILES_IS_FOLDER"_ASK_FOR(RECURSIVE, ResourceMsg(COMMAND_PVCS_CHECKOUT_Recursive), "$[? recursionBanned] [] [-z]", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Recursive_mnc)), "-z", "")
          </value>
	</property>
	<property name="onDir">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="refreshRecursivelyPatternMatched">
          <value>-z</value>
        </property>
        <property name="refreshOnFail">
          <value>2</value>
        </property>
        <property name="checkForModifications">
	  <value>true</value>
	</property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.UpdateCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_UPDATE)</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.CheckOutCommand</value>
        </property>
      </command>
      <command name="INITIAL_CHECKOUT">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Get ${PRIDPP} ${INITIAL_CO_RECURSIVE} ${INITIAL_CO_SHOULD_LOCK} ${INITIAL_CO_WRITABLE} $[? INITIAL_CO_REVISION] [-r${INITIAL_CO_REVISION}] [] $[? INITIAL_CO_VERSION] [-v${QUOTE}${INITIAL_CO_VERSION}${QUOTE}] [] $[? INITIAL_CO_DO_CHECKOUT_BY_DATE] [$[? INITIAL_CO_CHECKOUT_BY_DATE] [$[? INITIAL_CO_CHECKOUT_BY_DATE - DATE_OPERATION_IDENT] [${INITIAL_CO_CHECKOUT_BY_DATE}] [-d${INITIAL_CO_DATE_BEFORE}]] [-u${INITIAL_CO_DATE_AFTER}]] [] ${INITIAL_CO_SET_CURR_TIME} ${QUOTE}${INITIAL_CO_PROJECT}${QUOTE}"/>
        </run>
	<property name="onDir">
	  <value>true</value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="refreshRecursivelyPatternMatched">
          <value>-z</value>
        </property>
        <property name="refreshOnFail">
          <value>2</value>
        </property>
      </command>
      <separator />
      <command name="ADD" displayName="ResourceMsg(PVCS_ADD)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_ADD_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="AddFiles ${PRIDPP} $[? DESCRIPTION_FILE] [-m@${QUOTE}${DESCRIPTION_FILE}${QUOTE} -t${QUOTE}${WF_DESCRIPTION}${QUOTE}] [-m${QUOTE}${message}${QUOTE} -t${QUOTE}${message}${QUOTE}] ${KEEP_LOCK} $[? ASSIGN_VERSION] [-v${QUOTE}$[? FLOATING_LABEL] [floating_version:] []${ASSIGN_VERSION}${QUOTE}] [] ${QABSPATHS}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_ADD),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_ADD)))
                 VARIABLE_DEFAULTS(KEEP_LOCK USER)
                 PROMPT_FOR(WF_DESCRIPTION, ResourceMsg(COMMAND_PVCS_ADD_Reason),"${message}",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_ADD_Reason);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_ADD_Reason_mnc)), VALIDATOR_NON_EMPTY)
                 PROMPT_FOR_FILE(DESCRIPTION_FILE, ResourceMsg(COMMAND_PVCS_CHECKIN_Reason), "{FILE_OUTPUT_OF_CHECKIN_TEMPLATE_GETTER(0)}", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_Reason);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_Reason_mnc)))
                 ASK_FOR(KEEP_LOCK, ResourceMsg(COMMAND_PVCS_ADD_KeepLocked), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_ADD_KeepLocked);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_ADD_KeepLocked_mnc)), "-l", "")
                 PROMPT_FOR_EXPERT(ASSIGN_VERSION, ResourceMsg(COMMAND_PVCS_CHECKIN_AssignVersion), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_AssignVersion);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_AssignVersion_mnc)))
                 ASK_FOR_EXPERT(FLOATING_LABEL, ResourceMsg(COMMAND_PVCS_CHECKIN_FloatingLabel), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_FloatingLabel);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_FloatingLabel_mnc)))
          </value>
	</property>
	<property name="onFile">
	  <value>true</value>
	</property>
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
	<property name="input">
	  <value></value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="preCommands">
          <value>ADD_LOCAL_PARENTS</value>
        </property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>38</value> <!-- SERIAL_ON_PACKAGE + SERIAL_WITH_PARENT + SERIAL_WITH_PENDING -->
        </property>
        <property name="disabledOnStatus">
          <value>&versioned-statuses;</value>
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.AddCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_ADD)</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.AddCommand</value>
        </property>
      </command>
      <command name="ADD_DIR" displayName="ResourceMsg(PVCS_ADD_ALL)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_ADD_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="AddFiles ${PRID} -pp${QUOTE}${PROJECT}$[? WORKDIR_REL] [/${WORKDIR_REL}] []$[? RECURSIVE] [] [$[? FILE] [/${FILE}] []]${QUOTE} $[? DESCRIPTION_FILE] [-m@${QUOTE}${DESCRIPTION_FILE}${QUOTE} -t${QUOTE}${WF_DESCRIPTION}${QUOTE}] [-m${QUOTE}${message}${QUOTE} -t${QUOTE}${message}${QUOTE}] ${KEEP_LOCK} $[? ASSIGN_VERSION] [-v${QUOTE}$[? FLOATING_LABEL] [floating_version:] []${ASSIGN_VERSION}${QUOTE}] [] ${RECURSIVE} $[? RECURSIVE] [${QUOTE}${WORKDIR}$[? FILE] [${PS}${FILE}] [${PS}*]${QUOTE}] [@{FILE_OUTPUT_OF_DUMP_FILES_FOR_ADD(0)}]"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_ADD),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_ADD)))
                 VARIABLE_DEFAULTS(KEEP_LOCK USER, RECURSIVE USER)
                 PROMPT_FOR(WF_DESCRIPTION, ResourceMsg(COMMAND_PVCS_ADD_Reason),"${message}",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_ADD_Reason);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_ADD_Reason_mnc)), VALIDATOR_NON_EMPTY)
                 PROMPT_FOR_FILE(DESCRIPTION_FILE, ResourceMsg(COMMAND_PVCS_CHECKIN_Reason), "{FILE_OUTPUT_OF_CHECKIN_TEMPLATE_GETTER(0)}", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_Reason);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_Reason_mnc)))
                 ASK_FOR(KEEP_LOCK, ResourceMsg(COMMAND_PVCS_ADD_KeepLocked), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_ADD_KeepLocked);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_ADD_KeepLocked_mnc)), "-l", "")
                 PROMPT_FOR_EXPERT(ASSIGN_VERSION, ResourceMsg(COMMAND_PVCS_CHECKIN_AssignVersion), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_AssignVersion);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_AssignVersion_mnc)))
                 ASK_FOR_EXPERT(FLOATING_LABEL, ResourceMsg(COMMAND_PVCS_CHECKIN_FloatingLabel), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKIN_FloatingLabel);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKIN_FloatingLabel_mnc)))
                 IF_VAR_EMPTY"recursionBanned"_ASK_FOR(RECURSIVE, ResourceMsg(COMMAND_PVCS_ADD_Recursive), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_ADD_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_ADD_Recursive_mnc)), "-z", "")
          </value>
	</property>
	<property name="onFile">
	  <value>false</value>
	</property>
	<property name="onDir">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="display">
	  <value>true</value>
	</property>
        <property name="preCommands">
          <value>ADD_LOCAL_PARENTS $[? RECURSIVE] [, MOVE_FILES_NOT_TO_ADD] []</value>
        </property>
        <property name="commandsAfterSuccess">
          <value>$[? RECURSIVE] [MOVE_FILES_NOT_ADDED_BACK] []</value>
        </property>
        <property name="commandsAfterFail">
          <value>$[? RECURSIVE] [MOVE_FILES_NOT_ADDED_BACK] []</value>
        </property>
        <property name="refreshParentFolder">
          <value>true</value>
        </property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.AddCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_ADD)</value>
        </property>
      </command>
      <command name="MOVE_FILES_NOT_TO_ADD">
	<property name="exec">
	  <value>org.netbeans.modules.vcs.profiles.pvcs.commands.MoveFilesNotToAdd.class ${QUOTE}${WORKDIR}$[? FILE] [${PS}${FILE}] []${QUOTE} {FILE_OUTPUT_OF_DUMP_FILES_FOR_ADD_REC(0)}</value>
	</property>
	<property name="onFile">
	  <value>false</value>
	</property>
	<property name="onDir">
	  <value>true</value>
	</property>
      </command>
      <command name="MOVE_FILES_NOT_ADDED_BACK">
	<property name="exec">
	  <value>org.netbeans.modules.vcs.profiles.pvcs.commands.MoveFilesNotToAdd.class ${QUOTE}${WORKDIR}$[? FILE] [${PS}${FILE}] []${QUOTE}</value>
	</property>
	<property name="onFile">
	  <value>false</value>
	</property>
	<property name="onDir">
	  <value>true</value>
	</property>
        <property name="refreshParentFolder">
          <value>true</value>
        </property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="refreshRecursivelyPatternMatched">
          <value>MoveFilesNotToAdd</value>
        </property>
      </command>
      <command name="ADD_LOCAL_PARENTS">
	<property name="exec">
	  <value>org.netbeans.modules.vcs.profiles.commands.AddLocalParents.class CREATE_PROJECT_CMD</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
	<property name="onDir">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
      </command>
      <command name="ADD_DIR_CMD">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="AddFiles ${PRID} -pp${QUOTE}${PROJECT}$[? WORKDIR_REL] [/${WORKDIR_REL}] []$[? FILE] [/${FILE}] []${QUOTE} $[? DESCRIPTION_FILE] [-m@${QUOTE}${DESCRIPTION_FILE}${QUOTE} -t${QUOTE}${WF_DESCRIPTION}${QUOTE}] [-m${QUOTE}${message}${QUOTE} -t${QUOTE}${message}${QUOTE}] ${KEEP_LOCK} $[? ASSIGN_VERSION] [-v${QUOTE}$[? FLOATING_LABEL] [floating_version:] []${ASSIGN_VERSION}${QUOTE}] [] ${RECURSIVE} @{FILE_OUTPUT_OF_DUMP_FILES_FOR_ADD(0)}"/>
        </run>
	<property name="onFile">
	  <value>false</value>
	</property>
	<property name="onDir">
	  <value>true</value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>14</value>  <!-- ((SERIAL_ON_PACKAGE || SERIAL_WITH_PARENT) && SERIAL_OF_COMMAND) -->
        </property>
        <property name="preCommands">
          <value>$[? CACHED_ISLOCAL] [CREATE_PROJECT] []</value>
        </property>
      </command>
      <command name="DUMMY_FILE_CMD_FOR_ADD">
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
	<property name="disabledOnStatus">
	  <value>"", "Current", "Missing", "Locally Modified"</value>
	</property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
      </command>
      <command name="DUMP_FILES_FOR_ADD">
        <property name="exec">
          <value>org.netbeans.modules.vcs.profiles.commands.RecursiveFolderCommand.class -l -fa DUMMY_FILE_CMD_FOR_ADD</value>
        </property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
      </command>
      <command name="DUMP_FILES_FOR_ADD_REC">
        <property name="exec">
          <value>org.netbeans.modules.vcs.profiles.commands.RecursiveFolderCommand.class -fc DUMMY_FILE_CMD_FOR_ADD</value>
        </property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
      </command>
      <command name="REMOVE" displayName="ResourceMsg(PVCS_REMOVE)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_REMOVE_Mnemonic)</value>
        </property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="vdel ${PRIDPP} $[? REMOVE_WHAT] [-r$[? REVISION - REVISION_OPERATION_IDENT] [${REVISION}] []] [$[? VERSION] [-v${QUOTE}${VERSION}${QUOTE}] []] ${QFILES}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_REMOVE),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_REMOVE)))
                 VARIABLE_DEFAULTS(REMOVE_WHAT USER)
                 SELECT_RADIO(REMOVE_WHAT, ResourceMsg(COMMAND_PVCS_REMOVE_What), "-r",
                    [ResourceMsg(COMMAND_PVCS_REVISION_Tip), "-r", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_REVISION_Tip);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_REVISION_Tip_mnc))],
                    [ResourceMsg(COMMAND_PVCS_REVISION_Revision), "R", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_REVISION_Revision);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_REVISION_Revision_mnc)),
                     PROMPT_FOR(REVISION, "", "")]
                    [ResourceMsg(COMMAND_PVCS_REVISION_Version), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_REVISION_Version);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_REVISION_Version_mnc)),
                     PROMPT_FOR(VERSION, "", "")])
          </value>
	</property>
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
	<property name="input">
	  <value></value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="changingNumRevisions">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.RemoveCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_REMOVE)</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.RemoveCommand</value>
        </property>
      </command>
      <separator />
      <command name="EDIT">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Get ${PRIDPP} ${SHOULD_LOCK} -w ${QUOTE}${FILE}${QUOTE}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_CHECKOUT),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CHECKOUT)))
                 VARIABLE_DEFAULTS(SHOULD_LOCK USER)
                 ASK_FOR(SHOULD_LOCK, ResourceMsg(COMMAND_PVCS_CHECKOUT_Lock), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Lock);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Lock_mnc)), "-l", "")
	  </value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
      </command>
      <command name="LOCK">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Get ${PRIDPP} -l -w ${QUOTE}${FILE}${QUOTE}"/>
        </run>
	<property name="input">
	  <value></value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
      </command>
      <command name="LOCK_" displayName="ResourceMsg(PVCS_LOCK)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_LOCK_Mnemonic)</value>
        </property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Lock ${PRIDPP} $[? REVISION] [-r${REVISION}] [] ${RECURSIVE} ${QFILES}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_LOCK),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_LOCK)))
                 PROMPT_FOR(REVISION, ResourceMsg(COMMAND_PVCS_REVISION_RevPromGVersion), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_REVISION_RevPromGVersion);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_REVISION_RevPromGVersion_mnc)))
                 IF_VAR_EMPTY"recursionBanned"_IF_VAR_NON_EMPTY"FILES_IS_FOLDER"_ASK_FOR(RECURSIVE, ResourceMsg(COMMAND_PVCS_LOCK_Recursive), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_LOCK_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_LOCK_Recursive_mnc)), "-z", "")
          </value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
	<property name="input">
	  <value></value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
	<property name="displayInteractive">
          <value>true</value>
        </property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="refreshRecursivelyPatternMatched">
          <value>-z</value>
        </property>
        <property name="refreshOnFail">
          <value>1</value>
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
      </command>
      <command name="UNLOCK_" displayName="ResourceMsg(PVCS_UNLOCK)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_UNLOCK_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Unlock ${PRIDPP} $[? REVISION] [-r${REVISION}] [] $[? USER] [-u${QUOTE}${USER}${QUOTE}] [] ${RECURSIVE} ${QFILES}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_UNLOCK),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_UNLOCK)))
                 PROMPT_FOR(REVISION, ResourceMsg(COMMAND_PVCS_REVISION_RevPromGVersion), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_REVISION_RevPromGVersion);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_REVISION_RevPromGVersion_mnc)))
                 PROMPT_FOR_EXPERT(USER, ResourceMsg(COMMAND_PVCS_UNLOCK_User), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_UNLOCK_User);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_UNLOCK_User_mnc)))
                 IF_VAR_EMPTY"recursionBanned"_IF_VAR_NON_EMPTY"FILES_IS_FOLDER"_ASK_FOR(RECURSIVE, ResourceMsg(COMMAND_PVCS_UNLOCK_Recursive), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_UNLOCK_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_UNLOCK_Recursive_mnc)), "-z", "")
          </value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="refreshRecursivelyPatternMatched">
          <value>-z</value>
        </property>
        <property name="refreshOnFail">
          <value>1</value>
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
      </command>
      <separator />
      <command name="STATUS" displayName="ResourceMsg(PVCS_STATUS)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_STATUS_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="vlog ${PRIDPP} ${REPORT_TYPE} $[? REVISION] [-r${REVISION}] [] $[? AUTHORS] [-a${AUTHORS}] [] $[? LOCKERS] [-l${LOCKERS}] [] $[? OWNERS] [-o${OWNERS}] [] $[? DATE_FROM] [-ds${QUOTE}${DATE_FROM}${QUOTE}] [] $[? DATE_TO] [-de${QUOTE}${DATE_TO}${QUOTE}] [] ${RECURSIVE} ${QFILES}"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_STATUS),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_STATUS)))
                 VARIABLE_DEFAULTS(REPORT_TYPE USER, REVISION USER, AUTHORS USER, LOCKERS USER, OWNERS USER, DATE_FROM USER, DATE_TO USER, RECURSIVE USER)
                 SELECT_COMBO_EXPERT(REPORT_TYPE, ResourceMsg(COMMAND_PVCS_STATUS_ReportType), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_ReportType);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_ReportType_mnc)),
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_Full), ""],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_FileInf), "-b"],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_RevisionInf), "-br"],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_LockedRev), "-bl"],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_RevWithVL), "-bv"],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_RevInGroup), "-bg"],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_NewestRev), "-bn"],
                    [ResourceMsg(COMMAND_PVCS_STATUS_RT_Tips), "-bc"])
                 PROMPT_FOR_EXPERT(REVISION, ResourceMsg(COMMAND_PVCS_STATUS_Revision), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_Revision);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_Revision_mnc)))
                 PROMPT_FOR_EXPERT(AUTHORS, ResourceMsg(COMMAND_PVCS_STATUS_Authors), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_Authors);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_Authors_mnc)))
                 PROMPT_FOR_EXPERT(LOCKERS, ResourceMsg(COMMAND_PVCS_STATUS_Lockers), "", "ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_Lockers);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_Lockers_mnc))")
                 PROMPT_FOR_EXPERT(OWNERS, ResourceMsg(COMMAND_PVCS_STATUS_Owners), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_Owners);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_Owners_mnc)))
                 PROMPT_FOR_EXPERT(DATE_FROM, ResourceMsg(COMMAND_PVCS_STATUS_DateFrom), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_DateFrom);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_DateFrom_mnc)))
                 PROMPT_FOR_EXPERT(DATE_TO, ResourceMsg(COMMAND_PVCS_STATUS_DateTo), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_DateTo);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_DateTo_mnc)))
                 IF_VAR_EMPTY"recursionBanned"_IF_VAR_NON_EMPTY"FILES_IS_FOLDER"_ASK_FOR(RECURSIVE, ResourceMsg(COMMAND_PVCS_STATUS_Recursive), "$[? recursionBanned] [] [-z]", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_STATUS_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_STATUS_Recursive_mnc)), "-z", "")
          </value>
	</property>
	<property name="onRoot">
	  <value>true</value>
	</property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="runOnMultipleFilesInFolder">
          <value>true</value>
        </property>
	<property name="display">
	  <value>true</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.HistoryCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_HISTORY)</value>
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.HistoryCommand</value>
        </property>
      </command>
      <separator />
      <command name="DIFF" displayName="ResourceMsg(PVCS_DIFF)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_DIFF_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <!--
	<property name="exec">
	  <value>$[? GEN_DELTA] [${RUN} vdiff -dl $[? REV_VER1] [-r${REVISION1}] [-v${CMD_QUOTE}${VERSION1}${CMD_QUOTE}] $[? REV_VER2] [$[? REVISION2] [-r${REVISION2}] []] [$[? VERSION2] [-v${CMD_QUOTE}${VERSION2}${CMD_QUOTE}] []] ${IGNORE_WHITE} -d $[? DELTA_FILE] [-xo${CMD_QUOTE}${DELTA_FILE}${CMD_QUOTE}] [] ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}]
                                [vcs.commands.Diff.class $[? REV_VER1] [${REVISION1}] ["${BACKSLASH}${VERSION1}"] $[? REV_VER2] [${REVISION2}] ["${BACKSLASH}${VERSION2}"] 3 CHECKOUT_CMD DIFF_CA_CMD]</value>
	</property>
        -->
        <run dir="${WORKDIR}">
          <executable value="$[? GEN_DELTA] [vdiff] [org.netbeans.modules.vcs.profiles.commands.Diff.class]"/>
          <arg value="$[? GEN_DELTA] [-dl] [$[? revision] [${revision}] []]"/>
          <arg value="$[? REV_VER1] [$[? GEN_DELTA] [-r][]${REVISION1}] [$[? GEN_DELTA] [-v][$[? VERSION1] [${BACKSLASH}] []]${VERSION1}]"/>
          <arg value="$[? REV_VER2] [$[? GEN_DELTA] [$[? REVISION2] [-r${REVISION2}] []] [${REVISION2}]] [$[? GEN_DELTA] [$[? VERSION2] [-v${VERSION2}] []] [$[? VERSION2] [${BACKSLASH}${VERSION2}] []]]"/>
          <arg line="$[? GEN_DELTA] [${IGNORE_WHITE} -d] [3 CHECKOUT_CMD DIFF_CA_CMD]"/>
          <arg value="$[? GEN_DELTA] [$[? DELTA_FILE] [-xo${DELTA_FILE}] []] []"/>
          <arg value="$[? GEN_DELTA] [{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})] []"/>
        </run>
  	<property name="inputDescriptor">
 	  <value>LABEL(ResourceMsg(COMMAND_PVCS_DIFF_Label),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Label)))
                 VARIABLE_DEFAULTS(REV_VER1 USER, REVISION1 USER, VERSION1 USER, REV_VER2 USER, REVISION2 USER, VERSION2 USER, IGNORE_WHITE USER, GEN_DELTA EXPERT_USER, DELTA_FILE EXPERT_USER)
                 SELECT_RADIO_EXPERT(REV_VER1, "", "R",
                  [ResourceMsg(COMMAND_PVCS_DIFF_Rev1), "R", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Rev1);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_Rev1_mnc)),
                    PROMPT_FOR_EXPERT(REVISION1, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Rev1)))],
                  [ResourceMsg(COMMAND_PVCS_DIFF_Ver1), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Ver1);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_Ver1_mnc)),
                    PROMPT_FOR_EXPERT(VERSION1, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Ver1)))])
                 SELECT_RADIO_EXPERT(REV_VER2, "", "R",
                  [ResourceMsg(COMMAND_PVCS_DIFF_Rev2), "R", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Rev2);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_Rev2_mnc)),
                    PROMPT_FOR_EXPERT(REVISION2, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Rev2)))],
                  [ResourceMsg(COMMAND_PVCS_DIFF_Ver2), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Ver2);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_Ver2_mnc)),
                    PROMPT_FOR_EXPERT(VERSION2, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_Ver2)))])
                 ASK_FOR_EXPERT(IGNORE_WHITE, ResourceMsg(COMMAND_PVCS_DIFF_IgnoreWhite), "",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_IgnoreWhite);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_IgnoreWhite_mnc)), "-b", "")
                 ASK_FOR_EXPERT(GEN_DELTA, ResourceMsg(COMMAND_PVCS_DIFF_GenDelta), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_GenDelta);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_GenDelta_mnc)), ENABLE(DELTA_FILE))
                 PROMPT_FOR_EXPERT(DELTA_FILE, ResourceMsg(COMMAND_PVCS_DIFF_DeltaFile), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_DIFF_DeltaFile);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_DIFF_DeltaFile_mnc)), SELECTOR_FILE)
          </value>
	</property>
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.actions.DiffCommandAction</value>
        </property>
        <property name="generalCommandActionDisplayName">
          <value>ResourceMsg(PVCS_GENERAL_ACTION_DIFF)</value>
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
        <property name="associatedCommandInterfaceName">
          <value>org.netbeans.api.vcs.commands.DiffCommand</value>
        </property>
      </command>
      <command name="APPLY_DELTA" displayName="ResourceMsg(PVCS_APPLY_DELTA)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_APPLY_DELTA_Mnemonic)</value>
        </property>
        <run dir="${WORKDIR}">
          <executable value="cmd.exe" if="IS_WINNT"/>
          <executable value="/bin/sh" unless="IS_WINNT"/>
          <arg value="/X" if="IS_WINNT"/>
          <arg value="/C" if="IS_WINNT"/>
          <arg value="-c" unless="IS_WINNT"/>
          <arg value="regen &quot;${WORKDIR}${PS}${FILE}&quot; &quot;${DELTA_FILE}&quot; &gt; &quot;${TEMPORARY_FILE}&quot;"/>
        </run>
  	<property name="inputDescriptor">
 	  <value>LABEL(ResourceMsg(COMMAND_PVCS_APPLY_DELTA_Label),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_APPLY_DELTA_Label)))
                 VARIABLE_DEFAULTS(DELTA_FILE USER)
                 PROMPT_FOR(DELTA_FILE, ResourceMsg(COMMAND_PVCS_APPLY_DELTA_DeltaFile), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_APPLY_DELTA_DeltaFile);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_APPLY_DELTA_DeltaFile_mnc)), SELECTOR_FILE)
          </value>
	</property>
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
        <property name="checkForModifications">
	  <value>true</value>
	</property>
        <property name="commandsAfterSuccess">
          <value>COPY_APPLIED_DELTA</value>
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
      </command>
      <command name="COPY_APPLIED_DELTA">
        <run>
          <executable value="cp" unless="IS_WINNT"/>
          <executable value="cmd.exe" if="IS_WINNT"/>
          <arg value="/X" if="IS_WINNT"/>
          <arg value="/C" if="IS_WINNT"/>
          <arg value="copy" if="IS_WINNT"/>
          <arg value="/Y" if="IS_WINNT"/>
          <arg value="${TEMPORARY_FILE}"/>
          <arg value="${WORKDIR}${PS}${FILE}"/>
        </run>
        <property name="checkForModifications">
	  <value>true</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
      </command>
      <command name="BACKUP_FILE">
	<property name="exec">
	  <value>${RUN} mv ${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE} ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} ${NUR}</value>
	  <value if="IS_WINNT">${RUN} (attrib -r ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} >nul || echo.>nul) &amp;&amp; (del ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} 2>nul || echo.>nul) &amp;&amp; (move ${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE} ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} 2>nul || echo.>nul) ${NUR}</value>
	</property>
      </command>
      <command name="UNBACKUP_FILE">
	<property name="exec">
	  <value>${RUN} mv ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} ${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE} ${NUR}</value>
	  <value if="IS_WINNT">${RUN} (move ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} ${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE} 2>nul || echo.>nul) ${NUR}</value>
	</property>
        <property name="ignoreFail">
          <value>true</value>
        </property>
      </command>
      <command name="MERGE" displayName="ResourceMsg(PVCS_MERGE)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_MERGE_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <!--
	<property name="exec">
	  <value>${RUN} ${CD} ${CMD_QUOTE}${WORKDIR}${CMD_QUOTE}; mv ${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE} ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE}; vmrg -n $[? PARENT] [-r${PARENT_REVISION}] [-v${CMD_QUOTE}${PARENT_VERSION}${CMD_QUOTE}] $[? BRANCH1] [$[? BRANCH1_REVISION] [-r${BRANCH1_REVISION}] []] [$[? BRANCH1_VERSION] [-v${CMD_QUOTE}${BRANCH1_VERSION}${CMD_QUOTE}] []] $[? BRANCH2] [$[? BRANCH2_REVISION] [-r${BRANCH2_REVISION}] []] [$[? BRANCH2_VERSION] [-v${CMD_QUOTE}${BRANCH2_VERSION}${CMD_QUOTE}] []] $[? OUT_FILE] [-o${CMD_QUOTE}${OUT_FILE}${CMD_QUOTE}] [] ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}\(${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}\) ${NUR}</value>
	  <value if="IS_WINNT">${RUN} ${CD} ${CMD_QUOTE}${WORKDIR}${CMD_QUOTE} &amp;&amp; (attrib -r ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} >nul || echo.>nul) &amp;&amp; (del ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} 2>nul || echo.>nul) &amp;&amp; (move ${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE} ${CMD_QUOTE}${WORKDIR}${PS}${FILE}.orig${CMD_QUOTE} 2>nul || echo.>nul) &amp;&amp; vmrg -n $[? PARENT] [-r${PARENT_REVISION}] [-v${CMD_QUOTE}${PARENT_VERSION}${CMD_QUOTE}] $[? BRANCH1] [$[? BRANCH1_REVISION] [-r${BRANCH1_REVISION}] []] [$[? BRANCH1_VERSION] [-v${CMD_QUOTE}${BRANCH1_VERSION}${CMD_QUOTE}] []] $[? BRANCH2] [$[? BRANCH2_REVISION] [-r${BRANCH2_REVISION}] []] [$[? BRANCH2_VERSION] [-v${CMD_QUOTE}${BRANCH2_VERSION}${CMD_QUOTE}] []] $[? OUT_FILE] [-o${CMD_QUOTE}${OUT_FILE}${CMD_QUOTE}] [] ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}(${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}) ${NUR}</value>
	</property>
        -->
        <run dir="${WORKDIR}">
          <executable value="vmrg"/>
          <arg value="-n"/>
          <arg value="$[? PARENT] [-r${PARENT_REVISION}] [-v${PARENT_VERSION}]"/>
          <arg value="$[? BRANCH1] [$[? BRANCH1_REVISION] [-r${BRANCH1_REVISION}] []] [$[? BRANCH1_VERSION] [-v${BRANCH1_VERSION}] []]"/>
          <arg value="$[? BRANCH2] [$[? BRANCH2_REVISION] [-r${BRANCH2_REVISION}] []] [$[? BRANCH2_VERSION] [-v${BRANCH2_VERSION}] []]"/>
          <arg value="$[? OUT_FILE] [-o${OUT_FILE}] []"/>
          <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})"/>
        </run>
        <property name="preCommands">
          <value>$[? OUT_FILE] [] [BACKUP_FILE]</value>
        </property>
  	<property name="inputDescriptor">
 	  <value>LABEL(ResourceMsg(COMMAND_PVCS_MERGE_Label),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_Label)))
                 VARIABLE_DEFAULTS(PARENT USER, PARENT_REVISION USER, PARENT_VERSION USER, BRANCH1 USER, BRANCH1_REVISION USER, BRANCH1_VERSION USER, BRANCH2 USER, BRANCH2_REVISION USER, BRANCH2_VERSION USER, OUT_FILE EXPERT_USER)
                 SELECT_RADIO(PARENT, ResourceMsg(COMMAND_PVCS_MERGE_Parent), "R",
                  [ResourceMsg(COMMAND_PVCS_MERGE_RevisionNumberPR), "R", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_Parent_RevisionNumber);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_Parent_RevisionNumber_mnc)),
                    PROMPT_FOR(PARENT_REVISION, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_Parent_RevisionNumber)))],
                  [ResourceMsg(COMMAND_PVCS_MERGE_VersionLabelPR), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_Parent_VersionLabel);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_Parent_VersionLabel_mnc)),
                    PROMPT_FOR(PARENT_VERSION, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_Parent_VersionLabel)))])
                 SELECT_RADIO(BRANCH1, ResourceMsg(COMMAND_PVCS_MERGE_Branch1), "R",
                  [ResourceMsg(COMMAND_PVCS_MERGE_RevisionNumberB1), "R", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B1_RevisionNumber);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_B1_RevisionNumber_mnc)),
                    PROMPT_FOR(BRANCH1_REVISION, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B1_RevisionNumber)))],
                  [ResourceMsg(COMMAND_PVCS_MERGE_VersionLabelB1), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B1_VersionLabel);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_B1_VersionLabel_mnc)),
                    PROMPT_FOR(BRANCH1_VERSION, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B1_VersionLabel)))])
                 SELECT_RADIO(BRANCH2, ResourceMsg(COMMAND_PVCS_MERGE_Branch2), "R",
                  [ResourceMsg(COMMAND_PVCS_MERGE_RevisionNumberB2), "R", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B2_RevisionNumber);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_B2_RevisionNumber_mnc)),
                    PROMPT_FOR(BRANCH2_REVISION, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B2_RevisionNumber)))],
                  [ResourceMsg(COMMAND_PVCS_MERGE_VersionLabelB2), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B2_VersionLabel);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_B2_VersionLabel_mnc)),
                    PROMPT_FOR(BRANCH2_VERSION, "", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_B2_VersionLabel)))])
                 PROMPT_FOR_EXPERT(OUT_FILE, ResourceMsg(COMMAND_PVCS_MERGE_OutFile), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_MERGE_OutFile);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_MERGE_OutFile_mnc)), SELECTOR_FILE)
          </value>
	</property>
	<property name="onDir">
	  <value>false</value>
	</property>
	<property name="onRoot">
	  <value>false</value>
	</property>
        <property name="commandsAfterFail">
          <value>$[? OUT_FILE] [] [UNBACKUP_FILE]</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
	<property name="checkForModifications">
	  <value>true</value>
	</property>
        <property name="refreshCurrentFolder">
          <value>true</value>
        </property>
        <property name="disabledOnStatus">
          <value>&local-statuses;</value>
        </property>
      </command>
      <separator />
      <command name="SET_PASSWORD" displayName="ResourceMsg(SET_PASSWORD, ${USER_NAME})">
        <property name="labelMnemonic">
          <value>ResourceMsg(SET_PASSWORD_Mnemonic)</value>
        </property>
	<property name="exec">
	  <value>vcs.commands.SetPasswordCommand.class</value>
	</property>
        <property name="concurrentExec">
          <value>-1</value>
        </property>
	<property name="onNonRecursiveDir">
	  <value>true</value>
	</property>
        <property name="runOnMultipleFiles">
          <value>true</value>
        </property>
      </command>
      <command name="CHECKOUT_CMD">
        <!--
	<property name="exec">
	  <value>${RUN} get -y $[? REVISION] [-r${CMD_QUOTE}${REVISION}${CMD_QUOTE}] [] $[? SUFFIX] [-s${SUFFIX}] [] ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${TEMPDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}</value>
	</property>
        -->
        <run dir="${WORKDIR}">
            <executable value="get"/>
            <arg value="$[? REVISION] [-r${REVISION}] []"/>
            <arg value="$[? SUFFIX] [-s${SUFFIX}] []"/>
            <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${TEMPDIR}${PS}${FILE})"/>
        </run>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
      </command>
      <command name="DIFF_CA_CMD">
        <!--
	<property name="exec">
	  <value>${RUNW} vdiff -dl $[? REV_VER1] [-r${REVISION1}] [-v${CMD_QUOTE}${VERSION1}${CMD_QUOTE}] $[? REV_VER2] [$[? REVISION2] [-r${REVISION2}] []] [$[? VERSION2] [-v${CMD_QUOTE}${VERSION2}${CMD_QUOTE}] []] ${IGNORE_WHITE} ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}</value>
	</property>
        -->
        <run dir="${WORKDIR}">
          <executable value="vdiff"/>
          <arg value="-dl"/>
          <arg value="$[? revision] [-r${revision}] []"/>
          <arg value="$[? REV_VER1] [-r${REVISION1}] [$[? VERSION1] [-v${VERSION1}] [-r]]"/>
          <arg value="$[? REV_VER2] [$[? REVISION2] [-r${REVISION2}] []] [$[? VERSION2] [-v${VERSION2}] []]"/>
          <arg value="${IGNORE_WHITE}"/>
          <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})"/>
        </run>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
      </command>
      <command name="DIFF_CA_REVISIONS_CMD">
        <!--
	<property name="exec">
	  <value>${RUNW} vdiff -dl -r${REVISION1} $[? REVISION2] [-r${REVISION2}] [] ${IGNORE_WHITE} ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}</value>
	</property>
        -->
        <run dir="${WORKDIR}">
          <executable value="vdiff"/>
          <arg value="-dl"/>
          <arg value="-r${REVISION1}"/>
          <arg value="$[? REVISION2] [-r${REVISION2}] []"/>
          <arg value="${IGNORE_WHITE}"/>
          <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})"/>
        </run>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
      </command>

      <command name="LIST_PROJECT">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="list ${PRID} -pp${QUOTE}${PROJECT}$[? COMMON_PARENT] [/${COMMON_PARENT_\/}] []$[? DIR] [/${DIR_\/}] []${QUOTE} -l -a *"/>
        </run>
        <property name="error.regex">
          <value>^PVCS Version Manager \(VMGUI\) v([0-9]+)\.([0-9\.]+) .*$</value>
        </property>
        <property name="ignoreFail">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
      </command>
      <command name="LIST_PROJECT_REC">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="list ${PRID} -pp${QUOTE}${PROJECT}$[? COMMON_PARENT] [/${COMMON_PARENT_\/}] []$[? DIR] [/${DIR_\/}] []${QUOTE} -l -a -z *"/>
        </run>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
      </command>
      <command name="LIST_SUBPROJECTS">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="list ${PRID} -pp${QUOTE}/$[? COMMON_PARENT] [/${COMMON_PARENT_\/}] []$[? DIR] [/${DIR_\/}] []${QUOTE} -tProject *"/>
        </run>
        <property name="ignoreFail">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
        <property name="executionPriority">
          <value>1</value> <!-- HIGH PRIORITY -->
        </property>
      </command>
      <command name="DIFF_TEST_CMD">
        <property name="exec">
          <value>${RUN} vdiff $[? REVISION] [-r${REVISION}] [] -t ${CMD_QUOTE}${ARCHIVE}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKFILE}${CMD_QUOTE}${ESCAPED_)}; test `echo $?` != 2 ${NUR}</value>
          <value if="IS_WINNT">${RUN} vdiff $[? REVISION] [-r${REVISION}] [] -t ${CMD_QUOTE}${ARCHIVE}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKFILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}</value>
        </property>
        <property name="ignoreFail">
          <value>true</value>
        </property>
        <property name="concurrentExec">
          <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
        </property>
      </command>

    </command>
    
    <command name="RESOLVE_CONFLICTS" displayName="ResourceMsg(PVCS_RESOLVE_CONFLICTS)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_RESOLVE_CONFLICTS_Mnemonic)</value>
        </property>
        <property name="exec">
            <value>org.netbeans.modules.vcs.profiles.pvcs.commands.PvcsResolveConflicts.class</value>
	</property>
        <property name="onFile">
            <value>true</value>
        </property>
        <property name="onDir">
            <value>false</value>
        </property>
        <property name="onRoot">
            <value>false</value>
        </property>
        <property name="disabledOnStatus">
            <value>"Missing"</value>
	</property>
    </command>

    <command name="REVISION_LIST">
      <property name="exec">
        <value>$[? LOCALIZED_PROFILE_COPY] [vcs.commands.PvcsRevisionListGetterLocalized.class] [vcs.commands.PvcsRevisionListGetter.class] REVISION_GETTER</value>
      </property>
      <property name="disabledOnStatus">
          <value>"Local", "Ignored"</value>
      </property>
      <property name="ignoreFail">
	<value>true</value>
      </property>
      <property name="concurrentExec">
        <value>-1</value> <!-- EXEC_SERIAL_INERT -->
      </property>
    </command>
    <command name="REVISION_GETTER">
      <!--
      <property name="exec">
          <value>${RUN} vlog -i ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}</value>
      </property>
      -->
      <run dir="${WORKDIR}">
        <executable value="vlog"/>
        <arg value="-i"/>
        <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})"/>
      </run>
      <property name="concurrentExec">
        <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
      </property>
    </command>
    <command name="REVISION_OPEN">
      <!--
      <property name="exec">
          <value>${RUN} get -y $[? REVISION] [-r${REVISION}] [] -p ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_)} ${NUR}</value>
      </property>
      -->
      <run dir="${WORKDIR}">
        <executable value="get"/>
        <arg value="-y"/>
        <arg value="$[? REVISION] [-r${REVISION}] []"/>
        <arg value="-p"/>
        <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})"/>
      </run>
      <property name="numRevisions">
	<value>1</value>
      </property>
      <property name="concurrentExec">
        <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
      </property>
    </command>
    <command name="REVISION_DIFF" displayName="ResourceMsg(PVCS_DIFF)">
      <property name="labelMnemonic">
        <value>ResourceMsg(PVCS_DIFF_Mnemonic)</value>
      </property>
      <property name="exec">
        <value>vcs.commands.Diff.class ${REVISION1} 3 CHECKOUT_CMD DIFF_CA_REVISIONS_CMD</value>
      </property>
      <property name="numRevisions">
	<value>1</value>
      </property>
      <property name="concurrentExec">
        <value>-1</value> <!-- EXEC_SERIAL_INERT -->
      </property>
    </command>
    <command name="REVISION_DIFF2" displayName="ResourceMsg(PVCS_DIFF)">
      <property name="labelMnemonic">
        <value>ResourceMsg(PVCS_DIFF_Mnemonic)</value>
      </property>
      <property name="exec">
        <value>vcs.commands.Diff.class ${REVISION1} ${REVISION2} 3 CHECKOUT_CMD DIFF_CA_REVISIONS_CMD</value>
      </property>
      <property name="numRevisions">
	<value>2</value>
      </property>
      <property name="concurrentExec">
        <value>-1</value> <!-- EXEC_SERIAL_INERT -->
      </property>
    </command>

    <command name="VERIFY_ACTION">
        <property name="exec">
            <value>vcs.commands.PvcsVerifyAction.class LOCK_</value>
        </property>
        <property name="runOnMultipleFiles">
          <value>true</value>
        </property>
        <property name="generalCommandActionClassName">
          <value>org.netbeans.modules.vcscore.grouping.VerifyGroupAction</value>
        </property>
        <property name="concurrentExec">
          <value>-1</value> <!-- EXEC_SERIAL_INERT -->
        </property>
        <property name="executionPriority">
          <value>1</value> <!-- HIGH PRIORITY -->
        </property>
    </command>
    <command name="VERIFY_ACTION_DIFF">
        <!--
        <property name="exec">
            <value>${RUNW} vdiff -t -r ${CMD_QUOTE}{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}${CMD_QUOTE}${ESCAPED_(}${CMD_QUOTE}${WORKDIR}${PS}${FILE}${CMD_QUOTE}${ESCAPED_(} ${NUR}</value>
        </property>
        -->
        <run dir="${WORKDIR}">
          <executable value="vdiff"/>
          <arg line="-t -r"/>
          <arg value="{INSERT_OUTPUT_OF_GET_ARCHIVE_LOCATION(0)}(${WORKDIR}${PS}${FILE})"/>
        </run>
        <property name="executionPriority">
          <value>1</value> <!-- HIGH PRIORITY -->
        </property>
    </command>

    <command name="AUTO_FILL_CONFIG">
      <property name="exec">
        <value>vcs.commands.PvcsAutoFillConfig.class GET_WORK_LOCATION</value>
      </property>
      <property name="concurrentExec">
        <value>-1</value> <!-- EXEC_SERIAL_INERT -->
      </property>
      <property name="ignoreFail">
	<value>true</value>
      </property>
    </command>
    <command name="PROJECT_DATABASE_SELECTOR">
      <property name="exec">
        <value>org.netbeans.modules.vcs.profiles.pvcs.commands.PvcsProjectDatabaseSelector.class LIST_PROJECT_DB</value>
      </property>
      <property name="concurrentExec">
        <value>-1</value> <!-- EXEC_SERIAL_INERT -->
      </property>
      <property name="executionPriority">
        <value>1</value> <!-- HIGH PRIORITY -->
      </property>
    </command>
    <command name="LIST_PROJECT_DB">
      <run>
        <executable value="${PCLI_CMD}"/>
        <arg value="ListProjectDB $[? GUI_DEF] [-a] [-z ${QUOTE}${SEARCH_PATH}${QUOTE}] $[? USER_NAME] [-id${QUOTE}${USER_NAME}:${PASSWORD}${QUOTE}] []"/>
      </run>
      <property name="concurrentExec">
        <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
      </property>
    </command>
    <command name="PROJECT_SELECTOR">
      <property name="exec">
        <value>org.netbeans.modules.vcs.profiles.pvcs.commands.PvcsProjectSelector.class LIST_SUBPROJECTS</value>
      </property>
      <property name="concurrentExec">
        <value>-1</value> <!-- EXEC_SERIAL_INERT -->
      </property>
      <property name="executionPriority">
        <value>1</value> <!-- HIGH PRIORITY -->
      </property>
    </command>
    <command name="GET_ARCHIVE_LOCATION">
      <run>
        <executable value="$[? CACHED_ATTR] [org.netbeans.modules.vcs.profiles.commands.Echo.class] [${PCLI_CMD}]"/>
        <arg value="$[? CACHED_ATTR] [${CACHED_ATTR}] [GetArchiveLocation ${PRID} /${QUOTE}${PROJECT_\/}/$[? COMMON_PARENT] [${COMMON_PARENT_\/}/] []$[? DIR] [${DIR_\/}/] []${FILE}${QUOTE}]"/>
      </run>
      <property name="concurrentExec">
        <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
      </property>
    </command>
    <command name="GET_WORK_LOCATION">
      <run>
        <executable value="${PCLI_CMD}"/>
        <arg value="GetWorkLocation -pr${QUOTE}${PROJECT_DB}${QUOTE} $[? USER_NAME] [-id${QUOTE}${USER_NAME}${QUOTE}] [] -pp${QUOTE}${PROJECT}${QUOTE}"/>
      </run>
      <property name="concurrentExec">
        <value>2</value> <!-- EXEC_SERIAL_ON_PACKAGE -->
      </property>
      <property name="ignoreFail">
	<value>true</value>
      </property>
    </command>
  </commands>

  <globalCommands>
    <command name="ROOT" displayName="ResourceMsg(PVCS)">
      <property name="labelMnemonic">
        <value>ResourceMsg(PVCS_Mnemonic)</value>
      </property>
      <command name="CREATE_PROJECT_DATABASE" displayName="ResourceMsg(GLOBAL_PVCS_CREATE_PROJECT_DATABASE)">
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="CreateProjectDB -pr${QUOTE}${DB_PATH}${QUOTE} $[? DB_NAME] [-n${QUOTE}${DB_NAME}${QUOTE}] [] -w${QUOTE}${DB_WORK}${QUOTE}"/>
        </run>
	<property name="inputDescriptor">
	  <value>LABEL(ResourceMsg(PVCS_CREATE_PROJECT_DATABASE), ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_CREATE_PROJECT_DATABASE_Label)))
                 VARIABLE_DEFAULTS(DB_PATH USER, DB_WORK USER, DB_NAME USER)
                 PROMPT_FOR(DB_PATH, "ResourceMsg(GCOMMAND_Database)", "",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_Database);;MNEMONIC_ResourceMsg(GCOMMAND_Database_Mnemonic)),
                            VALIDATOR_FOLDER, SELECTOR_DIR)
                 PROMPT_FOR(DB_WORK, "ResourceMsg(GCOMMAND_Work)", "",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_Work);;MNEMONIC_ResourceMsg(GCOMMAND_Work_Mnemonic)),
                            VALIDATOR_FOLDER, SELECTOR_DIR)
                 PROMPT_FOR(DB_NAME, "ResourceMsg(GCOMMAND_CREATE_PROJECT_DATABASE_Name)", "",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_CREATE_PROJECT_DATABASE_Name);;MNEMONIC_ResourceMsg(GCOMMAND_CREATE_PROJECT_DATABASE_Name_Mnemonic)))
          </value>
        </property>
      </command>
      <command name="GET" displayName="ResourceMsg(GLOBAL_PVCS_GET)">
        <property name="labelMnemonic">
          <value>ResourceMsg(PVCS_CHECKOUT_Mnemonic)</value>
        </property>
	<property name="supportsAdvancedMode">
	  <value>true</value>
	</property>
        <run>
          <executable value="${PCLI_CMD}"/>
          <arg value="Get -pr${QUOTE}${PROJECT_DB}${QUOTE} $[? USER_NAME] [-id${QUOTE}${USER_NAME}:${PASSWORD}${QUOTE}] [] -pp${QUOTE}${PROJECT}${QUOTE} $[? WORK_PATH] [-a${QUOTE}${WORK_PATH}${QUOTE} -o] [] ${RECURSIVE} ${SHOULD_LOCK} ${WRITABLE} $[? REVISION] [-r${REVISION}] [] $[? VERSION] [-v${QUOTE}${VERSION}${QUOTE}] [] $[? DO_CHECKOUT_BY_DATE] [$[? CHECKOUT_BY_DATE] [$[? CHECKOUT_BY_DATE - DATE_OPERATION_IDENT] [${CHECKOUT_BY_DATE}] [-d${DATE_BEFORE}]] [-u${DATE_AFTER}]] [] ${SET_CURR_TIME} /"/>
        </run>
        <property name="inputDescriptor">
          <value>LABEL(ResourceMsg(PVCS_CHECKOUT),ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CHECKOUT)))
                 VARIABLE_DEFAULTS(PROJECT_DB USER, USER_NAME USER, PROJECT USER, WORK_PATH USER, SHOULD_LOCK USER, WRITABLE USER)
                 PROMPT_FOR(PROJECT_DB, "ResourceMsg(GCOMMAND_Database)", "",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_Database);;MNEMONIC_ResourceMsg(GCOMMAND_GET_Database_Mnemonic)),
                            VALIDATOR_FOLDER, SELECTOR_DIR)
                 PROMPT_FOR(USER_NAME, "ResourceMsg(PVCS_CUST_UserName)", "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_PVCS_CUST_UserName);;MNEMONIC_ResourceMsg(ACS_PVCS_CUST_UserName_mnc)))
                 PROMPT_FOR(PROJECT, "ResourceMsg(GCOMMAND_Project)", "/",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_Project);;MNEMONIC_ResourceMsg(GCOMMAND_GET_Project_Mnemonic)), VALIDATOR_NON_EMPTY)
                 PROMPT_FOR(WORK_PATH, "ResourceMsg(GCOMMAND_Work)", "",
                            ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_GCOMMAND_Work);;MNEMONIC_ResourceMsg(GCOMMAND_GET_Work_Mnemonic)),
                            VALIDATOR_FOLDER, SELECTOR_DIR)
                 ASK_FOR(SHOULD_LOCK, ResourceMsg(COMMAND_PVCS_CHECKOUT_Lock), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Lock);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Lock_mnc)), "-l", "")
                 ASK_FOR(WRITABLE, ResourceMsg(COMMAND_PVCS_CHECKOUT_Writable), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Writable);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Writable_mnc)), "-w", "")
                 PROMPT_FOR_EXPERT(REVISION, ResourceMsg(COMMAND_PVCS_CHECKOUT_Revision), "",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Revision);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Revision_mnc)))
                 PROMPT_FOR_EXPERT(VERSION, ResourceMsg(COMMAND_PVCS_CHECKOUT_Version), "",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Version);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Version_mnc)))
                 ASK_FOR_EXPERT(DO_CHECKOUT_BY_DATE, ResourceMsg(COMMAND_PVCS_CHECKOUT_ByDate), "false", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_ByDate);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_ByDate_mnc)), ENABLE(CHECKOUT_BY_DATE))
                 SELECT_RADIO_EXPERT(CHECKOUT_BY_DATE, "", "-u",
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_NewerThanWork), "-u", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_NewerThanWork);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_NewerThanWork_mnc))],
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_NewerThan), "", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_NewerThan);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_NewerThan_mnc)),
                    PROMPT_FOR_EXPERT(DATE_AFTER, "")],
                  [ResourceMsg(COMMAND_PVCS_CHECKOUT_InBefore), "D", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_InBefore);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_InBefore_mnc)),
                    PROMPT_FOR_EXPERT(DATE_BEFORE, "")])
                 ASK_FOR_EXPERT(SET_CURR_TIME, ResourceMsg(COMMAND_PVCS_CHECKOUT_SetCurrTime), "false",ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_SetCurrTime);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_SetCurrTime_mnc)), "-t", "")
                 ASK_FOR(RECURSIVE, ResourceMsg(COMMAND_PVCS_CHECKOUT_Recursive), "true", ACCESSIBILITY(DESCRIPTION_ResourceMsg(ACSD_COMMAND_PVCS_CHECKOUT_Recursive);;MNEMONIC_ResourceMsg(ACS_COMMAND_PVCS_CHECKOUT_Recursive_mnc)), "-z", "")
          </value>
	</property>
	<property name="displayInteractive">
	  <value>true</value>
	</property>
	<property name="data.regex">
	  <value>$ ^</value>
	</property>
	<property name="error.regex">
	  <value>$ ^</value>
	</property>
        <property name="commandsAfterSuccess">
          <value>GLOBAL_REGISTER</value>
        </property>
      </command>
      <command name="GLOBAL_REGISTER">
        <property name="exec">
          <value>org.netbeans.modules.vcs.profiles.pvcs.commands.PvcsGlobalRegister.class</value>
        </property>
        <property name="executionPriority">
          <value>1</value> <!-- HIGH PRIORITY -->
        </property>
        <property name="ignoreFail">
          <value>true</value>
        </property>
      </command>
    </command>
  </globalCommands>
  
</configuration>


/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.projectpackager.exporter;

import java.util.Vector;

/**
 * Export zip dialog
 * @author Roman "Roumen" Strobl
 */
public class ExportZipDialog extends javax.swing.JFrame {
    private Vector listData;

    /**
     * Creates new ZipProjectDialog
     */

    public ExportZipDialog() {
        listData = ExportZipUITools.getListData();
        initComponents();
        // XXX forgot I18N on forms!
        projectList.setListData(listData);
        setLocationRelativeTo(null);
        if (listData.size()==1) {
   projectList.setSelectedIndex(0);
        }        
        if (ExportPackageInfo.getTargetDir()!=null && !ExportPackageInfo.getTargetDir().equals("")) { 
            targetDirectoryField.setText(ExportPackageInfo.getTargetDir());
        }
        if (ExportPackageInfo.isSendMail()) {
            mailCheckBox.setSelected(true);
            mailAddress.setText(ExportPackageInfo.getEmail());
            mailAddress.setEnabled(true);
            deleteCheckBox.setEnabled(true);
        } else {
            mailAddress.setEnabled(false);
            deleteCheckBox.setEnabled(false);
        }
        if (ExportPackageInfo.isDeleteZip()) {
            deleteCheckBox.setSelected(true);
        }
        ExportZipUITools.setZipProjectDialog(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        targetDirectory = new javax.swing.JLabel();
        targetDirectoryField = new javax.swing.JTextField();
        chooseButton = new javax.swing.JButton();
        mailCheckBox = new javax.swing.JCheckBox();
        mailAddress = new javax.swing.JTextField();
        deleteCheckBox = new javax.swing.JCheckBox();
        emailSettings = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Project(s) as Zip");
        setResizable(false);
        jLabel1.setText("Project(s) to Zip:");

        targetDirectory.setText("Target Directory:");

        targetDirectoryField.setText(" ");

        chooseButton.setText("...");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        mailCheckBox.setText("Send Zip(s) to E-mail Address:");
        mailCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mailCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        mailCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailCheckBoxActionPerformed(evt);
            }
        });

        deleteCheckBox.setText("Delete Zip(s) After Sending");
        deleteCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        deleteCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        emailSettings.setText("E-mail Settings...");
        emailSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailSettingsActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(projectList);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mailCheckBox)
                    .add(deleteCheckBox)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, emailSettings)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 256, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(targetDirectory)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(targetDirectoryField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 289, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)
                        .add(chooseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(targetDirectory)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(targetDirectoryField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chooseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteCheckBox)
                .add(9, 9, 9)
                .add(emailSettings)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 10, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(okButton))
                .addContainerGap())
        );
        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void mailCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailCheckBoxActionPerformed
        processMailCheckbox();
    }//GEN-LAST:event_mailCheckBoxActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ExportZipUITools.processOkButton();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        ExportZipUITools.processCancelButton();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void emailSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailSettingsActionPerformed
        ExportZipUITools.showEmailSettings();
    }//GEN-LAST:event_emailSettingsActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        ExportZipUITools.showFileChooser();
    }//GEN-LAST:event_chooseButtonActionPerformed
           

    /**
     * Set target directory
     * @param targetDir target directory
     */
    public void setTargetDir(String targetDir) {
        targetDirectoryField.setText(targetDir);
    }
    
    /**
     * Return target directory
     * @return target directory
     */
    public String getTargetDir() {
        return targetDirectoryField.getText();
    }
    
    /**
     * Return selection indices of projects
     * @return selected projects
     */
    public int[] getSelectedIndices() {
        return projectList.getSelectedIndices();
    }
    
    /**
     * Is mail selected?
     * @return true if selected
     */
    public boolean isMailSelected() {
        return mailCheckBox.isSelected();
    }
    
    /**
     * Return mail
     * @return mail
     */
    public String getMail() {
        return mailAddress.getText();
    }
    
    /**
     * Is delete selected?
     * @return true if selected
     */
    public boolean isDeleteSelected() {
        return deleteCheckBox.isSelected();
    }
    
    /**
     * Process mail checkbox according to user's actions
     */
    public void processMailCheckbox() {
        if (mailCheckBox.isSelected()) {
            mailAddress.setEnabled(true);
            deleteCheckBox.setEnabled(true);
        } else {
            mailAddress.setEnabled(false);
            deleteCheckBox.setEnabled(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JCheckBox deleteCheckBox;
    private javax.swing.JButton emailSettings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mailAddress;
    private javax.swing.JCheckBox mailCheckBox;
    private javax.swing.JButton okButton;
    private javax.swing.JList projectList;
    private javax.swing.JLabel targetDirectory;
    private javax.swing.JTextField targetDirectoryField;
    // End of variables declaration//GEN-END:variables

}

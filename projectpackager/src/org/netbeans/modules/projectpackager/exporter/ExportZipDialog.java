/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2005 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.projectpackager.exporter;

import java.util.Vector;

/**
 * Export zip dialog
 * @author Roman "Roumen" Strobl
 */
public class ExportZipDialog extends javax.swing.JFrame {
    private Vector listData;
    
    /**
     * Creates new ZipProjectDialog
     */
    public ExportZipDialog() {
        listData = ExportZipUITools.getListData();
        initComponents();
        projectList.setListData(listData);
        setLocationRelativeTo(null);
        if (listData.size()==1) {
            projectList.setSelectedIndex(0);
        }        
        if (ExportPackageInfo.getTargetDir()!=null && !ExportPackageInfo.getTargetDir().equals("")) { 
            targetDirectoryField.setText(ExportPackageInfo.getTargetDir());
        }
        if (ExportPackageInfo.isSendMail()) {
            mailCheckBox.setSelected(true);
            mailAddress.setText(ExportPackageInfo.getEmail());
            mailAddress.setEnabled(true);
            deleteCheckBox.setEnabled(true);
        } else {
            mailAddress.setEnabled(false);
            deleteCheckBox.setEnabled(false);
        }
        if (ExportPackageInfo.isDeleteZip()) {
            deleteCheckBox.setSelected(true);
        }
        ExportZipUITools.setZipProjectDialog(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ZipProjectPanel = new javax.swing.JPanel();
        targetDirectory = new javax.swing.JLabel();
        chooseButton = new javax.swing.JButton();
        targetDirectoryField = new javax.swing.JTextField();
        mailCheckBox = new javax.swing.JCheckBox();
        mailAddress = new javax.swing.JTextField();
        deleteCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        chooseProjects = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();
        emailSettings = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Project(s) as Zip");
        setResizable(false);
        ZipProjectPanel.setLayout(new java.awt.GridBagLayout());

        ZipProjectPanel.setPreferredSize(new java.awt.Dimension(305, 260));
        ZipProjectPanel.setRequestFocusEnabled(false);
        targetDirectory.setText("Target Directory:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        ZipProjectPanel.add(targetDirectory, gridBagConstraints);

        chooseButton.setText("...");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        ZipProjectPanel.add(chooseButton, gridBagConstraints);

        targetDirectoryField.setColumns(27);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        ZipProjectPanel.add(targetDirectoryField, gridBagConstraints);

        mailCheckBox.setText("Send Zip(s) to E-mail Address:");
        mailCheckBox.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0, 0)));
        mailCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        mailCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        ZipProjectPanel.add(mailCheckBox, gridBagConstraints);

        mailAddress.setColumns(27);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 20, 3, 3);
        ZipProjectPanel.add(mailAddress, gridBagConstraints);

        deleteCheckBox.setText("Delete Zip(s) after Sending");
        deleteCheckBox.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0, 0)));
        deleteCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        ZipProjectPanel.add(deleteCheckBox, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(300, 100));
        jPanel1.setRequestFocusEnabled(false);
        chooseProjects.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chooseProjects.setText("Choose Project(s):");
        chooseProjects.setFocusable(false);
        chooseProjects.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 3, 3, 3);
        jPanel1.add(chooseProjects, gridBagConstraints);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        projectList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "project" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        projectList.setVisibleRowCount(5);
        jScrollPane2.setViewportView(projectList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        ZipProjectPanel.add(jPanel1, gridBagConstraints);

        emailSettings.setText("E-mail Settings...");
        emailSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailSettingsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        ZipProjectPanel.add(emailSettings, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(ZipProjectPanel, gridBagConstraints);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 10, 3);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 10, 10);
        getContentPane().add(cancelButton, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void emailSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailSettingsActionPerformed
        ExportZipUITools.showEmailSettings();
    }//GEN-LAST:event_emailSettingsActionPerformed
    
    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        ExportZipUITools.showFileChooser();
    }//GEN-LAST:event_chooseButtonActionPerformed
    
    private void mailCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailCheckBoxActionPerformed
        processMailCheckbox();
    }//GEN-LAST:event_mailCheckBoxActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        ExportZipUITools.processCancelButton();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ExportZipUITools.processOkButton();
    }//GEN-LAST:event_okButtonActionPerformed
    
    /**
     * Set target directory
     * @param targetDir target directory
     */
    public void setTargetDir(String targetDir) {
        targetDirectoryField.setText(targetDir);
    }
    
    /**
     * Return target directory
     * @return target directory
     */
    public String getTargetDir() {
        return targetDirectoryField.getText();
    }
    
    /**
     * Return selection indices of projects
     * @return selected projects
     */
    public int[] getSelectedIndices() {
        return projectList.getSelectedIndices();
    }
    
    /**
     * Is mail selected?
     * @return true if selected
     */
    public boolean isMailSelected() {
        return mailCheckBox.isSelected();
    }
    
    /**
     * Return mail
     * @return mail
     */
    public String getMail() {
        return mailAddress.getText();
    }
    
    /**
     * Is delete selected?
     * @return true if selected
     */
    public boolean isDeleteSelected() {
        return deleteCheckBox.isSelected();
    }
    
    /**
     * Process mail checkbox according to user's actions
     */
    public void processMailCheckbox() {
        if (mailCheckBox.isSelected()) {
            mailAddress.setEnabled(true);
            deleteCheckBox.setEnabled(true);
        } else {
            mailAddress.setEnabled(false);
            deleteCheckBox.setEnabled(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ZipProjectPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JLabel chooseProjects;
    private javax.swing.JCheckBox deleteCheckBox;
    private javax.swing.JButton emailSettings;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mailAddress;
    private javax.swing.JCheckBox mailCheckBox;
    private javax.swing.JButton okButton;
    private javax.swing.JList projectList;
    private javax.swing.JLabel targetDirectory;
    private javax.swing.JTextField targetDirectoryField;
    // End of variables declaration//GEN-END:variables
    
}

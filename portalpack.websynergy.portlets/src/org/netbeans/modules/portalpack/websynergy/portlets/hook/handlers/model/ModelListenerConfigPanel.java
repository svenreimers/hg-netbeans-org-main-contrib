/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.portalpack.websynergy.portlets.hook.handlers.model;

import java.util.Set;
import javax.lang.model.element.TypeElement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.java.source.ClassIndex.NameKind;
import org.netbeans.api.java.source.ClassIndex.SearchScope;
import org.netbeans.api.java.source.ClasspathInfo;
import org.netbeans.api.java.source.ElementHandle;
import org.netbeans.api.java.source.ui.TypeElementFinder;
import org.netbeans.modules.portalpack.websynergy.portlets.hook.api.ConfigPanel;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileObject;
import org.netbeans.api.java.classpath.ClassPath;
import org.netbeans.api.project.Project;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.actions.util.PortletProjectUtils;
import org.netbeans.modules.portalpack.portlets.genericportlets.core.util.CoreUtil;
import org.netbeans.modules.web.api.webmodule.WebModule;
import org.openide.util.NbBundle;

/**
 *
 * @author Santh Chetan Chadalavada
 */
public class ModelListenerConfigPanel extends ConfigPanel implements DocumentListener {

    private Project project; 
    public ModelListenerConfigPanel(Project project) {
        this.project = project;
        
        initComponents();
        mdlLsnrTB.getDocument().addDocumentListener(this);
 
    }

    private void initData() {
        mdlLsnrTB.setText("");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        mdlLsnrTB = new javax.swing.JTextField();

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ModelListenerConfigPanel.class, "ModelListenerConfigPanel.jLabel2.text")); // NOI18N

        SearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/portalpack/websynergy/portlets/hook/resources/search.png"))); // NOI18N
        SearchButton.setText(org.openide.util.NbBundle.getMessage(ModelListenerConfigPanel.class, "ModelListenerConfigPanel.SearchButton.text")); // NOI18N
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        mdlLsnrTB.setText(org.openide.util.NbBundle.getMessage(ModelListenerConfigPanel.class, "ModelListenerConfigPanel.mdlLsnrTB.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(mdlLsnrTB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(SearchButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .add(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(mdlLsnrTB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(SearchButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
// TODO add your handling code here:
    final WebModule wm = PortletProjectUtils.getWebModule(project);
    
    FileObject fileObject = PortletProjectUtils.getWebInf(project);

        TypeElementFinder.Customizer customizer = new TypeElementFinder.Customizer() {

           public Set<ElementHandle<TypeElement>> query(ClasspathInfo classpathInfo, String textForQuery, NameKind nameKind, Set<SearchScope> searchScopes) {
               return classpathInfo.getClassIndex().getDeclaredTypes(textForQuery, nameKind, searchScopes);
               //return Collections.EMPTY_SET;
           }
           
           public boolean accept(ElementHandle<TypeElement> typeHandle) {
               try {
                   
                   ClassPath cp = ClassPath.getClassPath(wm.getDocumentBase(), ClassPath.COMPILE);
                   String clazzName = typeHandle.getQualifiedName();
                   ClassLoader loader = cp.getClassLoader(true);
                   Class clazz = loader.loadClass(clazzName);
                   Class baseClazz = loader.loadClass("com.liferay.portal.model.BaseModel");
                   //if (clazz.isAssignableFrom(loader.loadClass("com.liferay.portal.model.BaseModel"))) {
                   if (baseClazz.isAssignableFrom(clazz)) {
                       String newClazz = clazzName + "Model";
                       if(baseClazz.isAssignableFrom(loader.loadClass(newClazz)))
                          return true;
                       return false;
                   }
                   return false;
               } catch (Exception ex) {
                   //Exceptions.printStackTrace(ex);
               } catch(Error e){
                                  }
               return false;
                          }
       };
        ElementHandle<TypeElement> type = TypeElementFinder.find(ClasspathInfo.create(fileObject), customizer);

       if (type != null) {
          mdlLsnrTB.setText(type.getQualifiedName());
       } 
}//GEN-LAST:event_SearchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField mdlLsnrTB;
    // End of variables declaration//GEN-END:variables

    @Override
    public void read(WizardDescriptor wizardDescriptor) {
        
    }

    @Override
    public void store(WizardDescriptor wizardDescriptor) {
        wizardDescriptor.putProperty("mdl_Name", mdlLsnrTB.getText());
    }

    @Override
    public boolean validate(WizardDescriptor wizardDescriptor) {
        String modelLstnName = mdlLsnrTB.getText();
        if(modelLstnName == null || modelLstnName.trim().length() == 0 || 
                !CoreUtil.validatePackageName(modelLstnName)) {
            setErrorMessage(wizardDescriptor,NbBundle.getMessage(
                    ModelListenerConfigPanel.class, "INVALID_MODEL_CLASS"));
            return false;
        }
              
        setErrorMessage(wizardDescriptor, "");
        return true;
    }

    @Override
    public String getDescription() {
        return "demo";
    }

    public void insertUpdate(DocumentEvent e) {
         updateTexts(e);
    }

    public void removeUpdate(DocumentEvent e) {
         updateTexts(e);
    }

    public void changedUpdate(DocumentEvent e) {
         updateTexts(e);
    }
    
    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {

        fireChangeEvent();

    }
}

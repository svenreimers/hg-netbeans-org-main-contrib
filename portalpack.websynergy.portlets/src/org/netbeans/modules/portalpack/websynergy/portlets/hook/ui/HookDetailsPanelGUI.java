/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.portalpack.websynergy.portlets.hook.ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.text.Document;
import org.netbeans.modules.portalpack.websynergy.portlets.hook.api.ConfigPanel;
import org.netbeans.modules.portalpack.websynergy.portlets.hook.api.HookType;
import org.netbeans.modules.portalpack.websynergy.portlets.hook.api.HookTypeHandler;
import org.openide.WizardDescriptor;
/**
 *
 * @author Santh Chetan Chadalavada
 */
public final class HookDetailsPanelGUI extends JPanel implements ChangeListener{

    private final List/*<ChangeListener>*/ listeners = new ArrayList();
    private Map<String,WizardDescriptor.Panel> bottomPanels;
    
    /** Creates new form HookDetailsPanelGUI */
    public HookDetailsPanelGUI() {
        initComponents();
        bottomPanels = new HashMap();
       
    }

     public void registerHandlers(HookType hookType, HookTypeHandler hookHandler) {

        hookTypeCB.addItem(hookType);
  

        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
        
        WizardDescriptor.Panel configPanel = hookHandler.getConfigPanel();
        configPanel.addChangeListener(this);

        cardPanel.add(configPanel.getComponent(),hookType.getType());
        
        bottomPanels.put(hookType.getType(), configPanel);

        cardLayout.show(cardPanel,((HookType)hookTypeCB.getSelectedItem()).getType());
        
    }
     
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hookTypeLabel = new javax.swing.JLabel();
        hookTypeCB = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        cardPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(hookTypeLabel, org.openide.util.NbBundle.getMessage(HookDetailsPanelGUI.class, "HookDetailsPanelGUI.HOOKTYPE.LABEL")); // NOI18N

        hookTypeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hookTypeCBItemStateChanged(evt);
            }
        });
        hookTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hookTypeCBActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(HookDetailsPanelGUI.class, "TTL_HOOK_CONFIGURATION"))); // NOI18N

        cardPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        cardPanel.setLayout(new java.awt.CardLayout());
        jScrollPane1.setViewportView(cardPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(hookTypeLabel)
                        .add(82, 82, 82)
                        .add(hookTypeCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(hookTypeCB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(hookTypeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void hookTypeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hookTypeCBItemStateChanged
// TODO add your handling code here:
    HookType hookType = (HookType) hookTypeCB.getSelectedItem();
    CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
    cardLayout.show(cardPanel, hookType.getType());

    fireChange();
}//GEN-LAST:event_hookTypeCBItemStateChanged

private void hookTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hookTypeCBActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_hookTypeCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cardPanel;
    private javax.swing.JComboBox hookTypeCB;
    private javax.swing.JLabel hookTypeLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
    public boolean valid(WizardDescriptor wizardDescriptor) {
        HookType hookType = (HookType) hookTypeCB.getSelectedItem();
        WizardDescriptor.Panel panel = bottomPanels.get(hookType.getType());
        return panel.isValid();
        
    }

    public void readSettings(WizardDescriptor wizardDescriptor) {

        for (int i = 0; i < hookTypeCB.getItemCount(); i++) {

            HookType selectedHook =
                    (HookType) hookTypeCB.getItemAt(i);

           WizardDescriptor.Panel configPanel = (WizardDescriptor.Panel) bottomPanels.get(selectedHook.getType());

            if (configPanel != null) {
                configPanel.readSettings(wizardDescriptor);
            }
        }
    }

    public void storeSettings(WizardDescriptor wizardDescriptor) {

        wizardDescriptor.putProperty("hook-type", hookTypeCB.getSelectedItem());
        
        HookType selectedHook =
                (HookType) hookTypeCB.getSelectedItem();

        WizardDescriptor.Panel configPanel = (WizardDescriptor.Panel) bottomPanels.get(selectedHook.getType());

        if (configPanel != null) {
            configPanel.storeSettings(wizardDescriptor);
        }
    }
    
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {

        Document doc = e.getDocument();
        fireChange();

    }
    
    public void stateChanged(ChangeEvent e) {
        fireChange();
    }
    
    private void fireChange() {
        ChangeEvent e = new ChangeEvent(this);
        List templist;
        synchronized (this) {
            templist = new ArrayList(listeners);
        }
        Iterator it = templist.iterator();
        while (it.hasNext()) {
            ((ChangeListener) it.next()).stateChanged(e);
        }
    }
    
    public synchronized void addChangeListener(ChangeListener l) {
        listeners.add(l);
    }

    public synchronized void removeChangeListener(ChangeListener l) {
        listeners.remove(l);
    }
}


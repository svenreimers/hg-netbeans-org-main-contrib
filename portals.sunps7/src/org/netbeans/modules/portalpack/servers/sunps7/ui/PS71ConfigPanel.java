/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.sunps7.ui;

import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import java.io.File;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.util.DirectoryChooser;
import org.netbeans.modules.portalpack.servers.sunps7.PS71ServerConstant;

import org.openide.WizardDescriptor;

/**
 *
 * @author  Satya
 */
public class PS71ConfigPanel extends ConfigPanel{


    private boolean isCustomizedMode = false;
    /** Creates new form PS71ConfigPanel */

    public PS71ConfigPanel() {
        initComponents();
        // psconfig = PSConfigObject.getPSConfigObject();
        initData();
        //remove this line later
        populateDummyData();

    }

    /*public JPanel getServerConfigPanel(){

        return serverPanel;
    }*/

    private void initData() {

        //config.initData(this);
        /*psInstallHome.setText(psconfig.getPSHome());
        adminUserTf.setText(psconfig.getAdminUser());
        passwordTf.setText(psconfig.getAdminPassWord());
        portalIdTf.setText(psconfig.getPortalId());
        serverTf.setText(psconfig.getServerHome());
        instanceIdTf.setText(psconfig.getIntanceId());
        defaultDomainTf.setText(psconfig.getDefaultDomain());

        hostTf.setText(psconfig.getHost());
        portTf.setText(psconfig.getPort());
        if(psconfig.isRemote())
            remoteRadioButton.setSelected(true);
        else
            remoteRadioButton.setSelected(false);


        if(psconfig.getServerType().equalsIgnoreCase("APPSERVER"))
            radioAppServer.setSelected(true);
        else
            radioWebServer.setSelected(false);*/

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jCheckBox1 = new javax.swing.JCheckBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        portalIdTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        instanceIdTf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        adminUserTf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        hostTf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        portTf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        passwordTf = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        portalUriTf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        adminPortTf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        connectorPortTf = new javax.swing.JTextField();

        jCheckBox1.setText("jCheckBox1");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMaximumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel1.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_SUN_JAVA_SYSTEM_PORTAL_SERVER_CONFIGURATION"));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_PORTAL_ID"));

        portalIdTf.setToolTipText("Enter portal Id (e.g; portal1)");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_INSTANCE_ID"));

        instanceIdTf.setToolTipText("Enter Instance Id");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_ADMIN_USER"));

        adminUserTf.setToolTipText("Enter admin user. Default value is \"amAdmin\"");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_PASSWORD"));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_HOST"));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel7.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_PORT"));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_PORTAL_URI"));

        portalUriTf.setText("/portal");

        jLabel9.setText(" \"opera-80\"");

        jLabel12.setText(" \" portal1\"");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_ADMIN_PORT"));

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 11));
        jLabel2.setText(org.openide.util.NbBundle.getBundle(PS71ConfigPanel.class).getString("LBL_JMX_CONNECTOR_PORT"));

        connectorPortTf.setText("11162");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(91, 91, 91))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel8))
                                .add(26, 26, 26)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(portalUriTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 201, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, adminPortTf)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, portTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                    .add(connectorPortTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, hostTf)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, passwordTf)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, adminUserTf)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, instanceIdTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, portalIdTf))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jLabel9)
                                            .add(jLabel12))))))
                        .addContainerGap(50, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel6)
                        .addContainerGap(369, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel11)
                        .addContainerGap(397, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel7)
                        .addContainerGap(399, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel10)
                        .addContainerGap(360, Short.MAX_VALUE))
                    .add(jLabel2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(portalIdTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(instanceIdTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(adminUserTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(passwordTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(jLabel11))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hostTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(13, 13, 13)
                        .add(jLabel7))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(portTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(jLabel10))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(adminPortTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(portalUriTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(connectorPortTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents




    public void read(WizardDescriptor wizardDescriptor) {
        System.out.println("read is claossssssssssssse");

    }


    public void store(WizardDescriptor d) {

        /*d.putProperty("PS_HOME",getPSHome());
        d.putProperty("DEFAULT_DOMAIN",getDefaultDomain());
        d.putProperty("PORTAL_ID",getPortalId());
        d.putProperty("INSTANCE_ID",getInstanceId());
        d.putProperty("ADMIN_USER",getAdminUser());
        d.putProperty("PASSWORD",getAdminPassWord());
        d.putProperty("HOST",getHost());
        d.putProperty("PORT",getPort());
        d.putProperty("IS_REMOTE",Boolean.toString(isRemote()));*/

        WizardPropertyReader wr = new WizardPropertyReader(d);
        wr.setPSHome(getPSHome());
        wr.setDefaultDomain(getDefaultDomain());
        wr.setPortalId(getPortalId());
        wr.setInstanceId(getInstanceId());
        wr.setAdminUser(getAdminUser());
        wr.setAdminPassWord(getAdminPassWord());
        wr.setHost(getHost());
        wr.setPort(getPort());
        wr.setRemote(isRemote());
        wr.setPortalUri(getPortalUri());
        wr.setAdminPort(getAdminPort());
        wr.setProperty(PS71ServerConstant.JMX_CONNECTOR_PORT,connectorPortTf.getText());

        //   System.out.println("Store is callee...............");
        //saveToFile();
    }


    /*void saveToFile() {

        //psconfig.save(this);
        /*File file = new File(SERVER_CONFIG_FILE);
        if(!file.exists()) {
            if(!file.getParentFile().exists()) {
                file.getParentFile().mkdirs();
            }
        }

        String psHome = psInstallHome.getText();
        String admin = adminUserTf.getText();
        String password = passwordTf.getText();
        String portalId = portalIdTf.getText();

        String serverHome = serverTf.getText();
        String serverType ="";
        if(radioAppServer.isSelected())
            serverType = "APPSERVER";
        else if(radioWebServer.isSelected())
            serverType = "WEBSERVER";

        psconfig.setPSHome(psHome);
        psconfig.setAdminUser(admin);
        psconfig.setAdminPassWord(password);
        psconfig.setPortalId(portalId);
        psconfig.setServerHome(serverHome);
        psconfig.setServerType(serverType);
        psconfig.save();*/

    //}

    public boolean validate(Object wizardDescriptor) {
        return true;
    }

    private String checkForNull(String txt) {
        if(txt == null)
            return "";
        else return txt.trim();
    }

    public void setPSHome(String pHome) {

    }

    public String getPSHome() {
        return "";
    }

    public String getAdminUser() {
        return checkForNull(adminUserTf.getText());
    }

    public void setAdminUser(String adUser) {
        adminUserTf.setText(adUser);
    }

    public String getAdminPassWord() {
        return checkForNull(new String(passwordTf.getPassword()));
    }

    public void setAdminPassWord(String password) {
        passwordTf.setText(password);
    }

    public String getPortalId() {
        return checkForNull(portalIdTf.getText());
    }

    public void setPortalId(String id) {
        portalIdTf.setText(id);
    }


    public String getInstanceId() {
        return checkForNull(instanceIdTf.getText());
    }

    public void setInstanceId(String instance) {
        instanceIdTf.setText(instance);
    }

    public String getDefaultDomain() {
        return "defaultDomain";
       // return checkForNull(defaultDomainTf.getText());
    }

    public void setDefaultDomain(String dd) {
        //defaultDomainTf.setText(dd);
    }

    public boolean isRemote() {

      return true;
      /*  if(remoteRadioButton.isSelected())
            return true;
        else
            return false;*/
    }

    public void setRemote(boolean flag) {
       /* if(flag)
            remoteRadioButton.setSelected(true);
        else
            localRadioButton.setSelected(true);*/
    }

    public String getHost() {
        return checkForNull(hostTf.getText());
    }

    public void setHost(String h) {
        hostTf.setText(h);
    }

    public String getPort() {
        return checkForNull(portTf.getText());
    }

    public void setPort(String po) {
        portTf.setText(po);
    }

    public String getPortalUri(){
        return checkForNull(portalUriTf.getText());
    }

    public void setPortalUri(String uri){
        portalUriTf.setText(uri);
    }

    public void setAdminPort(String po)
    {
        adminPortTf.setText(po);
    }

    public String getAdminPort()
    {
        return checkForNull(adminPortTf.getText());
    }

    public void populateDataForCustomizer(PSConfigObject object)
    {
        setPSHome(object.getPSHome());
        setDefaultDomain(object.getDefaultDomain());
        setPortalId(object.getPortalId());
        setInstanceId(object.getIntanceId());
        setAdminUser(object.getAdminUser());
        setAdminPassWord(object.getAdminPassWord());
        setHost(object.getHost());
        setPort(object.getPort());
        setRemote(object.isRemote());
        setAdminPort(object.getAdminPort());
        connectorPortTf.setText(object.getProperty(PS71ServerConstant.JMX_CONNECTOR_PORT));

        hostTf.setEnabled(false);
        portTf.setEnabled(false);
        //disable fields
        /*psInstallHome.setEditable(false);
        remoteRadioButton.setEnabled(false);
        localRadioButton.setEnabled(false);*/
        isCustomizedMode = true;

    }

    //TODO This will be removed later
     public void populateDummyData()
     {
         if (!org.openide.util.Utilities.isWindows()){
             File f = new File("/opt/SUNWportal");
             if(f.exists())
                setPSHome("/opt/SUNWportal");
         }
         setDefaultDomain("defaultDomain");
         setPortalId("portal1");
         setPort("80");
         setRemote(true);
//         psInstallHome.setEditable(false);
         setPortalUri("/portal");
         connectorPortTf.setText("11162");
     }

     public String getDescription()
     {
         return "Sun PS";
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField adminPortTf;
    private javax.swing.JTextField adminUserTf;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JTextField connectorPortTf;
    private javax.swing.JTextField hostTf;
    private javax.swing.JTextField instanceIdTf;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPasswordField passwordTf;
    private javax.swing.JTextField portTf;
    private javax.swing.JTextField portalIdTf;
    private javax.swing.JTextField portalUriTf;
    // End of variables declaration//GEN-END:variables


}

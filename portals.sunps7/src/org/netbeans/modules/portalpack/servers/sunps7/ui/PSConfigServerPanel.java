/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.sunps7.ui;

import org.netbeans.modules.portalpack.servers.core.common.NetbeansServerConstant;
import org.netbeans.modules.portalpack.servers.core.common.NetbeansServerType;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.util.DirectoryChooser;
import org.openide.WizardDescriptor;

/**
 *
 * @author  Satya
 */
public class PSConfigServerPanel extends ConfigPanel{

    private DefaultListModel  classPathListModel;
    private boolean isCustomizeMode = false;
    /** Creates new form PSConfigServerPanel */
    public PSConfigServerPanel() {
        initComponents();
        initData();
        //remove this line
        populateDummyData();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        serverTypeCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        serverHomeTf = new javax.swing.JTextField();
        serverHomeDirChooser = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        instanceTf = new javax.swing.JTextField();
        instanceHomeChooser = new javax.swing.JButton();
        adminPortTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classPathList = new javax.swing.JList();
        addClassPathButton = new javax.swing.JButton();
        removeClassPathButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Server Type");

        serverTypeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                serverTypeComboItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Server Home");

        serverHomeDirChooser.setText("...");
        serverHomeDirChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverHomeDirChooserActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Instance/Domain Home");

        instanceHomeChooser.setText("...");
        instanceHomeChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instanceHomeChooserActionPerformed(evt);
            }
        });

        adminPortTf.setToolTipText("Admin server port of webserver/appserver \\n Default value is 8800 for sun webserver.");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Admin Port");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("ClassPath");

        classPathList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        classPathList.setToolTipText("Add jar library which will be used only during compilation. Those will not be included in war.");
        jScrollPane1.setViewportView(classPathList);

        addClassPathButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        addClassPathButton.setText("Add");
        addClassPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClassPathButtonActionPerformed(evt);
            }
        });

        removeClassPathButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        removeClassPathButton.setText("Remove");
        removeClassPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeClassPathButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jLabel4)
                    .add(jLabel5))
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(serverTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 138, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(serverHomeTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .add(instanceTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                                .add(6, 6, 6)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(instanceHomeChooser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(serverHomeDirChooser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, Short.MAX_VALUE))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(removeClassPathButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(addClassPathButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)))
                    .add(adminPortTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(serverTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(serverHomeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(serverHomeDirChooser))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(instanceTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(instanceHomeChooser))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(adminPortTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(addClassPathButton)
                        .add(14, 14, 14)
                        .add(removeClassPathButton))
                    .add(jLabel5)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeClassPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClassPathButtonActionPerformed
// TODO add your handling code here:
        int[] index = classPathList.getSelectedIndices();

        for(int i=0;i<index.length; i++)
        {
            classPathListModel.removeElementAt(i);
        }
    }//GEN-LAST:event_removeClassPathButtonActionPerformed

    private void addClassPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClassPathButtonActionPerformed
// TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileFilter(){
            public boolean accept(File f) {
                if(f.getName().endsWith(".jar"))
                    return true;
                else if(f.isDirectory())
                    return true;
                return false;
            }

            public String getDescription() {
                return "Jar Files";
            }

        });


        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File file = fileChooser.getSelectedFile();

            classPathListModel.addElement(file.getAbsolutePath());
        }


    }//GEN-LAST:event_addClassPathButtonActionPerformed

    private void serverHomeDirChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverHomeDirChooserActionPerformed
// TODO add your handling code here:
        DirectoryChooser chooser = new DirectoryChooser();
        chooser.open(System.getProperty("user.home"));
        String dir = chooser.getSelectedDir();
        setServerHome(dir);

    }//GEN-LAST:event_serverHomeDirChooserActionPerformed

    private void instanceHomeChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instanceHomeChooserActionPerformed
// TODO add your handling code here:
        DirectoryChooser chooser = new DirectoryChooser();
        chooser.open(System.getProperty("user.home"));
        String dir = chooser.getSelectedDir();
        setDomainDir(dir);
    }//GEN-LAST:event_instanceHomeChooserActionPerformed

    private void serverTypeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_serverTypeComboItemStateChanged
// TODO add your handling code here:
    }//GEN-LAST:event_serverTypeComboItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClassPathButton;
    private javax.swing.JTextField adminPortTf;
    private javax.swing.JList classPathList;
    private javax.swing.JButton instanceHomeChooser;
    private javax.swing.JTextField instanceTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeClassPathButton;
    private javax.swing.JButton serverHomeDirChooser;
    private javax.swing.JTextField serverHomeTf;
    private javax.swing.JComboBox serverTypeCombo;
    // End of variables declaration//GEN-END:variables
    private String checkForNull(String txt) {
        if(txt == null)
            return "";
        else return txt.trim();
    }

    public String getServerHome() {
        return checkForNull(serverHomeTf.getText());
    }

    public void setServerHome(String home) {
        serverHomeTf.setText(home);
    }

    public void setServerType(String type) {

        Object ob = getNetbeansServerType(type);
        if(ob != null)
            serverTypeCombo.setSelectedItem(ob);
    }

    public String getServerType() {

        NetbeansServerType typeObj = (NetbeansServerType)serverTypeCombo.getSelectedItem();
        return typeObj.getType();

    }


    public void setDomainDir(String dir) {
        instanceTf.setText(dir);
    }

    public String getDomainDir() {
        return checkForNull(instanceTf.getText());
    }

    public void setAdminPort(String port) {
        adminPortTf.setText(port);
    }

    public String getAdminPort() {
        return checkForNull(adminPortTf.getText());
    }

    private NetbeansServerType getNetbeansServerType(String type) {
        for(int i=0;i<NetbeansServerConstant.AVAILABLE_SERVERS.length;i++) {
            if(NetbeansServerConstant.AVAILABLE_SERVERS[i].getType().equalsIgnoreCase(type.trim()))
                return NetbeansServerConstant.AVAILABLE_SERVERS[i];
        }
        return null;
    }

    private void initData() {

        for(int i=0;i<NetbeansServerConstant.AVAILABLE_SERVERS.length;i++) {
            serverTypeCombo.addItem(NetbeansServerConstant.AVAILABLE_SERVERS[i]);
        }

        classPathListModel = new DefaultListModel();
        classPathList.setModel(classPathListModel);


    }

    public void store(WizardDescriptor d) {

        WizardPropertyReader wr = new WizardPropertyReader(d);
        wr.setServerType(getServerType());
        wr.setServerHome(getServerHome());
        wr.setDomainDir(getDomainDir());
        wr.setAdminPort(getAdminPort());
        wr.setClassPath(getClassPaths());


       /* d.putProperty("SERVER_TYPE",getServerType());
        d.putProperty("SERVER_HOME",getServerHome());
        d.putProperty("INSTANCE_ID",getDomainDir());
        d.putProperty("ADMIN_PORT",getAdminPort());
        d.putProperty("CLASSPATH",getClassPaths());*/
    }

    public void read(WizardDescriptor d){
        WizardPropertyReader wr = new WizardPropertyReader(d);
        if(wr.isRemote())
        {
            serverTypeCombo.setEnabled(false);
            serverHomeTf.setEnabled(false);
            instanceTf.setEnabled(false);
        }else
        {
            serverTypeCombo.setEnabled(true);
            serverHomeTf.setEnabled(true);
            instanceTf.setEnabled(true);

        }
    }

    public String getClassPaths() {

        Enumeration en = classPathListModel.elements();

        List list = new ArrayList();
        while(en.hasMoreElements())
        {
            String elm = (String)en.nextElement();
            list.add(elm);
        }

        return encodeClassPath((String [])list.toArray(new String[0]));
    }

    public void setClassPaths(String[] path)
    {
        classPathListModel.removeAllElements();
        for(int i=0;i<path.length;i++)
        {
            classPathListModel.addElement(path[i]);
        }
    }

    public boolean validate(Object wizardDescriptor) {
        return true;
    }

    public void populateDataForCustomizer(PSConfigObject ob)
    {
        setServerType(ob.getServerType());
        setServerHome(ob.getServerHome());
        setDomainDir(ob.getDomainDir());
        setAdminPort(ob.getAdminPort());
        setClassPaths(decodeClassPath(ob.getClassPath()));

        serverTypeCombo.setEnabled(false);
        serverHomeTf.setEditable(false);
        if(ob.isRemote())
        {
            instanceTf.setEnabled(false);
            instanceHomeChooser.setEnabled(false);
        }

        isCustomizeMode = true;

    }

    public void populateDummyData()
    {
         if (!org.openide.util.Utilities.isWindows()){
             File f = new File("/var/opt/SUNWwbsvr7/");
             if(f.exists())
                setServerHome("/var/opt/SUNWwbsvr7/");
         }
         setAdminPort("8800");
    }

     public String getDescription()
     {
         return "Server";
     }


     public String encodeClassPath(String[] strs)
     {
         if(strs == null || strs.length == 0)
             return "";

         StringBuffer sb = new StringBuffer();
         for(int i=0;i<strs.length;i++)
         {
             sb.append(strs[i]).append(";");

         }
         return sb.toString();
     }

     public String[] decodeClassPath(String str)
     {
         List classPathList = new ArrayList();
         StringTokenizer st = new StringTokenizer(str,";");

         while(st.hasMoreTokens())
         {
             String temp = st.nextToken();
             if(temp != null || temp.trim().equals(""))
                 classPathList.add(temp);
         }

         return (String[])classPathList.toArray(new String[0]);

     }
}
/*
 * JavaSePlatformCustomzier.java
 *
 * Created on 19. zברם 2006, 13:53
 */

package org.netbeans.modules.mobility.plugins.javase;

import javax.swing.JPanel;
import org.netbeans.api.java.platform.JavaPlatform;
import org.netbeans.api.java.platform.JavaPlatformManager;
import org.netbeans.api.mobility.project.ui.customizer.ProjectProperties;
import org.netbeans.modules.mobility.project.DefaultPropertiesDescriptor;
import org.netbeans.spi.mobility.project.ui.customizer.CustomizerPanel;
import org.netbeans.spi.mobility.project.ui.customizer.VisualPropertyGroup;
import org.netbeans.spi.mobility.project.ui.customizer.support.VisualPropertySupport;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author  Adam
 */
public class JavaSePlatformCustomzier extends JPanel implements CustomizerPanel, VisualPropertyGroup {
    
    private ProjectProperties props;
    private String cfg;
    
    /** Creates new form JavaSePlatformCustomzier */
    public JavaSePlatformCustomzier() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void initValues(ProjectProperties props, String configuration) {
        this.props = props;
        this.cfg = configuration;
    }

    public void initGroupValues(boolean useDefault) {
//        JavaPlatform jp = JavaPlatformManager.getDefault().getDefaultPlatform();
//        FileObject fo = (FileObject)jp.getInstallFolders().iterator().next();
//        FileObject roots[] = jp.getBootstrapLibraries().getRoots();
//        StringBuffer cp = new StringBuffer();
//        for (FileObject r : roots) {
//            FileObject root = FileUtil.getArchiveFile(r);
//            if (root == null) root = r;
//            String path = FileUtil.getRelativePath(fo, root);
//            if (cp.length() > 0) cp.append(':');
//            cp.append(path == null ? root.getPath() : path);
//        }
        props.put(VisualPropertySupport.translatePropertyName(cfg, DefaultPropertiesDescriptor.PLATFORM_BOOTCLASSPATH, useDefault), "${sun.boot.class.path}"); //cp.toString());
    }

    public String[] getGroupPropertyNames() {
        return new String[] {DefaultPropertiesDescriptor.PLATFORM_BOOTCLASSPATH};
    }
    
}

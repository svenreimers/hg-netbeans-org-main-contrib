/*
*                 Sun Public License Notice
*
* The contents of this file are subject to the Sun Public License
* Version 1.0 (the "License"). You may not use this file except in
* compliance with the License. A copy of the License is available at
* http://www.sun.com/
*
* The Original Code is NetBeans. The Initial Developer of the Original
* Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
* Microsystems, Inc. All Rights Reserved.
*/
/*
 * JnlpOptionsPanel.java
 *
 * Created on May 29, 2004, 8:28 PM
 */

package org.netbeans.modules.packager.ui;

import java.io.File;
import java.net.MalformedURLException;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.text.JTextComponent;
import org.netbeans.modules.packager.PackagerProject;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 * Customizer/Wizard panel for JNLP options
 *
 * @author  Tim Boudreau
 */
public class JnlpOptionsPanel extends javax.swing.JPanel implements java.awt.event.FocusListener, java.beans.PropertyChangeListener, java.awt.event.ActionListener {
    
    /** Creates new form JnlpOptionsPanel */
    public JnlpOptionsPanel() {
        initComponents();
        setName (NbBundle.getMessage (MacOptionsPanel.class, 
            "LAB_ConfigureJnlp")); //NOI18N
        buttonGroup1.add (nopermissions);
        buttonGroup1.add (j2eepermissions);
        buttonGroup1.add (fullpermissions);
   }
    
    private JnlpOptionsWizardPanel  panel = null;
    public JnlpOptionsPanel(JnlpOptionsWizardPanel panel) {
        this();
        this.panel = panel;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        vendorlabel = new javax.swing.JLabel();
        vendor = new javax.swing.JTextField();
        homepagelabel = new javax.swing.JLabel();
        homepage = new javax.swing.JTextField();
        chooseicon = new javax.swing.JButton();
        iconlabel = new javax.swing.JLabel();
        icon = new javax.swing.JTextField();
        description = new javax.swing.JTextField();
        descriptionlabel = new javax.swing.JLabel();
        longdescriptionlabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        longdescription = new javax.swing.JTextArea();
        codebase = new javax.swing.JTextField();
        codebaselabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nopermissions = new javax.swing.JRadioButton();
        j2eepermissions = new javax.swing.JRadioButton();
        fullpermissions = new javax.swing.JRadioButton();
        offline = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        vendorlabel.setLabelFor(vendor);
        vendorlabel.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_Vendor"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(vendorlabel, gridBagConstraints);

        vendor.addFocusListener(this);
        vendor.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 242;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.25;
        add(vendor, gridBagConstraints);

        homepagelabel.setLabelFor(homepage);
        homepagelabel.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_HomePage"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(homepagelabel, gridBagConstraints);

        homepage.addFocusListener(this);
        homepage.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 242;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.25;
        add(homepage, gridBagConstraints);

        chooseicon.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_ChooseIcon"));
        chooseicon.addActionListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(chooseicon, gridBagConstraints);

        iconlabel.setLabelFor(icon);
        iconlabel.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_Icon"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(iconlabel, gridBagConstraints);

        icon.addFocusListener(this);
        icon.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 182;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.25;
        add(icon, gridBagConstraints);

        description.addFocusListener(this);
        description.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 242;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.25;
        add(description, gridBagConstraints);

        descriptionlabel.setLabelFor(description);
        descriptionlabel.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_Description"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(descriptionlabel, gridBagConstraints);

        longdescriptionlabel.setLabelFor(longdescription);
        longdescriptionlabel.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_LongDescription"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        add(longdescriptionlabel, gridBagConstraints);

        longdescription.addFocusListener(this);
        longdescription.addPropertyChangeListener(this);

        jScrollPane1.setViewportView(longdescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 227;
        gridBagConstraints.ipady = 57;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        codebase.addFocusListener(this);
        codebase.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 242;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.25;
        add(codebase, gridBagConstraints);

        codebaselabel.setLabelFor(codebase);
        codebaselabel.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_Codebase"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 0, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(codebaselabel, gridBagConstraints);

        jPanel1.setBorder(new javax.swing.border.TitledBorder(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_SecurityReqs")));
        nopermissions.setSelected(true);
        nopermissions.setText("No Permissions");
        nopermissions.setToolTipText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_NoPermissions"));
        nopermissions.addActionListener(this);
        nopermissions.addFocusListener(this);

        jPanel1.add(nopermissions);

        j2eepermissions.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_J2EE_Permissions"));
        j2eepermissions.addActionListener(this);
        j2eepermissions.addFocusListener(this);

        jPanel1.add(j2eepermissions);

        fullpermissions.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_FullPermissions"));
        fullpermissions.addActionListener(this);
        fullpermissions.addFocusListener(this);

        jPanel1.add(fullpermissions);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        offline.setText(NbBundle.getMessage(JnlpOptionsPanel.class,"LBL_OFFLINE"));
        offline.addActionListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 11);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(offline, gridBagConstraints);

    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == fullpermissions) {
            JnlpOptionsPanel.this.buttonChanged(evt);
        }
        else if (evt.getSource() == j2eepermissions) {
            JnlpOptionsPanel.this.buttonChanged(evt);
        }
        else if (evt.getSource() == nopermissions) {
            JnlpOptionsPanel.this.buttonChanged(evt);
        }
        else if (evt.getSource() == offline) {
            JnlpOptionsPanel.this.buttonChanged(evt);
        }
        else if (evt.getSource() == chooseicon) {
            JnlpOptionsPanel.this.chooseiconActionPerformed(evt);
        }
    }

    public void focusGained(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == codebase) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == vendor) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == homepage) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == icon) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == description) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == longdescription) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == nopermissions) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == j2eepermissions) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
        else if (evt.getSource() == fullpermissions) {
            JnlpOptionsPanel.this.controlFocusGained(evt);
        }
    }

    public void focusLost(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == codebase) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == vendor) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == homepage) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == icon) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == description) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == longdescription) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == nopermissions) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == j2eepermissions) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
        else if (evt.getSource() == fullpermissions) {
            JnlpOptionsPanel.this.controlFocusLost(evt);
        }
    }

    public void propertyChange(java.beans.PropertyChangeEvent evt) {
        if (evt.getSource() == vendor) {
            JnlpOptionsPanel.this.textComponentPropertyChange(evt);
        }
        else if (evt.getSource() == homepage) {
            JnlpOptionsPanel.this.textComponentPropertyChange(evt);
        }
        else if (evt.getSource() == icon) {
            JnlpOptionsPanel.this.textComponentPropertyChange(evt);
        }
        else if (evt.getSource() == description) {
            JnlpOptionsPanel.this.textComponentPropertyChange(evt);
        }
        else if (evt.getSource() == codebase) {
            JnlpOptionsPanel.this.textComponentPropertyChange(evt);
        }
        else if (evt.getSource() == longdescription) {
            JnlpOptionsPanel.this.textComponentPropertyChange(evt);
        }
    }//GEN-END:initComponents

    private void chooseiconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseiconActionPerformed
        //XXX
        
    }//GEN-LAST:event_chooseiconActionPerformed

    private void buttonChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChanged
        if (isShowing()) {
            fire();
        }
    }//GEN-LAST:event_buttonChanged

    private void textComponentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textComponentPropertyChange
        if (isShowing() && "text".equals(evt.getPropertyName())) {
            fire();
        }
    }//GEN-LAST:event_textComponentPropertyChange

    private void controlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_controlFocusLost
        fire();
    }//GEN-LAST:event_controlFocusLost

    private void controlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_controlFocusGained
        if (evt.getSource() instanceof JTextComponent) {
            JTextComponent jtc = (JTextComponent) evt.getSource();
            jtc.setSelectionStart(0);
            jtc.setSelectionEnd(jtc.getDocument().getLength());
        }
        
    }//GEN-LAST:event_controlFocusGained
    
    private String procStr (JTextComponent jtc) {
        String s = jtc.getText().trim();
        if (s.trim().length() == 0) {
            return null;
        }
        return s;
    }

    
    private Map getProps() {
        HashMap result = new HashMap();
        JTextComponent[] comps = new JTextComponent[] {
            codebase, description, homepage, icon, longdescription, vendor
        };
        for (int i=0; i < comps.length; i++) {
            String val = procStr(comps[i]);
            result.put (keys[i], val);
        }
        result.put (PackagerProject.KEY_JNLP_PERMISSIONS, nopermissions.isSelected() ? 
            PackagerProject.PERMISSION_JNLP_SANDBOX : 
                j2eepermissions.isSelected() ? 
                PackagerProject.PERMISSION_JNLP_J2EE : 
                PackagerProject.PERMISSION_JNLP_FULL);
                
        result.put (PackagerProject.KEY_JNLP_ALLOW_OFFLINE, offline.isSelected() ?
            Boolean.TRUE.toString() : Boolean.FALSE.toString());
        return result;
    }

    static String[] keys = new String[] {
        PackagerProject.KEY_JNLP_CODEBASE, 
        PackagerProject.KEY_JNLP_DESCRIPTION, 
        PackagerProject.KEY_JNLP_HOMEPAGE, 
        PackagerProject.KEY_JNLP_ICON, 
        PackagerProject.KEY_JNLP_SHORT_DESCRIPTION, PackagerProject.KEY_JNLP_VENDOR
    };    
    
        
    public boolean valid( WizardDescriptor wizardDescriptor ) {
        Map m = getProps();
        boolean result = m.keySet().containsAll(Arrays.asList(keys));
        if (!result) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage",
                NbBundle.getMessage(PackagerCustomizer.class,
                "MSG_MissingJnlpProperties"));
        } else {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage",
                "");
        }
        return result;
    }
    
    
    public void store( WizardDescriptor d ) {        
        Map props = getProps();
        for (Iterator i=props.keySet().iterator(); i.hasNext();) {
            String key = (String) i.next();
            String val = (String) props.get(key);
            d.putProperty (key, val);
        }
    }
    
    public void read ( WizardDescriptor d ) {
        JTextComponent[] comps = new JTextComponent[] {
            codebase, description, homepage, icon, longdescription, vendor
        };
        for (int i=0; i < keys.length; i++) {
            String val = (String) d.getProperty(keys[i]);
            if (val != null) {
                comps[i].setText(val);
            } else {
                switch (i) {
                    case 0 :
                        File f = (File) d.getProperty(PackagerProject.KEY_DIR);
                        if (f != null) {
                            try {
                                comps[i].setText (f.toURL().toString());
                            } catch (MalformedURLException e) {
                                //do nothing
                            }
                        }
                        break;
                    case 1 :
                        String s = NbBundle.getMessage (JnlpOptionsPanel.class, "FMT_DefaultDescription", new Object[] { new Date() });
                        comps[i].setText(s);
                        break;
                    case 2 :
                        String s2 = (String) d.getProperty (PackagerProject.KEY_NAME);
                        if (s2 != null) {
                            comps[i].setText (File.separator + s2);
                        }
                        break;
                    case 3 :
                        break;
                    case 4 :
                        comps[i].setText (NbBundle.getMessage(JnlpOptionsPanel.class, "LBL_DefaultLongDescription"));
                        break;
                    case 5 :
                        String s3 = System.getProperty ("user.name");
                        if (s3 != null) {
                            comps[i].setText(s3);
                        }
                }
            }
        }
        String s = (String) d.getProperty("jnlp.permissions");
        if (s != null) {
            if (PackagerProject.PERMISSION_JNLP_J2EE.equals(s)) {
                j2eepermissions.setSelected(true);
            } else if (PackagerProject.PERMISSION_JNLP_SANDBOX.equals(s)) {
                nopermissions.setSelected(true);
            } else {
                fullpermissions.setSelected(true);
            }
        } else {
            nopermissions.setSelected(true);
        }
    }    
    
    
    private void fire() {
        if (panel != null) {
            panel.fire();
        }
    }
        
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chooseicon;
    private javax.swing.JTextField codebase;
    private javax.swing.JLabel codebaselabel;
    private javax.swing.JTextField description;
    private javax.swing.JLabel descriptionlabel;
    private javax.swing.JRadioButton fullpermissions;
    private javax.swing.JTextField homepage;
    private javax.swing.JLabel homepagelabel;
    private javax.swing.JTextField icon;
    private javax.swing.JLabel iconlabel;
    private javax.swing.JRadioButton j2eepermissions;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea longdescription;
    private javax.swing.JLabel longdescriptionlabel;
    private javax.swing.JRadioButton nopermissions;
    private javax.swing.JCheckBox offline;
    private javax.swing.JTextField vendor;
    private javax.swing.JLabel vendorlabel;
    // End of variables declaration//GEN-END:variables
    
}

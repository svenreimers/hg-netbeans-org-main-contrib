/*
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
*
* Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
*
* The contents of this file are subject to the terms of either the GNU
* General Public License Version 2 only ("GPL") or the Common
* Development and Distribution License("CDDL") (collectively, the
* "License"). You may not use this file except in compliance with the
* License. You can obtain a copy of the License at
* http://www.netbeans.org/cddl-gplv2.html
* or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
* specific language governing permissions and limitations under the
* License.  When distributing the software, include this License Header
* Notice in each file and include the License file at
* nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
* particular file as subject to the "Classpath" exception as provided
* by Sun in the GPL Version 2 section of the License file that
* accompanied this code. If applicable, add the following below the
* License Header, with the fields enclosed by brackets [] replaced by
* your own identifying information:
* "Portions Copyrighted [year] [name of copyright owner]"
*
* Contributor(s):
*
* The Original Software is NetBeans. The Initial Developer of the Original
* Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
* Microsystems, Inc. All Rights Reserved.
*
* If you wish your version of this file to be governed by only the CDDL
* or only the GPL Version 2, indicate your decision by adding
* "[Contributor] elects to include this software in this distribution
* under the [CDDL or GPL Version 2] license." If you do not indicate a
* single choice of license, a recipient has the option to distribute
* your version of this file under either the CDDL, the GPL Version 2 or
* to extend the choice of license to its licensees as provided above.
* However, if you add GPL Version 2 code and therefore, elected the GPL
* Version 2 license, then the option applies only if the new code is
* made subject to such option by the copyright holder.
*/
/*
 * MacOptionsPanel.java
 *
 * Created on May 29, 2004, 11:44 AM
 */

package org.netbeans.modules.packager.ui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.JTextComponent;
import org.netbeans.modules.packager.PackagerProject;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  Tim Boudreau
 */
public class MacOptionsPanel extends javax.swing.JPanel implements java.awt.event.FocusListener, java.awt.event.ActionListener, java.beans.PropertyChangeListener {
    
    /** Creates new form MacOptionsPanel */
    public MacOptionsPanel() {
        initComponents();
        setName (NbBundle.getMessage (MacOptionsPanel.class, "LAB_ConfigureMac"));
       
    }
    
    private MacOptionsWizardPanel panel = null;
    public MacOptionsPanel (MacOptionsWizardPanel panel) {
        this();
        this.panel = panel;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        icon = new javax.swing.JTextField();
        iconchoose = new javax.swing.JButton();
        iconlabel = new javax.swing.JLabel();
        appversion = new javax.swing.JTextField();
        appversionlabel = new javax.swing.JLabel();
        instructions = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        icon.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        icon.addFocusListener(this);
        icon.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        add(icon, gridBagConstraints);

        iconchoose.setText(NbBundle.getMessage(MacOptionsPanel.class,"LBL_ChooseIcon"));
        iconchoose.addActionListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 11);
        add(iconchoose, gridBagConstraints);

        iconlabel.setLabelFor(icon);
        iconlabel.setText(NbBundle.getMessage(MacOptionsPanel.class,"LBL_IconFile"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 69;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 11, 11);
        add(iconlabel, gridBagConstraints);

        appversion.setText("1.0");
        appversion.addFocusListener(this);
        appversion.addPropertyChangeListener(this);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 11, 11);
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 0.5;
        add(appversion, gridBagConstraints);

        appversionlabel.setLabelFor(appversion);
        appversionlabel.setText(NbBundle.getMessage(MacOptionsPanel.class,"LBL_AppVersion"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 11);
        add(appversionlabel, gridBagConstraints);

        instructions.setEditable(false);
        instructions.setLineWrap(true);
        instructions.setText(NbBundle.getMessage(MacOptionsPanel.class,"MSG_AppleConfig"));
        instructions.setWrapStyleWord(true);
        instructions.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        instructions.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 11);
        add(instructions, gridBagConstraints);

    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == iconchoose) {
            MacOptionsPanel.this.iconchooseActionPerformed(evt);
        }
    }

    public void focusGained(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == icon) {
            MacOptionsPanel.this.iconFocusGained(evt);
        }
        else if (evt.getSource() == appversion) {
            MacOptionsPanel.this.iconFocusGained(evt);
        }
    }

    public void focusLost(java.awt.event.FocusEvent evt) {
        if (evt.getSource() == icon) {
            MacOptionsPanel.this.iconFocusLost(evt);
        }
        else if (evt.getSource() == appversion) {
            MacOptionsPanel.this.iconFocusLost(evt);
        }
    }

    public void propertyChange(java.beans.PropertyChangeEvent evt) {
        if (evt.getSource() == appversion) {
            MacOptionsPanel.this.textComponentPropertyChange(evt);
        }
        else if (evt.getSource() == icon) {
            MacOptionsPanel.this.textComponentPropertyChange(evt);
        }
    }//GEN-END:initComponents

    private void textComponentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textComponentPropertyChange
        if (isShowing() && "text".equals(evt.getPropertyName())) {
            fire();
        }
    }//GEN-LAST:event_textComponentPropertyChange

    private void iconchooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconchooseActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileHidingEnabled(true);
        jfc.setFileFilter(new IcnsFilter());
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            if (f != null && f.exists()) {
                icon.setText (f.getPath());
                fire();
            }
        }
        
    }//GEN-LAST:event_iconchooseActionPerformed

    private void iconFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iconFocusLost
        fire();
    }//GEN-LAST:event_iconFocusLost

    private static final class IcnsFilter extends FileFilter {
        
        public boolean accept(File file) {
            return file.getName().endsWith (".icns"); //NOI18N
        }
        
        public String getDescription() {
            return NbBundle.getMessage(MacOptionsPanel.class, 
                "FILE_FILTER_ICONS"); //NOI18N
        }
    }
    
    
    private void iconFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iconFocusGained
        if (evt.getSource() instanceof JTextField) {
            JTextField jtf = (JTextField) evt.getSource();
            String s = jtf.getText();
            if (s != null) {
                jtf.setSelectionStart (0);
                jtf.setSelectionEnd (s.length());
            }
        }
    }//GEN-LAST:event_iconFocusGained
    
    public String getApplicationVersion() {
        return procStr (appversion);
    }
    
    public String getIconFilename () {
        return procStr (icon);
    }
    
    private String procStr (JTextComponent jtc) {
        String s = jtc.getText();
        if (s != null) {
            s = s.trim();
            if (s.length() == 0) {
                s = null;
            }
        }
        return s;
    }
    
    public void store (WizardDescriptor desc) {
        String s = (String) desc.getProperty(PackagerProject.KEY_MAC_ICONFILE);
        if (s != null) {
            icon.setText(s);
        }
        s = (String) desc.getProperty (PackagerProject.KEY_MAC_APPVERSION);
        if (s != null) {
            appversion.setText (s);
        }
    }
    
    public void read (WizardDescriptor desc) {
        desc.putProperty (PackagerProject.KEY_MAC_ICONFILE, procStr(icon));
        desc.putProperty (PackagerProject.KEY_MAC_APPVERSION, procStr(appversion));
        String s = (String) desc.getProperty (PackagerProject.KEY_MAC_VERSIONSTRING);
        
        //Not distinguishing the secondary version string in the GUI.  If not
        //set in the properties file, set it to same as the other
        if (s == null && procStr(appversion) != null) {
            desc.putProperty (PackagerProject.KEY_MAC_VERSIONSTRING, procStr(appversion));
        }
    }
    
    public boolean valid (WizardDescriptor wizardDescriptor) {
        boolean result = procStr (appversion) != null;
        if (!result) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", //NOI18N
                NbBundle.getMessage(MacOptionsPanel.class,
                "MSG_MissingJnlpProperties")); //NOI18N
        } else {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", //NOI18N
                ""); //NOI18N
        }
        return result;
    }
    
    private void fire() {
        if (panel != null) {
            panel.fire();
        }
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appversion;
    private javax.swing.JLabel appversionlabel;
    private javax.swing.JTextField icon;
    private javax.swing.JButton iconchoose;
    private javax.swing.JLabel iconlabel;
    private javax.swing.JTextArea instructions;
    // End of variables declaration//GEN-END:variables
    
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is the Jabber module.
 * The Initial Developer of the Original Software is Petr Nejedly
 * Portions created by Petr Nejedly are Copyright (c) 2004.
 * All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s): Petr Nejedly
 */

package org.netbeans.modules.jabber.ui;

import java.awt.Dialog;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import org.jivesoftware.smack.packet.Message;
import org.netbeans.modules.jabber.Contact;
import org.netbeans.modules.jabber.Manager;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;

/**
 *
 * @author  nenik
 */
final class MessageComposer extends javax.swing.JPanel {
    Manager manager;
    
    String[] to;
    
    String template;
    
    MessageDisplayer toNotify;
    
    /** Creates new form MessageDisplayer */
    private MessageComposer(Manager man, String[] to, String template, MessageDisplayer toNotify) {
        manager = man;
        this.to = to;
        this.template = template;
        this.toNotify = toNotify;
        initComponents();
    }
    
    private void setup() {
        StringBuffer toBuffer = new StringBuffer();
        Contact.List cList = manager.getContactList();

        for (int i = 0; i<to.length; i++ ) {
            toBuffer.append(cList.getShortDisplayName(to[i]));            
            if (i < to.length - 1) toBuffer.append(", ");
        }
        
        toField.setText(toBuffer.toString());
        
        messageArea.setText(template);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        sendButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        toLabel = new javax.swing.JLabel();
        toField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();

        sendButton.setText("Send");
        cancelButton.setText("Cancel");

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(400, 300));
        setPreferredSize(new java.awt.Dimension(400, 300));
        toLabel.setLabelFor(toField);
        toLabel.setText("To: ");
        toLabel.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(toLabel, gridBagConstraints);

        toField.setEditable(false);
        toField.setBorder(null);
        toField.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 6);
        add(toField, gridBagConstraints);

        messageArea.setLineWrap(true);
        messageArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(messageArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 6, 6);
        add(jScrollPane1, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField toField;
    private javax.swing.JLabel toLabel;
    // End of variables declaration//GEN-END:variables

    Dialog d;
    
    void doShow() {
        Lst listener = new Lst();
        setup();
        
        DialogDescriptor desc = new DialogDescriptor(this, "Compose message", false,
            new Object[] {sendButton, cancelButton}, sendButton, 
            DialogDescriptor.BOTTOM_ALIGN, null, listener);
        
        d = DialogDisplayer.getDefault().createDialog(desc);

        KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK);
        Object actionKey = "send"; // NOI18N
        ((JDialog)d).getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(k, actionKey);
        ((JDialog)d).getRootPane().getActionMap().put(actionKey, listener);

        d.show();
        messageArea.requestFocusInWindow();
    }
    
    void sendMessage() {
        String body = messageArea.getText();
        
        for (int i=0; i<to.length; i++) {
            Message msg = new Message(to[i]);
            msg.setBody(body);
            manager.getConnection().sendPacket(msg);
        }
    }
    
    public static void composeMessage(Manager man, String[] to, String template,
        MessageDisplayer toNotifyOnSend) {
        new MessageComposer(man, to, template, toNotifyOnSend).doShow();
    }

    private class Lst extends AbstractAction implements java.awt.event.ActionListener {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            Object src = e.getSource();
            
            if (src == sendButton || (src instanceof JRootPane)) { // Ctrl+Enter
                sendMessage();
                d.dispose();
                if (toNotify != null) toNotify.replySent();
            } else if (src == cancelButton) {
                d.dispose();
            } else {
                System.out.println("source:" + src);
            }
        }
    }
}

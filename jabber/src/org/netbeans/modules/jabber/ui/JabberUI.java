/*
 *                         Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License Version
 * 1.0 (the "License"). You may not use this file except in compliance with 
 * the License. A copy of the License is available at http://www.sun.com/
 *
 * The Original Code is the Jabber module.
 * The Initial Developer of the Original Code is Petr Nejedly
 * Portions created by Petr Nejedly are Copyright (c) 2004.
 * All Rights Reserved.
 *
 * Contributor(s): Petr Nejedly
 */

package org.netbeans.modules.jabber.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import org.jivesoftware.smack.packet.Message;
import org.netbeans.modules.jabber.Manager;
import org.netbeans.modules.jabber.MessageQueue;
import org.netbeans.modules.jabber.ui.RosterNode;
import org.openide.explorer.ExplorerPanel;
import org.openide.explorer.view.BeanTreeView;
import org.openide.explorer.view.ListView;
import org.openide.nodes.Node;
import org.openide.util.RequestProcessor;
import org.openide.util.Utilities;

/**
 *
 * @author  nenik
 */
public class JabberUI extends javax.swing.JPanel {

    private Manager manager;
    private ReadGlobalAction readGlobal;
    private StatusMenuAction statusMenu;

    private static Map uiMap = new HashMap();
    
//    private JMenu menu;
    
    /** Creates new form JabberUI */
    public JabberUI(Manager manager) {
        this.manager = manager;
        readGlobal = new ReadGlobalAction();
        statusMenu = new StatusMenuAction();
        
        initComponents();
        JComponent list = createRoster();
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(list, gridBagConstraints);
        
        uiMap.put(manager, this); // XXX: register weakly!
    }
    
    static JabberUI forManager(Manager man) {
        return (JabberUI)uiMap.get(man);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        statusMenuButton = statusMenu.getButton();
        messageButton = readGlobal.getButton();

        jMenu1.setText("Menu");
        jMenuBar1.add(jMenu1);

        setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(statusMenuButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(messageButton, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton messageButton;
    private javax.swing.JButton statusMenuButton;
    // End of variables declaration//GEN-END:variables
    
    /** @return token for removing the entry
     */
    void addAction(Action a) {
        JMenuItem item = statusMenu.getMenu().add(a);
        a.putValue("attachedMenuItem", item);
    }
    
    void removeAction(Action a) {
        Object o = a.getValue("attachedMenuItem");
        if (! (o instanceof JMenuItem)) throw new IllegalArgumentException("Wrong action");
        statusMenu.getMenu().remove((JMenuItem)o);
    }
    
    private JComponent createRoster() {
        Node root  = new RosterNode(manager);
        
        ExplorerPanel panel = new ExplorerPanel();
        panel.add(new ListView());
        panel.getExplorerManager().setRootContext(root);
        return panel;
    }    

    
    private ImageIcon createIcon(String name) {
            return new ImageIcon(getClass().getResource("/org/netbeans/modules/jabber/resources/" + name));
    }

    // actions    
    private class ReadGlobalAction extends javax.swing.AbstractAction implements MessageQueue.Listener, Runnable  {
        private ImageIcon[] messageIcons = new ImageIcon[] {
            null,
            createIcon("message24.png"),
            createIcon("mmessage24.png"),
        };
        
        private JButton button;
        
        ReadGlobalAction() {
            super("Read message");
            MessageQueue queue = manager.getMessageQueue();
            queue.addListener(this);

            button = new JButton();
            button.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 2, 2), new java.awt.Color(255, 255, 255)), new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), java.awt.Color.lightGray), new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 0, 0), new java.awt.Color(0, 0, 0)))));
            button.addActionListener(this);

            updateStatus();
        }
        
        public JButton getButton() {
            return button;
        }
        
        private void updateStatus() {
            int cnt = manager.getMessageQueue().getMessageCount();
            setEnabled(cnt > 0);
            switch (cnt) {
                case 0:
                    button.setText("No msgs");
                    button.setIcon(messageIcons[0]);
                    break;
                    
                case 1:
                    button.setText("1 msg");
                    button.setIcon(messageIcons[1]);
                    break;
                    
                default:
                    button.setText(cnt+ " msgs");
                    button.setIcon(messageIcons[2]);
                    break;
                    
            }
//            button.setText(cnt == 0 ? "No msgs" : (cnt + "msgs"));
        }
        
        public void actionPerformed(java.awt.event.ActionEvent e) {
            Message head = manager.getMessageQueue().nextMessage();
            if (head != null) {
                MessageDisplayer.displayMessage(manager, null, head);
            }
        }
        
        public void messageReceived(String fromJID) {
            SwingUtilities.invokeLater(this);
        }
        
        public void messageRemoved(String fromJID) {
            SwingUtilities.invokeLater(this);
        }
        
        public void run() {
            updateStatus();
        }
        
    }
    
    private Action addContact = new AddContactAction();
    
    private class AddContactAction extends javax.swing.AbstractAction {
        AddContactAction() {
            super("Add contact");
        }
        
        public void actionPerformed(java.awt.event.ActionEvent e) {
            AddContactUI.addContact(manager);
        }
    }
    
    private class ConfigureAction extends javax.swing.AbstractAction {
        ConfigureAction() {
            super("Configure");
        }
        
        public void actionPerformed(java.awt.event.ActionEvent e) {
            ConfigurationUI.configure(manager);
        }
    }

    
    private class StatusMenuAction extends AbstractAction implements Manager.Listener, Runnable {
        private JMenu menu = new JMenu();
        private JButton button;
        private ConnectionAction connectionAction = new ConnectionAction();
        
        int currentStatus = 0;
        
        JMenu getMenu() {
            return menu;
        }
        
        // 0: offline
        // 1: connecting (animation)
        // 2: XA
        // 3: AWAY
        // 4: DND
        // 5: ONLINE
        // 6: CHATTY
	// 7: error
        private ImageIcon[] LARGE_ICON = new ImageIcon[] {
            createIcon("offline24.png"),
            createIcon("anim24.gif"),
            createIcon("xa24.png"),
            createIcon("away24.png"),
            createIcon("dnd24.png"),
            createIcon("online24.png"),
            createIcon("chat24.png"),
            createIcon("error24.png")
        };

        private Icon[] ICONS = new Icon[] {
            null,
            null,
            createIcon("xa.png"),
            createIcon("away.png"),
            createIcon("dnd.png"),
            createIcon("online.png"),
            createIcon("chat.png")
        };

        private String[] LABELS = new String[] {
            null, null, "Extended Away", "Away", "Do not disturb",
            "Online", "Chatty"
        };
        

        StatusMenuAction() {
            super("");
            
            JMenu sub = new JMenu("Set status");
            sub.add(new StatusAction(Manager.STATUS_CHATTY));
            sub.add(new StatusAction(Manager.STATUS_ONLINE));
            sub.add(new StatusAction(Manager.STATUS_DND));
            sub.add(new StatusAction(Manager.STATUS_AWAY));
            sub.add(new StatusAction(Manager.STATUS_XA));
            menu.add(sub);
        
            menu.add(connectionAction);
            menu.addSeparator();

            menu.add(new AddContactAction());
            menu.add(new ReadGlobalAction());

            menu.addSeparator();
            menu.add(new ConfigureAction());
            
            button = new JButton(this);
            button.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(0, 0, 2, 2), new java.awt.Color(255, 255, 255)), new javax.swing.border.CompoundBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 1, 1), java.awt.Color.lightGray), new javax.swing.border.MatteBorder(new java.awt.Insets(1, 1, 0, 0), new java.awt.Color(0, 0, 0)))));

            manager.addListener(this);
            stateChanged();
        }
        
        public JButton getButton() {
            return button;
        }
        
        void updateProps() {
//            putValue(Action.NAME, SHORT_TEXT[currentStatus]);
            putValue(Action.SMALL_ICON, LARGE_ICON[currentStatus]);
            LARGE_ICON[currentStatus].setImageObserver(button);
            // XXX keep the sub-actions up-to-date
            connectionAction.update();
        }
                
        public void actionPerformed(ActionEvent e) {
               menu.getPopupMenu().show(button, 0, button.getHeight());
        }
        
        public void stateChanged() {
            SwingUtilities.invokeLater(this);
        }
        
        public void run() {
            int conn = manager.getConnectionStatus();
            switch (conn) {
                case Manager.CONNECTION_ERROR:
                    currentStatus = 7; // XXX - proper state
                    break;
                    
                case Manager.CONNECTION_DISCONNECTED:
                    currentStatus = 0;
                    break;
                    
                case Manager.CONNECTION_CONNECTING:
                case Manager.CONNECTION_LOGGING:
                case Manager.CONNECTION_DATAPHASE:
                    currentStatus = 1;
                    break;
                    
                case Manager.CONNECTION_READY:
                    int st = manager.getStatus();
                    currentStatus = st; // Keep the numbers in sync!
                    break;
            }
            updateProps();
        }

    
        /**
         * This action manages the presence status of the user.
         * Individual instances are setup to present and set
         * given availability mode.
         */
        private class StatusAction extends AbstractAction {
            int target;
            StatusAction(int status) {
                super(LABELS[status], ICONS[status]);
                target = status;
            }
        
            public void actionPerformed(java.awt.event.ActionEvent e) {
                manager.setStatus(target);
            }
        }
        
        /**
         * This action manages the connection status.
         * The single action plays several roles, depending on current connection
         * state: <UL>
         * <LI>When disconnected, acts as "connect"
         * <LI>When connectiong, acts as "cancel" (once implemented)
         * <LI>When connected, acts as "disconnect"
         * 
         */
        private class ConnectionAction extends AbstractAction implements Runnable {
            private int action = 0;
            
            ConnectionAction() {
                super("Connect");
            }
            
            void update() {
                int mode = manager.getConnectionStatus();
                switch (mode) {
                    case Manager.CONNECTION_ERROR:
                    case Manager.CONNECTION_DISCONNECTED:
                        action = 0;
                        putValue(Action.NAME, "Connect");
                        setEnabled(true);
                        action = 0;
                        break;
                        
                    case Manager.CONNECTION_CONNECTING:
                    case Manager.CONNECTION_LOGGING:
                    case Manager.CONNECTION_DATAPHASE:
                        action = 1;
                        putValue(Action.NAME, "Stop connecting");
                        setEnabled(false); // TODO
                        break;
                        
                    case Manager.CONNECTION_READY:
                        action = 2;
                        putValue(Action.NAME, "Disconnect");
                        setEnabled(true);
                        break;
                }
            }
            
            public void actionPerformed(ActionEvent e) {
                switch (action) {
                    case 0:
                        RequestProcessor.getDefault().post(this);
                        break;
                    
                    case 1:
                        break; // TODO
                        
                    case 2:
                        manager.logoff();
                        break;
                }
            }
            
            public void run() {
                try {
                    manager.login();
                } catch (Exception exc) {} // XXX - log
            }
            
        }

        
    }
    
}

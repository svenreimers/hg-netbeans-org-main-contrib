/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is the Jabber module.
 * The Initial Developer of the Original Software is Petr Nejedly
 * Portions created by Petr Nejedly are Copyright (c) 2004.
 * All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s): Petr Nejedly
 */

package org.netbeans.modules.jabber.ui;

import java.awt.Color;
import java.awt.Dialog;
import java.awt.Toolkit;
import javax.swing.AbstractAction;
import javax.swing.SwingUtilities;
import org.jivesoftware.smack.AccountManager;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.util.StringUtils;
import org.netbeans.modules.jabber.Manager;
import org.netbeans.modules.jabber.Settings;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.RequestProcessor;

/**
 *
 * @author  nenik
 */
class ConfigurationUI extends javax.swing.JPanel {
    
    Manager manager;
    Dialog d;

    /** Creates new form MessageDisplayer */
    private ConfigurationUI(Manager man) {
        manager = man;
        initComponents();
    }
    
    private void setup() {
        Settings set = manager.getSettings();
        jidField.setText(set.getUserJid());
        passField.setText(set.getPassword());
        int auto = set.getAutologin();
        
        loginCombo.setSelectedIndex(auto == 0 ? 0 : (auto == 1 ? 2 : 1));
    }

    private void save() {
        Settings set = manager.getSettings();
        set.setUserJid(jidField.getText());
        set.setPassword(passField.getText()); // XXX use getPassword and clear the array
        int auto = loginCombo.getSelectedIndex();
        
        set.setAutologin(auto == 0 ? 0 : (auto == 2 ? 1 : 3));
    }

    
    /** Creates new form ConfigurationUI */
    public ConfigurationUI() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        saveButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jidLabel = new javax.swing.JLabel();
        jidField = new javax.swing.JTextField();
        passLabel = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        loginLabel = new javax.swing.JLabel();
        loginCombo = new javax.swing.JComboBox();
        messageLabel = new javax.swing.JLabel();

        saveButton.setText("Save");
        createButton.setText("Create Account");
        cancelButton.setText("Cancel");

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(12, 12, 12, 12)));
        jidLabel.setLabelFor(jidField);
        jidLabel.setText("Jabber ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(jidLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jidField, gridBagConstraints);

        passLabel.setLabelFor(passField);
        passLabel.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(passLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(passField, gridBagConstraints);

        loginLabel.setText("Autologin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(loginLabel, gridBagConstraints);

        loginCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Offline", "Last State", "Online" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(loginCombo, gridBagConstraints);

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(messageLabel, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField jidField;
    private javax.swing.JLabel jidLabel;
    private javax.swing.JComboBox loginCombo;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPasswordField passField;
    private javax.swing.JLabel passLabel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
    
    void doShow() {
        Lst listener = new Lst();
        setup();
        
        DialogDescriptor desc = new DialogDescriptor(this, "Configure", true,
            new Object[] {saveButton, createButton, cancelButton}, saveButton, 
            DialogDescriptor.BOTTOM_ALIGN, null, listener);
        
        d = DialogDisplayer.getDefault().createDialog(desc);

        d.show();
//        messageArea.requestFocusInWindow();
    }
    
    
    public static void configure(Manager man) {
        new ConfigurationUI(man).doShow();
    }
    
    private void notifyState(final boolean disable, final String state, final boolean error) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                jidField.setEnabled(!disable);
                passField.setEnabled(!disable);
                loginCombo.setEnabled(!disable);
                saveButton.setEnabled(!disable);
                createButton.setEnabled(!disable);
                messageLabel.setText(state);
                messageLabel.setForeground(error ? Color.red : Color.black);
            }
        });
    }


    private void doCreate(String jid, String pass) {
        try {
            notifyState(true, "Connecting server", false);
            String srv = StringUtils.parseServer(jid);
            String user = StringUtils.parseName(jid);

            XMPPConnection con = new XMPPConnection(srv);

            notifyState(true, "Creating account", false);

            AccountManager acc = con.getAccountManager();
            acc.createAccount(user, pass);
            notifyState(false, "Account created", false);
        } catch (XMPPException e) {
            notifyState(false, "Error:" + e.getLocalizedMessage(), true);
        }
    }

    
    private class Lst extends AbstractAction implements java.awt.event.ActionListener, Runnable {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            Object src = e.getSource();
            
            if (src == saveButton) { // Ctrl+Enter
                save();
                d.dispose();
            } else if (src == cancelButton) {
                d.dispose();
            } else if (src == createButton) {
                String jid = jidField.getText();
                int idx = jid.indexOf('@');
                if (idx > 0 && idx < jid.length() - 1) {
                    notifyState(true, " ", false);
                    RequestProcessor.getDefault().post(this);
                } else {
                    notifyState(false, "Wrong JID, use <user>@<server>", true);
                    Toolkit.getDefaultToolkit().beep();
                }
            }
        }
        
        public void run() {
            doCreate(jidField.getText(), passField.getText());
        }
    }

}

For proper function of the remote assistance part, the NetBeans have
to be patched. Here is the patch against the NetBeans 3.6 release version.

Index: openide/src/org/openide/windows/DisplayInterceptor.java
===================================================================
RCS file: openide/src/org/openide/windows/DisplayInterceptor.java
diff -N openide/src/org/openide/windows/DisplayInterceptor.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ openide/src/org/openide/windows/DisplayInterceptor.java	25 May 2004 09:31:45 -0000
@@ -0,0 +1,43 @@
+/*
+ *                         Sun Public License Notice
+ *
+ * The contents of this file are subject to the Sun Public License Version
+ * 1.0 (the "License"). You may not use this file except in compliance with 
+ * the License. A copy of the License is available at http://www.sun.com/
+ *
+ * The Original Code is the Jabber module.
+ * The Initial Developer of the Original Code is Petr Nejedly
+ * Portions created by Petr Nejedly are Copyright (c) 2004.
+ * All Rights Reserved.
+ *
+ * Contributor(s): Petr Nejedly
+ */
+
+package org.openide.windows;
+
+import java.awt.*;
+import org.openide.util.Lookup;
+
+public abstract class DisplayInterceptor {
+    public abstract Graphics createGraphics(Graphics delegate, Component comp);
+
+    public abstract void windowCreated(Window win);
+
+    private static DisplayInterceptor instance;
+    public static synchronized DisplayInterceptor getDefault() {
+	if (instance == null) {
+	    instance = (DisplayInterceptor)Lookup.getDefault().lookup(DisplayInterceptor.class);
+	    if (instance == null) instance = new Trivial();
+	}
+	return instance;
+    }
+    
+    private static class Trivial extends DisplayInterceptor {
+	public Graphics createGraphics(Graphics del, Component comp) {
+	    return del;
+	}
+
+	public void windowCreated(Window win) {
+	}
+    }
+}
\ No newline at end of file
Index: core/windows/src/org/netbeans/core/windows/services/NbPresenter.java
===================================================================
RCS file: /cvs/core/windows/src/org/netbeans/core/windows/services/NbPresenter.java,v
retrieving revision 1.8
diff -u -r1.8 NbPresenter.java
--- core/windows/src/org/netbeans/core/windows/services/NbPresenter.java	24 Feb 2004 17:14:45 -0000	1.8
+++ core/windows/src/org/netbeans/core/windows/services/NbPresenter.java	25 May 2004 09:31:46 -0000
@@ -61,6 +61,7 @@
 import org.openide.util.Mutex;
 import org.openide.util.NbBundle;
 import org.openide.util.Utilities;
+import org.openide.windows.DisplayInterceptor;
 
 
 // XXX Before as org.netbeans.core.NbPresenter
@@ -119,6 +120,10 @@
     private transient boolean haveCalledInitializeButtons = false;
     
     static final long serialVersionUID =-4508637164126678997L;
+
+    public java.awt.Graphics getGraphics() {
+	return DisplayInterceptor.getDefault().createGraphics(super.getGraphics(), this);
+    }
     
     /** Creates a new Dialog from specified NotifyDescriptor,
      * with given frame owner.
@@ -127,6 +132,7 @@
     public NbPresenter(NotifyDescriptor d, Frame owner, boolean modal) {
         super(owner, d.getTitle(), modal); // modal
         initialize(d);
+	DisplayInterceptor.getDefault().windowCreated(this);
     }
     
     /** Creates a new Dialog from specified NotifyDescriptor,
@@ -136,6 +142,7 @@
     public NbPresenter(NotifyDescriptor d, Dialog owner, boolean modal) {
         super(owner, d.getTitle(), modal); // modal
         initialize(d);
+	DisplayInterceptor.getDefault().windowCreated(this);
     }
     
     private void initAccessibility(){
Index: core/windows/src/org/netbeans/core/windows/view/ui/MainWindow.java
===================================================================
RCS file: /cvs/core/windows/src/org/netbeans/core/windows/view/ui/MainWindow.java,v
retrieving revision 1.22
diff -u -r1.22 MainWindow.java
--- core/windows/src/org/netbeans/core/windows/view/ui/MainWindow.java	1 Mar 2004 16:40:02 -0000	1.22
+++ core/windows/src/org/netbeans/core/windows/view/ui/MainWindow.java	25 May 2004 09:31:46 -0000
@@ -49,6 +49,7 @@
 
 import org.openide.LifecycleManager;
 import org.openide.windows.WindowManager;
+import org.openide.windows.DisplayInterceptor;
 
 /** The MainWindow of IDE. Holds toolbars, main menu and also entire desktop
  * if in MDI user interface. Singleton.
@@ -69,10 +70,17 @@
     
     /** Flag indicating main window is initialized. */ 
     private boolean inited;
+ 
+    public java.awt.Graphics getGraphics() {
+	return DisplayInterceptor.getDefault().createGraphics(super.getGraphics(), this);
+    }
+ 
+     /** Getter for only instance of main window in the system */
     
 
     /** Constructs main window. */
     public MainWindow() {
+	DisplayInterceptor.getDefault().windowCreated(this);
     }
     
     /** Overrides superclass method, adds help context to the new root pane. */
Index: utilities/src/org/netbeans/modules/openfile/OpenFileAction.java
===================================================================
RCS file: /cvs/utilities/src/org/netbeans/modules/openfile/OpenFileAction.java,v
retrieving revision 1.32
diff -u -r1.32 OpenFileAction.java
--- utilities/src/org/netbeans/modules/openfile/OpenFileAction.java	21 Feb 2004 01:46:03 -0000	1.32
+++ utilities/src/org/netbeans/modules/openfile/OpenFileAction.java	25 May 2004 09:31:46 -0000
@@ -14,16 +14,25 @@
 
 package org.netbeans.modules.openfile;
 
-
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Container;
+import java.awt.Frame;
+import java.awt.HeadlessException;
 import java.io.File;
 import java.util.Enumeration;
 import javax.swing.filechooser.FileFilter;
+import javax.swing.JDialog;
 import javax.swing.JFileChooser;
+import javax.swing.JRootPane;
+import javax.swing.SwingUtilities;
+import javax.swing.UIManager;
 import org.netbeans.modules.utilities.Manager;
 import org.openide.DialogDisplayer;
 
 import org.openide.NotifyDescriptor;
 import org.openide.util.actions.CallableSystemAction;
+import org.openide.windows.DisplayInterceptor;
 import org.openide.filesystems.FileSystem;
 import org.openide.filesystems.JarFileSystem;
 import org.openide.filesystems.Repository;
@@ -98,7 +107,7 @@
      * @return  the initialized file chooser
      */
     protected JFileChooser prepareFileChooser() {
-        JFileChooser chooser = new JFileChooser(resolveInitialDirectory());
+        JFileChooser chooser = new MyFileChooser(resolveInitialDirectory());
         HelpCtx.setHelpIDString(chooser, getHelpCtx().getHelpID());
         
         chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
@@ -241,5 +250,51 @@
             return description;
         }
     } // End of Filter class.
+    
+    private static class MyFileChooser extends JFileChooser {
+        MyFileChooser(File f) {
+            super(f);
+        }
+        
+	protected JDialog createDialog(Component parent) throws HeadlessException {
+    	    Frame frame = parent instanceof Frame ? (Frame) parent
+                : (Frame)SwingUtilities.getAncestorOfClass(Frame.class, parent);
+
+	    String title = getUI().getDialogTitle(this);
+    	    getAccessibleContext().setAccessibleDescription(title);
+
+    	    JDialog dialog = new MyDialog(frame, title, true);
+
+    	    Container contentPane = dialog.getContentPane();
+    	    contentPane.setLayout(new BorderLayout());
+    	    contentPane.add(this, BorderLayout.CENTER);
+ 
+    	    if (JDialog.isDefaultLookAndFeelDecorated()) {
+        	boolean supportsWindowDecorations = 
+        	UIManager.getLookAndFeel().getSupportsWindowDecorations();
+        	if (supportsWindowDecorations) {
+            	    dialog.getRootPane().setWindowDecorationStyle(JRootPane.FILE_CHOOSER_DIALOG);
+        	}
+    	    }
+
+    	    dialog.pack();
+    	    dialog.setLocationRelativeTo(parent);
+
+	    return dialog;
+	}
+    }
+    
+    private static class MyDialog extends JDialog {
+    	public MyDialog(Frame frame, String title, boolean modal) {
+	    super(frame, title, modal);
+            DisplayInterceptor.getDefault().windowCreated(this);
+	}
+        
+        public java.awt.Graphics getGraphics() {
+            return DisplayInterceptor.getDefault().createGraphics(
+                super.getGraphics(), this);
+        }
+        
+    }
 
 }

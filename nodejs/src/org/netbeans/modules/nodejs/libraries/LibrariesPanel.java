/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */

/*
 * LibrariesPanel.java
 *
 * Created on May 28, 2011, 11:24:04 AM
 */
package org.netbeans.modules.nodejs.libraries;

import java.awt.Component;
import java.awt.EventQueue;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.modules.nodejs.NodeJSProject;
import org.netbeans.modules.nodejs.ui.UiUtil;
import org.openide.awt.HtmlBrowser.URLDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;

/**
 *
 * @author tim
 */
public class LibrariesPanel extends javax.swing.JPanel implements Runnable, DocumentListener {

    private final RequestProcessor rp = new RequestProcessor("Node.js search", 1, true, true);
    private final RequestProcessor rp2 = new RequestProcessor("npm output processor", 1, true, true);
    private final RequestProcessor.Task task;
    private final RequestProcessor.Task outTask;

    /** Creates new form LibrariesPanel */
    public LibrariesPanel(NodeJSProject project) {
        initComponents();
        task = rp.create(this);
        searchField.getDocument().addDocumentListener(this);
        outTask = rp2.create(new OutProcessor());
        UiUtil.prepareComponents(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        inner = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        statusLabel.setText(org.openide.util.NbBundle.getMessage(LibrariesPanel.class, "LibrariesPanel.statusLabel.text")); // NOI18N

        searchLabel.setText(org.openide.util.NbBundle.getMessage(LibrariesPanel.class, "LibrariesPanel.searchLabel.text")); // NOI18N

        searchField.setText(org.openide.util.NbBundle.getMessage(LibrariesPanel.class, "LibrariesPanel.searchField.text")); // NOI18N

        inner.setLayout(new javax.swing.BoxLayout(inner, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(inner);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(LibrariesPanel.class, "LibrariesPanel.jLabel1.text")); // NOI18N

        jLabel2.setForeground(java.awt.Color.blue);
        jLabel2.setText(org.openide.util.NbBundle.getMessage(LibrariesPanel.class, "LibrariesPanel.jLabel2.text")); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.blue));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showNpmDownloadInstructions(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLabel)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showNpmDownloadInstructions(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showNpmDownloadInstructions
        try {
            URLDisplayer.getDefault().showURLExternal(new URL("https://github.com/isaacs/npm#readme"));
        } catch (MalformedURLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_showNpmDownloadInstructions

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel inner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    AtomicBoolean cancelled;
    private final Object lock = new Object();
    private InputStream currProcessIn;

    @Override
    public void run() {
        Process cur;
        synchronized (lock) {
            cur = process;
        }
        if (cur != null) {
            cur.destroy();
            if (outProcessorThread != null) {
                outProcessorThread.interrupt();
            }
        }
        Document d = searchField.getDocument();
        final String[] txt = new String[1];
        d.render(new Runnable() {

            @Override
            public void run() {
                txt[0] = searchField.getText();
            }
        });
        if (txt[0].trim().equals("")) {
            return;
        }
        ProcessBuilder pb = new ProcessBuilder("npm", "search", txt[0]);
        try {
            Process p = pb.start();
            synchronized (lock) {
                currProcessIn = p.getInputStream();
                lock.notify();
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    private volatile boolean visible = true;
    private Process process;

    @Override
    public void addNotify() {
        super.addNotify();
        visible = true;
        outTask.schedule(300);
    }

    @Override
    public void removeNotify() {
        visible = false;
        Process proc;
        synchronized (lock) {
            currProcessIn = null;
            lock.notify();
            if (outProcessorThread != null) {
                outProcessorThread.interrupt();
            }
            proc = process;
            outTask.cancel();
        }
        super.removeNotify();
        if (proc != null) {
            process.destroy();
        }
    }
    private Thread outProcessorThread;

    private class OutProcessor implements Runnable {

        @Override
        public void run() {
            synchronized (lock) {
                outProcessorThread = Thread.currentThread();
            }
            try {
                InputStream in = null;
                final Process p = process;
                main:
                for (;;) {
                    InputStream newIn;
                    synchronized (lock) {
                        newIn = currProcessIn;
                    }
                    if (newIn != null) {
                        StringBuilder sb = new StringBuilder();
                        try {
                            for (;;) {
                                int val = newIn.read();
                                if (Thread.interrupted()) {
                                    try {
                                        in.close();
                                    } finally {
                                        break main;
                                    }
                                }
                                if (val == -1) {
                                    if (sb.length() > 0) {
                                        publish(sb);
                                        sb = new StringBuilder();
                                        break;
                                    }
                                }
                                char c = (char) val;
                                if (c == '\n') {
                                    publish(sb);
                                    if (Thread.interrupted()) {
                                        try {
                                            in.close();
                                        } finally {
                                            break main;
                                        }
                                    }
                                    sb = new StringBuilder();
                                } else {
                                    sb.append(c);
                                }
                            }
                        } catch (IOException ioe) {
                            Exceptions.printStackTrace(ioe);
                        } finally {
                            EventQueue.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    synchronized (lock) {
                                        if (p != process) {
                                            return;
                                        }
                                    }
                                    statusLabel.setText(NbBundle.getMessage(LibrariesPanel.class, "SEARCH_DONE", inner.getComponentCount()));
                                }
                            });
                        }
                    }
                    synchronized (lock) {
                        try {
                            lock.wait();
                        } catch (InterruptedException ex) {
                            Exceptions.printStackTrace(ex);
                        }
                        if (!visible) {
                            return;
                        }
                    }
                }
            } finally {
            }
        }
    }
    private static final Pattern p = Pattern.compile(
            "(\\S+)\\s+(.*)=(\\S+)");

    private void publish(CharSequence seq) {
        final Matcher m = p.matcher(seq);
        Process p;
        synchronized (lock) {
            p = this.process;
        }
        final Process pp = p;
        if (m.lookingAt()) {
            EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    synchronized (lock) {
                        if (pp != process) {
                            //stale runnable
                            return;
                        }
                    }
                    inner.add(new OneLibraryPanel(m.group(1), m.group(2), m.group(3)));
                    inner.invalidate();
                    inner.revalidate();
                    inner.repaint();
                }
            });
        }
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        for (Component c : inner.getComponents()) {
            if (c instanceof OneLibraryPanel) {
                if (!((OneLibraryPanel) c).isSelected()) {
                    inner.remove(c);
                }
            }
            if (c instanceof JLabel) {
                inner.remove(c);
            }
        }
//        inner.removeAll();
        inner.invalidate();
        inner.revalidate();
        inner.repaint();
        statusLabel.setText(NbBundle.getMessage(LibrariesPanel.class, "SEARCHING"));
        task.schedule(750);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        insertUpdate(e);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        insertUpdate(e);
    }
    
    public List<String> getLibraries() {
        List<String> result = new ArrayList<String>();
        for (Component c : inner.getComponents()) {
            if (c instanceof OneLibraryPanel) {
                if (((OneLibraryPanel) c).isSelected()) {
                    result.add (((OneLibraryPanel)c).getModuleName());
                }
            }
        }
        return result;
    }
}

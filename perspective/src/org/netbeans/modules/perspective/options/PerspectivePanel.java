/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.perspective.options;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.perspective.persistence.PerspectivePreferences;
import org.openide.util.NbBundle;
/**
 *
 * @author Anuradha G
 */
final class PerspectivePanel extends javax.swing.JPanel {

   

    PerspectivePanel(final PerspectiveOptionsPanelController controller) {
        initComponents();
        chAddOpened.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                controller.fireChanged();
            }
        });
        chCloseOpened.addChangeListener(new ChangeListener() {

            public void stateChanged(ChangeEvent e) {
                controller.fireChanged();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        chCloseOpened = new javax.swing.JCheckBox();
        chAddOpened = new javax.swing.JCheckBox();
        lblClaoseOpenedDescription = new javax.swing.JLabel();
        lblAddOpendDescription = new javax.swing.JLabel();

        lblHeader.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(lblHeader, NbBundle.getMessage(PerspectivePanel.class,"Perspective_Options")); // NOI18N

        chCloseOpened.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chCloseOpened, NbBundle.getMessage(PerspectivePanel.class,"Close_all_Views_before_open_new_Perspective")); // NOI18N
        chCloseOpened.setOpaque(false);

        org.openide.awt.Mnemonics.setLocalizedText(chAddOpened, NbBundle.getMessage(PerspectivePanel.class,"Add_Open_Views_automaticaly_to_Perspective")); // NOI18N
        chAddOpened.setOpaque(false);

        org.openide.awt.Mnemonics.setLocalizedText(lblClaoseOpenedDescription, NbBundle.getMessage(PerspectivePanel.class,"When_switching_Perspective,__close_opened_Views_before_switch_to__new_Perspective")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblAddOpendDescription, NbBundle.getMessage(PerspectivePanel.class,"Automaticaly_track_opened_views_and_add_to_Perspective")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chCloseOpened, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .add(chAddOpened))
                .addContainerGap(92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(41, 41, 41)
                .add(lblAddOpendDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(41, 41, 41)
                .add(lblClaoseOpenedDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lblHeader, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lblHeader)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(chCloseOpened)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblClaoseOpenedDescription)
                .add(18, 18, 18)
                .add(chAddOpened)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblAddOpendDescription)
                .addContainerGap(121, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        chCloseOpened.setSelected(PerspectivePreferences.getInstance().isCloseOpened());
        chAddOpened.setSelected(PerspectivePreferences.getInstance().isTrackOpened());
    }

    void store() {
       PerspectivePreferences.getInstance().setCloseOpened(chCloseOpened.isSelected());
       PerspectivePreferences.getInstance().setTrackOpened(chAddOpened.isSelected());
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chAddOpened;
    private javax.swing.JCheckBox chCloseOpened;
    private javax.swing.JLabel lblAddOpendDescription;
    private javax.swing.JLabel lblClaoseOpenedDescription;
    private javax.swing.JLabel lblHeader;
    // End of variables declaration//GEN-END:variables

}

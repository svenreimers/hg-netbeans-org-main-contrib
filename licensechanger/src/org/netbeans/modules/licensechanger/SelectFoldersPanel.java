/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */
package org.netbeans.modules.licensechanger;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.openide.explorer.ExplorerManager;
import org.openide.filesystems.FileObject;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;

/**
 *
 * @author Tim Boudreau
 */
public class SelectFoldersPanel extends javax.swing.JPanel implements ExplorerManager.Provider, NodeCheckObserver {
    private final ExplorerManager mgr = new ExplorerManager();
    public static final String KEY_FOLDERS = "folders";
    private final Map<Object, Object> settings;

    public SelectFoldersPanel(FileObject[] roots, Map<Object,Object> settings) {
        this.settings = settings;
        initComponents();
        AbstractNode root = new AbstractNode (Children.create(new FolderChildren(roots) {
            @Override
            public void onAllNodesCreated() {
                enableUI();
                updateFolders();
            }
        }, true));
        mgr.setRootContext(root);
        view().setCheckboxesVisible(false);
        view().setCheckboxesEnabled(false);
        view().setListEnabled(false);
        view().setNodeCheckObserver(this);
    }

    private void updateFolders() {
        Set <FileObject> folders = new HashSet<FileObject>();
        for (Node n : mgr.getRootContext().getChildren().getNodes(true)) {
            if (Boolean.TRUE.equals(n.getValue(CheckboxListView.SELECTED))) {
                FileObject f = n.getLookup().lookup(FileObject.class);
                if (f != null) {
                    folders.add(f);
                }
            }
        }
        settings.put (KEY_FOLDERS, folders);
    }

    private void enableUI() {
        view().setCheckboxesVisible(true);
        view().setCheckboxesEnabled(true);
        jLabel1.setEnabled(true);
        view().setListEnabled(true);
    }

    private CheckboxListView view() {
        return (CheckboxListView) jScrollPane1;
    }

    public Set<? extends FileObject> getFolders() {
        Set<FileObject> result = new HashSet<FileObject>();
        for (Node n : mgr.getRootContext().getChildren().getNodes(true)) {
            if (Boolean.TRUE.equals(n.getValue(CheckboxListView.SELECTED))) {
                FileObject f = n.getLookup().lookup(FileObject.class);
                if (f != null) {
                    result.add(f);
                }
            }
        }
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new CheckboxListView();
        jLabel1 = new javax.swing.JLabel();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("controlShadow")));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SelectFoldersPanel.class, "SelectFoldersPanel.jLabel1.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                    .add(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(9, 9, 9)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    public void onNodeChecked(Node node) {
        updateFolders();
    }

    public void onNodeUnchecked(Node node) {
        updateFolders();
    }
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */
package org.netbeans.modules.licensechanger;

import java.awt.Component;
import java.awt.EventQueue;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;

/**
 *
 * @author Tim Boudreau
 */
public class LicenseChooserPanel extends javax.swing.JPanel implements Runnable, DocumentListener {

    private volatile boolean licensesLoaded;
    private volatile boolean loadingLicenses;
    private boolean inLoadFromFile;
    public static final String KEY_LICENSE_TEXT = "licenseText";
    private Map<Object, Object> settings;
    /** Creates new form LicenseChooser */
    public LicenseChooserPanel(Map<Object,Object> settings) {
        this.settings = settings;
        initComponents();
        enabled(false);
        settings.put (KEY_LICENSE_TEXT, "No License");
        licenseText.getDocument().addDocumentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseLabel = new javax.swing.JLabel();
        selectLicense = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        licenseText = new javax.swing.JTextArea();
        browseButton = new javax.swing.JButton();

        chooseLabel.setLabelFor(selectLicense);
        chooseLabel.setText(org.openide.util.NbBundle.getMessage(LicenseChooserPanel.class, "LicenseChooserPanel.chooseLabel.text")); // NOI18N

        selectLicense.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "[loading licenses]" }));
        selectLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenseSelected(evt);
            }
        });

        licenseText.setColumns(20);
        licenseText.setRows(5);
        licenseText.setName("licenseText"); // NOI18N
        jScrollPane1.setViewportView(licenseText);

        browseButton.setText(org.openide.util.NbBundle.getMessage(LicenseChooserPanel.class, "LicenseChooserPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseForLicense(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(chooseLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(selectLicense, 0, 296, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, browseButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chooseLabel)
                    .add(selectLicense, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 188, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(browseButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void licenseSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licenseSelected
        if (loadingLicenses || inLoadFromFile || !selectLicense.isEnabled()) {
            return;
        }
        loadLicenseFromResource (selectLicense.getSelectedItem().toString());
    }//GEN-LAST:event_licenseSelected

    private void browseForLicense(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseForLicense
        File f;
        if ((f = new FileChooserBuilder(LicenseChooserPanel.class).setTitle(
                NbBundle.getMessage(LicenseChooserPanel.class, "BROWSE_LICENSE_TITLE")) //NOI18N
                .setFilesOnly(true).showOpenDialog()) != null) {
            loadLicenseFromFile(f);
        }
    }//GEN-LAST:event_browseForLicense

    @Override
    public void addNotify() {
        super.addNotify();
        if (!licensesLoaded && !loadingLicenses) {
            loadingLicenses = true;
            enabled(false);
            RequestProcessor.getDefault().post(this);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel chooseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea licenseText;
    private javax.swing.JComboBox selectLicense;
    // End of variables declaration//GEN-END:variables

    private void enabled(boolean val) {
        for (Component c : getComponents()) {
            c.setEnabled(val);
        }
    }

    private void initLicenses() throws IOException {
        assert !EventQueue.isDispatchThread();
        final DefaultComboBoxModel mdl = new DefaultComboBoxModel();
        InputStream in = new BufferedInputStream(LicenseChooserPanel.class.getResourceAsStream("licenses.txt"));
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            FileUtil.copy(in, out);
            String s = new String(out.toByteArray());
            StringTokenizer tok = new StringTokenizer(s);
            while (tok.hasMoreTokens()) {
                mdl.addElement(tok.nextToken());
            }
        } catch (IOException ioe) {
            Exceptions.printStackTrace(ioe);
        } finally {
            in.close();
            out.close();
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    mdl.setSelectedItem (NbBundle.getMessage(LicenseChooserPanel.class,
                            "MSG_SELECT_A_LICENSE")); //NOI18N
                    selectLicense.setModel(mdl);
                    enabled(true);
                    licensesLoaded = true;
                    loadingLicenses = false;
                }
            });
        }
    }

    public void run() {
        try {
            initLicenses();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void loadLicenseFromFile(File f) {
        inLoadFromFile = true;
        enabled(false);
        RequestProcessor.getDefault().post(new FileLoader(f));
    }

    private void loadLicenseFromResource(String name) {
        inLoadFromFile = true;
        enabled(false);
        RequestProcessor.getDefault().post(new ResourceLoader(name));
    }

    public String getLicenseText() {
        return licenseText.getText();
    }

    private void updateLicense() {
        String txt = licenseText.getText();
        if (!txt.endsWith("\n")) {
            txt += "\n";
        }
        settings.put(KEY_LICENSE_TEXT, txt);
    }

    public void insertUpdate(DocumentEvent e) {
        updateLicense();
    }

    public void removeUpdate(DocumentEvent e) {
        updateLicense();
    }

    public void changedUpdate(DocumentEvent e) {
        updateLicense();
    }

    private class FileLoader implements Runnable {

        private final File file;
        private String text;

        FileLoader(File f) {
            this.file = f;
        }

        public void run() {
            if (!EventQueue.isDispatchThread()) {
                try {
                    InputStream in = new BufferedInputStream(new FileInputStream(file));
                    ByteArrayOutputStream out = new ByteArrayOutputStream((int) file.length());
                    try {
                        FileUtil.copy(in, out);
                    } finally {
                        in.close();
                        out.close();
                    }
                    text = new String(out.toByteArray());
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                    text = NbBundle.getMessage (LicenseChooserPanel.class,
                            "ERR_COULD_NOT_LOAD", file.getPath()); //NOI18N
                } finally {
                    EventQueue.invokeLater(this);
                }
            } else {
                selectLicense.setSelectedItem(file.getName());
                inLoadFromFile = false;
                licenseText.setText(text);
                settings.put(KEY_LICENSE_TEXT, text);
                enabled(true);
            }
        }
    }

    private class ResourceLoader implements Runnable {

        private String name;
        private String text;

        ResourceLoader(String name) {
            this.name = name;
        }

        public void run() {
            if (!EventQueue.isDispatchThread()) {
                try {
                    InputStream in = new BufferedInputStream(
                            LicenseChooserPanel.class.getResourceAsStream("licenses/" + name));
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    try {
                        FileUtil.copy (in, out);
                    } finally {
                        in.close();
                        out.close();
                    }
                    text = new String (out.toByteArray());
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                    text = NbBundle.getMessage (LicenseChooserPanel.class,
                            "ERR_COULD_NOT_LOAD", name); //NOI18N
                } finally {
                    EventQueue.invokeLater(this);
                }
            } else {
                inLoadFromFile = false;
                licenseText.setText(text);
                settings.put(KEY_LICENSE_TEXT, text);
                enabled(true);
            }
        }
    }
}

/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress symbols and operators.
 */
module com.sun.fortress.parser.Symbol(DelimitedExpr, LocalDecl, NoNewlineExpr,
                                      Type, Identifier, Spacing, Keyword);

import DelimitedExpr;
import LocalDecl;
import NoNewlineExpr;
import Type;
import Identifier;
import Spacing;
import Keyword;

option setOfString(FORTRESS_KEYWORDS);

Op Encloser = a1:encloser
     { yyValue = NodeFactory.makeOpEnclosing(createSpan(yyStart,yyCount), a1); };

Op LeftEncloser = a1:leftEncloser
     { yyValue = NodeFactory.makeOpEnclosing(createSpan(yyStart,yyCount), a1); };

Op RightEncloser = a1:rightEncloser
     { yyValue = NodeFactory.makeOpEnclosing(createSpan(yyStart,yyCount), a1); };

Op ExponentOp = a1:exponentOp
     { yyValue = NodeFactory.makeOpPostfix(createSpan(yyStart,yyCount), a1); };

/* EncloserPair ::=
     (LeftEncloser | Encloser) (w DOT)? w (RightEncloser | Encloser)
 */
Enclosing EncloserPair =
     a1:(LeftEncloser / Encloser) (w DOT)? w a2:(RightEncloser / Encloser)
     { if (PrecedenceMap.ONLY.matchedBrackets(a1.getText(), a2.getText()))
           yyValue = new Enclosing(createSpan(yyStart,yyCount), a1, a2);
       else
           yyValue = error(a2, "Mismatched Enclosers.");
     };

transient void bar = &("|" wr GeneratorClauseList closingComprehension) "|";
private transient void closingComprehension =
     w closecurly
   / w closeangle
   / br ArrayComprehensionClause
   / w closesquare
   ;
private transient String sd = [*.]? ;
private String bars = "|" (sd "|")* ;
private String slashes = "/" (sd "/")*
                       / "\\" (sd "\\")* ;
private String lesses = "<" (sd "<")*;
private String greaters = ">" (sd ">")*;

private String encloser = !(bar) bars !([*.>/\\] / "->") ;

private String leftEncloser =
      leftEncloserMulti &{ PrecedenceMap.ONLY.isLeft(yyValue) }
   / c:_ &{c != '|' && PrecedenceMap.ONLY.isLeft(""+c)} { yyValue = ""+c; }
   ;

private String leftEncloserMulti =
     "(" ("/"+ / "\\"+)
   / "[/\\/\\/" / "[/\\/"
   / "[" (sd slashes)
   / "{" (sd slashes)
   / lesses sd (slashes / bars)
   / bars sd slashes
   / "{*" /  "[*"
   / "((>" / "(<"
   ;

private String rightEncloser =
      rightEncloserMulti &{ PrecedenceMap.ONLY.isRight(yyValue) }
   / c:_ &{c != '|' && PrecedenceMap.ONLY.isRight(""+c)} { yyValue = ""+c; }
   ;

private String rightEncloserMulti =
     "/"+ ")"
   / "\\"+ ")"
   / slashes sd (greaters / bars / [\]}])
   / bars sd greaters
   / "*]" / "*}"
   / "]" / "}"
   / ">)" / "<))"
   / "/\\/\\/]" / "/\\/]"
   ;

private String exponentOp = "^T" / a1:"^" a2:op { yyValue = a1+a2; };

/* Finally, a nonreserved word that is made up of a mixture of uppercase
 * letters and underscores (but no digits), does not begin or end with an
 * underscore, and contains at least two distinct letters is also an
 * operator.  For example: MAX MIN SQRT TIMES
 *
 * Note that FortressUtil.validOp just checks whether the string is
 * all-caps with underscores; it doesn't look it up anywhere, and
 * shouldn't since this set of operators is open-ended.
 */
private String OpName =
     opn:id &{FortressUtil.validOp(opn) };

Op Op =
     a1:(condOp / op !(equalsOp) / compOp)
     { yyValue = NodeFactory.makeOpUnknown(createSpan(yyStart, yyCount), a1); };

private String compOp =
     "==="
   / "=/="
   / "<="
   / ">=" ;

private String condOp =
     a1:":" a2:op a3:colon { yyValue = a1+a2+a3; }
   / a1:op a2:colon        { yyValue = a1+a2; };

private String multiOp =
     "-/->"
   / "<-/-"
   / "-->"
   / "==>"
   / ">>>"
   / mapstoOp
   / "<<<"
   / "<->"
   / leftarrow
   / "<=>"
   / "->"
   / doublerightarrow
   / ">>"
   / "<<"
   / "**"
   / "!!"
   / !(rightEncloserMulti) "///"
   / !(rightEncloserMulti) "//"
   ;

private String singleOp =
     !(encloser / leftEncloser / rightEncloser / multiOp / compOp / match)
     a1:_ &{ PrecedenceMap.ONLY.isOperator("" + a1) }
     { yyValue = "" + a1; } ;

String op =
     OpName
   / multiOp
   / singleOp ;

Op CompoundOp =
     a1:op equalsOp
     { yyValue = NodeFactory.makeOpInfix(createSpan(yyStart, yyCount), a1); };

/* The operator "=>" should not be in the left-hand sides of
   case/typecase expressions. */
String doublerightarrow = "=>" &(w BlockElems w match);

/* The operator "BY" should not be used with ExtentRange. */
String crossOp = "BY":OpName &(w ExtentRange);

String leftarrow = "<-";

String caret = "^";
String colonequals = ":=";
String equals = "=" (!op);
String equalsOp = "=":singleOp;
String semicolon = ";";
String one = "1";

String colon = ":" (!op);
String colonOp = ":":singleOp;
String closecurly = "}";
String opencurly = "{":leftEncloser;
String closesquare = "]";
String opensquare = "[":leftEncloser;
String ellipses = "...";

String lessthanequal    = "<=":op / "LE":op;
String lessthan         = "<":op  / "LT":op;
String greaterthanequal = ">=":op / "GE":op;
String greaterthan      = ">":op  / "GT":op;

String NOT     = "NOT":op;
String OR      = "OR":op;
String AND     = "AND":op;
String IMPLIES = "->":op / "IMPLIES":op;

String DOT = "DOT":OpName;
String slash = "/":singleOp;
String rightarrow = "->";

transient void closeangle = "|>";
transient void closedoublesquare = "\\]";
transient void closeparen = ")";
transient void cross = "BY";
transient void mapsto = "|->";
transient void match = "=>";
transient void minus = "-":singleOp;
transient void openangle = "<|":leftEncloser;
transient void opendoublesquare = "[\\";
transient void openparen = !(leftEncloser) "(";
transient void plus = "+":singleOp;
transient void pound = "#":singleOp;
transient void star = "*":singleOp;
transient void underscore = "_";

transient void comma = ",";
transient void dot   = ".";

/* AssignOp ::= := | Op= */
Option<Op> AssignOp =
     colonequals   { yyValue = Option.none(); }
   / a1:CompoundOp { yyValue = Option.some(a1); };

Op SUM = "SUM"
     { yyValue = NodeFactory.makeOpBig(createSpan(yyStart,yyCount), "BIG +"); };
Op PROD = "PROD"
     { yyValue = NodeFactory.makeOpBig(createSpan(yyStart,yyCount),
                                       "BIG juxtaposition");
     };

/* Accumulator ::= SUM | PROD | BIG w Op */
Op Accumulator =
     SUM
   / PROD
   / void:BIG w a1:Op
     { yyValue = NodeFactory.makeOpBig(createSpan(yyStart,yyCount),
                                       "BIG " + a1.getText());
     };

/* ArrayComprehensionClause ::=
     ArrayComprehensionLeft wr | wr GeneratorClauseList
 */
ArrayComprehensionClause ArrayComprehensionClause =
     a1:ArrayComprehensionLeft wr bar wr a2:GeneratorClauseList
     { yyValue = new ArrayComprehensionClause(createSpan(yyStart,yyCount),
                                              a1.getA(), a1.getB(), a2);
     };

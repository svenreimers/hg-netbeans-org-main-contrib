/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress variable declarations.
 */
module com.sun.fortress.parser.Variable(NoNewlineHeader, MayNewlineHeader, Type, NoNewlineExpr, Identifier,
                                        Keyword, Symbol, Spacing);

import NoNewlineHeader;
import MayNewlineHeader;
import Type;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* VarDecl ::=
     VarMods? VarWTypes w InitVal
   | VarMods? BindIdOrBindIdTuple w = w NoNewlineExpr
   | VarMods? BindIdOrBindIdTuple w : w Type w ... w InitVal
   | VarMods? BindIdOrBindIdTuple w : w TupleType w InitVal
 */
VarDecl VarDecl =
     a1:VarMods? a2:VarWTypes w a3:InitVal
     { if (a1 != null) {
           if (a3.getB()) a2 = FortressUtil.setModsAndMutable(a2, a1);
           else a2 = FortressUtil.setMods(a2, a1);
       } else {
           if (a3.getB()) a2 = FortressUtil.setMutable(a2);
       }
       yyValue = new VarDecl(createSpan(yyStart,yyCount), a2, a3.getA());
     }
   / a1:VarMods? a2:BindIdOrBindIdTuple w equals w a3:NoNewlineExpr
     { List<LValueBind> lvs;
       if (a1 != null) lvs = FortressUtil.ids2Lvs(a2, a1);
       else lvs = FortressUtil.ids2Lvs(a2);
       yyValue = new VarDecl(createSpan(yyStart,yyCount), lvs, a3);
     }
   / a1:VarMods? a2:BindIdOrBindIdTuple w colon w a3:Type w ellipses w a4:InitVal
     { List<LValueBind> lvs;
       if (a1 != null) {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, a1, a3, true);
           else           lvs = FortressUtil.ids2Lvs(a2, a1, a3, false);
       } else {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, a3, true);
           else           lvs = FortressUtil.ids2Lvs(a2, a3, false);
       }
       yyValue = new VarDecl(createSpan(yyStart,yyCount), lvs, a4.getA());
     }
   / a1:VarMods? a2:BindIdOrBindIdTuple w colon w a3:TupleType w a4:InitVal
     { Span span = createSpan(yyStart,yyCount);
       List<Type> tys = a3.getElements();
       if (a2.size() != tys.size())
           error(new Id(span,"_"), "Mismatched numbers of variables and types.");
       List<LValueBind> lvs;
       if (a1 != null) {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, a1, tys, true);
           else           lvs = FortressUtil.ids2Lvs(a2, a1, tys, false);
       } else {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, tys, true);
           else           lvs = FortressUtil.ids2Lvs(a2, tys, false);
       }
       yyValue = new VarDecl(span, lvs, a4.getA());
     };

/* Each modifier cannot appear more than once. */
/* VarMods ::= (VarMod w)+ */
List<Modifier> VarMods = a1s:(VarMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* VarMod ::= AbsVarMod | private */
private Modifier VarMod =
     AbsVarMod
   / a1:private { yyValue = new ModifierPrivate(createSpan(yyStart,yyCount)); };

/* VarWTypes ::=
     VarWType
   | ( w VarWType (w , w VarWType)+ w )
 */
List<LValueBind> VarWTypes =
     a1:VarWType
     { yyValue = FortressUtil.mkList(a1); }
   / openparen w a1:VarWType a2s:(w comma w VarWType)+ w closeparen
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* VarWType ::= BindId w IsType */
LValueBind VarWType = a1:BindId w a2:IsType
     { yyValue = FortressUtil.mkLValueBind(createSpan(yyStart,yyCount),a1,a2); };

/* InitVal ::= (=|:=) w NoNewlineExpr */
com.sun.fortress.useful.Pair<Expr,Boolean> InitVal =
     a1:(equals / colonequals) w a2:NoNewlineExpr
     { yyValue = new com.sun.fortress.useful.Pair<Expr,Boolean>(a2,
                                                                a1.equals(":="));
     };

/* AbsVarDecl ::=
     AbsVarMods? NoNewlineVarWTypes
   | AbsVarMods? BindIdOrBindIdTuple w : w Type w ...
   | AbsVarMods? BindIdOrBindIdTuple w : w TupleType
 */
AbsVarDecl AbsVarDecl =
     a1:AbsVarMods? a2:NoNewlineVarWTypes
     { if (a1 != null) a2 = FortressUtil.setMods(a2, a1);
       yyValue = new AbsVarDecl(createSpan(yyStart,yyCount), a2);
     }
   / a1:AbsVarMods? a2:BindIdOrBindIdTuple w colon w a3:Type w ellipses
     { List<LValueBind> lvs;
       if (a1 != null) lvs = FortressUtil.ids2Lvs(a2, a1, a3, false);
       else            lvs = FortressUtil.ids2Lvs(a2, a3, false);
       yyValue = new AbsVarDecl(createSpan(yyStart,yyCount), lvs);
     }
   / a1:AbsVarMods? a2:BindIdOrBindIdTuple w colon w a3:TupleType
     { Span span = createSpan(yyStart,yyCount);
       List<Type> tys = a3.getElements();
       if (a2.size() != tys.size())
           error(new Id(span,"_"), "Mismatched numbers of variables and types.");
       List<LValueBind> lvs;
       if (a1 != null) lvs = FortressUtil.ids2Lvs(a2, a1, tys, false);
       else            lvs = FortressUtil.ids2Lvs(a2, tys, false);
       yyValue = new AbsVarDecl(span, lvs);
     };

/* Each modifier cannot appear more than once. */
/* AbsVarMods ::= (AbsVarMod w)+ */
List<Modifier> AbsVarMods = a1s:(AbsVarMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* AbsVarMod ::= var | test */
private Modifier AbsVarMod =
     a1:var  { yyValue = new ModifierVar(createSpan(yyStart,yyCount)); }
   / a1:test { yyValue = new ModifierTest(createSpan(yyStart,yyCount)); };

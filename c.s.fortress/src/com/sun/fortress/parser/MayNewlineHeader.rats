/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress headers.
 */
module com.sun.fortress.parser.MayNewlineHeader(Other, Type, Header, Expr,
                                                DelimitedExpr, Literal,
                                                Identifier, Keyword, Symbol,
                                                Spacing);

import Other;
import Type;
import Header;
import Expr;
import DelimitedExpr;
import Literal;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* IsType ::= : w Type */
Type IsType = void:colon w Type ;

/* WhereConstraintList ::= WhereConstraint (w , w WhereConstraint)* */
List<WhereConstraint> WhereConstraintList =
     a1:WhereConstraint a2s:(w comma w WhereConstraint)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* WhereConstraint ::=
     Id w Extends
   | TypeAlias
   | Type w coerces w Type
   | Type w widens w Type
   | UnitConstraint
   | QualifiedName w = w QualifiedName
   | IntConstraint
   | BoolConstraint
 */
WhereConstraint WhereConstraint =
     a1:Id w a2:Extends
     { yyValue = new WhereExtends(createSpan(yyStart,yyCount), a1, a2); }
   / TypeAlias
   / a1:Type w coerces w a2:Type
     { yyValue = new WhereCoerces(createSpan(yyStart,yyCount), a1, a2); }
   / a1:Type w widens w a2:Type
     { yyValue = new WhereWidens(createSpan(yyStart,yyCount), a1, a2); }
   / UnitConstraint
   / a1:QualifiedName w equals w a2:QualifiedName
     { yyValue = new WhereEquals(createSpan(yyStart,yyCount), a1, a2); }
   / IntConstraint
   / a1:BoolConstraint
     { yyValue = new BoolConstraintExpr(createSpan(yyStart,yyCount), a1); };

/* UnitConstraint ::=
     dimensionless w = w Id
   | Id w = w dimensionless
 */
UnitConstraint UnitConstraint =
     "dimensionless" w equals w a1:Id
     { yyValue = new UnitConstraint(createSpan(yyStart,yyCount), a1); }
   / a1:Id w equals w "dimensionless"
     { yyValue = new UnitConstraint(createSpan(yyStart,yyCount), a1); };

/* IntConstraint ::=
     IntExpr w <= w IntExpr
   | IntExpr w <  w IntExpr
   | IntExpr w >= w IntExpr
   | IntExpr w >  w IntExpr
   | IntExpr w =  w IntExpr
 */
private IntConstraint IntConstraint =
     a1:IntExpr w lessthanequal w a2:IntExpr
     { yyValue = new LEConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:IntExpr w lessthan w a2:IntExpr
     { yyValue = new LTConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:IntExpr w greaterthanequal w a2:IntExpr
     { yyValue = new GEConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:IntExpr w greaterthan w a2:IntExpr
     { yyValue = new GTConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:IntExpr w equals w a2:IntExpr
     { yyValue = new IEConstraint(createSpan(yyStart,yyCount), a1, a2); };

/* IntVal ::=
     IntLiteralExpr
   | QualifiedName
 */
IntVal IntVal =
     a1:IntLiteralExpr
     { yyValue = new NumberConstraint(createSpan(yyStart,yyCount), a1); }
   / a1:QualifiedName
     { yyValue = new IntRef(createSpan(yyStart,yyCount), a1); };

/* IntExpr ::=
     IntVal
   | IntExpr w + w IntExpr
   | IntExpr w - w IntExpr
   | IntExpr sr IntExpr
   | IntExpr w DOT w IntExpr
   | IntExpr ^ IntVal
   | ( w IntExpr w )
 */
IntExpr IntExpr =
     seed:IntExprFront list:IntExprTail*
     { yyValue = (IntExpr)apply(list, seed); };

private IntExpr IntExprFront =
     IntVal
   / openparen w a1:IntExpr w closeparen
     { yyValue = NodeFactory.makeInParentheses(a1); };

private constant transient Action<IntExpr> IntExprTail =
     SumIntExpr
   / MinusIntExpr
   / ProductIntExpr
   / ExponentIntExpr
   ;

private constant inline Action<IntExpr> SumIntExpr =
     w plus w a1:IntExpr
     { yyValue = new Action<IntExpr>() {
           public IntExpr run(IntExpr base) {
               return new SumConstraint(createSpan(yyStart,yyCount),
                                        (IntExpr)base, a1);
           }};
     };

private constant inline Action<IntExpr> MinusIntExpr =
     w minus w a1:IntExpr
     { yyValue = new Action<IntExpr>() {
           public IntExpr run(IntExpr base) {
               return new MinusConstraint(createSpan(yyStart,yyCount),
                                          (IntExpr)base, a1);
           }};
     };

private constant inline Action<IntExpr> ProductIntExpr =
     (w DOT w / sr) a1:IntExpr
     { yyValue = new Action<IntExpr>() {
           public IntExpr run(IntExpr base) {
               return new ProductConstraint(createSpan(yyStart,yyCount),
                                            (IntExpr)base, a1);
           }};
     };

private constant inline Action<IntExpr> ExponentIntExpr =
     caret a1:IntVal
     { yyValue = new Action<IntExpr>() {
           public IntExpr run(IntExpr base) {
               if (NodeUtil.isExponentiation((IntExpr)base))
                   return error((IntExpr)base, "It is a static error if an " +
                                "exponentiation is immediately followed by " +
                                "an exponentiation.");
               return new ExponentConstraint(createSpan(yyStart,yyCount),
                                             (IntExpr)base, a1);
           }};
     };

/* BoolConstraint ::=
     NOT w BoolExpr
   | BoolExpr w OR w BoolExpr
   | BoolExpr w AND w BoolExpr
   | BoolExpr w IMPLIES w BoolExpr
   | BoolExpr w = w BoolExpr
 */
private BoolConstraint BoolConstraint =
     seed:BoolConstraintFront list:BoolConstraintTail*
     { yyValue = (BoolConstraint)apply(list, seed); };

private BoolConstraint BoolConstraintFront =
     NOT w a1:BoolExpr
     { yyValue = new NotConstraint(createSpan(yyStart,yyCount), a1); }
   / a1:BoolConstraintHead w OR w a2:BoolExpr
     { yyValue = new OrConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:BoolConstraintHead w AND w a2:BoolExpr
     { yyValue = new AndConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:BoolConstraintHead w IMPLIES w a2:BoolExpr
     { yyValue = new ImpliesConstraint(createSpan(yyStart,yyCount), a1, a2); }
   / a1:BoolConstraintHead w equals w a2:BoolExpr
     { yyValue = new BEConstraint(createSpan(yyStart,yyCount), a1, a2); };

private BoolExpr BoolConstraintHead =
     BoolVal
   / openparen w a1:BoolExpr w closeparen
     { yyValue = NodeFactory.makeInParentheses(a1); };

private constant transient Action<BoolConstraint> BoolConstraintTail =
     OrBoolConstraint
   / AndBoolConstraint
   / ImpliesBoolConstraint
   / EqualsBoolConstraint
   ;

private constant inline Action<BoolConstraint> OrBoolConstraint =
     w OR w a1:BoolExpr
     { yyValue = new Action<BoolConstraint>() {
           public BoolConstraint run(BoolConstraint base) {
               return new OrConstraint(createSpan(yyStart,yyCount),
                                       (BoolConstraint)base, a1);
           }};
     };

private constant inline Action<BoolConstraint> AndBoolConstraint =
     w AND w a1:BoolExpr
     { yyValue = new Action<BoolConstraint>() {
           public BoolConstraint run(BoolConstraint base) {
               return new AndConstraint(createSpan(yyStart,yyCount),
                                        (BoolConstraint)base, a1);
           }};
     };

private constant inline Action<BoolConstraint> ImpliesBoolConstraint =
     w IMPLIES w a1:BoolExpr
     { yyValue = new Action<BoolConstraint>() {
           public BoolConstraint run(BoolConstraint base) {
               return new ImpliesConstraint(createSpan(yyStart,yyCount),
                                            (BoolConstraint)base, a1);
           }};
     };

private constant inline Action<BoolConstraint> EqualsBoolConstraint =
     w equals w a1:BoolExpr
     { yyValue = new Action<BoolConstraint>() {
           public BoolConstraint run(BoolConstraint base) {
               return new BEConstraint(createSpan(yyStart,yyCount),
                                       (BoolConstraint)base, a1);
           }};
     };

/* BoolVal ::=
     true
   | false
   | QualifiedName
 */
private BoolVal BoolVal =
     a1:"true"
     { yyValue = new BoolConstant(createSpan(yyStart,yyCount), true); }
   / a1:"false"
     { yyValue = new BoolConstant(createSpan(yyStart,yyCount), false); }
   / a1:QualifiedName
     { yyValue = new BoolRef(createSpan(yyStart,yyCount), a1); };

/* BoolExpr ::=
     BoolVal
   | BoolConstraint
   | ( w BoolExpr w )
 */
BoolExpr BoolExpr =
     seed:BoolExprFront list:BoolExprTail*
     { yyValue = (BoolExpr)apply(list, seed); };

private BoolExpr BoolExprFront =
     BoolVal
   / openparen w a1:BoolExpr w closeparen
     { yyValue = NodeFactory.makeInParentheses(a1); }
   / NOT w a1:BoolExpr
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new NotConstraint(span, a1);
     };

private constant transient Action<BoolExpr> BoolExprTail =
     OrBoolExpr
   / AndBoolExpr
   / ImpliesBoolExpr
   / EqualsBoolExpr
   ;

private constant inline Action<BoolExpr> OrBoolExpr =
     w OR w a1:BoolExpr
     { yyValue = new Action<BoolExpr>() {
           public BoolExpr run(BoolExpr base) {
               Span span = createSpan(yyStart,yyCount);
               return new OrConstraint(span, (BoolExpr)base, a1);
           }};
     };

private constant inline Action<BoolExpr> AndBoolExpr =
     w AND w a1:BoolExpr
     { yyValue = new Action<BoolExpr>() {
           public BoolExpr run(BoolExpr base) {
               Span span = createSpan(yyStart,yyCount);
               return new AndConstraint(span, (BoolExpr)base, a1);
           }};
     };

private constant inline Action<BoolExpr> ImpliesBoolExpr =
     w IMPLIES w a1:BoolExpr
     { yyValue = new Action<BoolExpr>() {
           public BoolExpr run(BoolExpr base) {
               Span span = createSpan(yyStart,yyCount);
               return new ImpliesConstraint(span, (BoolExpr)base, a1);
           }};
     };

private constant inline Action<BoolExpr> EqualsBoolExpr =
     w equals w a1:BoolExpr
     { yyValue = new Action<BoolExpr>() {
           public BoolExpr run(BoolExpr base) {
               Span span = createSpan(yyStart,yyCount);
               return new BEConstraint(span, (BoolExpr)base, a1);
           }};
     };

/* Contract ::= (w Requires)? (w Ensures)? (w Invariant)? */
Contract Contract =
     a1:(w Requires)? a2:(w Ensures)? a3:(w Invariant)?
     { Option<List<Expr>> requires = Option.wrap(a1);
       Option<List<EnsuresClause>> ensures = Option.wrap(a2);
       Option<List<Expr>> invariant = Option.wrap(a3);
       if (a1 == null && a2 == null && a3 == null) yyValue = null;
       else yyValue = new Contract(createSpan(yyStart,yyCount), requires,
                                   ensures, invariant);
     };

/* Requires ::= requires w { (w ExprList)? w } */
private List<Expr> Requires = requires w opencurly a1:(w ExprList)? w closecurly
     { if (a1 == null) yyValue = FortressUtil.emptyExprs();
       else            yyValue = a1;
     };

/* Ensures  ::= ensures w { (w EnsuresClauseList)? w } */
List<EnsuresClause> Ensures =
     ensures w opencurly a1:(w EnsuresClauseList)? w closecurly
     { if (a1 == null) yyValue = FortressUtil.emptyEnsuresClauses();
       else            yyValue = a1;
     };

/* EnsuresClauseList ::= EnsuresClause (w , w EnsuresClause)* */
private List<EnsuresClause> EnsuresClauseList =
     a1:EnsuresClause a2s:(w comma w EnsuresClause)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* EnsuresClause ::= Expr (w provided w Expr)? */
private EnsuresClause EnsuresClause = a1:Expr a2:(w provided w Expr)?
     { Option<Expr> ensures = Option.wrap(a2);
       yyValue = new EnsuresClause(createSpan(yyStart,yyCount), a1, ensures);
     };

/* Invariant::= invariant w { (w ExprList)? w } */
List<Expr> Invariant =
     invariant w opencurly a1:(w ExprList)? w closecurly
     { if (a1 == null) yyValue = FortressUtil.emptyExprs();
       else            yyValue = a1;
     };

/* StaticArgs ::= [\ w StaticArgList w \] */
List<StaticArg> StaticArgs =
    opendoublesquare w StaticArgList w closedoublesquare ;

/* StaticArgList ::= StaticArg (w , w StaticArg)*  */
List<StaticArg> StaticArgList = a1:StaticArg a2s:(w comma w StaticArg)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* StaticArg ::=
     Op
   | ( StaticArg )
   | IntExpr
   | BoolExpr
   | Type
   | DimExpr
   | Expr
 */
StaticArg StaticArg =
     a1:Op
     { yyValue = new OprArg(createSpan(yyStart,yyCount), a1); }
   / "Unity"
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new DimArg(span, new BaseDim(span));
     }
   / a1:"dimensionless"
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new UnitArg(span, ExprFactory.makeVarRef(new Id(span, a1)));
     }
   / one w slash w a1:Type
     { Span span = createSpan(yyStart,1);
       DimExpr base = new BaseDim(createSpan(yyStart,1));
       try {
         yyValue = new DimArg(span, new QuotientDim(span, base,
                                                    TypeResolver.typeToDim(a1)));
       } catch (TypeConvertFailure e) {
         yyValue = error(a1, "A dimension is expected but a type is found.");
       }
     }
   / a1:DimPrefixOp sr a2:Type
     { Span span = createSpan(yyStart,yyCount);
       try {
         yyValue = new DimArg(span,
                              new OpDim(span,TypeResolver.typeToDim(a2),a1));
       } catch (TypeConvertFailure e) {
         yyValue = error(a2, "A dimension is expected but a type is found.");
       }
     }
   / openparen w a1:StaticArg w closeparen
     { yyValue = NodeFactory.makeInParentheses(a1); }
   / !(QualifiedName (w closedoublesquare / w closesquare / w comma /
                      w opendoublesquare / w opensquare / w rightarrow /
                      w "OR":op / w "AND":op / w "IMPLIES":op / w equals))
     a1:IntExpr
     { yyValue = new IntArg(createSpan(yyStart,yyCount), a1); }
   / !(QualifiedName (w closedoublesquare / w closesquare / w comma /
                      w opendoublesquare / w opensquare / w rightarrow))
     a1:BoolExpr
     { yyValue = new BoolArg(createSpan(yyStart,yyCount), a1); }
   / !(QualifiedName (w DOT / w slash / w per / w DimPostfixOp))
     a1:Type
     { yyValue = new TypeArg(createSpan(yyStart,yyCount), a1); }
   / a1:Expr
     { yyValue = new UnitArg(createSpan(yyStart,yyCount), a1); }
   ;

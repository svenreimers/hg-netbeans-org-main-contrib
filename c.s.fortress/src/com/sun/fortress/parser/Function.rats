/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress function declarations.
 */
module com.sun.fortress.parser.Function(Param, Header, NoNewlineType,
                                        NoNewlineExpr, Identifier, Keyword,
                                        Symbol, Spacing);

import Param;
import Header;
import NoNewlineType;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* FnDecl ::=
     FnMods? FnHeaderFront FnHeaderClause (w = w NoNewlineExpr)?
   | FnSig
 */
Decl FnDecl =
     a1:FnMods? a2:FnHeaderFront a3:FnHeaderClause
     a4:(w void:equals w NoNewlineExpr)?
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       Span span = createSpan(yyStart,yyCount);
       if (a4 == null) yyValue = FortressUtil.mkAbsFnDecl(span, a1, a2, a3);
       else            yyValue = FortressUtil.mkFnDecl(span, a1, a2, a3, a4);
     }
   / FnSig ;

/* FnSig ::= SimpleName w : w NoNewlineType */
AbsFnDecl FnSig =
     a1:SimpleName w colon w a2:NoNewlineType
     { final List<Modifier> mods = FortressUtil.emptyModifiers();
       final List<Param>  params = FortressUtil.emptyParams();

       if (!(a2 instanceof ArrowType)) {
           bug(errorMsg("Abstract function declaration should have an arrow " +
                        "type.", a2));
       }

       ((ArrowType)a2).getDomain().accept(new NodeAbstractVisitor_void() {
           public void forType(Type that) {
               Id name = new Id(that.getSpan(), "_");
               params.add(NodeFactory.makeParam(that.getSpan(),mods,name,that));
           }
           public void forVarargsType(VarargsType that) {
               Id name = new Id(that.getSpan(), "_");
               params.add(NodeFactory.makeVarargsParam(that.getSpan(), mods,
                                                       name, that));
           }
           public void forArgType(ArgType that) {
               for (AbstractNode i : that.getElements()) { i.accept(this); }
               if (that.getVarargs().isSome())
                   Option.unwrap(that.getVarargs()).accept(this);
               assert(that.getKeywords().isEmpty()): "Keyword parameters present"
                                                     + " in a FnSig: " + that;
           }
           public void forTupleType(TupleType that) {
               for (AbstractNode i : that.getElements()) { i.accept(this); }
           }
           public void defaultCase(Node that) {
               bug(errorMsg("Node expected to be a Type; was: ", that));
           }
       });
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount), mods, a1,
                                          params, ((ArrowType)a2).getRange());
     };

/* AbsFnDecl ::=
     AbsFnMods? FnHeaderFront FnHeaderClause
   | FnSig
 */
AbsFnDecl AbsFnDecl =
     a1:AbsFnMods? a2:FnHeaderFront a3:FnHeaderClause
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount),a1,a2,a3);
     }
   / FnSig ;

/* FnHeaderFront ::=
     NamedFnHeaderFront
   | OpHeaderFront
 */
FnHeaderFront FnHeaderFront =
     NamedFnHeaderFront
   / OpHeaderFront ;

/* NamedFnHeaderFront ::= Id (w StaticParams)? w ValParam */
FnHeaderFront NamedFnHeaderFront =
     a1:Id a2:(w StaticParams)? w a3:ValParam
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new FnHeaderFront(a1, a2, a3);
     };

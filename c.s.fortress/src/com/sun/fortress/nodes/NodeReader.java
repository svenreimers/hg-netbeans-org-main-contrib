package com.sun.fortress.nodes;

import java.math.BigInteger;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import com.sun.fortress.nodes_util.*;
import com.sun.fortress.parser_util.*;
import com.sun.fortress.parser_util.precedence_opexpr.*;
import com.sun.fortress.useful.*;
import edu.rice.cs.plt.tuple.Option;

/** A utility class for deserializing a node description generated by 
  * Node.serialize(java.io.Writer).
  */
public final class NodeReader {

    public static Node read(java.lang.String s) throws java.io.IOException {
        return read(new java.io.StringReader(s));
    }

    public static Node read(java.io.Reader r) throws java.io.IOException {
        return new NodeReader(new java.io.BufferedReader(r)).readNode();
    }

    private java.io.BufferedReader in;

    private NodeReader(java.io.BufferedReader r) { in = r; }

    private Node readNode() throws java.io.IOException {
        java.lang.String name = readWord();
        if (name.equals("null")) return null;
        if (name.equals("Component:")) return readComponentBody();
        if (name.equals("Api:")) return readApiBody();
        if (name.equals("ImportStar:")) return readImportStarBody();
        if (name.equals("ImportNames:")) return readImportNamesBody();
        if (name.equals("ImportApi:")) return readImportApiBody();
        if (name.equals("AliasedSimpleName:")) return readAliasedSimpleNameBody();
        if (name.equals("AliasedAPIName:")) return readAliasedAPINameBody();
        if (name.equals("Export:")) return readExportBody();
        if (name.equals("AbsTraitDecl:")) return readAbsTraitDeclBody();
        if (name.equals("TraitDecl:")) return readTraitDeclBody();
        if (name.equals("AbsObjectDecl:")) return readAbsObjectDeclBody();
        if (name.equals("ObjectDecl:")) return readObjectDeclBody();
        if (name.equals("AbsVarDecl:")) return readAbsVarDeclBody();
        if (name.equals("VarDecl:")) return readVarDeclBody();
        if (name.equals("LValueBind:")) return readLValueBindBody();
        if (name.equals("UnpastingBind:")) return readUnpastingBindBody();
        if (name.equals("UnpastingSplit:")) return readUnpastingSplitBody();
        if (name.equals("AbsFnDecl:")) return readAbsFnDeclBody();
        if (name.equals("FnDef:")) return readFnDefBody();
        if (name.equals("NormalParam:")) return readNormalParamBody();
        if (name.equals("VarargsParam:")) return readVarargsParamBody();
        if (name.equals("DimDecl:")) return readDimDeclBody();
        if (name.equals("UnitDecl:")) return readUnitDeclBody();
        if (name.equals("TestDecl:")) return readTestDeclBody();
        if (name.equals("PropertyDecl:")) return readPropertyDeclBody();
        if (name.equals("AbsExternalSyntax:")) return readAbsExternalSyntaxBody();
        if (name.equals("ExternalSyntax:")) return readExternalSyntaxBody();
        if (name.equals("GrammarDef:")) return readGrammarDefBody();
        if (name.equals("NonterminalDef:")) return readNonterminalDefBody();
        if (name.equals("NonterminalExtensionDef:")) return readNonterminalExtensionDefBody();
        if (name.equals("_TerminalDef:")) return read_TerminalDefBody();
        if (name.equals("SyntaxDef:")) return readSyntaxDefBody();
        if (name.equals("PrefixedSymbol:")) return readPrefixedSymbolBody();
        if (name.equals("OptionalSymbol:")) return readOptionalSymbolBody();
        if (name.equals("RepeatSymbol:")) return readRepeatSymbolBody();
        if (name.equals("RepeatOneOrMoreSymbol:")) return readRepeatOneOrMoreSymbolBody();
        if (name.equals("NoWhitespaceSymbol:")) return readNoWhitespaceSymbolBody();
        if (name.equals("WhitespaceSymbol:")) return readWhitespaceSymbolBody();
        if (name.equals("TabSymbol:")) return readTabSymbolBody();
        if (name.equals("FormfeedSymbol:")) return readFormfeedSymbolBody();
        if (name.equals("CarriageReturnSymbol:")) return readCarriageReturnSymbolBody();
        if (name.equals("BackspaceSymbol:")) return readBackspaceSymbolBody();
        if (name.equals("NewlineSymbol:")) return readNewlineSymbolBody();
        if (name.equals("BreaklineSymbol:")) return readBreaklineSymbolBody();
        if (name.equals("ItemSymbol:")) return readItemSymbolBody();
        if (name.equals("NonterminalSymbol:")) return readNonterminalSymbolBody();
        if (name.equals("KeywordSymbol:")) return readKeywordSymbolBody();
        if (name.equals("TokenSymbol:")) return readTokenSymbolBody();
        if (name.equals("NotPredicateSymbol:")) return readNotPredicateSymbolBody();
        if (name.equals("AndPredicateSymbol:")) return readAndPredicateSymbolBody();
        if (name.equals("CharacterClassSymbol:")) return readCharacterClassSymbolBody();
        if (name.equals("CharSymbol:")) return readCharSymbolBody();
        if (name.equals("CharacterInterval:")) return readCharacterIntervalBody();
        if (name.equals("AsExpr:")) return readAsExprBody();
        if (name.equals("AsIfExpr:")) return readAsIfExprBody();
        if (name.equals("Assignment:")) return readAssignmentBody();
        if (name.equals("Block:")) return readBlockBody();
        if (name.equals("CaseExpr:")) return readCaseExprBody();
        if (name.equals("Do:")) return readDoBody();
        if (name.equals("For:")) return readForBody();
        if (name.equals("If:")) return readIfBody();
        if (name.equals("Label:")) return readLabelBody();
        if (name.equals("ObjectExpr:")) return readObjectExprBody();
        if (name.equals("_RewriteObjectExpr:")) return read_RewriteObjectExprBody();
        if (name.equals("Try:")) return readTryBody();
        if (name.equals("TupleExpr:")) return readTupleExprBody();
        if (name.equals("ArgExpr:")) return readArgExprBody();
        if (name.equals("Typecase:")) return readTypecaseBody();
        if (name.equals("While:")) return readWhileBody();
        if (name.equals("Accumulator:")) return readAccumulatorBody();
        if (name.equals("ArrayComprehension:")) return readArrayComprehensionBody();
        if (name.equals("AtomicExpr:")) return readAtomicExprBody();
        if (name.equals("Exit:")) return readExitBody();
        if (name.equals("Spawn:")) return readSpawnBody();
        if (name.equals("Throw:")) return readThrowBody();
        if (name.equals("TryAtomicExpr:")) return readTryAtomicExprBody();
        if (name.equals("FnExpr:")) return readFnExprBody();
        if (name.equals("LetFn:")) return readLetFnBody();
        if (name.equals("LocalVarDecl:")) return readLocalVarDeclBody();
        if (name.equals("GeneratedExpr:")) return readGeneratedExprBody();
        if (name.equals("SubscriptExpr:")) return readSubscriptExprBody();
        if (name.equals("FloatLiteralExpr:")) return readFloatLiteralExprBody();
        if (name.equals("IntLiteralExpr:")) return readIntLiteralExprBody();
        if (name.equals("CharLiteralExpr:")) return readCharLiteralExprBody();
        if (name.equals("StringLiteralExpr:")) return readStringLiteralExprBody();
        if (name.equals("VoidLiteralExpr:")) return readVoidLiteralExprBody();
        if (name.equals("VarRef:")) return readVarRefBody();
        if (name.equals("FieldRef:")) return readFieldRefBody();
        if (name.equals("FieldRefForSure:")) return readFieldRefForSureBody();
        if (name.equals("_RewriteFieldRef:")) return read_RewriteFieldRefBody();
        if (name.equals("FnRef:")) return readFnRefBody();
        if (name.equals("_RewriteFnRef:")) return read_RewriteFnRefBody();
        if (name.equals("OpRef:")) return readOpRefBody();
        if (name.equals("LooseJuxt:")) return readLooseJuxtBody();
        if (name.equals("TightJuxt:")) return readTightJuxtBody();
        if (name.equals("OprExpr:")) return readOprExprBody();
        if (name.equals("ChainExpr:")) return readChainExprBody();
        if (name.equals("CoercionInvocation:")) return readCoercionInvocationBody();
        if (name.equals("MethodInvocation:")) return readMethodInvocationBody();
        if (name.equals("MathPrimary:")) return readMathPrimaryBody();
        if (name.equals("ArrayElement:")) return readArrayElementBody();
        if (name.equals("ArrayElements:")) return readArrayElementsBody();
        if (name.equals("ExponentType:")) return readExponentTypeBody();
        if (name.equals("BaseDim:")) return readBaseDimBody();
        if (name.equals("DimRef:")) return readDimRefBody();
        if (name.equals("ProductDim:")) return readProductDimBody();
        if (name.equals("QuotientDim:")) return readQuotientDimBody();
        if (name.equals("ExponentDim:")) return readExponentDimBody();
        if (name.equals("OpDim:")) return readOpDimBody();
        if (name.equals("ArrowType:")) return readArrowTypeBody();
        if (name.equals("_RewriteGenericArrowType:")) return read_RewriteGenericArrowTypeBody();
        if (name.equals("BottomType:")) return readBottomTypeBody();
        if (name.equals("IdType:")) return readIdTypeBody();
        if (name.equals("InstantiatedType:")) return readInstantiatedTypeBody();
        if (name.equals("ArrayType:")) return readArrayTypeBody();
        if (name.equals("MatrixType:")) return readMatrixTypeBody();
        if (name.equals("TupleType:")) return readTupleTypeBody();
        if (name.equals("ArgType:")) return readArgTypeBody();
        if (name.equals("VoidType:")) return readVoidTypeBody();
        if (name.equals("InferenceVarType:")) return readInferenceVarTypeBody();
        if (name.equals("AndType:")) return readAndTypeBody();
        if (name.equals("OrType:")) return readOrTypeBody();
        if (name.equals("FixedPointType:")) return readFixedPointTypeBody();
        if (name.equals("TaggedDimType:")) return readTaggedDimTypeBody();
        if (name.equals("TaggedUnitType:")) return readTaggedUnitTypeBody();
        if (name.equals("IdArg:")) return readIdArgBody();
        if (name.equals("TypeArg:")) return readTypeArgBody();
        if (name.equals("IntArg:")) return readIntArgBody();
        if (name.equals("BoolArg:")) return readBoolArgBody();
        if (name.equals("OprArg:")) return readOprArgBody();
        if (name.equals("DimArg:")) return readDimArgBody();
        if (name.equals("UnitArg:")) return readUnitArgBody();
        if (name.equals("NumberConstraint:")) return readNumberConstraintBody();
        if (name.equals("IntRef:")) return readIntRefBody();
        if (name.equals("SumConstraint:")) return readSumConstraintBody();
        if (name.equals("MinusConstraint:")) return readMinusConstraintBody();
        if (name.equals("ProductConstraint:")) return readProductConstraintBody();
        if (name.equals("ExponentConstraint:")) return readExponentConstraintBody();
        if (name.equals("BoolConstant:")) return readBoolConstantBody();
        if (name.equals("BoolRef:")) return readBoolRefBody();
        if (name.equals("NotConstraint:")) return readNotConstraintBody();
        if (name.equals("OrConstraint:")) return readOrConstraintBody();
        if (name.equals("AndConstraint:")) return readAndConstraintBody();
        if (name.equals("ImpliesConstraint:")) return readImpliesConstraintBody();
        if (name.equals("BEConstraint:")) return readBEConstraintBody();
        if (name.equals("WhereClause:")) return readWhereClauseBody();
        if (name.equals("WhereType:")) return readWhereTypeBody();
        if (name.equals("WhereNat:")) return readWhereNatBody();
        if (name.equals("WhereInt:")) return readWhereIntBody();
        if (name.equals("WhereBool:")) return readWhereBoolBody();
        if (name.equals("WhereUnit:")) return readWhereUnitBody();
        if (name.equals("WhereExtends:")) return readWhereExtendsBody();
        if (name.equals("TypeAlias:")) return readTypeAliasBody();
        if (name.equals("WhereCoerces:")) return readWhereCoercesBody();
        if (name.equals("WhereWidens:")) return readWhereWidensBody();
        if (name.equals("WhereWidensCoerces:")) return readWhereWidensCoercesBody();
        if (name.equals("WhereEquals:")) return readWhereEqualsBody();
        if (name.equals("UnitConstraint:")) return readUnitConstraintBody();
        if (name.equals("LEConstraint:")) return readLEConstraintBody();
        if (name.equals("LTConstraint:")) return readLTConstraintBody();
        if (name.equals("GEConstraint:")) return readGEConstraintBody();
        if (name.equals("GTConstraint:")) return readGTConstraintBody();
        if (name.equals("IEConstraint:")) return readIEConstraintBody();
        if (name.equals("BoolConstraintExpr:")) return readBoolConstraintExprBody();
        if (name.equals("Contract:")) return readContractBody();
        if (name.equals("EnsuresClause:")) return readEnsuresClauseBody();
        if (name.equals("ModifierAbstract:")) return readModifierAbstractBody();
        if (name.equals("ModifierAtomic:")) return readModifierAtomicBody();
        if (name.equals("ModifierGetter:")) return readModifierGetterBody();
        if (name.equals("ModifierHidden:")) return readModifierHiddenBody();
        if (name.equals("ModifierIO:")) return readModifierIOBody();
        if (name.equals("ModifierOverride:")) return readModifierOverrideBody();
        if (name.equals("ModifierPrivate:")) return readModifierPrivateBody();
        if (name.equals("ModifierSettable:")) return readModifierSettableBody();
        if (name.equals("ModifierSetter:")) return readModifierSetterBody();
        if (name.equals("ModifierTest:")) return readModifierTestBody();
        if (name.equals("ModifierTransient:")) return readModifierTransientBody();
        if (name.equals("ModifierValue:")) return readModifierValueBody();
        if (name.equals("ModifierVar:")) return readModifierVarBody();
        if (name.equals("ModifierWidens:")) return readModifierWidensBody();
        if (name.equals("ModifierWrapped:")) return readModifierWrappedBody();
        if (name.equals("OperatorParam:")) return readOperatorParamBody();
        if (name.equals("BoolParam:")) return readBoolParamBody();
        if (name.equals("DimensionParam:")) return readDimensionParamBody();
        if (name.equals("IntParam:")) return readIntParamBody();
        if (name.equals("NatParam:")) return readNatParamBody();
        if (name.equals("SimpleTypeParam:")) return readSimpleTypeParamBody();
        if (name.equals("UnitParam:")) return readUnitParamBody();
        if (name.equals("APIName:")) return readAPINameBody();
        if (name.equals("QualifiedIdName:")) return readQualifiedIdNameBody();
        if (name.equals("QualifiedOpName:")) return readQualifiedOpNameBody();
        if (name.equals("Id:")) return readIdBody();
        if (name.equals("Op:")) return readOpBody();
        if (name.equals("Enclosing:")) return readEnclosingBody();
        if (name.equals("AnonymousFnName:")) return readAnonymousFnNameBody();
        if (name.equals("ConstructorFnName:")) return readConstructorFnNameBody();
        if (name.equals("ArrayComprehensionClause:")) return readArrayComprehensionClauseBody();
        if (name.equals("KeywordExpr:")) return readKeywordExprBody();
        if (name.equals("CaseClause:")) return readCaseClauseBody();
        if (name.equals("Catch:")) return readCatchBody();
        if (name.equals("CatchClause:")) return readCatchClauseBody();
        if (name.equals("DoFront:")) return readDoFrontBody();
        if (name.equals("IfClause:")) return readIfClauseBody();
        if (name.equals("TypecaseClause:")) return readTypecaseClauseBody();
        if (name.equals("ExtentRange:")) return readExtentRangeBody();
        if (name.equals("GeneratorClause:")) return readGeneratorClauseBody();
        if (name.equals("VarargsExpr:")) return readVarargsExprBody();
        if (name.equals("VarargsType:")) return readVarargsTypeBody();
        if (name.equals("KeywordType:")) return readKeywordTypeBody();
        if (name.equals("TraitTypeWhere:")) return readTraitTypeWhereBody();
        if (name.equals("Indices:")) return readIndicesBody();
        if (name.equals("ParenthesisDelimitedMI:")) return readParenthesisDelimitedMIBody();
        if (name.equals("NonParenthesisDelimitedMI:")) return readNonParenthesisDelimitedMIBody();
        if (name.equals("ExponentiationMI:")) return readExponentiationMIBody();
        if (name.equals("SubscriptingMI:")) return readSubscriptingMIBody();
        if (name.equals("InFixity:")) return readInFixityBody();
        if (name.equals("PreFixity:")) return readPreFixityBody();
        if (name.equals("PostFixity:")) return readPostFixityBody();
        if (name.equals("NoFixity:")) return readNoFixityBody();
        if (name.equals("MultiFixity:")) return readMultiFixityBody();
        if (name.equals("EnclosingFixity:")) return readEnclosingFixityBody();
        if (name.equals("BigFixity:")) return readBigFixityBody();
        throw error();
    }

    private Component readComponentBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("_native")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean read_native = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        APIName readname = (APIName) readNode();
        if (!readWord().equals("imports")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Import> readimports = readListOfImport();
        if (!readWord().equals("exports")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Export> readexports = readListOfExport();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Decl> readdecls = readListOfDecl();
        return new Component(readspan, read_native, readname, readimports, readexports, readdecls);
    }

    private Api readApiBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("_native")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean read_native = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        APIName readname = (APIName) readNode();
        if (!readWord().equals("imports")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Import> readimports = readListOfImport();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<AbsDecl> readdecls = readListOfAbsDecl();
        return new Api(readspan, read_native, readname, readimports, readdecls);
    }

    private ImportStar readImportStarBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("api")) throw error();
        if (!readWord().equals("=")) throw error();
        APIName readapi = (APIName) readNode();
        if (!readWord().equals("except")) throw error();
        if (!readWord().equals("=")) throw error();
        List<SimpleName> readexcept = readListOfSimpleName();
        return new ImportStar(readspan, readapi, readexcept);
    }

    private ImportNames readImportNamesBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("api")) throw error();
        if (!readWord().equals("=")) throw error();
        APIName readapi = (APIName) readNode();
        if (!readWord().equals("aliasedNames")) throw error();
        if (!readWord().equals("=")) throw error();
        List<AliasedSimpleName> readaliasedNames = readListOfAliasedSimpleName();
        return new ImportNames(readspan, readapi, readaliasedNames);
    }

    private ImportApi readImportApiBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("apis")) throw error();
        if (!readWord().equals("=")) throw error();
        List<AliasedAPIName> readapis = readListOfAliasedAPIName();
        return new ImportApi(readspan, readapis);
    }

    private AliasedSimpleName readAliasedSimpleNameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readname = (SimpleName) readNode();
        if (!readWord().equals("alias")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<SimpleName> readalias = readOptionOfSimpleName();
        return new AliasedSimpleName(readspan, readname, readalias);
    }

    private AliasedAPIName readAliasedAPINameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("api")) throw error();
        if (!readWord().equals("=")) throw error();
        APIName readapi = (APIName) readNode();
        if (!readWord().equals("alias")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Id> readalias = readOptionOfId();
        return new AliasedAPIName(readspan, readapi, readalias);
    }

    private Export readExportBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("apis")) throw error();
        if (!readWord().equals("=")) throw error();
        List<APIName> readapis = readListOfAPIName();
        return new Export(readspan, readapis);
    }

    private AbsTraitDecl readAbsTraitDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitTypeWhere> readextendsClause = readListOfTraitTypeWhere();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("excludes")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitType> readexcludes = readListOfTraitType();
        if (!readWord().equals("comprises")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readcomprises = readOptionOfListOfTraitType();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<AbsDecl> readdecls = readListOfAbsDecl();
        return new AbsTraitDecl(readspan, readmods, readname, readstaticParams, readextendsClause, readwhere, readexcludes, readcomprises, readdecls);
    }

    private TraitDecl readTraitDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitTypeWhere> readextendsClause = readListOfTraitTypeWhere();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("excludes")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitType> readexcludes = readListOfTraitType();
        if (!readWord().equals("comprises")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readcomprises = readOptionOfListOfTraitType();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Decl> readdecls = readListOfDecl();
        return new TraitDecl(readspan, readmods, readname, readstaticParams, readextendsClause, readwhere, readexcludes, readcomprises, readdecls);
    }

    private AbsObjectDecl readAbsObjectDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitTypeWhere> readextendsClause = readListOfTraitTypeWhere();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Param>> readparams = readOptionOfListOfParam();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readthrowsClause = readOptionOfListOfTraitType();
        if (!readWord().equals("contract")) throw error();
        if (!readWord().equals("=")) throw error();
        Contract readcontract = (Contract) readNode();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<AbsDecl> readdecls = readListOfAbsDecl();
        return new AbsObjectDecl(readspan, readmods, readname, readstaticParams, readextendsClause, readwhere, readparams, readthrowsClause, readcontract, readdecls);
    }

    private ObjectDecl readObjectDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitTypeWhere> readextendsClause = readListOfTraitTypeWhere();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Param>> readparams = readOptionOfListOfParam();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readthrowsClause = readOptionOfListOfTraitType();
        if (!readWord().equals("contract")) throw error();
        if (!readWord().equals("=")) throw error();
        Contract readcontract = (Contract) readNode();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Decl> readdecls = readListOfDecl();
        return new ObjectDecl(readspan, readmods, readname, readstaticParams, readextendsClause, readwhere, readparams, readthrowsClause, readcontract, readdecls);
    }

    private AbsVarDecl readAbsVarDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("lhs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<LValueBind> readlhs = readListOfLValueBind();
        return new AbsVarDecl(readspan, readlhs);
    }

    private VarDecl readVarDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("lhs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<LValueBind> readlhs = readListOfLValueBind();
        if (!readWord().equals("init")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readinit = (Expr) readNode();
        return new VarDecl(readspan, readlhs, readinit);
    }

    private LValueBind readLValueBindBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readtype = readOptionOfType();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("mutable")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readmutable = readBoolean();
        return new LValueBind(readspan, readname, readtype, readmods, readmutable);
    }

    private UnpastingBind readUnpastingBindBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        List<ExtentRange> readdim = readListOfExtentRange();
        return new UnpastingBind(readspan, readname, readdim);
    }

    private UnpastingSplit readUnpastingSplitBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("elems")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Unpasting> readelems = readListOfUnpasting();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        int readdim = readInt();
        return new UnpastingSplit(readspan, readelems, readdim);
    }

    private AbsFnDecl readAbsFnDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readname = (SimpleName) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Param> readparams = readListOfParam();
        if (!readWord().equals("returnType")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readreturnType = readOptionOfType();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readthrowsClause = readOptionOfListOfTraitType();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("contract")) throw error();
        if (!readWord().equals("=")) throw error();
        Contract readcontract = (Contract) readNode();
        if (!readWord().equals("selfName")) throw error();
        if (!readWord().equals("=")) throw error();
        String readselfName = readString();
        return new AbsFnDecl(readspan, readmods, readname, readstaticParams, readparams, readreturnType, readthrowsClause, readwhere, readcontract, readselfName);
    }

    private FnDef readFnDefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readname = (SimpleName) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Param> readparams = readListOfParam();
        if (!readWord().equals("returnType")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readreturnType = readOptionOfType();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readthrowsClause = readOptionOfListOfTraitType();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("contract")) throw error();
        if (!readWord().equals("=")) throw error();
        Contract readcontract = (Contract) readNode();
        if (!readWord().equals("selfName")) throw error();
        if (!readWord().equals("=")) throw error();
        String readselfName = readString();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readbody = (Expr) readNode();
        return new FnDef(readspan, readmods, readname, readstaticParams, readparams, readreturnType, readthrowsClause, readwhere, readcontract, readselfName, readbody);
    }

    private NormalParam readNormalParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readtype = readOptionOfType();
        if (!readWord().equals("defaultExpr")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readdefaultExpr = readOptionOfExpr();
        return new NormalParam(readspan, readmods, readname, readtype, readdefaultExpr);
    }

    private VarargsParam readVarargsParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("mods")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Modifier> readmods = readListOfModifier();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("varargsType")) throw error();
        if (!readWord().equals("=")) throw error();
        VarargsType readvarargsType = (VarargsType) readNode();
        return new VarargsParam(readspan, readmods, readname, readvarargsType);
    }

    private DimDecl readDimDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readdim = (Id) readNode();
        if (!readWord().equals("derived")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readderived = readOptionOfType();
        if (!readWord().equals("default")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Id> readdefault = readOptionOfId();
        return new DimDecl(readspan, readdim, readderived, readdefault);
    }

    private UnitDecl readUnitDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("si_unit")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readsi_unit = readBoolean();
        if (!readWord().equals("units")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Id> readunits = readListOfId();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readdim = readOptionOfType();
        if (!readWord().equals("def")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readdef = readOptionOfExpr();
        return new UnitDecl(readspan, readsi_unit, readunits, readdim, readdef);
    }

    private TestDecl readTestDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("gens")) throw error();
        if (!readWord().equals("=")) throw error();
        List<GeneratorClause> readgens = readListOfGeneratorClause();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new TestDecl(readspan, readname, readgens, readexpr);
    }

    private PropertyDecl readPropertyDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Id> readname = readOptionOfId();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Param> readparams = readListOfParam();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new PropertyDecl(readspan, readname, readparams, readexpr);
    }

    private AbsExternalSyntax readAbsExternalSyntaxBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("openExpander")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readopenExpander = (SimpleName) readNode();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("closeExpander")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readcloseExpander = (SimpleName) readNode();
        return new AbsExternalSyntax(readspan, readopenExpander, readname, readcloseExpander);
    }

    private ExternalSyntax readExternalSyntaxBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("openExpander")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readopenExpander = (SimpleName) readNode();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("closeExpander")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readcloseExpander = (SimpleName) readNode();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new ExternalSyntax(readspan, readopenExpander, readname, readcloseExpander, readexpr);
    }

    private GrammarDef readGrammarDefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        if (!readWord().equals("extends")) throw error();
        if (!readWord().equals("=")) throw error();
        List<QualifiedIdName> readextends = readListOfQualifiedIdName();
        if (!readWord().equals("members")) throw error();
        if (!readWord().equals("=")) throw error();
        List<GrammarMemberDecl> readmembers = readListOfGrammarMemberDecl();
        return new GrammarDef(readspan, readname, readextends, readmembers);
    }

    private NonterminalDef readNonterminalDefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<TraitType> readtype = readOptionOfTraitType();
        if (!readWord().equals("modifier")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<? extends Modifier> readmodifier = readOptionOfModifier();
        if (!readWord().equals("syntaxDefs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<SyntaxDef> readsyntaxDefs = readListOfSyntaxDef();
        return new NonterminalDef(readspan, readname, readtype, readmodifier, readsyntaxDefs);
    }

    private NonterminalExtensionDef readNonterminalExtensionDefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<TraitType> readtype = readOptionOfTraitType();
        if (!readWord().equals("modifier")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<? extends Modifier> readmodifier = readOptionOfModifier();
        if (!readWord().equals("syntaxDefs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<SyntaxDef> readsyntaxDefs = readListOfSyntaxDef();
        return new NonterminalExtensionDef(readspan, readname, readtype, readmodifier, readsyntaxDefs);
    }

    private _TerminalDef read_TerminalDefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<TraitType> readtype = readOptionOfTraitType();
        if (!readWord().equals("modifier")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<? extends Modifier> readmodifier = readOptionOfModifier();
        if (!readWord().equals("syntaxDef")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxDef readsyntaxDef = (SyntaxDef) readNode();
        return new _TerminalDef(readspan, readname, readtype, readmodifier, readsyntaxDef);
    }

    private SyntaxDef readSyntaxDefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("syntaxSymbols")) throw error();
        if (!readWord().equals("=")) throw error();
        List<SyntaxSymbol> readsyntaxSymbols = readListOfSyntaxSymbol();
        if (!readWord().equals("transformationExpression")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readtransformationExpression = (Expr) readNode();
        return new SyntaxDef(readspan, readsyntaxSymbols, readtransformationExpression);
    }

    private PrefixedSymbol readPrefixedSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("id")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Id> readid = readOptionOfId();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new PrefixedSymbol(readspan, readid, readsymbol);
    }

    private OptionalSymbol readOptionalSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new OptionalSymbol(readspan, readsymbol);
    }

    private RepeatSymbol readRepeatSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new RepeatSymbol(readspan, readsymbol);
    }

    private RepeatOneOrMoreSymbol readRepeatOneOrMoreSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new RepeatOneOrMoreSymbol(readspan, readsymbol);
    }

    private NoWhitespaceSymbol readNoWhitespaceSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new NoWhitespaceSymbol(readspan, readsymbol);
    }

    private WhitespaceSymbol readWhitespaceSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("s")) throw error();
        if (!readWord().equals("=")) throw error();
        String reads = readString();
        return new WhitespaceSymbol(readspan, reads);
    }

    private TabSymbol readTabSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new TabSymbol(readspan);
    }

    private FormfeedSymbol readFormfeedSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new FormfeedSymbol(readspan);
    }

    private CarriageReturnSymbol readCarriageReturnSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new CarriageReturnSymbol(readspan);
    }

    private BackspaceSymbol readBackspaceSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new BackspaceSymbol(readspan);
    }

    private NewlineSymbol readNewlineSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new NewlineSymbol(readspan);
    }

    private BreaklineSymbol readBreaklineSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("s")) throw error();
        if (!readWord().equals("=")) throw error();
        String reads = readString();
        return new BreaklineSymbol(readspan, reads);
    }

    private ItemSymbol readItemSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("item")) throw error();
        if (!readWord().equals("=")) throw error();
        String readitem = readString();
        return new ItemSymbol(readspan, readitem);
    }

    private NonterminalSymbol readNonterminalSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("nonterminal")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readnonterminal = (QualifiedIdName) readNode();
        return new NonterminalSymbol(readspan, readnonterminal);
    }

    private KeywordSymbol readKeywordSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("token")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtoken = readString();
        return new KeywordSymbol(readspan, readtoken);
    }

    private TokenSymbol readTokenSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("token")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtoken = readString();
        return new TokenSymbol(readspan, readtoken);
    }

    private NotPredicateSymbol readNotPredicateSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new NotPredicateSymbol(readspan, readsymbol);
    }

    private AndPredicateSymbol readAndPredicateSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("symbol")) throw error();
        if (!readWord().equals("=")) throw error();
        SyntaxSymbol readsymbol = (SyntaxSymbol) readNode();
        return new AndPredicateSymbol(readspan, readsymbol);
    }

    private CharacterClassSymbol readCharacterClassSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("characters")) throw error();
        if (!readWord().equals("=")) throw error();
        List<CharacterSymbol> readcharacters = readListOfCharacterSymbol();
        return new CharacterClassSymbol(readspan, readcharacters);
    }

    private CharSymbol readCharSymbolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("string")) throw error();
        if (!readWord().equals("=")) throw error();
        String readstring = readString();
        return new CharSymbol(readspan, readstring);
    }

    private CharacterInterval readCharacterIntervalBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("begin")) throw error();
        if (!readWord().equals("=")) throw error();
        String readbegin = readString();
        if (!readWord().equals("end")) throw error();
        if (!readWord().equals("=")) throw error();
        String readend = readString();
        return new CharacterInterval(readspan, readbegin, readend);
    }

    private AsExpr readAsExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        return new AsExpr(readspan, readparenthesized, readexpr, readtype);
    }

    private AsIfExpr readAsIfExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        return new AsIfExpr(readspan, readparenthesized, readexpr, readtype);
    }

    private Assignment readAssignmentBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("lhs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<LHS> readlhs = readListOfLHS();
        if (!readWord().equals("opr")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Op> readopr = readOptionOfOp();
        if (!readWord().equals("rhs")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readrhs = (Expr) readNode();
        return new Assignment(readspan, readparenthesized, readlhs, readopr, readrhs);
    }

    private Block readBlockBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("exprs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readexprs = readListOfExpr();
        return new Block(readspan, readparenthesized, readexprs);
    }

    private CaseExpr readCaseExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("param")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readparam = readOptionOfExpr();
        if (!readWord().equals("compare")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Op> readcompare = readOptionOfOp();
        if (!readWord().equals("clauses")) throw error();
        if (!readWord().equals("=")) throw error();
        List<CaseClause> readclauses = readListOfCaseClause();
        if (!readWord().equals("elseClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Block> readelseClause = readOptionOfBlock();
        return new CaseExpr(readspan, readparenthesized, readparam, readcompare, readclauses, readelseClause);
    }

    private Do readDoBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("fronts")) throw error();
        if (!readWord().equals("=")) throw error();
        List<DoFront> readfronts = readListOfDoFront();
        return new Do(readspan, readparenthesized, readfronts);
    }

    private For readForBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("gens")) throw error();
        if (!readWord().equals("=")) throw error();
        List<GeneratorClause> readgens = readListOfGeneratorClause();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        DoFront readbody = (DoFront) readNode();
        return new For(readspan, readparenthesized, readgens, readbody);
    }

    private If readIfBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("clauses")) throw error();
        if (!readWord().equals("=")) throw error();
        List<IfClause> readclauses = readListOfIfClause();
        if (!readWord().equals("elseClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Block> readelseClause = readOptionOfBlock();
        return new If(readspan, readparenthesized, readclauses, readelseClause);
    }

    private Label readLabelBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readbody = (Block) readNode();
        return new Label(readspan, readparenthesized, readname, readbody);
    }

    private ObjectExpr readObjectExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitTypeWhere> readextendsClause = readListOfTraitTypeWhere();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Decl> readdecls = readListOfDecl();
        return new ObjectExpr(readspan, readparenthesized, readextendsClause, readdecls);
    }

    private _RewriteObjectExpr read_RewriteObjectExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitTypeWhere> readextendsClause = readListOfTraitTypeWhere();
        if (!readWord().equals("decls")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Decl> readdecls = readListOfDecl();
        if (!readWord().equals("implicitTypeParameters")) throw error();
        if (!readWord().equals("=")) throw error();
        @SuppressWarnings("unchecked") BATree<String, StaticParam> readimplicitTypeParameters = (BATree<String, StaticParam>) readUnknownObject();
        if (!readWord().equals("genSymName")) throw error();
        if (!readWord().equals("=")) throw error();
        String readgenSymName = readString();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Param>> readparams = readOptionOfListOfParam();
        return new _RewriteObjectExpr(readspan, readparenthesized, readextendsClause, readdecls, readimplicitTypeParameters, readgenSymName, readstaticParams, readstaticArgs, readparams);
    }

    private Try readTryBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readbody = (Block) readNode();
        if (!readWord().equals("catchClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Catch> readcatchClause = readOptionOfCatch();
        if (!readWord().equals("forbid")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitType> readforbid = readListOfTraitType();
        if (!readWord().equals("finallyClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Block> readfinallyClause = readOptionOfBlock();
        return new Try(readspan, readparenthesized, readbody, readcatchClause, readforbid, readfinallyClause);
    }

    private TupleExpr readTupleExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("exprs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readexprs = readListOfExpr();
        return new TupleExpr(readspan, readparenthesized, readexprs);
    }

    private ArgExpr readArgExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("exprs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readexprs = readListOfExpr();
        if (!readWord().equals("varargs")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<VarargsExpr> readvarargs = readOptionOfVarargsExpr();
        if (!readWord().equals("keywords")) throw error();
        if (!readWord().equals("=")) throw error();
        List<KeywordExpr> readkeywords = readListOfKeywordExpr();
        if (!readWord().equals("inApp")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readinApp = readBoolean();
        return new ArgExpr(readspan, readparenthesized, readexprs, readvarargs, readkeywords, readinApp);
    }

    private Typecase readTypecaseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("bind")) throw error();
        if (!readWord().equals("=")) throw error();
        @SuppressWarnings("unchecked") Pair<List<Id>, Option<Expr>> readbind = (Pair<List<Id>, Option<Expr>>) readUnknownObject();
        if (!readWord().equals("clauses")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TypecaseClause> readclauses = readListOfTypecaseClause();
        if (!readWord().equals("elseClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Block> readelseClause = readOptionOfBlock();
        return new Typecase(readspan, readparenthesized, readbind, readclauses, readelseClause);
    }

    private While readWhileBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("test")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readtest = (Expr) readNode();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Do readbody = (Do) readNode();
        return new While(readspan, readparenthesized, readtest, readbody);
    }

    private Accumulator readAccumulatorBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        if (!readWord().equals("opr")) throw error();
        if (!readWord().equals("=")) throw error();
        OpName readopr = (OpName) readNode();
        if (!readWord().equals("gens")) throw error();
        if (!readWord().equals("=")) throw error();
        List<GeneratorClause> readgens = readListOfGeneratorClause();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readbody = (Expr) readNode();
        return new Accumulator(readspan, readparenthesized, readstaticArgs, readopr, readgens, readbody);
    }

    private ArrayComprehension readArrayComprehensionBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        if (!readWord().equals("clauses")) throw error();
        if (!readWord().equals("=")) throw error();
        List<ArrayComprehensionClause> readclauses = readListOfArrayComprehensionClause();
        return new ArrayComprehension(readspan, readparenthesized, readstaticArgs, readclauses);
    }

    private AtomicExpr readAtomicExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new AtomicExpr(readspan, readparenthesized, readexpr);
    }

    private Exit readExitBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("target")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Id> readtarget = readOptionOfId();
        if (!readWord().equals("returnExpr")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readreturnExpr = readOptionOfExpr();
        return new Exit(readspan, readparenthesized, readtarget, readreturnExpr);
    }

    private Spawn readSpawnBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readbody = (Expr) readNode();
        return new Spawn(readspan, readparenthesized, readbody);
    }

    private Throw readThrowBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new Throw(readspan, readparenthesized, readexpr);
    }

    private TryAtomicExpr readTryAtomicExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new TryAtomicExpr(readspan, readparenthesized, readexpr);
    }

    private FnExpr readFnExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        SimpleName readname = (SimpleName) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("params")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Param> readparams = readListOfParam();
        if (!readWord().equals("returnType")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readreturnType = readOptionOfType();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<TraitType>> readthrowsClause = readOptionOfListOfTraitType();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readbody = (Expr) readNode();
        return new FnExpr(readspan, readparenthesized, readname, readstaticParams, readparams, readreturnType, readwhere, readthrowsClause, readbody);
    }

    private LetFn readLetFnBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readbody = readListOfExpr();
        if (!readWord().equals("fns")) throw error();
        if (!readWord().equals("=")) throw error();
        List<FnDef> readfns = readListOfFnDef();
        return new LetFn(readspan, readparenthesized, readbody, readfns);
    }

    private LocalVarDecl readLocalVarDeclBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readbody = readListOfExpr();
        if (!readWord().equals("lhs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<LValue> readlhs = readListOfLValue();
        if (!readWord().equals("rhs")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readrhs = readOptionOfExpr();
        return new LocalVarDecl(readspan, readparenthesized, readbody, readlhs, readrhs);
    }

    private GeneratedExpr readGeneratedExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        if (!readWord().equals("gens")) throw error();
        if (!readWord().equals("=")) throw error();
        List<GeneratorClause> readgens = readListOfGeneratorClause();
        return new GeneratedExpr(readspan, readparenthesized, readexpr, readgens);
    }

    private SubscriptExpr readSubscriptExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("obj")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readobj = (Expr) readNode();
        if (!readWord().equals("subs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readsubs = readListOfExpr();
        if (!readWord().equals("op")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Enclosing> readop = readOptionOfEnclosing();
        return new SubscriptExpr(readspan, readparenthesized, readobj, readsubs, readop);
    }

    private FloatLiteralExpr readFloatLiteralExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        if (!readWord().equals("intPart")) throw error();
        if (!readWord().equals("=")) throw error();
        BigInteger readintPart = (BigInteger) readUnknownObject();
        if (!readWord().equals("numerator")) throw error();
        if (!readWord().equals("=")) throw error();
        BigInteger readnumerator = (BigInteger) readUnknownObject();
        if (!readWord().equals("denomBase")) throw error();
        if (!readWord().equals("=")) throw error();
        int readdenomBase = readInt();
        if (!readWord().equals("denomPower")) throw error();
        if (!readWord().equals("=")) throw error();
        int readdenomPower = readInt();
        return new FloatLiteralExpr(readspan, readparenthesized, readtext, readintPart, readnumerator, readdenomBase, readdenomPower);
    }

    private IntLiteralExpr readIntLiteralExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        if (!readWord().equals("val")) throw error();
        if (!readWord().equals("=")) throw error();
        BigInteger readval = (BigInteger) readUnknownObject();
        return new IntLiteralExpr(readspan, readparenthesized, readtext, readval);
    }

    private CharLiteralExpr readCharLiteralExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        if (!readWord().equals("val")) throw error();
        if (!readWord().equals("=")) throw error();
        int readval = readInt();
        return new CharLiteralExpr(readspan, readparenthesized, readtext, readval);
    }

    private StringLiteralExpr readStringLiteralExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        return new StringLiteralExpr(readspan, readparenthesized, readtext);
    }

    private VoidLiteralExpr readVoidLiteralExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        return new VoidLiteralExpr(readspan, readparenthesized, readtext);
    }

    private VarRef readVarRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("var")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readvar = (QualifiedIdName) readNode();
        return new VarRef(readspan, readparenthesized, readvar);
    }

    private FieldRef readFieldRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("obj")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readobj = (Expr) readNode();
        if (!readWord().equals("field")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readfield = (Id) readNode();
        return new FieldRef(readspan, readparenthesized, readobj, readfield);
    }

    private FieldRefForSure readFieldRefForSureBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("obj")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readobj = (Expr) readNode();
        if (!readWord().equals("field")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readfield = (Id) readNode();
        return new FieldRefForSure(readspan, readparenthesized, readobj, readfield);
    }

    private _RewriteFieldRef read_RewriteFieldRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("obj")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readobj = (Expr) readNode();
        if (!readWord().equals("field")) throw error();
        if (!readWord().equals("=")) throw error();
        Name readfield = (Name) readNode();
        return new _RewriteFieldRef(readspan, readparenthesized, readobj, readfield);
    }

    private FnRef readFnRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("fns")) throw error();
        if (!readWord().equals("=")) throw error();
        List<QualifiedIdName> readfns = readListOfQualifiedIdName();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        return new FnRef(readspan, readparenthesized, readfns, readstaticArgs);
    }

    private _RewriteFnRef read_RewriteFnRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("fn")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readfn = (Expr) readNode();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        return new _RewriteFnRef(readspan, readparenthesized, readfn, readstaticArgs);
    }

    private OpRef readOpRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("ops")) throw error();
        if (!readWord().equals("=")) throw error();
        List<QualifiedOpName> readops = readListOfQualifiedOpName();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        return new OpRef(readspan, readparenthesized, readops, readstaticArgs);
    }

    private LooseJuxt readLooseJuxtBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("exprs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readexprs = readListOfExpr();
        return new LooseJuxt(readspan, readparenthesized, readexprs);
    }

    private TightJuxt readTightJuxtBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("exprs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readexprs = readListOfExpr();
        return new TightJuxt(readspan, readparenthesized, readexprs);
    }

    private OprExpr readOprExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("op")) throw error();
        if (!readWord().equals("=")) throw error();
        OpRef readop = (OpRef) readNode();
        if (!readWord().equals("args")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readargs = readListOfExpr();
        return new OprExpr(readspan, readparenthesized, readop, readargs);
    }

    private ChainExpr readChainExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("first")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readfirst = (Expr) readNode();
        if (!readWord().equals("links")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Pair<Op, Expr>> readlinks = readListOfPairOfOpAndExpr();
        return new ChainExpr(readspan, readparenthesized, readfirst, readlinks);
    }

    private CoercionInvocation readCoercionInvocationBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        TraitType readtype = (TraitType) readNode();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        if (!readWord().equals("arg")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readarg = (Expr) readNode();
        return new CoercionInvocation(readspan, readparenthesized, readtype, readstaticArgs, readarg);
    }

    private MethodInvocation readMethodInvocationBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("obj")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readobj = (Expr) readNode();
        if (!readWord().equals("method")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readmethod = (Id) readNode();
        if (!readWord().equals("staticArgs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readstaticArgs = readListOfStaticArg();
        if (!readWord().equals("arg")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readarg = (Expr) readNode();
        return new MethodInvocation(readspan, readparenthesized, readobj, readmethod, readstaticArgs, readarg);
    }

    private MathPrimary readMathPrimaryBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("front")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readfront = (Expr) readNode();
        if (!readWord().equals("rest")) throw error();
        if (!readWord().equals("=")) throw error();
        List<MathItem> readrest = readListOfMathItem();
        return new MathPrimary(readspan, readparenthesized, readfront, readrest);
    }

    private ArrayElement readArrayElementBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("element")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readelement = (Expr) readNode();
        return new ArrayElement(readspan, readparenthesized, readelement);
    }

    private ArrayElements readArrayElementsBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("dimension")) throw error();
        if (!readWord().equals("=")) throw error();
        int readdimension = readInt();
        if (!readWord().equals("elements")) throw error();
        if (!readWord().equals("=")) throw error();
        List<ArrayExpr> readelements = readListOfArrayExpr();
        return new ArrayElements(readspan, readparenthesized, readdimension, readelements);
    }

    private ExponentType readExponentTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("base")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readbase = (Type) readNode();
        if (!readWord().equals("power")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readpower = (IntExpr) readNode();
        return new ExponentType(readspan, readparenthesized, readbase, readpower);
    }

    private BaseDim readBaseDimBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        return new BaseDim(readspan, readparenthesized);
    }

    private DimRef readDimRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        return new DimRef(readspan, readparenthesized, readname);
    }

    private ProductDim readProductDimBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("multiplier")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readmultiplier = (DimExpr) readNode();
        if (!readWord().equals("multiplicand")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readmultiplicand = (DimExpr) readNode();
        return new ProductDim(readspan, readparenthesized, readmultiplier, readmultiplicand);
    }

    private QuotientDim readQuotientDimBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("numerator")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readnumerator = (DimExpr) readNode();
        if (!readWord().equals("denominator")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readdenominator = (DimExpr) readNode();
        return new QuotientDim(readspan, readparenthesized, readnumerator, readdenominator);
    }

    private ExponentDim readExponentDimBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("base")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readbase = (DimExpr) readNode();
        if (!readWord().equals("power")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readpower = (IntExpr) readNode();
        return new ExponentDim(readspan, readparenthesized, readbase, readpower);
    }

    private OpDim readOpDimBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("val")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readval = (DimExpr) readNode();
        if (!readWord().equals("op")) throw error();
        if (!readWord().equals("=")) throw error();
        Op readop = (Op) readNode();
        return new OpDim(readspan, readparenthesized, readval, readop);
    }

    private ArrowType readArrowTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("domain")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readdomain = (Type) readNode();
        if (!readWord().equals("range")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readrange = (Type) readNode();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Type>> readthrowsClause = readOptionOfListOfType();
        if (!readWord().equals("io")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readio = readBoolean();
        return new ArrowType(readspan, readparenthesized, readdomain, readrange, readthrowsClause, readio);
    }

    private _RewriteGenericArrowType read_RewriteGenericArrowTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("domain")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readdomain = (Type) readNode();
        if (!readWord().equals("range")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readrange = (Type) readNode();
        if (!readWord().equals("throwsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Type>> readthrowsClause = readOptionOfListOfType();
        if (!readWord().equals("io")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readio = readBoolean();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        return new _RewriteGenericArrowType(readspan, readparenthesized, readdomain, readrange, readthrowsClause, readio, readstaticParams, readwhere);
    }

    private BottomType readBottomTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        return new BottomType(readspan, readparenthesized);
    }

    private IdType readIdTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        return new IdType(readspan, readparenthesized, readname);
    }

    private InstantiatedType readInstantiatedTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        if (!readWord().equals("args")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticArg> readargs = readListOfStaticArg();
        return new InstantiatedType(readspan, readparenthesized, readname, readargs);
    }

    private ArrayType readArrayTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("element")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readelement = (Type) readNode();
        if (!readWord().equals("indices")) throw error();
        if (!readWord().equals("=")) throw error();
        Indices readindices = (Indices) readNode();
        return new ArrayType(readspan, readparenthesized, readelement, readindices);
    }

    private MatrixType readMatrixTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("element")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readelement = (Type) readNode();
        if (!readWord().equals("dimensions")) throw error();
        if (!readWord().equals("=")) throw error();
        List<ExtentRange> readdimensions = readListOfExtentRange();
        return new MatrixType(readspan, readparenthesized, readelement, readdimensions);
    }

    private TupleType readTupleTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("elements")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Type> readelements = readListOfType();
        return new TupleType(readspan, readparenthesized, readelements);
    }

    private ArgType readArgTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("elements")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Type> readelements = readListOfType();
        if (!readWord().equals("varargs")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<VarargsType> readvarargs = readOptionOfVarargsType();
        if (!readWord().equals("keywords")) throw error();
        if (!readWord().equals("=")) throw error();
        List<KeywordType> readkeywords = readListOfKeywordType();
        if (!readWord().equals("inArrow")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readinArrow = readBoolean();
        return new ArgType(readspan, readparenthesized, readelements, readvarargs, readkeywords, readinArrow);
    }

    private VoidType readVoidTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        return new VoidType(readspan, readparenthesized);
    }

    private InferenceVarType readInferenceVarTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("id")) throw error();
        if (!readWord().equals("=")) throw error();
        Object readid = (Object) readUnknownObject();
        if (!readWord().equals("index")) throw error();
        if (!readWord().equals("=")) throw error();
        int readindex = readInt();
        return new InferenceVarType(readspan, readparenthesized, readid, readindex);
    }

    private AndType readAndTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("first")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readfirst = (Type) readNode();
        if (!readWord().equals("second")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readsecond = (Type) readNode();
        return new AndType(readspan, readparenthesized, readfirst, readsecond);
    }

    private OrType readOrTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("first")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readfirst = (Type) readNode();
        if (!readWord().equals("second")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readsecond = (Type) readNode();
        return new OrType(readspan, readparenthesized, readfirst, readsecond);
    }

    private FixedPointType readFixedPointTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readbody = (Type) readNode();
        return new FixedPointType(readspan, readparenthesized, readname, readbody);
    }

    private TaggedDimType readTaggedDimTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readdim = (DimExpr) readNode();
        if (!readWord().equals("unit")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readunit = readOptionOfExpr();
        return new TaggedDimType(readspan, readparenthesized, readtype, readdim, readunit);
    }

    private TaggedUnitType readTaggedUnitTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        if (!readWord().equals("unit")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readunit = (Expr) readNode();
        return new TaggedUnitType(readspan, readparenthesized, readtype, readunit);
    }

    private IdArg readIdArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        return new IdArg(readspan, readparenthesized, readname);
    }

    private TypeArg readTypeArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        return new TypeArg(readspan, readparenthesized, readtype);
    }

    private IntArg readIntArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("val")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readval = (IntExpr) readNode();
        return new IntArg(readspan, readparenthesized, readval);
    }

    private BoolArg readBoolArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("bool")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readbool = (BoolExpr) readNode();
        return new BoolArg(readspan, readparenthesized, readbool);
    }

    private OprArg readOprArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Op readname = (Op) readNode();
        return new OprArg(readspan, readparenthesized, readname);
    }

    private DimArg readDimArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        DimExpr readdim = (DimExpr) readNode();
        return new DimArg(readspan, readparenthesized, readdim);
    }

    private UnitArg readUnitArgBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("unit")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readunit = (Expr) readNode();
        return new UnitArg(readspan, readparenthesized, readunit);
    }

    private NumberConstraint readNumberConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("val")) throw error();
        if (!readWord().equals("=")) throw error();
        IntLiteralExpr readval = (IntLiteralExpr) readNode();
        return new NumberConstraint(readspan, readparenthesized, readval);
    }

    private IntRef readIntRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        return new IntRef(readspan, readparenthesized, readname);
    }

    private SumConstraint readSumConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new SumConstraint(readspan, readparenthesized, readleft, readright);
    }

    private MinusConstraint readMinusConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new MinusConstraint(readspan, readparenthesized, readleft, readright);
    }

    private ProductConstraint readProductConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new ProductConstraint(readspan, readparenthesized, readleft, readright);
    }

    private ExponentConstraint readExponentConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new ExponentConstraint(readspan, readparenthesized, readleft, readright);
    }

    private BoolConstant readBoolConstantBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("bool")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readbool = readBoolean();
        return new BoolConstant(readspan, readparenthesized, readbool);
    }

    private BoolRef readBoolRefBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readname = (QualifiedIdName) readNode();
        return new BoolRef(readspan, readparenthesized, readname);
    }

    private NotConstraint readNotConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("bool")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readbool = (BoolExpr) readNode();
        return new NotConstraint(readspan, readparenthesized, readbool);
    }

    private OrConstraint readOrConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readleft = (BoolExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readright = (BoolExpr) readNode();
        return new OrConstraint(readspan, readparenthesized, readleft, readright);
    }

    private AndConstraint readAndConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readleft = (BoolExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readright = (BoolExpr) readNode();
        return new AndConstraint(readspan, readparenthesized, readleft, readright);
    }

    private ImpliesConstraint readImpliesConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readleft = (BoolExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readright = (BoolExpr) readNode();
        return new ImpliesConstraint(readspan, readparenthesized, readleft, readright);
    }

    private BEConstraint readBEConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("parenthesized")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readparenthesized = readBoolean();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readleft = (BoolExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolExpr readright = (BoolExpr) readNode();
        return new BEConstraint(readspan, readparenthesized, readleft, readright);
    }

    private WhereClause readWhereClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("bindings")) throw error();
        if (!readWord().equals("=")) throw error();
        List<WhereBinding> readbindings = readListOfWhereBinding();
        if (!readWord().equals("constraints")) throw error();
        if (!readWord().equals("=")) throw error();
        List<WhereConstraint> readconstraints = readListOfWhereConstraint();
        return new WhereClause(readspan, readbindings, readconstraints);
    }

    private WhereType readWhereTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("supers")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitType> readsupers = readListOfTraitType();
        return new WhereType(readspan, readname, readsupers);
    }

    private WhereNat readWhereNatBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new WhereNat(readspan, readname);
    }

    private WhereInt readWhereIntBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new WhereInt(readspan, readname);
    }

    private WhereBool readWhereBoolBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new WhereBool(readspan, readname);
    }

    private WhereUnit readWhereUnitBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new WhereUnit(readspan, readname);
    }

    private WhereExtends readWhereExtendsBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("supers")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitType> readsupers = readListOfTraitType();
        return new WhereExtends(readspan, readname, readsupers);
    }

    private TypeAlias readTypeAliasBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("staticParams")) throw error();
        if (!readWord().equals("=")) throw error();
        List<StaticParam> readstaticParams = readListOfStaticParam();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        return new TypeAlias(readspan, readname, readstaticParams, readtype);
    }

    private WhereCoerces readWhereCoercesBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readleft = (Type) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readright = (Type) readNode();
        return new WhereCoerces(readspan, readleft, readright);
    }

    private WhereWidens readWhereWidensBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readleft = (Type) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readright = (Type) readNode();
        return new WhereWidens(readspan, readleft, readright);
    }

    private WhereWidensCoerces readWhereWidensCoercesBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readleft = (Type) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readright = (Type) readNode();
        return new WhereWidensCoerces(readspan, readleft, readright);
    }

    private WhereEquals readWhereEqualsBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readleft = (QualifiedIdName) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        QualifiedIdName readright = (QualifiedIdName) readNode();
        return new WhereEquals(readspan, readleft, readright);
    }

    private UnitConstraint readUnitConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new UnitConstraint(readspan, readname);
    }

    private LEConstraint readLEConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new LEConstraint(readspan, readleft, readright);
    }

    private LTConstraint readLTConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new LTConstraint(readspan, readleft, readright);
    }

    private GEConstraint readGEConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new GEConstraint(readspan, readleft, readright);
    }

    private GTConstraint readGTConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new GTConstraint(readspan, readleft, readright);
    }

    private IEConstraint readIEConstraintBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("left")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readleft = (IntExpr) readNode();
        if (!readWord().equals("right")) throw error();
        if (!readWord().equals("=")) throw error();
        IntExpr readright = (IntExpr) readNode();
        return new IEConstraint(readspan, readleft, readright);
    }

    private BoolConstraintExpr readBoolConstraintExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("constraint")) throw error();
        if (!readWord().equals("=")) throw error();
        BoolConstraint readconstraint = (BoolConstraint) readNode();
        return new BoolConstraintExpr(readspan, readconstraint);
    }

    private Contract readContractBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("requires")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Expr>> readrequires = readOptionOfListOfExpr();
        if (!readWord().equals("ensures")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<EnsuresClause>> readensures = readOptionOfListOfEnsuresClause();
        if (!readWord().equals("invariants")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<List<Expr>> readinvariants = readOptionOfListOfExpr();
        return new Contract(readspan, readrequires, readensures, readinvariants);
    }

    private EnsuresClause readEnsuresClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("post")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readpost = (Expr) readNode();
        if (!readWord().equals("pre")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readpre = readOptionOfExpr();
        return new EnsuresClause(readspan, readpost, readpre);
    }

    private ModifierAbstract readModifierAbstractBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierAbstract(readspan);
    }

    private ModifierAtomic readModifierAtomicBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierAtomic(readspan);
    }

    private ModifierGetter readModifierGetterBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierGetter(readspan);
    }

    private ModifierHidden readModifierHiddenBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierHidden(readspan);
    }

    private ModifierIO readModifierIOBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierIO(readspan);
    }

    private ModifierOverride readModifierOverrideBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierOverride(readspan);
    }

    private ModifierPrivate readModifierPrivateBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierPrivate(readspan);
    }

    private ModifierSettable readModifierSettableBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierSettable(readspan);
    }

    private ModifierSetter readModifierSetterBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierSetter(readspan);
    }

    private ModifierTest readModifierTestBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierTest(readspan);
    }

    private ModifierTransient readModifierTransientBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierTransient(readspan);
    }

    private ModifierValue readModifierValueBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierValue(readspan);
    }

    private ModifierVar readModifierVarBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierVar(readspan);
    }

    private ModifierWidens readModifierWidensBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierWidens(readspan);
    }

    private ModifierWrapped readModifierWrappedBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new ModifierWrapped(readspan);
    }

    private OperatorParam readOperatorParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Op readname = (Op) readNode();
        return new OperatorParam(readspan, readname);
    }

    private BoolParam readBoolParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new BoolParam(readspan, readname);
    }

    private DimensionParam readDimensionParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new DimensionParam(readspan, readname);
    }

    private IntParam readIntParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new IntParam(readspan, readname);
    }

    private NatParam readNatParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new NatParam(readspan, readname);
    }

    private SimpleTypeParam readSimpleTypeParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("extendsClause")) throw error();
        if (!readWord().equals("=")) throw error();
        List<TraitType> readextendsClause = readListOfTraitType();
        if (!readWord().equals("absorbs")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readabsorbs = readBoolean();
        return new SimpleTypeParam(readspan, readname, readextendsClause, readabsorbs);
    }

    private UnitParam readUnitParamBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("dim")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Type> readdim = readOptionOfType();
        if (!readWord().equals("absorbs")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readabsorbs = readBoolean();
        return new UnitParam(readspan, readname, readdim, readabsorbs);
    }

    private APIName readAPINameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("ids")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Id> readids = readListOfId();
        return new APIName(readspan, readids);
    }

    private QualifiedIdName readQualifiedIdNameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("api")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<APIName> readapi = readOptionOfAPIName();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        return new QualifiedIdName(readspan, readapi, readname);
    }

    private QualifiedOpName readQualifiedOpNameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("api")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<APIName> readapi = readOptionOfAPIName();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        OpName readname = (OpName) readNode();
        return new QualifiedOpName(readspan, readapi, readname);
    }

    private Id readIdBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        return new Id(readspan, readtext);
    }

    private Op readOpBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("text")) throw error();
        if (!readWord().equals("=")) throw error();
        String readtext = readString();
        if (!readWord().equals("fixity")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Fixity> readfixity = readOptionOfFixity();
        return new Op(readspan, readtext, readfixity);
    }

    private Enclosing readEnclosingBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("open")) throw error();
        if (!readWord().equals("=")) throw error();
        Op readopen = (Op) readNode();
        if (!readWord().equals("close")) throw error();
        if (!readWord().equals("=")) throw error();
        Op readclose = (Op) readNode();
        return new Enclosing(readspan, readopen, readclose);
    }

    private AnonymousFnName readAnonymousFnNameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new AnonymousFnName(readspan);
    }

    private ConstructorFnName readConstructorFnNameBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("def")) throw error();
        if (!readWord().equals("=")) throw error();
        GenericWithParams readdef = (GenericWithParams) readNode();
        return new ConstructorFnName(readspan, readdef);
    }

    private ArrayComprehensionClause readArrayComprehensionClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("bind")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readbind = readListOfExpr();
        if (!readWord().equals("init")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readinit = (Expr) readNode();
        if (!readWord().equals("gens")) throw error();
        if (!readWord().equals("=")) throw error();
        List<GeneratorClause> readgens = readListOfGeneratorClause();
        return new ArrayComprehensionClause(readspan, readbind, readinit, readgens);
    }

    private KeywordExpr readKeywordExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("init")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readinit = (Expr) readNode();
        return new KeywordExpr(readspan, readname, readinit);
    }

    private CaseClause readCaseClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("match")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readmatch = (Expr) readNode();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readbody = (Block) readNode();
        return new CaseClause(readspan, readmatch, readbody);
    }

    private Catch readCatchBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("clauses")) throw error();
        if (!readWord().equals("=")) throw error();
        List<CatchClause> readclauses = readListOfCatchClause();
        return new Catch(readspan, readname, readclauses);
    }

    private CatchClause readCatchClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("match")) throw error();
        if (!readWord().equals("=")) throw error();
        TraitType readmatch = (TraitType) readNode();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readbody = (Block) readNode();
        return new CatchClause(readspan, readmatch, readbody);
    }

    private DoFront readDoFrontBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("loc")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readloc = readOptionOfExpr();
        if (!readWord().equals("atomic")) throw error();
        if (!readWord().equals("=")) throw error();
        boolean readatomic = readBoolean();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readexpr = (Block) readNode();
        return new DoFront(readspan, readloc, readatomic, readexpr);
    }

    private IfClause readIfClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("test")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readtest = (Expr) readNode();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readbody = (Block) readNode();
        return new IfClause(readspan, readtest, readbody);
    }

    private TypecaseClause readTypecaseClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("match")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Type> readmatch = readListOfType();
        if (!readWord().equals("body")) throw error();
        if (!readWord().equals("=")) throw error();
        Block readbody = (Block) readNode();
        return new TypecaseClause(readspan, readmatch, readbody);
    }

    private ExtentRange readExtentRangeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("base")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<StaticArg> readbase = readOptionOfStaticArg();
        if (!readWord().equals("size")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<StaticArg> readsize = readOptionOfStaticArg();
        return new ExtentRange(readspan, readbase, readsize);
    }

    private GeneratorClause readGeneratorClauseBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("bind")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Id> readbind = readListOfId();
        if (!readWord().equals("init")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readinit = (Expr) readNode();
        return new GeneratorClause(readspan, readbind, readinit);
    }

    private VarargsExpr readVarargsExprBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("varargs")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readvarargs = (Expr) readNode();
        return new VarargsExpr(readspan, readvarargs);
    }

    private VarargsType readVarargsTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        return new VarargsType(readspan, readtype);
    }

    private KeywordType readKeywordTypeBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("name")) throw error();
        if (!readWord().equals("=")) throw error();
        Id readname = (Id) readNode();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        Type readtype = (Type) readNode();
        return new KeywordType(readspan, readname, readtype);
    }

    private TraitTypeWhere readTraitTypeWhereBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("type")) throw error();
        if (!readWord().equals("=")) throw error();
        TraitType readtype = (TraitType) readNode();
        if (!readWord().equals("where")) throw error();
        if (!readWord().equals("=")) throw error();
        WhereClause readwhere = (WhereClause) readNode();
        return new TraitTypeWhere(readspan, readtype, readwhere);
    }

    private Indices readIndicesBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("extents")) throw error();
        if (!readWord().equals("=")) throw error();
        List<ExtentRange> readextents = readListOfExtentRange();
        return new Indices(readspan, readextents);
    }

    private ParenthesisDelimitedMI readParenthesisDelimitedMIBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new ParenthesisDelimitedMI(readspan, readexpr);
    }

    private NonParenthesisDelimitedMI readNonParenthesisDelimitedMIBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Expr readexpr = (Expr) readNode();
        return new NonParenthesisDelimitedMI(readspan, readexpr);
    }

    private ExponentiationMI readExponentiationMIBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("op")) throw error();
        if (!readWord().equals("=")) throw error();
        Op readop = (Op) readNode();
        if (!readWord().equals("expr")) throw error();
        if (!readWord().equals("=")) throw error();
        Option<Expr> readexpr = readOptionOfExpr();
        return new ExponentiationMI(readspan, readop, readexpr);
    }

    private SubscriptingMI readSubscriptingMIBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        if (!readWord().equals("op")) throw error();
        if (!readWord().equals("=")) throw error();
        Enclosing readop = (Enclosing) readNode();
        if (!readWord().equals("exprs")) throw error();
        if (!readWord().equals("=")) throw error();
        List<Expr> readexprs = readListOfExpr();
        return new SubscriptingMI(readspan, readop, readexprs);
    }

    private InFixity readInFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new InFixity(readspan);
    }

    private PreFixity readPreFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new PreFixity(readspan);
    }

    private PostFixity readPostFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new PostFixity(readspan);
    }

    private NoFixity readNoFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new NoFixity(readspan);
    }

    private MultiFixity readMultiFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new MultiFixity(readspan);
    }

    private EnclosingFixity readEnclosingFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new EnclosingFixity(readspan);
    }

    private BigFixity readBigFixityBody() throws java.io.IOException {
        if (!readWord().equals("span")) throw error();
        if (!readWord().equals("=")) throw error();
        Span readspan = (Span) readUnknownObject();
        return new BigFixity(readspan);
    }


    private List<Import> readListOfImport() throws java.io.IOException {
        List<Import> result = new java.util.ArrayList<Import>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Import) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<Export> readListOfExport() throws java.io.IOException {
        List<Export> result = new java.util.ArrayList<Export>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Export) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<Decl> readListOfDecl() throws java.io.IOException {
        List<Decl> result = new java.util.ArrayList<Decl>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Decl) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<AbsDecl> readListOfAbsDecl() throws java.io.IOException {
        List<AbsDecl> result = new java.util.ArrayList<AbsDecl>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((AbsDecl) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<SimpleName> readListOfSimpleName() throws java.io.IOException {
        List<SimpleName> result = new java.util.ArrayList<SimpleName>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((SimpleName) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<AliasedSimpleName> readListOfAliasedSimpleName() throws java.io.IOException {
        List<AliasedSimpleName> result = new java.util.ArrayList<AliasedSimpleName>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((AliasedSimpleName) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<AliasedAPIName> readListOfAliasedAPIName() throws java.io.IOException {
        List<AliasedAPIName> result = new java.util.ArrayList<AliasedAPIName>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((AliasedAPIName) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<SimpleName> readOptionOfSimpleName() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            SimpleName elt_result = (SimpleName) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private Option<Id> readOptionOfId() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Id elt_result = (Id) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<APIName> readListOfAPIName() throws java.io.IOException {
        List<APIName> result = new java.util.ArrayList<APIName>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((APIName) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<Modifier> readListOfModifier() throws java.io.IOException {
        List<Modifier> result = new java.util.ArrayList<Modifier>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Modifier) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<StaticParam> readListOfStaticParam() throws java.io.IOException {
        List<StaticParam> result = new java.util.ArrayList<StaticParam>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((StaticParam) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<TraitTypeWhere> readListOfTraitTypeWhere() throws java.io.IOException {
        List<TraitTypeWhere> result = new java.util.ArrayList<TraitTypeWhere>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((TraitTypeWhere) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<TraitType> readListOfTraitType() throws java.io.IOException {
        List<TraitType> result = new java.util.ArrayList<TraitType>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((TraitType) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<List<TraitType>> readOptionOfListOfTraitType() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            List<TraitType> elt_result = readListOfTraitType();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private Option<List<Param>> readOptionOfListOfParam() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            List<Param> elt_result = readListOfParam();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<Param> readListOfParam() throws java.io.IOException {
        List<Param> result = new java.util.ArrayList<Param>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Param) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<LValueBind> readListOfLValueBind() throws java.io.IOException {
        List<LValueBind> result = new java.util.ArrayList<LValueBind>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((LValueBind) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<Type> readOptionOfType() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Type elt_result = (Type) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<ExtentRange> readListOfExtentRange() throws java.io.IOException {
        List<ExtentRange> result = new java.util.ArrayList<ExtentRange>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((ExtentRange) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<Unpasting> readListOfUnpasting() throws java.io.IOException {
        List<Unpasting> result = new java.util.ArrayList<Unpasting>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Unpasting) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<Expr> readOptionOfExpr() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Expr elt_result = (Expr) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<Id> readListOfId() throws java.io.IOException {
        List<Id> result = new java.util.ArrayList<Id>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Id) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<GeneratorClause> readListOfGeneratorClause() throws java.io.IOException {
        List<GeneratorClause> result = new java.util.ArrayList<GeneratorClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((GeneratorClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<QualifiedIdName> readListOfQualifiedIdName() throws java.io.IOException {
        List<QualifiedIdName> result = new java.util.ArrayList<QualifiedIdName>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((QualifiedIdName) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<GrammarMemberDecl> readListOfGrammarMemberDecl() throws java.io.IOException {
        List<GrammarMemberDecl> result = new java.util.ArrayList<GrammarMemberDecl>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((GrammarMemberDecl) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<TraitType> readOptionOfTraitType() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            TraitType elt_result = (TraitType) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private Option<? extends Modifier> readOptionOfModifier() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Modifier elt_result = (Modifier) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<SyntaxDef> readListOfSyntaxDef() throws java.io.IOException {
        List<SyntaxDef> result = new java.util.ArrayList<SyntaxDef>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((SyntaxDef) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<SyntaxSymbol> readListOfSyntaxSymbol() throws java.io.IOException {
        List<SyntaxSymbol> result = new java.util.ArrayList<SyntaxSymbol>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((SyntaxSymbol) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<CharacterSymbol> readListOfCharacterSymbol() throws java.io.IOException {
        List<CharacterSymbol> result = new java.util.ArrayList<CharacterSymbol>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((CharacterSymbol) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<LHS> readListOfLHS() throws java.io.IOException {
        List<LHS> result = new java.util.ArrayList<LHS>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((LHS) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<Op> readOptionOfOp() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Op elt_result = (Op) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<Expr> readListOfExpr() throws java.io.IOException {
        List<Expr> result = new java.util.ArrayList<Expr>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Expr) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<CaseClause> readListOfCaseClause() throws java.io.IOException {
        List<CaseClause> result = new java.util.ArrayList<CaseClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((CaseClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<Block> readOptionOfBlock() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Block elt_result = (Block) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<DoFront> readListOfDoFront() throws java.io.IOException {
        List<DoFront> result = new java.util.ArrayList<DoFront>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((DoFront) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<IfClause> readListOfIfClause() throws java.io.IOException {
        List<IfClause> result = new java.util.ArrayList<IfClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((IfClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<StaticArg> readListOfStaticArg() throws java.io.IOException {
        List<StaticArg> result = new java.util.ArrayList<StaticArg>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((StaticArg) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<Catch> readOptionOfCatch() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Catch elt_result = (Catch) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private Option<VarargsExpr> readOptionOfVarargsExpr() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            VarargsExpr elt_result = (VarargsExpr) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<KeywordExpr> readListOfKeywordExpr() throws java.io.IOException {
        List<KeywordExpr> result = new java.util.ArrayList<KeywordExpr>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((KeywordExpr) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<TypecaseClause> readListOfTypecaseClause() throws java.io.IOException {
        List<TypecaseClause> result = new java.util.ArrayList<TypecaseClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((TypecaseClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<ArrayComprehensionClause> readListOfArrayComprehensionClause() throws java.io.IOException {
        List<ArrayComprehensionClause> result = new java.util.ArrayList<ArrayComprehensionClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((ArrayComprehensionClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<FnDef> readListOfFnDef() throws java.io.IOException {
        List<FnDef> result = new java.util.ArrayList<FnDef>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((FnDef) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<LValue> readListOfLValue() throws java.io.IOException {
        List<LValue> result = new java.util.ArrayList<LValue>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((LValue) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<Enclosing> readOptionOfEnclosing() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Enclosing elt_result = (Enclosing) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<QualifiedOpName> readListOfQualifiedOpName() throws java.io.IOException {
        List<QualifiedOpName> result = new java.util.ArrayList<QualifiedOpName>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((QualifiedOpName) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<Pair<Op, Expr>> readListOfPairOfOpAndExpr() throws java.io.IOException {
        List<Pair<Op, Expr>> result = new java.util.ArrayList<Pair<Op, Expr>>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            @SuppressWarnings("unchecked") Pair<Op, Expr> elt_result = (Pair<Op, Expr>) readUnknownObject();
            result.add(elt_result);
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<MathItem> readListOfMathItem() throws java.io.IOException {
        List<MathItem> result = new java.util.ArrayList<MathItem>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((MathItem) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<ArrayExpr> readListOfArrayExpr() throws java.io.IOException {
        List<ArrayExpr> result = new java.util.ArrayList<ArrayExpr>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((ArrayExpr) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<List<Type>> readOptionOfListOfType() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            List<Type> elt_result = readListOfType();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<Type> readListOfType() throws java.io.IOException {
        List<Type> result = new java.util.ArrayList<Type>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((Type) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<VarargsType> readOptionOfVarargsType() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            VarargsType elt_result = (VarargsType) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<KeywordType> readListOfKeywordType() throws java.io.IOException {
        List<KeywordType> result = new java.util.ArrayList<KeywordType>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((KeywordType) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<WhereBinding> readListOfWhereBinding() throws java.io.IOException {
        List<WhereBinding> result = new java.util.ArrayList<WhereBinding>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((WhereBinding) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private List<WhereConstraint> readListOfWhereConstraint() throws java.io.IOException {
        List<WhereConstraint> result = new java.util.ArrayList<WhereConstraint>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((WhereConstraint) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<List<Expr>> readOptionOfListOfExpr() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            List<Expr> elt_result = readListOfExpr();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private Option<List<EnsuresClause>> readOptionOfListOfEnsuresClause() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            List<EnsuresClause> elt_result = readListOfEnsuresClause();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<EnsuresClause> readListOfEnsuresClause() throws java.io.IOException {
        List<EnsuresClause> result = new java.util.ArrayList<EnsuresClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((EnsuresClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<APIName> readOptionOfAPIName() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            APIName elt_result = (APIName) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private Option<Fixity> readOptionOfFixity() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            Fixity elt_result = (Fixity) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private List<CatchClause> readListOfCatchClause() throws java.io.IOException {
        List<CatchClause> result = new java.util.ArrayList<CatchClause>(0);
        java.lang.String word = readWord();
        if (!word.equals("{")) throw error();
        word = readWord();
        while (word.equals("*")) {
            result.add((CatchClause) readNode());
            word = readWord();
        }
        if (!word.equals("}")) throw error();
        return result;
    }

    private Option<StaticArg> readOptionOfStaticArg() throws java.io.IOException {
        char c = readCharWord();
        if (c == '(') {
            StaticArg elt_result = (StaticArg) readNode();
            c = readCharWord();
            if (c != ')') throw error();
            return edu.rice.cs.plt.tuple.Option.some(elt_result);
        }
        else if (c == '~') { return edu.rice.cs.plt.tuple.Option.none(); }
        else { throw error(); }
    }

    private boolean readBoolean() throws java.io.IOException {
      String word = readWord();
      if (word.equals("true")) return true;
      if (word.equals("false")) return false;
      throw error();
    }
    
    private char readChar() throws java.io.IOException {
      skipTo('"');
      java.lang.String word = readTo('"', true);
      java.lang.String result = unescape(word);
      if (result.length() != 1) throw error();
      return result.charAt(0);
    }
    
    private byte readByte() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Byte.parseByte(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    private short readShort() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Short.parseShort(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    private int readInt() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Integer.parseInt(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    private long readLong() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Long.parseLong(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    private float readFloat() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readFloat(); } // may throw an IOException
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    private double readDouble() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readDouble(); } // may throw an IOException
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    private java.lang.String readString() throws java.io.IOException {
      char delim = skipTo('"', 'n');
      if (delim == 'n') {
        java.lang.String word = readWord();
        if (word.equals("ull")) return null;
        else throw error();
      }
      else {
        java.lang.String word = readTo('"', true);
        return unescape(word);
      }
    }
    
    private java.lang.Object readUnknownObject() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      if (word.equals("null")) return null;
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readObject(); } // may throw an IOException
      catch (java.lang.ClassNotFoundException e) {
        throw new java.io.IOException("ClassNotFoundException: " + e.getMessage());
      }
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    
    /** Read the next word, delimited by whitespace.  Discards the next whitespace char. */
    private java.lang.String readWord() throws java.io.IOException {
      char c = next();
      while (java.lang.Character.isWhitespace(c)) c = next();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      while (!java.lang.Character.isWhitespace(c)) {
        result.append(c);
        c = next();
      }
      return result.toString();
    }
    
    /** Read the next character, skipping any previous whitespace. */
    private char readCharWord() throws java.io.IOException {
      char c = next();
      while (java.lang.Character.isWhitespace(c)) c = next();
      return c;
    }
    
    /**
     * Read up to a delimiter; it is an error if a newline or eof is encountered first.
     * @return The the characters read before the delimiter.
     */
    private java.lang.String readTo(char delim, boolean skipEscape) throws java.io.IOException {
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      boolean escape = false;
      char c = next();
      while (escape || c != delim) {
        if (c == '\n' || c == '\r') throw error();
        result.append(c);
        if (escape) escape = false;
        else if (skipEscape && c == '\\') escape = true;
        c = next();
      }
      return result.toString();
    }
    
    /**
     * Skip to one of the given delimiters; it is an error if a newline or eof is encountered first.
     * @return The delimiter that was found.
     */
    private char skipTo(char... delims) throws java.io.IOException {
      char c = next();
      while (true) {
        if (c == '\n' || c == '\r') throw error();
        for (char delim : delims) {
          if (c == delim) return delim;
        }
        c = next();
      }
    }
    
    private java.lang.String readToNewline() throws java.io.IOException {
      java.lang.String result = in.readLine();
      if (result == null) throw error();
      return result;
    }
    
    private char next() throws java.io.IOException {
      int result = in.read();
      if (result == -1) throw error();
      return (char) result;
    }
    
    /** Unescapes a subset of valid Java-style escaped strings.  Unicode escapes are not
      * supported (the JLS doesn't treat them as part of this escaping process, either).
      * Octal escapes are required to use exactly 3 digits.
      */
    private static java.lang.String unescape(java.lang.String s) throws java.io.IOException {
      boolean escape = false;
      final java.lang.StringBuilder digits = new java.lang.StringBuilder();
      boolean changed = false;
      final java.lang.StringBuilder result = new java.lang.StringBuilder();
      for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (escape) {
          switch (c) {
            case 'b': result.append('\b'); break;
            case 't': result.append('\t'); break;
            case 'n': result.append('\n'); break;
            case 'f': result.append('\f'); break;
            case 'r': result.append('\r'); break;
    
            case '"': case '\'': case '\\':
              result.append(c); break;
    
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
              digits.append(c);
              if (digits.length() == 3) {
                // this should succeed -- there are guaranteed to be 3 octal digits
                result.append((char) java.lang.Integer.parseInt(digits.toString(), 8));
                digits.setLength(0);
              }
              break;
    
            default:
              throw error();
          }
          if (digits.length() == 0) escape = false;
        }
        else {
          if (c == '\\') { escape = true; changed = true; }
          else { result.append(c); }
        }
      }
      if (escape) throw error(); // escape was not completed
      return changed ? result.toString() : s;
    }
    
    /** Treat a string representation of a hexadecimal number as an ObjectInputStream */
    private static java.io.ObjectInputStream toObjectStream(java.lang.String byteString)
        throws java.io.IOException {
      if (byteString.length() % 2 != 0) throw error();
      int length = byteString.length() / 2;
      byte[] bytes = new byte[length];
      for (int i = 0; i < length; i++) {
        java.lang.String b = byteString.substring(i*2, i*2+2);
        try {
          int unsigned = java.lang.Integer.parseInt(b, 16);
          if (unsigned < 128) bytes[i] = (byte) unsigned;
          else bytes[i] = (byte) (unsigned - 256); // maps 255 to -1, 128 to -128
        }
        catch (java.lang.NumberFormatException e) { throw error(); }
      }
      // this may throw an IOException
      return new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes));
    }
    
    private static java.io.IOException error() {
      return new java.io.IOException("Serialized data is not properly encoded");
    }
}

/*
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s): */
package org.netbeans.modules.htmlproject;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.ErrorManager;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author  Tim Boudreau
 */
public class ProjectPropertiesDlg extends javax.swing.JPanel implements DocumentListener, FocusListener, ActionListener {
    private final HtmlProject project;
    /** Creates new form ProjectPropertiesDlg */
    public ProjectPropertiesDlg(HtmlProject project) {
        initComponents();
        mainFileField.setText (project.getMainFilePath());
        nameField.setText (project.getDisplayName());
        mainFileField.getDocument().addDocumentListener(this);
        nameField.getDocument().addDocumentListener(this);
        mainFileField.addFocusListener(this);
        nameField.addFocusListener(this);
        File zipDir = project.getZipFileDir(false);
        if (zipDir != null && zipDir.exists() && zipDir.isDirectory()) {
            zipField.setText(zipDir.getPath());
        }
        zipField.getDocument().addDocumentListener(this);
        zipField.addFocusListener(this);
        browseButton.addActionListener(this);
        browseButton2.addActionListener(this);
        this.project = project;
        DefaultComboBoxModel mdl = new DefaultComboBoxModel();
        for (String s : Charset.availableCharsets().keySet()) {
            mdl.addElement(s);
        }

        encodings.setModel(mdl);

        String s = (String) project.getProjectDirectory().getAttribute("encoding");
        s = s == null ? "UTF-8" : s;
        encodings.setSelectedItem(s);

        change();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        mainLabel = new javax.swing.JLabel();
        mainFileField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        problemLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        zipField = new javax.swing.JTextField();
        browseButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        encodings = new javax.swing.JComboBox();

        nameLabel.setLabelFor(nameField);
        nameLabel.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.nameLabel.text")); // NOI18N

        nameField.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.nameField.text")); // NOI18N
        nameField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.nameField.toolTipText")); // NOI18N

        mainLabel.setLabelFor(mainFileField);
        mainLabel.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.mainLabel.text")); // NOI18N

        mainFileField.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.mainFileField.text")); // NOI18N
        mainFileField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.mainFileField.toolTipText")); // NOI18N

        browseButton.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.browseButton.text")); // NOI18N
        browseButton.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.browseButton.toolTipText")); // NOI18N

        problemLbl.setForeground(java.awt.Color.red);
        problemLbl.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.problemLbl.text")); // NOI18N
        problemLbl.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.jLabel1.text")); // NOI18N

        zipField.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.zipField.text")); // NOI18N
        zipField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.zipField.toolTipText")); // NOI18N

        browseButton2.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.browseButton2.text")); // NOI18N
        browseButton2.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.browseButton2.toolTipText")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesDlg.class, "ProjectPropertiesDlg.jLabel2.text")); // NOI18N

        encodings.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        encodings.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                encodingChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(problemLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(nameLabel)
                    .add(mainLabel)
                    .add(jLabel1)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(nameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, zipField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                            .add(mainFileField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(browseButton2)
                            .add(browseButton)))
                    .add(encodings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 196, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameLabel)
                    .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mainLabel)
                    .add(browseButton)
                    .add(mainFileField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(zipField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(encodings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 95, Short.MAX_VALUE)
                .add(problemLbl))
        );
    }// </editor-fold>//GEN-END:initComponents

private void encodingChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_encodingChanged
    change();
}//GEN-LAST:event_encodingChanged

    public void insertUpdate(DocumentEvent e) {
        change();
    }

    public void removeUpdate(DocumentEvent e) {
        change();
    }

    public void changedUpdate(DocumentEvent e) {
        change();
    }

    public void focusGained(FocusEvent e) {
        JTextComponent c = (JTextComponent) e.getComponent();
        c.selectAll();
    }

    public void focusLost(FocusEvent e) {
        //do nothing
    }

    private ChangeListener l;
    public void setChangeListener (ChangeListener cl) {
        l = cl;
    }

    public void setProblem(String txt) {
        boolean before = isProblem();
        problemLbl.setText (txt);
        boolean after = isProblem();
        if (before != after && l != null) {
            l.stateChanged (new ChangeEvent (this));
        }
    }

    public boolean isProblem() {
        return problemLbl.getText().trim().length() > 0;
    }

    private void change() {
        String main = mainFileField.getText().trim();
        String name = nameField.getText().trim();
        String zip = zipField.getText().trim();
        if (name.length() == 0) {
            setProblem ("Enter a display name for this project");
            return;
        }
        if (name.indexOf('\\') >= 0 || name.indexOf('/') >= 0) {
            setProblem ("\\ and / characters not allowed");
            return;
        }
        if (main.length() > 0) {
            File f = new File(main);
            if (!f.exists()) {
                setProblem("File does not exist (" + f.getPath() + ")");
                return;
            }
            if (!f.isFile()) {
                setProblem("Directories cannot be shown");
                return;
            }
        }
        if (zip.length() > 0) {
            File f = new File(zip);
            if (!f.exists()) {
                setProblem("Directory does not exist (" + f.getPath() + ")");
                return;
            }
            if (!f.isDirectory()) {
                setProblem("ZIP dir is not a directory");
                return;
            }
        }
        setProblem ("");
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == browseButton) {
            browseForMainFile();
        } else {
            browseForZipDir();
        }
    }

    void commit() {
        change();
        if (!isProblem()) {
            try {
                String nm = nameField.getText();
                project.setDisplayName(nm);

                FileObject dir = project.getProjectDirectory();
                String path = mainFileField.getText();
                if (path.length() > 0) {
                    HtmlProjectFactory.putHtmlMainFile(dir, path);
                }

                path = zipField.getText();
                if (path.length() > 0) {
                    HtmlProjectFactory.putHtmlZipDestDir(dir, path);
                }

                project.getProjectDirectory().setAttribute("encoding",  //NOI18N
                        encodings.getSelectedItem());
            } catch (IOException x) {
                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, x);
            }
        }
    }

    private void browseForMainFile() {
        FileObject dir = project.getProjectDirectory();
        String path = HtmlProjectFactory.getProjectMainFile(dir);

        JFileChooser ch = new JFileChooser();
        ch.setDialogType(JFileChooser.CUSTOM_DIALOG);
        ch.setCurrentDirectory(FileUtil.toFile (dir));
        ch.setMultiSelectionEnabled(false);
        ch.setDialogTitle("Choose a File to View on Run");
        ch.setApproveButtonText("Select");
        ch.setFileSelectionMode(JFileChooser.FILES_ONLY);
        ch.setFileHidingEnabled(true);
        if (ch.showOpenDialog(null) == JFileChooser.APPROVE_OPTION &&
                ch.getSelectedFile().exists() && ch.getSelectedFile().canWrite()) {
            path = FileUtil.normalizeFile(ch.getSelectedFile()).getPath();
            mainFileField.setText (path);
        }
    }

    private void browseForZipDir() {
        FileObject dir = project.getProjectDirectory();
        File zipDir = project.getZipFileDir(false);
        String s = HtmlProjectFactory.getZipDestDir(dir);
        File f = FileUtil.toFile(dir);
        f = f.getParentFile();
        JFileChooser ch = new JFileChooser();
        ch.setDialogType(JFileChooser.CUSTOM_DIALOG);
        ch.setCurrentDirectory(f);
        ch.setMultiSelectionEnabled(false);
        ch.setDialogTitle("Choose a Destination Directory for the ZIP File");
        ch.setApproveButtonText("Select");
        ch.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        ch.setFileHidingEnabled(true);
        if (ch.showOpenDialog(null) == JFileChooser.APPROVE_OPTION &&
                ch.getSelectedFile().exists() && ch.getSelectedFile().isDirectory()) {
            s = ch.getSelectedFile().getPath();
            zipField.setText (s);
        }
    }

    static void showDialog (HtmlProject proj) {
        final ProjectPropertiesDlg ppd = new ProjectPropertiesDlg(proj);
        boolean valid = !ppd.isProblem();
        final DialogDescriptor dlg = new DialogDescriptor(ppd, "HTML Project " +
                "Properties - " + proj.getDisplayName(),
                true, DialogDescriptor.OK_CANCEL_OPTION, DialogDescriptor.OK_OPTION, null);
        dlg.setValid(valid);

        ChangeListener l = new ChangeListener() {
            public void stateChanged (ChangeEvent e) {
                boolean isValid = !ppd.isProblem();
                dlg.setValid (isValid);
            }
        };
        ppd.setChangeListener(l);

        if (DialogDescriptor.OK_OPTION.equals(DialogDisplayer.getDefault().notify(dlg))) {
            ppd.commit();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton browseButton2;
    private javax.swing.JComboBox encodings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField mainFileField;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel problemLbl;
    private javax.swing.JTextField zipField;
    // End of variables declaration//GEN-END:variables

}

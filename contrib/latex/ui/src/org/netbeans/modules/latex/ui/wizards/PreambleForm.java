/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is the LaTeX module.
 * The Initial Developer of the Original Software is Jan Lahoda.
 * Portions created by Jan Lahoda_ are Copyright (C) 2002,2003.
 * All Rights Reserved.
 *
 * Contributor(s): Jan Lahoda.
 */
package org.netbeans.modules.latex.ui.wizards;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.DefaultComboBoxModel;
import org.netbeans.modules.latex.model.command.CommandPackage;
import org.netbeans.modules.latex.model.command.Option;

/**
 *
 * @author Jan Lahoda
 */
public class PreambleForm extends javax.swing.JPanel {

    /** Creates new form PreambleForm */
    public PreambleForm() {
        initComponents();
        adjustTo(getDocumentClass()); //???
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        documentClassCombo = new javax.swing.JComboBox();
        fontSizes = new javax.swing.JComboBox();
        paperSizes = new javax.swing.JComboBox();
        inputEncoding = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        authorField = new javax.swing.JTextField();
        titleField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        optionsList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setLabelFor(documentClassCombo);
        jLabel1.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_documentclass"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 6);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_fontsize"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 6);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_papersize"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 6);
        add(jLabel3, gridBagConstraints);

        jLabel4.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_inputencoding"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 6);
        add(jLabel4, gridBagConstraints);

        documentClassCombo.setModel(new DefaultComboBoxModel(getValidDocumentClasses()));
        documentClassCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                documentClassComboItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 11, 0);
        add(documentClassCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 11, 0);
        add(fontSizes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 11, 0);
        add(paperSizes, gridBagConstraints);

        inputEncoding.setModel(new DefaultComboBoxModel(CommandPackage.getCommandPackageForName("inputenc").getOptions().keySet().toArray()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 11, 0);
        add(inputEncoding, gridBagConstraints);

        jButton1.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_addnew"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(jButton1, gridBagConstraints);

        jButton2.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_addnew"));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(jButton2, gridBagConstraints);

        jButton3.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_addnew"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(jButton3, gridBagConstraints);

        jButton4.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_addnew"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(jButton4, gridBagConstraints);

        jLabel5.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_author"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 6);
        add(jLabel5, gridBagConstraints);

        jLabel6.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_title"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 6);
        add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 11, 0);
        add(authorField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 11, 0);
        add(titleField, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        optionsList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        optionsList.setVisibleRowCount(3);
        jScrollPane1.setViewportView(optionsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jScrollPane1, gridBagConstraints);

        jLabel7.setLabelFor(optionsList);
        jLabel7.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/latex/ui/wizards/Bundle").getString("LBL_options"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        add(jLabel7, gridBagConstraints);

    }//GEN-END:initComponents

    private void adjustTo(CommandPackage docclass) {
        Collection options = new ArrayList(docclass.getOptions().values());
        Collection paperSizesCol = new ArrayList();
        Collection fontSizesCol  = new ArrayList();
        Collection optionsCol    = new ArrayList();
        
        for (Iterator iter = options.iterator(); iter.hasNext(); ) {
            Option current = (Option) iter.next();
            
            if (current.hasAttribute("fontsize"))
                fontSizesCol.add(current.getName());
            else
                if (current.hasAttribute("papersize"))
                    paperSizesCol.add(current.getName());
                else
                    optionsCol.add(current.getName());
        }
        
        optionsList.setListData(optionsCol.toArray());
        fontSizes.setModel(new DefaultComboBoxModel(fontSizesCol.toArray()));
        paperSizes.setModel(new DefaultComboBoxModel(paperSizesCol.toArray()));
    }
    
    
    private String[] getValidDocumentClasses() {
        Collection result = new ArrayList();
        CommandPackage defaultDC = CommandPackage.getDefaultDocumentClass();
        
        for (Iterator i = CommandPackage.getKnownDocumentClasses().iterator(); i.hasNext(); ) {
            String name = (String) i.next();
            
            CommandPackage cp = CommandPackage.getCommandPackageForName(name);
            
            if (cp != defaultDC)
                result.add(name);
        }
        
        return (String[] ) result.toArray(new String[result.size()]);
    }
    
    public CommandPackage getDocumentClass() {
        return CommandPackage.getCommandPackageForName(documentClassCombo.getSelectedItem().toString());
    }
    
    public void setDocumentClass(CommandPackage docclass) {
        documentClassCombo.setSelectedItem(docclass.getName()); //!!!
    }
    
    public Option getFontSize() {
        Object selected = fontSizes.getSelectedItem();
        
        if (selected == null)
            return null;
        
        return (Option) getDocumentClass().getOptions().get(selected.toString());
    }
    
    public void setFontSize(Option fontSizeVal) {
        fontSizes.setSelectedItem(fontSizeVal.getName()); //!!!
    }
    
    public Option getPaperSize() {
        Object selected = paperSizes.getSelectedItem();
        
        if (selected == null)
            return null;
        
        return (Option) getDocumentClass().getOptions().get(selected.toString());
    }
    
    public void setPaperSize(Option paperSizeVal) {
        paperSizes.setSelectedItem(paperSizeVal.getName());  //!!!!
    }
    
    public Option getInputEnc() {
        Object selected = inputEncoding.getSelectedItem();
        
        if (selected == null)
            return null;
        
        return (Option) CommandPackage.getCommandPackageForName("inputenc").getOptions().get(selected.toString());
    }
    
    public void setInputEnc(Option inputEncVal) {
        inputEncoding.setSelectedItem(inputEncVal.getName());
    }
    
    public String getAuthor() {
        return authorField.getText();
    }
    
    public void setAuthor(String authorVal) {
        authorField.setText(authorVal);
    }
    
    public String getTitle() {
        return titleField.getText();
    }
    
    public void setTitle(String titleVal) {
        titleField.setText(titleVal);
    }
    
    public Option[] getOptions() {
        Object[] options = optionsList.getSelectedValues();
        Option[] result = new Option[options.length];
        
        for (int cntr = 0; cntr < options.length; cntr++) {
            result[cntr] = (Option) getDocumentClass().getOptions().get(options[cntr].toString());
        }
        
        return result;
    }
    
    public void setOptions(Option[] values) {
        //.....
    }
    
    private void documentClassComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_documentClassComboItemStateChanged
        // Add your handling code here:
        adjustTo(getDocumentClass());
    }//GEN-LAST:event_documentClassComboItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorField;
    private javax.swing.JComboBox documentClassCombo;
    private javax.swing.JComboBox fontSizes;
    private javax.swing.JComboBox inputEncoding;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList optionsList;
    private javax.swing.JComboBox paperSizes;
    private javax.swing.JTextField titleField;
    // End of variables declaration//GEN-END:variables
    
}

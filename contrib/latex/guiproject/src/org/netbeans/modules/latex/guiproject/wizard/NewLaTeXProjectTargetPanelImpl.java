/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is the LaTeX module.
 * The Initial Developer of the Original Software is Jan Lahoda.
 * Portions created by Jan Lahoda_ are Copyright (C) 2002-2004.
 * All Rights Reserved.
 *
 * Contributor(s): Jan Lahoda.
 */
package org.netbeans.modules.latex.guiproject.wizard;
import java.awt.Color;

import java.io.File;
import javax.swing.JFileChooser;

import javax.swing.event.DocumentEvent;


import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;


import org.openide.WizardDescriptor;

/**
 *
 * @author Jan Lahoda
 */
public class NewLaTeXProjectTargetPanelImpl extends javax.swing.JPanel implements DocumentListener {

    public static final String PROP_VALID = "valid";

    /** Creates new form NewLaTeXProjectTargetPanelImpl */
    public NewLaTeXProjectTargetPanelImpl() {
        initComponents();
        fileName.getDocument().addDocumentListener(this);
        metadataDir.getDocument().addDocumentListener(this);
        metadataName.getDocument().addDocumentListener(this);
        fileName.setText(System.getProperty("user.home"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        metadataDir = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        metadataName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        createdMetadata = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        createdFile = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Main LaTeX File:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel1, gridBagConstraints);

        fileName.setText("jTextField1");
        fileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fileNameKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(fileName, gridBagConstraints);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        add(jButton1, new java.awt.GridBagConstraints());

        jLabel2.setText("Metadata directory location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel2, gridBagConstraints);

        metadataDir.setText("jTextField2");
        metadataDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataDirActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(metadataDir, gridBagConstraints);

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(jButton2, gridBagConstraints);

        jLabel3.setText("Metadata directory name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel3, gridBagConstraints);

        metadataName.setText("jTextField3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(metadataName, gridBagConstraints);

        jLabel4.setText("Created directory:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel4, gridBagConstraints);

        createdMetadata.setEditable(false);
        createdMetadata.setText("jTextField4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(createdMetadata, gridBagConstraints);

        jLabel5.setText("Created file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jLabel5, gridBagConstraints);

        createdFile.setEditable(false);
        createdFile.setText("jTextField5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(createdFile, gridBagConstraints);

    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(metadataDir.getText());
        
        chooser.setApproveButtonText("Select");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                return f.isDirectory();
            }
            public String getDescription() {
                return "Directories only";
            }
        });
        
        int result = chooser.showDialog(null,null);
        
        switch (result) {
            case JFileChooser.APPROVE_OPTION:
                metadataDir.setText(chooser.getSelectedFile().getAbsolutePath());
                break;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        File currentMainFile = new File(fileName.getText());
//        File currentDir = currentMainFile.isDirectory() ? currentMainFile : currentMainFile.getParentFile();
        JFileChooser chooser = new JFileChooser(fileName.getText());
        
        chooser.setApproveButtonText("Select");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = chooser.showDialog(null,null);
        
        switch (result) {
            case JFileChooser.APPROVE_OPTION:
                fileName.setText(chooser.getSelectedFile().getAbsolutePath());
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void metadataDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataDirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metadataDirActionPerformed

    
    private void fileNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileNameKeyTyped

    }//GEN-LAST:event_fileNameKeyTyped
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField createdFile;
    private javax.swing.JTextField createdMetadata;
    private javax.swing.JTextField fileName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField metadataDir;
    private javax.swing.JTextField metadataName;
    // End of variables declaration//GEN-END:variables
    
    private Color originalCreatedFileForegroundColor = null;
    private Color originalCreatedMetadataForegroundColor = null;
    private boolean createdMetadataXWasChanged = false;
    
    private boolean valid = false;
    
    public boolean isValid() {
        return valid;
    }
    
    private void updateTexts(DocumentEvent evt) {
        boolean oldValid = valid;
        
        valid = true;
        
        // TODO add your handling code here:
        //update the "file to create" field.
        String file = fileName.getText();
        File   fileFile = new File(file);
        
        if (!fileFile.isDirectory()) {
            file = NewLaTeXGUIProjectWizardIterator.constructRealMainFileName(file);
            fileFile = new File(file);
        }
        
        if (originalCreatedFileForegroundColor == null)
            originalCreatedFileForegroundColor = createdFile.getForeground();
        
        if (fileFile.exists()) {
            if (fileFile.isDirectory()) {
                createdFile.setForeground(Color.RED);
                createdFile.setText("File " + file + " is a directory!");
                valid = false;
            } else {
                createdFile.setForeground(originalCreatedFileForegroundColor);
                createdFile.setText("File " + file + " already exists and will not be created.");
            }
        } else {
            createdFile.setForeground(originalCreatedFileForegroundColor);
            createdFile.setText(file);
        }
        
        if (originalCreatedMetadataForegroundColor == null)
            originalCreatedMetadataForegroundColor = createdMetadata.getForeground();
        
        createdMetadataXWasChanged = createdMetadataXWasChanged || evt.getDocument() == metadataDir.getDocument() || evt.getDocument() == metadataName.getDocument();

        if (!createdMetadataXWasChanged) {
            metadataDir.setText(fileFile.getParent());
            metadataName.setText("nbproject-" + fileFile.getName());
            createdMetadataXWasChanged = false;
        }
        
        File metadataDirFile = new File(metadataDir.getText(), metadataName.getText());
        
        if (metadataDirFile.exists()) {
            createdMetadata.setForeground(Color.RED);
            createdMetadata.setText("Directory " + metadataDirFile.getAbsolutePath() + " already exists.");
            valid = false;
        } else {
            createdMetadata.setForeground(originalCreatedMetadataForegroundColor);
            createdMetadata.setText(metadataDirFile.getAbsolutePath());
        }
        
        firePropertyChange(PROP_VALID, oldValid, valid);
    }

    public void changedUpdate(DocumentEvent evt) {
        updateTexts(evt);
    }

    public void insertUpdate(DocumentEvent evt) {
        updateTexts(evt);
    }

    public void removeUpdate(DocumentEvent evt) {
        updateTexts(evt);
    }
    
    public void store(WizardDescriptor d) {
        d.putProperty(DataNames.DATA_STORED, Boolean.TRUE);
        d.putProperty(DataNames.MAIN_FILE, fileName.getText());
        d.putProperty(DataNames.METADATA_DIR, metadataDir.getText());
        d.putProperty(DataNames.METADATA_NAME, metadataName.getText());
        d.putProperty(DataNames.CREATED_METADATA_CHANGED, Boolean.valueOf(createdMetadataXWasChanged));
    }
    
    public void load(WizardDescriptor d) {
        if (d.getProperty(DataNames.DATA_STORED) == null)
            return ;
        
        fileName.setText((String) d.getProperty(DataNames.MAIN_FILE));
        metadataDir.setText((String) d.getProperty(DataNames.METADATA_DIR));
        metadataName.setText((String) d.getProperty(DataNames.METADATA_NAME));
        createdMetadataXWasChanged = ((Boolean) d.getProperty(DataNames.CREATED_METADATA_CHANGED)).booleanValue();
        
    }
    
}

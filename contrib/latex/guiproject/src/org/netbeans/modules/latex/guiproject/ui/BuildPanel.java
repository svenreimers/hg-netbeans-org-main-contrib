/*
 *                          Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License Version
 * 1.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is available at http://www.sun.com/
 *
 * The Original Code is the LaTeX module.
 * The Initial Developer of the Original Code is Jan Lahoda.
 * Portions created by Jan Lahoda_ are Copyright (C) 2002-2004.
 * All Rights Reserved.
 *
 * Contributor(s): Jan Lahoda.
 */
package org.netbeans.modules.latex.guiproject.ui;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collection;
import javax.swing.DefaultComboBoxModel;
import org.netbeans.modules.latex.guiproject.LaTeXGUIProject;
import org.openide.ErrorManager;

/**
 *
 * @author Jan Lahoda
 */
public class BuildPanel extends javax.swing.JPanel implements StorableSettingsPresenter {
    
    private String label;
    private String propertyName;
    private Collection targets;
    
    /** Creates new form BuildPanel */
    public BuildPanel(String label, Collection targets, String propertyName) {
        this.label = label;
        this.propertyName = propertyName;
        this.targets = targets;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(label
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        add(jLabel1, gridBagConstraints);

        jComboBox1.setModel(new DefaultComboBoxModel(getBuildCommandsList().toArray()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(jComboBox1, gridBagConstraints);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
    private PropertyDescriptor findPropertyDescriptor(BeanInfo info, String propertyName) {
        PropertyDescriptor[] pds = info.getPropertyDescriptors();
        
        for (int cntr = 0; cntr < pds.length; cntr++) {
            PropertyDescriptor pd = pds[cntr];
            if (propertyName.equals(pd.getName()))
                return pd;
        }
        
        return null;
    }
    
    public void load(ProjectSettings settings) {
        try {
            BeanInfo propertySettingsInfo = Introspector.getBeanInfo(ProjectSettings.class);
            PropertyDescriptor property = findPropertyDescriptor(propertySettingsInfo, propertyName);
            
            assert property != null;
            assert property.getReadMethod() != null;
            assert property.getWriteMethod() != null;
            
            Method read = property.getReadMethod();
            String defaultTarget = (String) read.invoke(settings, new Object[0]);
            
            jComboBox1.setSelectedItem(defaultTarget);
        } catch (IntrospectionException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        } catch (IllegalAccessException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        } catch (IllegalArgumentException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        } catch (InvocationTargetException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        }
    }
    
    public void store(ProjectSettings settings) {
        try {
            BeanInfo propertySettingsInfo = Introspector.getBeanInfo(ProjectSettings.class);
            PropertyDescriptor property = findPropertyDescriptor(propertySettingsInfo, propertyName);
            
            assert property != null;
            assert property.getReadMethod() != null;
            assert property.getWriteMethod() != null;
            
            Method write = property.getWriteMethod();
            
            write.invoke(settings, new Object[] {jComboBox1.getSelectedItem()});
        } catch (IntrospectionException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        } catch (IllegalAccessException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        } catch (IllegalArgumentException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        } catch (InvocationTargetException e) {
            IllegalStateException ex = new IllegalStateException(e.getMessage());
            
            ErrorManager.getDefault().annotate(ex, e);
            throw ex;
        }
    }
    
    private Collection getBuildCommandsList() {
        return targets;
    }

}

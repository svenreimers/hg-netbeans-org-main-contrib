Index: autoupdate/build.xml
===================================================================
RCS file: /cvs/autoupdate/build.xml,v
retrieving revision 1.40
diff -u -r1.40 build.xml
--- autoupdate/build.xml	14 Feb 2003 08:48:28 -0000	1.40
+++ autoupdate/build.xml	3 Nov 2003 15:22:08 -0000
@@ -22,29 +22,22 @@
   <taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" classpath="../nbbuild/nbantext.jar"/>
   <taskdef name="locjar" classname="org.netbeans.nbbuild.LocalizedJar" classpath="../nbbuild/nbantext.jar"/>
   <taskdef name="genlist" classname="org.netbeans.nbbuild.MakeListOfNBM" classpath="../nbbuild/nbantext.jar"/>
-
-  <path id="xml-apis-cp">
-    <fileset dir="../core/external">
-      <include name="xml-apis*.jar"/>
-    </fileset>
+  
+  <path id="cp">
+    <pathelement location="../openide/openide-13javac-workaround.jar"/>
+    <pathelement location="../openide/netbeans/lib/openide.jar"/>
+    <pathelement location="libsrc"/>
+    <pathelement location="../core/netbeans/lib/core.jar"/>
+    <!-- src must be on classpath, otherwise AspectJ compiler (ajc) wouldn't compile -->
+    <!-- commenting out for now, readd if required: -jglick
+    <pathelement location="src" />
+    -->
   </path>
 
   <target name="compile">
-    <javac srcdir="libsrc" destdir="libsrc" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
-      <classpath refid="xml-apis-cp"/>
-    </javac>
+    <javac srcdir="libsrc" destdir="libsrc" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}"/>
     <javac srcdir="src" destdir="src" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
-      <classpath>
-        <pathelement location="../openide/openide-13javac-workaround.jar"/>
-        <pathelement location="../openide/netbeans/lib/openide.jar"/>
-        <pathelement location="libsrc"/>
-	<pathelement location="../core/netbeans/lib/core.jar"/>
-        <path refid="xml-apis-cp"/>
-        <!-- src must be on classpath, otherwise AspectJ compiler (ajc) wouldn't compile -->
-        <!-- commenting out for now, readd if required: -jglick
-        <pathelement location="src" />
-        -->
-      </classpath>
+      <classpath refid="cp" />
     </javac>
   </target>
 
@@ -101,35 +94,15 @@
   </target>
 
   <target name="javadoc" description="Build autoupdate module API documentation.">
-    <tstamp/>
-    <property name="apis-footer" value="&lt;font size=-2 color=gray&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/font&gt;"/>
-    <echo message="Build autoupdate module API documentation..."/>
-    <mkdir dir="javadoc"/>
-    <javadoc destdir="javadoc"
-             packagenames="org.netbeans.updater,org.netbeans.modules.autoupdate"
-             doctitle="NetBeans autoupdate module APIs"
-             windowtitle="NetBeans autoupdate module APIs"
-             bottom="${apis-footer}"
-             use="true"
-             splitindex="true"
-             author="false"
-             version="false"
-             maxmemory="384m"
-    >
-      <sourcepath>
-        <pathelement location="src"/>
-        <pathelement location="libsrc"/>
-      </sourcepath>
-      <classpath>
-        <!-- this classpath probably should be the same as for compilation -->
-        <pathelement location="../openide/openide-13javac-workaround.jar"/>
-        <pathelement location="libsrc"/>
-        <fileset dir="../openide/netbeans/lib">
-          <include name="openide*.jar" />
-        </fileset>
-        <path refid="xml-apis-cp"/>
-      </classpath>
-    </javadoc>    
+        <ant dir="../nbbuild/javadoctools" antfile="template.xml" target="javadoc">
+            <property name="javadoc.base" location="."/>
+            <property name="javadoc.name" value="AutoUpdateAPI"/>
+            <property name="javadoc.title" value="Auto Update API"/>
+            <property name="javadoc.packages" value=""/>
+            <property name="javadoc.classpath" refid="cp"/>
+            <property name="javadoc.arch" location="arch/arch-autoupdate.xml"/>
+<!--            <property name="javadoc.docfiles" location="api/doc"/> -->
+        </ant>
   </target>
 
 </project>
Index: nbbuild/build.xml
===================================================================
RCS file: /cvs/nbbuild/build.xml,v
retrieving revision 1.293.2.11
diff -u -r1.293.2.11 build.xml
--- nbbuild/build.xml	22 May 2003 18:44:55 -0000	1.293.2.11
+++ nbbuild/build.xml	3 Nov 2003 15:22:11 -0000
@@ -768,13 +768,40 @@
 
   <!-- build javadoc for selected modules -->
   <target name="build-javadoc" depends="merge">
+      <mkdir dir="modules_exported_interfaces" />
+      <property name="export.interfaces" location="modules_exported_interfaces" />
+      
       <!-- build javadoc for supported APIs -->
       <for-each startdir=".." target="javadoc" locations="${fixedmodules}"/>
       <!-- build javadoc for unsupported APIs -->
       <for-each startdir=".." target="javadoc" locations="${modules}"/>
       <taskdef name="simplemerge" classname="org.netbeans.nbbuild.SimpleMerge" classpath="nbantext.jar"/>
       <simplemerge topdir=".." subdir="javadoc" dest="modules_javadoc" modules="${fixedmodules}"/>
-      <simplemerge topdir=".." subdir="javadoc" dest="modules_javadoc/UnsupportedAPIs" modules="${modules}"/>
+      <simplemerge topdir=".." subdir="javadoc" dest="modules_javadoc" modules="${modules}"/>
+      
+      
+      <echo file="modules_exported_interfaces/header.gen" >&lt;?xml version="1.0" encoding="UTF-8"?&gt;
+&lt;apis&gt;
+</echo>
+      
+      <echo file="modules_exported_interfaces/footer.gen" >
+        &lt;/apis&gt;
+      </echo>
+      
+      <concat destfile="modules_javadoc/index.xml" >
+          <fileset dir="modules_exported_interfaces" includes="header.gen" />
+          <fileset dir="modules_exported_interfaces" includes="*" excludes="*.gen" />
+          <fileset dir="modules_exported_interfaces" includes="footer.gen" />
+      </concat>
+      
+      <style 
+        in="modules_javadoc/index.xml" 
+        out="modules_javadoc/index.html" 
+        style="javadoctools/export2html.xsl"
+      />
+      
+      <delete dir="modules_exported_interfaces" />
+      
   </target>
 
   <target name="build-messaging" depends="init">
Index: nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd,v
retrieving revision 1.3.6.1
diff -u -r1.3.6.1 Arch.dtd
--- nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd	22 Apr 2003 14:35:28 -0000	1.3.6.1
+++ nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd	3 Nov 2003 15:22:11 -0000
@@ -80,6 +80,7 @@
 <!ELEMENT question (#PCDATA | %inline; | hint)* >
 <!ATTLIST question
           id CDATA #REQUIRED
+          when CDATA #IMPLIED
 >
 
 <!ELEMENT hint %Flow; >
Index: nbbuild/antsrc/org/netbeans/nbbuild/Arch-api-questions.xml
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/Arch-api-questions.xml,v
retrieving revision 1.11.4.1
diff -u -r1.11.4.1 Arch-api-questions.xml
--- nbbuild/antsrc/org/netbeans/nbbuild/Arch-api-questions.xml	22 Apr 2003 14:35:28 -0000	1.11.4.1
+++ nbbuild/antsrc/org/netbeans/nbbuild/Arch-api-questions.xml	11 Nov 2003 14:35:00 -0000
@@ -1,17 +1,36 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+                Sun Public License Notice
+
+The contents of this file are subject to the Sun Public License
+Version 1.0 (the "License"). You may not use this file except in
+compliance with the License. A copy of the License is available at
+http://www.sun.com/
+
+The Original Code is NetBeans. The Initial Developer of the Original
+Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
+Microsystems, Inc. All Rights Reserved.
+-->
 
 <!--
-    Document   : api-questions.xml
-    Created on : November 4, 2002, 10:28 AM
     Author     : Jaroslav Tulach
     Description: Questions that should be answered in order to make better API
-        
+
+    No PUBLIC or SYSTEM IDs defined currently.
 -->
 
 
-<api-questions version="1.12" date="$date: $" >
+<!--
+                        *** ATTENTION EDITORS ***
+Please increment the 'version' field of <api-questions> whenever you make a
+semantic change: adding a new question or significantly changing the meaning of
+an old one. Changing this field ensures that arch pages answering the old version
+print a warning during Javadoc generation. If you only change hints or make small
+edits in the text of a question, you need not change the version number.
+-->
+<api-questions version="1.23">
     <category id="arch" name="General Information">
-        <question id="arch-what">
+        <question id="arch-what" when="init" >
             What is this project good for?
             <hint>
             Please provide here a few lines describing the project, 
@@ -20,28 +39,67 @@
             </hint>
         </question>
         
+        <question id="arch-overall" when="init">
+            Describe the overall architecture. 
+            <hint>
+            What will be API for 
+            <a href="http://openide.netbeans.org/tutorial/api-design.html#design.apiandspi">
+                clients and what support API</a>? 
+            What parts will be pluggable?
+            How will plug-ins be registered? Please use <code>&lt;api type="export"/&gt;</code>
+            to describe your general APIs.
+            If possible please provide 
+            simple diagrams. 
+            </hint>
+        </question>
+        
+        <question id="arch-usecases" when="init">
+            Describe the main <a href="http://openide.netbeans.org/tutorial/api-design.html#usecase">
+            use cases</a> of the new API. Who will use it at
+            what circumstances and what will be the typical code to write
+            to use the module.
+        </question>
+        
+        <question id="arch-time" when="init">
+            What are the time estimates of the work?
+            <hint>
+            Please express your estimates of how long the design, implementation,
+            stabilization are likely to last. How many people will be needed to
+            implement this and what is the expected milestone the work should be 
+            ready.
+            </hint>
+        </question>
+        
+        <question id="arch-quality" when="init">
+            How the quality of your code will be tested and 
+            how future regressions are going to be prevented?
+            <hint>
+            What kind of testing you want to use? What/how much area of functionality
+            should be covered by the tests? 
+            </hint>
+        </question>
     </category>
     <category id="dep" name="Project and platform dependencies">
-        <question id="dep-nb">
-            What other NetBeans projects does this one depend on?
+        <question id="dep-nb" when="init" >
+            What other NetBeans projects and modules does this one depend on?
             <hint>
             If you want, describe such projects as imported API using
             the <code>&lt;api name="identification" type="import or export" category="stable" url="where is the description" /&gt;</code>
             </hint>
         </question>
         
-        <question id="dep-non-nb">
+        <question id="dep-non-nb" when="init" >
             What other projects outside NetBeans does this one depend on?
             
             <hint>
             Some non-NetBeans projects are packaged as NetBeans modules
             (see <a href="http://libs.netbeans.org/">libraries</a>) and
-            it is prefered to use this approach when more modules may
+            it is preferred to use this approach when more modules may
             depend on such third-party library.
             </hint>
         </question>
         
-        <question id="dep-platform">
+        <question id="dep-platform" when="init" >
             On which platforms does your module run? Does it run in the same
             way on each?
             <hint>
@@ -50,7 +108,7 @@
             </hint>
         </question>
         
-        <question id="dep-jre">
+        <question id="dep-jre" when="final" >
             Which version of JRE do you need (1.2, 1.3, 1.4, etc.)?
             <hint>
             It is expected that if your module runs on 1.x that it will run 
@@ -59,14 +117,14 @@
             </hint>
         </question>
 
-        <question id="dep-jrejdk">
+        <question id="dep-jrejdk" when="final" >
             Do you require the JDK or is the JRE enough?
         </question>
                 
     </category>
 
     <category id="deploy" name="Deployment">
-        <question id="deploy-jar">
+        <question id="deploy-jar" when="impl" >
             Do you deploy just module JAR file(s) or other files as well?
             <hint>
             If your module consists of just one module JAR file, just confirm that.
@@ -74,19 +132,19 @@
             they refer to each other. 
             If it consist of module JAR(s) and other files, please describe
             what is their purpose, why other files are necessary. Please 
-            make sure that installation/deinstallation leaves the system 
+            make sure that installation/uninstallation leaves the system 
             in state as it was before installation.
             </hint>
         </question>
     
-        <question id="deploy-nbm">
+        <question id="deploy-nbm" when="impl" >
             Can you deploy an NBM via the Update Center?
             <hint>
             If not why?
             </hint>
         </question>
         
-        <question id="deploy-shared">
+        <question id="deploy-shared" when="final" >
             Do you need to be installed in the shared location only, or in the user directory only,
             or can your module be installed anywhere?
             <hint>
@@ -96,7 +154,7 @@
         </question>
         
         
-        <question id="deploy-packages">
+        <question id="deploy-packages" when="init" >
             Are packages of your module made inaccessible by not declaring them
             public?
             
@@ -104,29 +162,41 @@
             NetBeans module system allows restriction of access rights to
             public classes of your module from other modules. This prevents
             unwanted dependencies of others on your code and should be used
-            whenever possible (<a href="http://www.netbeans.org/download/apis/org/openide/doc-files/upgrade.html#3.4-public-packages">
+            whenever possible (<a href="http://www.netbeans.org/download/javadoc/OpenAPIs/org/openide/doc-files/upgrade.html#3.4-public-packages">
             public packages
-            </a>). 
+            </a>). If you do not restrict access to your classes you are
+            making it too easy for other people to misuse your implementation
+            details, that is why you should have good reason for not 
+            restricting package access.
+            </hint>
+        </question>
+
+        <question id="deploy-dependencies" when="final" >
+            What do other modules need to do to declare a dependency on this one?
+            <hint>
+                Provide a sample of the actual lines you would add to a module manifest
+                to declare a dependency, for example using OpenIDE-Module-Module-Dependencies
+                or OpenIDE-Module-Requires. You may use the magic token @SPECIFICATION-VERSION@
+                to represent the current specification version of the module.
             </hint>
         </question>
-        
         
     </category>
     
     <category id="compat" name="Compatibility with environment">
-        <question id="compat-i18n">
+        <question id="compat-i18n" when="impl" >
             Is your module correctly internationalized?
             <hint>
-            Correct internationalization means that it obeys instuctions 
+            Correct internationalization means that it obeys instructions 
             at <a href="http://www.netbeans.org/download/dev/javadoc/OpenAPIs/org/openide/doc-files/i18n-branding.html">
             NetBeans I18N pages</a>.
             </hint>
         </question>
-        <question id="compat-standards">
+        <question id="compat-standards" when="init" >
             Does the module implement or define any standards? Is the 
             implementation exact or does it deviate somehow?
         </question>
-        <question id="compat-version">
+        <question id="compat-version" when="impl" >
             Can your module coexist with earlier and future
             versions of itself? Can you correctly read all old settings? Will future
             versions be able to read your current settings? Can you read
@@ -141,18 +211,18 @@
     </category>
     
     <category id="resources" name="Access to resources">
-        <question id="resources-file">
+        <question id="resources-file" when="final">
             Does your module use <code>java.io.File</code> directly?
             
             <hint>
             NetBeans provide a logical wrapper over plain files called 
             <code>org.openide.filesystems.FileObject</code> that
-            provides uniform access to such resources and is the prefered
+            provides uniform access to such resources and is the preferred
             way that should be used. But of course there can be situations when
             this is not suitable.
             </hint>
         </question>
-        <question id="resources-layer">
+        <question id="resources-layer" when="final">
             Does your module provide own layer? Does it create any files or
             folders in it? What it is trying to communicate by that and with which 
             components?
@@ -166,18 +236,18 @@
             </hint>
         </question>
         
-        <question id="resources-read">
+        <question id="resources-read" when="final">
             Does your module read any resources from layers? For what purpose?
             
             <hint>
             As this is some kind of intermodule dependency, it is a kind of API.
-            Please describe it and clasify according to 
+            Please describe it and classify according to 
             <a href="http://openide.netbeans.org/tutorial/api-design.html#categories">
             common stability categories</a>.
             </hint>
         </question>
         
-        <question id="resources-mask">
+        <question id="resources-mask" when="final">
             Does your module mask/hide/override any resources provided by other modules in
             their layers?
             
@@ -192,25 +262,25 @@
 
     
     <category id="lookup" name="Lookup of components">
-        <question id="lookup-lookup">
+        <question id="lookup-lookup" when="init" >
             Does your module use <code>org.openide.util.Lookup</code>
             to find any components to communicate with? Which ones?
             
             <hint>
             Please describe the interfaces you are searching for, where 
             are defined, whether you are searching for just one or more of them,
-            if the order is important, etc. Also clasify the stability of such
+            if the order is important, etc. Also classify the stability of such
             API contract.
             </hint>
         </question>
-        <question id="lookup-register">
+        <question id="lookup-register" when="final" >
             Do you register anything into lookup for other code to find?
             <hint>
             Do you register using layer file or using <code>META-INF/services</code>?
             Who is supposed to find your component?
             </hint>
         </question>
-        <question id="lookup-remove">
+        <question id="lookup-remove" when="final" >
             Do you remove entries of other modules from lookup?
             <hint>
             Why? Of course, that is possible, but it can be dangerous. Is the module
@@ -220,59 +290,60 @@
     </category>
 
     
-    <!-- clasification of interfaces -->
+    <!-- classification of interfaces -->
     
     <!-- package names -->
     
     
     <category id="exec" name="Execution Environment">
-        <question id="exec-property">
+        <question id="exec-property" when="impl" >
             Is execution of your code influenced by any environment or
             Java system (<code>System.getProperty</code>) property?
             
             <hint>
-            If there is a property that can change the behaviour of your 
+            If there is a property that can change the behavior of your 
             code, somebody will likely use it. You should describe what it does 
-            and the stability category of this API. You may use
+            and the <a href="http://openide.netbeans.org/tutorial/api-design.html#life">stability category</a>
+            of this API. You may use
             <pre>
-                &lt;property name="id" category="private" &gt;
+                &lt;api type="export" group="property" name="id" category="private" url="http://..."&gt;
                     description of the property, where it is used, what it influence, etc.
-                &lt;/property&gt;            
+                &lt;/api&gt;            
             </pre>
             </hint>
         </question>
         
-        <question id="exec-component">
+        <question id="exec-component" when="impl" >
             Is execution of your code influenced by any (string) property
             of any of your components?
             
             <hint>
             Often <code>JComponent.getClientProperty</code>, <code>Action.getValue</code>
             or <code>PropertyDescriptor.getValue</code>, etc. are used to influence
-            a behaviour of some code. This of course forms an interface that should
+            a behavior of some code. This of course forms an interface that should
             be documented. Also if one depends on some interface that an object
             implements (<code>component instanceof Runnable</code>) that forms an
             API as well.
             </hint>
         </question>
 
-        <question id="exec-classloader">
+        <question id="exec-classloader" when="impl" >
             Does your code create its own class loader(s)?
             <hint>
             A bit unusual. Please explain why and what for.
             </hint>
         </question>
                 
-        <question id="exec-reflection">
+        <question id="exec-reflection" when="impl" >
             Does your code use Java Reflection to execute other code?
             <hint>
-            This usually indicates a missing or unsufficient API in the other
+            This usually indicates a missing or insufficient API in the other
             part of the system. If the other side is not aware of your dependency
             this contract can be easily broken.
             </hint>
         </question>
         
-        <question id="exec-privateaccess">
+        <question id="exec-privateaccess" when="final" >
             Are you aware of any other parts of the system calling some of 
             your methods by reflection?
             <hint>
@@ -281,7 +352,7 @@
             </hint>
         </question>
         
-        <question id="exec-process">
+        <question id="exec-process" when="impl" >
             Do you execute an external process from your module? How do you ensure
             that the result is the same on different platforms? Do you parse output?
             Do you depend on result code?
@@ -290,7 +361,7 @@
             </hint>
         </question>
         
-        <question id="exec-introspection">
+        <question id="exec-introspection" when="impl" >
             Does your module use any kind of runtime type information (<code>instanceof</code>,
             work with <code>java.lang.Class</code>, etc.)?
             <hint>
@@ -300,25 +371,44 @@
             (Class.isInstance(...), Class.isAssignableFrom(...), etc.).
             </hint>
         </question>
+
+        <question id="exec-threading" when="impl">
+            What threading models, if any, does your module adhere to?
+            <hint>
+                If your module calls foreign APIs which have a specific threading model,
+                indicate how you comply with the requirements for multithreaded access
+                (synchronization, mutexes, etc.) applicable to those APIs.
+                If your module defines any APIs, or has complex internal structures
+                that might be used from multiple threads, declare how you protect
+                data against concurrent access, race conditions, deadlocks, etc.,
+                and whether such rules are enforced by runtime warnings, errors, assertions, etc.
+                Examples: a class might be non-thread-safe (like Java Collections); might
+                be fully thread-safe (internal locking); might require access through a mutex
+                (and may or may not automatically acquire that mutex on behalf of a client method);
+                might be able to run only in the event queue; etc.
+                Also describe when any events are fired: synchronously, asynchronously, etc.
+                Ideas: <a href="http://core.netbeans.org/proposals/threading/index.html#recommendations">Threading Recommendations</a> (in progress)
+            </hint>
+        </question>
         
     </category>
     
     <category id="format" name="Format of files and protocols">
-        <question id="format-types">
+        <question id="format-types" when="impl" >
             Which protocols and file formats (if any) does your module read or write on disk,
             or transmit or receive over the network?
         </question>
         
-        <question id="format-dnd">
+        <question id="format-dnd" when="impl" >
             Which protocols (if any) does your code understand during Drag &amp; Drop?
             <hint>
             Often Node's deal with clipboard by usage of <code>Node.drag, Node.getDropType</code>. 
-            Check your code for overriding these methods. Btw. if they are not overriden, they
+            Check your code for overriding these methods. Btw. if they are not overridden, they
             by default delegate to <code>Node.clipboardCopy, Node.clipboardCut and Node.pasteTypes</code>.
             </hint>
         </question>
         
-        <question id="format-clipboard">
+        <question id="format-clipboard" when="impl" >
             Which data flavors (if any) does your code read from or insert to
             the clipboard (by access to clipboard on means calling methods on <code>java.awt.datatransfer.Transferable</code>?
             
@@ -332,54 +422,70 @@
 
     
     <category id="performance" name="Performance and Scalability">
-        <question id="perf-startup">
+        <question id="perf-startup" when="final" >
             Does your module run any code on startup?
         </question>
-        <question id="perf-exit">
+        <question id="perf-exit" when="final">
             Does your module run any code on exit?
         </question>
-        <question id="perf-scale">
+        <question id="perf-scale" when="init">
             Which external criteria influence the performance of your
             program (size of file in editor, number of files in menu, 
             in source directory, etc.) and how well your code scales?
-            Please include some estimates.
+            <hint>
+            Please include some estimates, there are other more detailed 
+            questions to answer in later phases of implementation. 
+            </hint>
         </question>
-        <question id="perf-limit">
-            Are there any hardcoded or practical limits in the number or size of
+        <question id="perf-limit" when="init">
+            Are there any hard-coded or practical limits in the number or size of
             elements your code can handle?
         </question>
         <!-- multithreading -->
     
-        <question id="perf-mem">
+        <question id="perf-mem" when="final" >
             How much memory does your component consume? Estimate
             with a relation to the number of windows, etc.
         </question>
         
-        <question id="perf-wakeup">
+        <question id="perf-wakeup" when="final">
             Does any piece of your code wake up periodically and do something
             even when the system is otherwise idle (no user interaction)?
         </question>
 
-        <question id="perf-progress">
+        <question id="perf-progress" when="final">
             Does your module execute any long-running tasks?
-            <hint>Typically they are tasks like connecting over
-            network, computing huge amount of data, compilation.
-            Such communication should be done asynchronously (for example
+            
+            <hint>Long running tasks should never block 
+            AWT thread as it badly hurts the UI
+            <a href="http://performance.netbeans.org/responsiveness/issues.html">
+            responsiveness</a>.
+            Tasks like connecting over
+            network, computing huge amount of data, compilation
+            be done asynchronously (for example
             using <code>RequestProcessor</code>), definitively it should 
             not block AWT thread.
             </hint>
         </question>
 
-        <question id="perf-huge_dialogs">
+        <question id="perf-huge_dialogs" when="final">
             Does your module contain any dialogs or wizards with a large number of
             GUI controls such as combo boxes, lists, trees, or text areas?
         </question>
 
-        <question id="perf-menus">
+        <question id="perf-menus" when="final">
             Does your module use dynamically updated context menus, or
             context-sensitive actions with complicated enablement logic?
         </question>
         
+        <question  id="perf-spi" when="init">
+            How the performance of the plugged in code will be enforced?
+            <hint>
+            If you allow foreign code to be plugged into your own module, how
+            do you enforce, that it will behave correctly and fast and will not
+            negatively influence the performance of your own module?
+            </hint>
+        </question>
     </category>
     
     
Index: nbbuild/antsrc/org/netbeans/nbbuild/Arch.java
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/Arch.java,v
retrieving revision 1.15.2.1
diff -u -r1.15.2.1 Arch.java
--- nbbuild/antsrc/org/netbeans/nbbuild/Arch.java	22 Apr 2003 14:35:28 -0000	1.15.2.1
+++ nbbuild/antsrc/org/netbeans/nbbuild/Arch.java	6 Nov 2003 14:10:39 -0000
@@ -71,6 +71,10 @@
     public void setFooter(String s) {
         footer = s;
     }
+    private File xsl = null;
+    public void setXSL (File xsl) {
+        this.xsl = xsl;
+    }
     
     
     /** Run the conversion */
@@ -167,11 +171,7 @@
             
             if (!removeRevisionTags (answersVersion).equals (removeRevisionTags (questionsVersion))) {
                 String msg = questionsFile.getAbsolutePath() + ": answers were created for questions version \"" + answersVersion + "\" but current version of questions is \"" + questionsVersion + "\"";
-                if ("true".equals (this.getProject().getProperty("arch.warn"))) {
-                    log (msg, Project.MSG_WARN);
-                } else {
-                    throw new BuildException (msg);
-                }
+                log (msg, Project.MSG_WARN);
             }
         }
         
@@ -200,7 +200,8 @@
         // apply the transform operation
         try {
             javax.xml.transform.stream.StreamSource ss;
-            String file = getProject().getProperty ("arch.xsl");
+            String file = this.xsl != null ? this.xsl.toString() : getProject().getProperty ("arch.xsl");
+            
             if (file != null) {
                 log ("Using " + file + " as the XSL stylesheet");
                 try {
Index: nbbuild/javadoctools/export2html.xsl
===================================================================
RCS file: nbbuild/javadoctools/export2html.xsl
diff -N nbbuild/javadoctools/export2html.xsl
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ nbbuild/javadoctools/export2html.xsl	3 Nov 2003 15:22:11 -0000
@@ -0,0 +1,304 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+                Sun Public License Notice
+
+The contents of this file are subject to the Sun Public License
+Version 1.0 (the "License"). You may not use this file except in
+compliance with the License. A copy of the License is available at
+http://www.sun.com/
+
+The Original Code is NetBeans. The Initial Developer of the Original
+Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
+Microsystems, Inc. All Rights Reserved.
+-->
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+    <xsl:output method="html"/>
+
+    <!-- unique key over all groups of apis -->
+    <xsl:key match="//api[@type='export']" name="apiGroups" use="@group" />
+    
+    <xsl:template match="/apis" >
+        <html>
+        <head>
+            <!-- projects.netbeans.org -->
+           <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
+           <title>NetBeans API List</title>
+            <link rel="stylesheet" href="http://www.netbeans.org/netbeans.css" type="text/css"/>
+
+          <link REL="icon" href="http://www.netbeans.org/favicon.ico" type="image/ico" />
+          <link REL="shortcut icon" href="http://www.netbeans.org/favicon.ico" />
+
+        </head>
+
+        <body>
+
+        <center><h1>NetBeans API List</h1></center>
+
+        This document provides a list of <em>NetBeans APIs</em> with a short description
+        of what they are used for, and a table describing different types of interfaces
+        (see <a href="http://openide.netbeans.org/tutorial/api-design.html#api">What is
+        an API?</a> to understand why we list DTDs, file formats, etc.) and with
+        a stability category (see <a
+        href="http://openide.netbeans.org/tutorial/api-design.html#life">API
+        life-cycle</a> for a list of possible categories and their descriptions).
+        The aim is to provide as detailed a definition of NetBeans module 
+        external interfaces as possible and give other developers a chance to decide
+        whether they want to depend on a particular API or not.
+        <p/>
+        To get the API of your module listed here, see the documentation for the 
+        Javadoc building
+        <a href="http://openide.netbeans.org/tutorial/api.html">infrastructure</a>.
+
+        <hr/>
+        <xsl:call-template name="list-modules" />
+        <hr/>
+        <xsl:apply-templates />
+        
+        </body>
+        </html>
+       
+    </xsl:template>
+    
+    <xsl:template name="list-modules">
+        <h2>Content</h2>
+        <ul>
+            <xsl:for-each select="/apis/module" >
+            	<xsl:sort select="@name" />
+                <xsl:choose>
+                    <xsl:when test="api" >
+                       <li>
+                           <a href="#def-api-{@name}"><xsl:value-of select="@name"/></a> -
+                            <!-- XXX the following is crap; e.g. messes up descs of Dialogs API, I/O API, ... -->
+                            <!-- Should use e.g.:
+                            <answer id="arch-what">
+                                <span class="summary">This API does such-and-such.</span>
+                                It also does some other less important stuff.
+                            </answer>
+                            -->
+                          <xsl:comment>Begin of first sentenece</xsl:comment>
+                          <xsl:apply-templates mode="first-sentence" select="description" />
+                          <xsl:comment>End of first sentenece</xsl:comment>.
+                        </li>
+                    </xsl:when>
+                    <xsl:otherwise>
+                            <!-- will be covered later -->
+                    </xsl:otherwise>
+                </xsl:choose>
+            </xsl:for-each>
+            <xsl:for-each select="/apis/module" >
+                <xsl:sort select="api" order="descending" />
+            	<xsl:sort select="@name" />
+                <xsl:choose>
+                    <xsl:when test="api" >
+                            <!-- covered before -->
+                    </xsl:when>
+                    <xsl:otherwise>
+                        <li>
+                            <xsl:variable name="where" select="substring-before(@target, '/')"/>
+                            <b><a href="{$where}/index.html"><xsl:value-of select="$where"/></a></b>
+                            - no API description provided
+                            (see <a href="http://openide.netbeans.org/tutorial/api.html">how to do it</a>)
+                        </li>
+                    </xsl:otherwise>
+                </xsl:choose>
+             </xsl:for-each>
+        </ul>
+    </xsl:template>
+
+    <xsl:template match="module">
+            <xsl:variable name="interfaces" select="api[@type='export']" />
+            <xsl:variable name="module.name" select="@name" />
+            <xsl:variable name="arch.stylesheet" select="@stylesheet" />
+            <xsl:variable name="arch.overviewlink" select="@overviewlink" />
+            <xsl:variable name="arch.footer" select="@footer" />
+            <xsl:variable name="arch.target" select="@target" />
+
+            <xsl:if test="$interfaces">
+                <h3>
+
+                    <a name="def-api-{$module.name}"><xsl:value-of select="$module.name"/></a>
+                    
+                    (<a>
+                        <xsl:attribute name="href">
+                            <xsl:call-template name="filedirapi" >
+                                <xsl:with-param name="arch.target" select="$arch.target" />
+                            </xsl:call-template>
+                            <xsl:text>/index.html</xsl:text>
+                        </xsl:attribute>
+                        <xsl:text>javadoc</xsl:text>
+                    </a>,
+                    <a>
+                        <xsl:attribute name="href">
+                            <xsl:call-template name="filedirapi" >
+                                <xsl:with-param name="arch.target" select="$arch.target" />
+                            </xsl:call-template>
+                            <xsl:text>.zip</xsl:text>
+                        </xsl:attribute>
+                        <xsl:text>download</xsl:text>
+                    </a>)
+                </h3>
+
+                <div><xsl:apply-templates select="description"/></div>
+
+                <xsl:if test="deploy-dependencies">
+                    <div>
+                       <p><b>Usage:</b></p>
+                       <xsl:apply-templates select="deploy-dependencies"/>
+                    </div>
+                </xsl:if>
+
+                <p/>
+                <table border="3" cellpadding="6" width="90%">
+                    <thead>
+                        <th valign="bottom" width="30%"><b>Interface Name</b></th>
+                        <th valign="bottom" width="15%"><b>Stability Classification</b></th>
+                        <th valign="bottom" width="45%"><b>Specified in What Document?</b></th>
+                    </thead>
+
+                    <xsl:for-each select="$interfaces">
+                        <tr/>
+                        <xsl:if test="@group='java'" >
+                            <xsl:call-template name="api" />
+                        </xsl:if>
+                    </xsl:for-each>
+
+                    <xsl:for-each select="//api[generate-id() = generate-id(key('apiGroups', @group))]">
+                        <xsl:variable name="grp" select="@group" />
+                        <xsl:if test="$grp!='java'" >
+                            <xsl:variable name="apis" select="/apis" />
+                            <xsl:variable name="module" select="$apis/module[@name=$module.name]" />
+
+                            <xsl:variable name="allOfTheGroup" select="$module/api[@group=$grp]" />
+                            <xsl:if test="$allOfTheGroup">
+                                <tr/>
+                                <td>Set of <xsl:value-of select="$grp"/> APIs</td>
+                                <td>Individual</td>
+                                <td>
+                                    <a href="{$arch.target}#group-{$grp}">table with definitions</a>
+                                </td>
+                            </xsl:if>
+                        </xsl:if>
+                    </xsl:for-each>
+
+                </table>
+            </xsl:if>
+
+
+            <P/>
+
+    </xsl:template>
+
+    <xsl:template name="api">
+        <xsl:variable name="name" select="@name" />
+        <xsl:variable name="type" select="@type" />
+        <xsl:variable name="category" select="@category" />
+        <xsl:variable name="url" select="@url" />
+
+        <tbody>
+            <td>
+                <xsl:value-of select="$name"/>
+            </td>
+            <!--
+            <td>
+                <xsl:choose>
+                    <xsl:when test="$type='import'">Imported</xsl:when>
+                    <xsl:when test="$type='export'">Exported</xsl:when>
+                    <xsl:otherwise>WARNING: <xsl:value-of select="$type" /></xsl:otherwise>
+                </xsl:choose>
+            </td> -->
+            <td> <!-- stability category -->
+                <xsl:choose>
+                    <xsl:when test="$category='official'">Official</xsl:when>
+                    <xsl:when test="$category='stable'">Stable</xsl:when>
+                    <xsl:when test="$category='devel'">Under Development</xsl:when>
+                    <xsl:when test="$category='third'">Third party</xsl:when>
+                    <xsl:when test="$category='standard'">Standard</xsl:when>
+                    <xsl:when test="$category='friend'">Friend</xsl:when>
+                    <xsl:when test="$category='private'">Private</xsl:when>
+                    <xsl:when test="$category='deprecated'">Deprecated</xsl:when>
+                    <xsl:otherwise>
+                        <xsl:message>
+                            WARNING: <xsl:value-of select="$category"/>
+                        </xsl:message>
+                    </xsl:otherwise>
+                </xsl:choose>
+            </td>
+
+            <td> <!-- url -->
+                <a href="{$url}"><xsl:value-of select="$url"/></a>
+            </td>
+        </tbody>
+
+    </xsl:template>
+
+    <xsl:template match="api-ref">
+        <!-- simply bold the name, it link will likely be visible bellow -->
+        <b>
+            <xsl:value-of select="@name" />
+        </b>
+    </xsl:template>
+
+    <!-- extracts first part before slash from LoadersAPI/bleble.html or
+     and prints it or prints OpenAPIs as a fallback -->
+
+    <xsl:template name="filedirapi" >
+        <xsl:param name="arch.target" />
+    
+        <xsl:if test="substring-before($arch.target,'/')">
+            <xsl:value-of select="substring-before($arch.target,'/')" />
+        </xsl:if>
+        <xsl:if test="not (substring-before($arch.target,'/'))">
+            <xsl:text>OpenAPIs</xsl:text>
+        </xsl:if>
+    </xsl:template>
+
+
+    <!-- Format random HTML elements as is: -->
+    <xsl:template match="@*|node()">
+        <xsl:copy>
+            <xsl:apply-templates select="@*|node()"/>
+        </xsl:copy>
+    </xsl:template>
+
+    <!-- Gets the first sentence with HTML tags -->
+    
+    <xsl:template mode="first-sentence" match="api-ref">
+        <b><xsl:value-of select="@name" /></b><xsl:text> </xsl:text>
+    </xsl:template>
+
+    <xsl:template mode="first-sentence" match="node()">
+        <xsl:choose>
+            <xsl:when test="count(child::*) = 0" >
+                <xsl:variable name="first-sentence" select="substring-before(normalize-space(), '. ')" />
+                <xsl:variable name="first-dot" select="substring-before(normalize-space(), '.')" />
+                <xsl:choose>
+                    <xsl:when test="$first-sentence" >
+                        <xsl:value-of select="$first-sentence" />
+                        <!-- this trick starts comment which disables output produces after 
+                           Which means comments out everything after the .
+                           -->
+                        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
+                    </xsl:when>
+                    <xsl:when test="$first-dot" >
+                        <xsl:value-of select="$first-dot" />
+                        <!-- this trick starts comment which disables output produces after 
+                           Which means comments out everything after the .
+                           -->
+                        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
+                    </xsl:when>
+                    <xsl:otherwise>
+                        <xsl:value-of select="." />
+                    </xsl:otherwise>
+                </xsl:choose>
+                <xsl:apply-templates mode="first-sentence" select="child::*"/>
+            </xsl:when>
+            <xsl:otherwise>
+                <xsl:apply-templates mode="first-sentence" select="node()"/>
+            </xsl:otherwise>
+        </xsl:choose>
+        
+    </xsl:template>
+    
+</xsl:stylesheet>
+
+
Index: nbbuild/javadoctools/exportInterfaces.xsl
===================================================================
RCS file: nbbuild/javadoctools/exportInterfaces.xsl
diff -N nbbuild/javadoctools/exportInterfaces.xsl
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ nbbuild/javadoctools/exportInterfaces.xsl	3 Nov 2003 15:22:11 -0000
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+                Sun Public License Notice
+
+The contents of this file are subject to the Sun Public License
+Version 1.0 (the "License"). You may not use this file except in
+compliance with the License. A copy of the License is available at
+http://www.sun.com/
+
+The Original Code is NetBeans. The Initial Developer of the Original
+Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
+Microsystems, Inc. All Rights Reserved.
+-->
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+    <xsl:output method="xml" omit-xml-declaration="yes"/>
+    
+    <xsl:param name="arch.stylesheet"/>
+    <xsl:param name="arch.overviewlink"/>
+    <xsl:param name="arch.footer"/>
+    <xsl:param name="arch.target"/>
+
+    <xsl:template match="/">
+        <xsl:variable name="interfaces" select="//api[@type='export']" />
+
+        <module name="{api-answers/@module}"
+                target="{$arch.target}"
+                stylesheet="{$arch.stylesheet}"
+                overviewlink="{$arch.overviewlink}"
+                footer="{$arch.footer}">
+            
+            <description>
+                <xsl:apply-templates select="api-answers/answer[@id='arch-what']/node()" mode="description"/>
+            </description>
+
+            <xsl:variable name="deploy-dependencies" select="api-answers/answer[@id='deploy-dependencies']"/>
+            <xsl:if test="$deploy-dependencies">
+                <deploy-dependencies>
+                    <xsl:apply-templates select="$deploy-dependencies/node()"/>
+                </deploy-dependencies>
+            </xsl:if>
+
+            <xsl:for-each select="$interfaces">
+                <xsl:call-template name="api" >
+                    <xsl:with-param name="group" select="@group" />
+                    <xsl:with-param name="type" select="@type" />
+                </xsl:call-template>
+            </xsl:for-each>
+
+        </module>
+    </xsl:template>
+
+    <xsl:template name="api">
+        <xsl:param name="group" />
+        <xsl:param name="type" />
+    
+        <xsl:variable name="name" select="@name" />
+        <xsl:variable name="category" select="@category" />
+        <xsl:variable name="url" select="@url" />
+
+        <api name="{$name}" type="{$type}" category="{$category}">
+          <xsl:if test="string-length($url)>0"><xsl:attribute name="url"><xsl:value-of select="$url" /></xsl:attribute>
+          </xsl:if>
+          <xsl:choose >
+            <xsl:when test="$group"><xsl:attribute name="group"><xsl:value-of select="$group" /></xsl:attribute></xsl:when>
+            <xsl:otherwise><xsl:attribute name="group">java</xsl:attribute></xsl:otherwise>
+          </xsl:choose>
+
+          <xsl:apply-templates />
+        </api>
+    </xsl:template>
+     
+    <xsl:template match="api" mode="description">
+        <api-ref name="{@name}"/>
+    </xsl:template>  
+    
+    <!-- Format random HTML elements as is: -->
+    <xsl:template match="@*|node()">
+       <xsl:copy  >
+          <xsl:apply-templates select="@*|node()"/>
+       </xsl:copy>
+    </xsl:template>
+  
+</xsl:stylesheet> 
Index: nbbuild/javadoctools/template.xml
===================================================================
RCS file: /cvs/nbbuild/javadoctools/template.xml,v
retrieving revision 1.2.2.1
diff -u -r1.2.2.1 template.xml
--- nbbuild/javadoctools/template.xml	4 Mar 2003 03:48:29 -0000	1.2.2.1
+++ nbbuild/javadoctools/template.xml	6 Nov 2003 14:10:39 -0000
@@ -24,6 +24,7 @@
 ${javadoc.packages}   list of packages to build, e.g. "org.netbeans.api.foo,org.netbeans.spi.foo"
 ${javadoc.classpath}  classpath for source files (probably same as what you use for <javac>)
 Optional:
+${javadoc.files}      selector describing which files to build
 ${javadoc.main.page}  link to main page, e.g. org/netbeans/api/foo/doc-files/api.html
 ${javadoc.docfiles}   doc-files directory such as ${javadoc.base}/api/doc; default none
 ${javadoc.apichanges} API change list XML file; default no change list
@@ -31,6 +32,8 @@
 ${javadoc.overview}   Overview HTML file; default a generic page
 ${javadoc.check.external.links}  set to "true" to check external HTTP links
 ${javadoc.header}     Special header text.
+${javadoc.manifest}   API module manifest file - permits @SPECIFICATION-VERSION@ in arch summary to be substituted
+${javadoc.web.root}   Base URL for online Javadoc for linking; default http://www.netbeans.org/download/dev/javadoc
 
 To call this script you MUST use the form of <ant> with the 'dir' attribute. This
 script expects that its basedir is the directory containing it. If you use only
@@ -43,8 +46,18 @@
     </target>
 
     <!-- javadoc -->
+    
+    <target name="copy-netbeans.css">
+        <!-- Note: this will indeed modify working sources if there is a change. -->
+        <!-- That is as desired: want an up-to-date copy of this file. -->
+        <!-- Note also that if www or testwww are not checked out, nothing happens; use CVS copy. -->
+        <copy file="../../testwww/www/netbeans.css" tofile="netbeans.css" failonerror="false"/>
+        <copy file="../../www/www/netbeans.css" tofile="netbeans.css" failonerror="false"/>
+        <copy file="../../testwww/www/nb_special.css" tofile="netbeans-lite.css" failonerror="false"/>
+        <copy file="../../www/www/nb_special.css" tofile="netbeans-lite.css" failonerror="false"/>
+    </target>
 
-    <target name="javadoc-init">
+    <target name="javadoc-init" depends="copy-netbeans.css">
         <!-- Output dir (will create ${javadoc.name}/ and ${javadoc.name}.zip beneath this): -->
         <property name="javadoc.out" location="${javadoc.base}/javadoc"/>
         <property name="javadoc.out.dir" location="${javadoc.out}/${javadoc.name}"/>
@@ -57,14 +70,21 @@
         <property name="javadoc.apichanges" location="apichanges-empty.xml"/>
         <property name="javadoc.arch" location="arch-empty.xml"/>
         <!-- Docs to link to: -->
-        <property name="javadoc.docs.jdk" value="http://java.sun.com/j2se/1.4.1/docs/api"/>
-        <property name="javadoc.docs.openide" value="http://www.netbeans.org/download/dev/javadoc/OpenAPIs"/>
-        <property name="javadoc.docs.openide/io" value="http://www.netbeans.org/download/dev/javadoc/InputOutputAPI"/>
-        <property name="javadoc.docs.openide/execution" value="http://www.netbeans.org/download/dev/javadoc/ExecutionAPI"/>
-        <property name="javadoc.docs.openide/compiler" value="http://www.netbeans.org/download/dev/javadoc/CompilerAPI"/>
-        <property name="javadoc.docs.openide/deprecated" value="http://www.netbeans.org/download/dev/javadoc/DeprecatedAPIs"/>
-        <property name="javadoc.docs.core/javahelp" value="http://www.netbeans.org/download/dev/javadoc/JavaHelpAPI"/>
-        <property name="javadoc.docs.java/api" value="http://www.netbeans.org/download/dev/javadoc/JavaSupportAPIs"/>
+        <property name="javadoc.docs.jdk" value="http://java.sun.com/j2se/1.4.2/docs/api"/>
+        <property name="javadoc.web.root" value="http://www.netbeans.org/download/dev/javadoc"/>
+        <property name="javadoc.docs.openide" value="${javadoc.web.root}/OpenAPIs"/>
+        <property name="javadoc.docs.openide/io" value="${javadoc.web.root}/InputOutputAPI"/>
+        <property name="javadoc.docs.openide/execution" value="${javadoc.web.root}/ExecutionAPI"/>
+        <property name="javadoc.docs.openide/compiler" value="${javadoc.web.root}/CompilerAPI"/>
+        <property name="javadoc.docs.openide/loaders" value="${javadoc.web.root}/LoadersAPI"/>
+        <property name="javadoc.docs.openide/deprecated" value="${javadoc.web.root}/DeprecatedAPIs"/>
+        <property name="javadoc.docs.core/javahelp" value="${javadoc.web.root}/JavaHelpAPI"/>
+        <property name="javadoc.docs.core/term" value="${javadoc.web.root}/UnsupportedAPIs/TerminalEmulatorAPI"/>
+        <property name="javadoc.docs.java/api" value="${javadoc.web.root}/JavaSupportAPIs"/>
+        <property name="javadoc.docs.java/srcmodel" value="${javadoc.web.root}/JavaHierarchyAPI"/>
+        <property name="javadoc.docs.openide/registry" value="${javadoc.web.root}/RegistryAPI"/>
+        <property name="javadoc.docs.openide/convertor" value="${javadoc.web.root}/ConvertorAPI"/>
+        <property name="javadoc.docs.openide/looks" value="${javadoc.web.root}/LooksAPI"/>
         <!-- add more here as needed... -->
         <property name="javadoc.css.dir" location="."/>
         <property name="javadoc.css.main" location="${javadoc.css.dir}/javadoc.css"/>
@@ -72,25 +92,50 @@
             <include name="*.css"/>
         </fileset>
         <property name="javadoc.check.external.links" value="false"/>
-        <property name="javadoc.header" value=""/>
+        <property name="javadoc.header" value="&amp;nbsp;"/>
         <mkdir dir="${javadoc.out.dir}"/>
+        
+        <condition property="javadoc.files.provided">
+        	<isset property="javadoc.files" />
+        </condition>
+        
+        <!-- default value for javadoc-files -->
+        <selector id="all-java-files" >
+            <filename name="**/*.java" />
+        </selector>
+        <property name="javadoc.files" value="all-java-files" />
     </target>
 
     <target name="javadoc-check-timestamps" depends="javadoc-init">
         <uptodate targetfile="${javadoc.out.zip}" property="javadoc.up.to.date">
             <srcfiles dir="${javadoc.src}">
-                <include name="**/*.java"/>
+                <and>
+                    <selector refid="${javadoc.files}" />
+                    <filename name="**/*.java" />
+                </and>
             </srcfiles>
             <srcfiles dir="${javadoc.docfiles}"/>
             <srcfiles refid="javadoc.css.files"/>
             <srcfiles dir=".">
                 <include name="apichanges.xsl"/>
             </srcfiles>
-            <!-- XXX Ant 1.5.1:
             <srcfiles file="${javadoc.apichanges}"/>
             <srcfiles file="${javadoc.arch}"/>
-            -->
         </uptodate>
+        <condition property="javadoc.should.not.be.generated" >
+            <or>
+                <isset property="javadoc.up.to.date" />
+                <not>
+                    <isset property="javadoc.packages" />
+                </not>
+                <equals arg1="${javadoc.packages}" arg2="" />
+            </or>
+        </condition>
+        <!--
+        <echo message="AAA: ${javadoc.should.not.be.generated}" />
+        <echo message="BBB: ${javadoc.up.to.date}" />
+        <echo message="CCC: ${javadoc.packages}" />
+        -->
     </target>
 
     <target name="javadoc-make-plain-title" unless="javadoc.main.page">
@@ -100,11 +145,31 @@
     <target name="javadoc-make-hyperlinked-title" if="javadoc.main.page">
         <property name="javadoc.hyperlinked.title" value='&lt;a href="@TOP@${javadoc.main.page}"&gt;${javadoc.title}&lt;/a&gt;'/>
     </target>
+
+    <target name="javadoc-stage-alternative" depends="javadoc-init,javadoc-check-timestamps" if="javadoc.should.not.be.generated" unless="javadoc.up.to.date" >
+        <!-- if no packages are specified, this is used to generate index.html from the overview page -->
+        <copy file="${javadoc.overview}" tofile="${javadoc.out.dir}/index.html" />
+    </target>
     
-    <target name="javadoc-stage-main" depends="javadoc-init,javadoc-check-timestamps,javadoc-make-plain-title,javadoc-make-hyperlinked-title" unless="javadoc.up.to.date">
+    <target name="javadoc-stage-main" depends="javadoc-init,javadoc-check-timestamps,javadoc-exec-files,javadoc-exec-packages" unless="javadoc.should.not.be.generated" >
+        <copy todir="${javadoc.out.dir}">
+            <fileset refid="javadoc.css.files"/>
+        </copy>
+    </target>
+    
+    <target name="javadoc-exec-condition" depends="javadoc-check-timestamps" >
+        <condition property="javadoc.exec.packages">
+            <or>
+                <isset property="javadoc.files.provided"/>
+                <isset property="javadoc.should.not.be.generated"/>
+            </or>
+        </condition>
+    </target>
+    
+    <target name="javadoc-exec-packages" depends="javadoc-init,javadoc-exec-condition,javadoc-check-timestamps,javadoc-make-plain-title,javadoc-make-hyperlinked-title,javadoc-exec-condition" unless="javadoc.exec.packages" >
         <tstamp/>
         <property name="javadoc.footer" value='&lt;span class="footnote"&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/span&gt;'/>
-        <javadoc author="false" destdir="${javadoc.out.dir}" packagenames="${javadoc.packages}" stylesheetfile="${javadoc.css.main}" windowtitle="NetBeans ${javadoc.title}" overview="${javadoc.overview}" splitindex="true" use="true" version="false">
+        <javadoc source="1.4" author="false" destdir="${javadoc.out.dir}" packagenames="${javadoc.packages}" stylesheetfile="${javadoc.css.main}" windowtitle="NetBeans ${javadoc.title}" overview="${javadoc.overview}" splitindex="true" use="true" version="false">
             <sourcepath>
                 <pathelement location="${javadoc.docfiles}"/>
                 <pathelement location="${javadoc.src}"/>
@@ -119,23 +184,56 @@
             <link href="${javadoc.docs.openide/io}" offline="true" packagelistloc="../../openide/io/javadoc/InputOutputAPI"/>
             <link href="${javadoc.docs.openide/execution}" offline="true" packagelistloc="../../openide/execution/javadoc/ExecutionAPI"/>
             <link href="${javadoc.docs.openide/compiler}" offline="true" packagelistloc="../../openide/compiler/javadoc/CompilerAPI"/>
+            <link href="${javadoc.docs.openide/loaders}" offline="true" packagelistloc="../../openide/loaders/javadoc/LoadersAPI"/>
             <link href="${javadoc.docs.core/javahelp}" offline="true" packagelistloc="../../core/javahelp/javadoc/JavaHelpAPI"/>
+            <link href="${javadoc.docs.core/term}" offline="true" packagelistloc="../../core/term/javadoc/TerminalEmulatorAPI"/>
+            <link href="${javadoc.docs.java/api}" offline="true" packagelistloc="../../java/api/javadoc/JavaSupportAPIs"/>
+            <link href="${javadoc.docs.java/srcmodel}" offline="true" packagelistloc="../../java/srcmodel/javadoc/JavaHierarchyAPI"/>
+            <link href="${javadoc.docs.openide/registry}" offline="true" packagelistloc="../../openide/registry/javadoc/RegistryAPI"/>
+            <link href="${javadoc.docs.openide/convertor}" offline="true" packagelistloc="../../openide/convertor/javadoc/ConvertorAPI"/>
+            <link href="${javadoc.docs.openide/looks}" offline="true" packagelistloc="../../openide/looks/javadoc/LooksAPI"/>
+            <doctitle>NetBeans ${javadoc.title}</doctitle>
+            <header>${javadoc.header}</header>
+            <bottom>${javadoc.footer}</bottom>
+        </javadoc>
+    </target>
+    
+    <target name="javadoc-exec-files" depends="javadoc-init,javadoc-exec-condition,javadoc-check-timestamps,javadoc-make-plain-title,javadoc-make-hyperlinked-title" if="javadoc.files.provided" unless="javadoc.up.to.date" >
+        <tstamp/>
+        <property name="javadoc.footer" value='&lt;span class="footnote"&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/span&gt;'/>
+        <javadoc source="1.4" author="false" destdir="${javadoc.out.dir}" packagenames="${javadoc.packages}" stylesheetfile="${javadoc.css.main}" windowtitle="NetBeans ${javadoc.title}" overview="${javadoc.overview}" splitindex="true" use="true" version="false" useexternalfile="true" >
+            <fileset dir="${javadoc.docfiles}"/>
+            <fileset dir="${javadoc.src}" >
+                <and>
+                    <selector refid="${javadoc.files}" />
+                    <filename name="**/*.java" />
+                </and>
+            </fileset>
+            <classpath path="${javadoc.classpath}"/>
+            <!-- XXX note, this does not support more than one group -->
+            <group packages="${javadoc.packages}">
+                <title>${javadoc.hyperlinked.title}</title>
+            </group>
+            <link href="${javadoc.docs.jdk}" offline="true" packagelistloc="../../openide/api/doc"/>
+            <link href="${javadoc.docs.openide}" offline="true" packagelistloc="../../openide/javadoc/OpenAPIs"/>
+            <link href="${javadoc.docs.openide/io}" offline="true" packagelistloc="../../openide/io/javadoc/InputOutputAPI"/>
+            <link href="${javadoc.docs.openide/execution}" offline="true" packagelistloc="../../openide/execution/javadoc/ExecutionAPI"/>
+            <link href="${javadoc.docs.openide/compiler}" offline="true" packagelistloc="../../openide/compiler/javadoc/CompilerAPI"/>
+            <link href="${javadoc.docs.openide/loaders}" offline="true" packagelistloc="../../openide/loaders/javadoc/LoadersAPI"/>
+            <link href="${javadoc.docs.core/javahelp}" offline="true" packagelistloc="../../core/javahelp/javadoc/JavaHelpAPI"/>
+            <link href="${javadoc.docs.core/term}" offline="true" packagelistloc="../../core/term/javadoc/TerminalEmulatorAPI"/>
             <link href="${javadoc.docs.java/api}" offline="true" packagelistloc="../../java/api/javadoc/JavaSupportAPIs"/>
             <doctitle>NetBeans ${javadoc.title}</doctitle>
             <header>${javadoc.header}</header>
             <bottom>${javadoc.footer}</bottom>
-            <!-- XXX in Ant 1.5.1 add: <tag name="beaninfo" scope="methods" description="Bean info:"/> -->
         </javadoc>
-        <copy todir="${javadoc.out.dir}">
-            <fileset refid="javadoc.css.files"/>
-        </copy>
     </target>
 
     <target name="javadoc-stage-apichanges" depends="javadoc-init,javadoc-check-timestamps" unless="javadoc.up.to.date">
         <ant dir="../../libs/external" target="unscramble"/>
         <xmlvalidate file="${javadoc.apichanges}" failonerror="true"/>
         <style in="${javadoc.apichanges}" out="${javadoc.out.dir}/apichanges.html" style="apichanges.xsl">
-            <param name="javadoc-url-base" expression="http://www.netbeans.org/download/dev/javadoc/${javadoc.name}"/>
+            <param name="javadoc-url-base" expression="."/>
         </style>
     </target>
 
@@ -143,27 +241,68 @@
         <taskdef name="arch" classname="org.netbeans.nbbuild.Arch">
             <classpath>
                 <pathelement location="../nbantext.jar"/>
+                <fileset dir="../../libs/external">
+                    <include name="xerces*.jar"/>
+                </fileset>
             </classpath>
         </taskdef>
         <!-- Warn about incorrect question version, but do not make build fail: -->
         <property name="arch.warn" value="true"/>
         <arch answers="${javadoc.arch}" output="${javadoc.out.dir}/architecture-summary.html" stylesheet="prose.css" overviewlink="overview-summary.html" footer="@FOOTER@"/>
     </target>
+
+    <target name="arch-replace-init" if="javadoc.manifest">
+        <property file="${javadoc.manifest}"/>
+        <condition property="javadoc.manifest+export.interfaces">
+            <and>
+                <isset property="javadoc.manifest"/>
+                <isset property="export.interfaces"/>
+            </and>
+        </condition>
+    </target>
+
+    <target name="javadoc-stage-arch-replace" depends="javadoc-init,javadoc-check-timestamps,arch-replace-init" unless="javadoc.up.to.date" if="javadoc.manifest">
+        <replace file="${javadoc.out.dir}/architecture-summary.html" token="@SPECIFICATION-VERSION@" value="${OpenIDE-Module-Specification-Version}"/>
+    </target>
     
-    <target name="javadoc-stage-replace" depends="javadoc-stage-main,javadoc-stage-apichanges,javadoc-stage-arch" unless="javadoc.up.to.date">
+    <!-- XXX up-to-date check here should be independent: from ${javadoc.arch} to ${export.interfaces}/${javadoc.name} -->
+    <target name="javadoc-stage-export-interfaces" depends="javadoc-init,javadoc-check-timestamps" if="export.interfaces">
+        <taskdef name="arch" classname="org.netbeans.nbbuild.Arch">
+            <classpath>
+                <pathelement location="../nbantext.jar"/>
+                <fileset dir="../../libs/external">
+                    <include name="xerces*.jar"/>
+                </fileset>
+            </classpath>
+        </taskdef>
+        <!-- Warn about incorrect question version, but do not make build fail: -->
+        <property name="arch.warn" value="true"/>
+        <property name="arch.target" value="${javadoc.name}" />
+        <arch xsl="exportInterfaces.xsl" answers="${javadoc.arch}" output="${export.interfaces}/architecture-summary.html" stylesheet="prose.css"/>
+        <move file="${export.interfaces}/architecture-summary.html" tofile="${export.interfaces}/${javadoc.name}" />
+    </target>
+    
+    <target name="javadoc-stage-export-interfaces-replace" depends="javadoc-init,javadoc-check-timestamps,arch-replace-init" unless="javadoc.up.to.date" if="javadoc.manifest+export.interfaces">
+        <replace file="${export.interfaces}/${javadoc.name}" token="@SPECIFICATION-VERSION@" value="${OpenIDE-Module-Specification-Version}"/>
+    </target>
+    
+    <target name="javadoc-stage-replace" depends="javadoc-stage-main,javadoc-stage-alternative,javadoc-stage-apichanges,javadoc-stage-arch,javadoc-stage-arch-replace,javadoc-stage-export-interfaces,javadoc-stage-export-interfaces-replace" unless="javadoc.up.to.date">
         <replace dir="${javadoc.out.dir}">
-            <include name="**/doc-files/*.html"/>
-            <include name="**/package-summary.html"/>
-            <include name="apichanges.html"/>
-            <include name="architecture-summary.html"/>
+            <include name="**/*.html"/>
             <replacefilter token="@JDK@" value="${javadoc.docs.jdk}"/>
             <replacefilter token="@OPENIDE@" value="${javadoc.docs.openide}"/>
             <replacefilter token="@OPENIDE/IO@" value="${javadoc.docs.openide/io}"/>
             <replacefilter token="@OPENIDE/EXECUTION@" value="${javadoc.docs.openide/execution}"/>
             <replacefilter token="@OPENIDE/COMPILER@" value="${javadoc.docs.openide/compiler}"/>
+            <replacefilter token="@OPENIDE/LOADERS@" value="${javadoc.docs.openide/loaders}"/>
             <replacefilter token="@OPENIDE/DEPRECATED@" value="${javadoc.docs.openide/deprecated}"/>
             <replacefilter token="@CORE/JAVAHELP@" value="${javadoc.docs.core/javahelp}"/>
+            <replacefilter token="@CORE/TERM@" value="${javadoc.docs.core/term}"/>
             <replacefilter token="@JAVA/API@" value="${javadoc.docs.java/api}"/>
+            <replacefilter token="@JAVA/SRCMODEL@" value="${javadoc.docs.java/srcmodel}"/>
+            <replacefilter token="@OPENIDE/REGISTRY@" value="${javadoc.docs.openide/registry}"/>
+            <replacefilter token="@OPENIDE/CONVERTOR@" value="${javadoc.docs.openide/convertor}"/>
+            <replacefilter token="@OPENIDE/LOOKS@" value="${javadoc.docs.openide/looks}"/>
             <replacefilter token="@FOOTER@" value="${javadoc.footer}"/>
         </replace>
         <replace dir="${javadoc.out.dir}" token="@TOP@" value="">
@@ -193,9 +332,6 @@
         <taskdef name="checklinks" classname="org.netbeans.nbbuild.CheckLinks">
             <classpath>
                 <pathelement location="../nbantext.jar"/>
-                <fileset dir="../../core/external">
-                    <include name="regexp*.jar"/>
-                </fileset>
             </classpath>
         </taskdef>
         <checklinks basedir="${javadoc.out.dir}" checkexternal="${javadoc.check.external.links}">
Index: nbbuild/antsrc/org/netbeans/nbbuild/CheckHelpSets.java
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/CheckHelpSets.java,v
retrieving revision 1.3
diff -u -r1.3 CheckHelpSets.java
--- nbbuild/antsrc/org/netbeans/nbbuild/CheckHelpSets.java	20 Dec 2002 19:34:40 -0000	1.3
+++ nbbuild/antsrc/org/netbeans/nbbuild/CheckHelpSets.java	6 Nov 2003 09:21:50 -0000
@@ -7,7 +7,7 @@
  * http://www.sun.com/
  * 
  * The Original Code is NetBeans. The Initial Developer of the Original
- * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
+ * Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
  * Microsystems, Inc. All Rights Reserved.
  */
 
@@ -95,9 +95,9 @@
         HelpSet.parse(hsfile.toURL(), null, new VerifyHSFactory());
         log("Checking links from help map and between HTML files...");
         Enumeration e = map.getAllIDs();
-        Set okurls = new HashSet(1000); // Set<URL>
-        Set badurls = new HashSet(1000); // Set<URL>
-        Set cleanurls = new HashSet(1000); // Set<URL>
+        Set okurls = new HashSet(1000); // Set<URI>
+        Set badurls = new HashSet(1000); // Set<URI>
+        Set cleanurls = new HashSet(1000); // Set<URI>
         while (e.hasMoreElements()) {
             javax.help.Map.ID id = (javax.help.Map.ID)e.nextElement();
             URL u = map.getURLFromID(id);
@@ -105,7 +105,7 @@
                 throw new BuildException("Bogus map ID: " + id.id, new Location(hsfile.getAbsolutePath()));
             }
             log("Checking ID " + id.id, Project.MSG_VERBOSE);
-            CheckLinks.scan(this, id.id, u, okurls, badurls, cleanurls, false, 2, Collections.EMPTY_LIST);
+            CheckLinks.scan(this, id.id, "", new URI(u.toExternalForm()), okurls, badurls, cleanurls, false, 2, Collections.EMPTY_LIST);
         }
     }
     
@@ -186,7 +186,7 @@
             }
         }
         
-        // Using SAX 1 because Ant does not always ship with SAX 2:
+        // XXX use SAX 2 here
         private final class Handler extends HandlerBase {
             
             private final String map;
@@ -208,7 +208,8 @@
             }
             
             public InputSource resolveEntity(String pub, String sys) throws SAXException {
-                if (pub.equals("-//Sun Microsystems Inc.//DTD JavaHelp Map Version 1.0//EN")) {
+                if (pub.equals("-//Sun Microsystems Inc.//DTD JavaHelp Map Version 1.0//EN") ||
+                        pub.equals("-//Sun Microsystems Inc.//DTD JavaHelp Map Version 2.0//EN")) {
                     // Ignore.
                     return new InputSource(new ByteArrayInputStream(new byte[0]));
                 } else {
Index: nbbuild/antsrc/org/netbeans/nbbuild/CheckLinks.java
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/CheckLinks.java,v
retrieving revision 1.9
diff -u -r1.9 CheckLinks.java
--- nbbuild/antsrc/org/netbeans/nbbuild/CheckLinks.java	27 Feb 2003 23:39:57 -0000	1.9
+++ nbbuild/antsrc/org/netbeans/nbbuild/CheckLinks.java	5 Nov 2003 15:28:54 -0000
@@ -16,6 +16,7 @@
 import java.io.*;
 import java.net.*;
 import java.util.*;
+import java.util.regex.*;
 
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.FileScanner;
@@ -23,16 +24,14 @@
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.MatchingTask;
 
-import org.apache.regexp.*;
 import org.apache.tools.ant.types.Mapper;
 
-// [PENDING] would be nice to have line numbers reported in output;
-// not clear what the best way to do that is without introducing
-// overhead; maybe wrapper InputStream that counts lines?
-// [PENDING] checking external links needs to go thru HTTP proxy somehow
+// XXX in Ant 1.6, permit <xmlcatalog> entries to make checking of "external" links
+// work better in the case of cross-links between APIs
 
 /** Task to check for broken links in HTML.
  * Note that this is a matching task and you must give it a list of things to match.
+ * The Java VM's configured HTTP proxy will be used (${http.proxyHost} and ${http.proxyPort}).
  * @author Jesse Glick
  */
 public class CheckLinks extends MatchingTask {
@@ -72,44 +71,41 @@
         if (! checkexternal) message += " (external URLs will be skipped)";
         log (message);
         String[] files = scanner.getIncludedFiles ();
-        // Set of known-good URLs (including all anchored variants etc.).
-        Set okurls = new HashSet (1000); // Set<URL>
-        // Set of known-bad URLs.
-        Set badurls = new HashSet (100); // Set<URL>
-        // Set of parsed base HTML URLs known to have had their contents checked.
-        Set cleanurls = new HashSet(100); // Set<URL>
+        Set okurls = new HashSet (1000); // Set<URI>
+        Set badurls = new HashSet (100); // Set<URI>
+        Set cleanurls = new HashSet(100); // Set<URI>
         for (int i = 0; i < files.length; i++) {
             File file = new File (basedir, files[i]);
-            URL fileurl;
-            try {
-                fileurl = file.toURL ();
-            } catch (MalformedURLException mfue) {
-                throw new BuildException (mfue, location);
-            }
+            URI fileurl = file.toURI();
             log ("Scanning " + file, Project.MSG_VERBOSE);
             try {
-                scan(this, file.getAbsolutePath(), fileurl, okurls, badurls, cleanurls, checkexternal, 1, mappers);
+                scan(this, getLocation().toString(), "", fileurl, okurls, badurls, cleanurls, checkexternal, 1, mappers);
             } catch (IOException ioe) {
                 throw new BuildException ("Could not scan " + file + ": " + ioe, ioe, location);
             }
         }
     }
     
-    static RE hrefOrAnchor;
-    static {
-        try {
-            hrefOrAnchor = new RE("<(a|img)(\\s+shape=\"rect\")?\\s+(href|name|src)=\"([^\"#]*)(#[^\"]+)?\"(\\s+shape=\"rect\")?>");
-        } catch (RESyntaxException rese) {
-            throw new Error (rese.toString());
-        }
-        hrefOrAnchor.setMatchFlags (RE.MATCH_CASEINDEPENDENT);
-    }
+    private static Pattern hrefOrAnchor = Pattern.compile("<(a|img)(\\s+shape=\"rect\")?\\s+(href|name|src)=\"([^\"#]*)(#[^\"]+)?\"(\\s+shape=\"rect\")?>", Pattern.CASE_INSENSITIVE);
+    private static Pattern lineBreak = Pattern.compile("^", Pattern.MULTILINE);
     
-    // recurse:
-    // 0 - just check that it can be opened
-    // 1 - check also that any links from it can be opened
-    // 2 - recurse
-    public static void scan(Task task, String referrer, URL u, Set okurls, Set badurls, Set cleanurls, boolean checkexternal, int recurse, List mappers) throws IOException {
+    /**
+     * Scan for broken links.
+     * @param task an Ant task to associate with this
+     * @param referrer the referrer file path (or full URL if not file:)
+     * @param referrerLocation the location in the referrer, e.g. ":38:12", or "" if unavailable
+     * @param u the URI to check
+     * @param okurls a set of URIs known to be fully checked (including all anchored variants etc.)
+     * @param badurls a set of URIs known to be bogus
+     * @param cleanurls a set of (base) URIs known to have had their contents checked
+     * @param checkexternal if true, check external links (all protocols besides file:)
+     * @param recurse one of:
+     *                0 - just check that it can be opened;
+     *                1 - check also that any links from it can be opened;
+     *                2 - recurse
+     * @param mappers a list of Mappers to apply to get source files from HTML files
+     */
+    public static void scan(Task task, String referrer, String referrerLocation, URI u, Set okurls, Set badurls, Set cleanurls, boolean checkexternal, int recurse, List mappers) throws IOException {
         //task.log("scan: u=" + u + " referrer=" + referrer + " okurls=" + okurls + " badurls=" + badurls + " cleanurls=" + cleanurls + " recurse=" + recurse, Project.MSG_DEBUG);
         if (okurls.contains(u) && recurse == 0) {
             // Yes it is OK.
@@ -120,14 +116,27 @@
         if (i != -1) {
             b = b.substring(0, i);
         }
-        URL base = new URL(b);
-        String frag = u.getRef();
+        URI base;
+        try {
+            base = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), /*fragment*/null);
+        } catch (URISyntaxException e) {
+            throw new Error(e);
+        }
+        String frag = u.getFragment();
+        String basepath = base.toString();
+        if ("file".equals(base.getScheme())) {
+            try {
+                basepath = new File(base).getAbsolutePath();
+            } catch (IllegalArgumentException e) {
+                task.log(normalize(referrer, mappers) + referrerLocation + ": malformed URL: " + base + " (" + e.getLocalizedMessage() + ")", Project.MSG_WARN);
+            }
+        }
         //task.log("scan: base=" + base + " frag=" + frag, Project.MSG_DEBUG);
         if (badurls.contains(u) || badurls.contains(base)) {
-            task.log(normalize(referrer, mappers) + ": broken link (already reported): " + u, Project.MSG_WARN);
+            task.log(normalize(referrer, mappers) + referrerLocation + ": broken link (already reported): " + u, Project.MSG_WARN);
             return;
         }
-        if (! checkexternal && ! "file".equals(u.getProtocol())) {
+        if (! checkexternal && ! "file".equals(u.getScheme())) {
             task.log("Skipping external link: " + base, Project.MSG_VERBOSE);
             cleanurls.add(base);
             okurls.add(base);
@@ -135,56 +144,84 @@
             return;
         }
         task.log("Checking " + u + " (recursion level " + recurse + ")", Project.MSG_VERBOSE);
-        InputStream rd;
+        CharSequence content;
         String mimeType;
         try {
-            URLConnection conn = base.openConnection ();
+            // XXX for protocol 'file', could more efficiently use a memmapped char buffer
+            URLConnection conn = base.toURL().openConnection ();
             conn.connect ();
             mimeType = conn.getContentType ();
-            rd = conn.getInputStream ();
+            InputStream is = conn.getInputStream ();
+            String enc = conn.getContentEncoding();
+            if (enc == null) {
+                enc = "UTF-8";
+            }
+            try {
+                ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                int read;
+                byte[] buf = new byte[4096];
+                while ((read = is.read(buf)) != -1) {
+                    baos.write(buf, 0, read);
+                }
+                content = baos.toString(enc);
+            } finally {
+                is.close();
+            }
         } catch (IOException ioe) {
-            task.log(normalize(referrer, mappers) + ": broken link: " + base, Project.MSG_WARN);
+            task.log(normalize(referrer, mappers) + referrerLocation + ": broken link: " + base, Project.MSG_WARN);
+            task.log("Error: " + ioe, Project.MSG_VERBOSE);
             badurls.add(base);
             badurls.add(u);
             return;
         }
         okurls.add(base);
-        Set others = null; // Set<URL>
+        // map from other URIs (hrefs) to line/col info where they occur in this file (format: ":1:2")
+        Map others = null; // Map<URI, String>
         if (recurse > 0 && cleanurls.add(base)) {
-            others = new HashSet(100);
+            others = new HashMap(100);
         }
-        try {
             if (recurse == 0 && frag == null) {
                 // That is all we wanted to check.
                 return;
             }
             if ("text/html".equals(mimeType)) {
                 task.log("Parsing " + base, Project.MSG_VERBOSE);
-                CharacterIterator it = new StreamCharacterIterator (rd);
-                int idx = 0;
+                Matcher m = hrefOrAnchor.matcher(content);
                 Set names = new HashSet(100); // Set<String>
-                while (hrefOrAnchor.match (it, idx)) {
-                    // Advance match position past end of expression:
-                    idx = hrefOrAnchor.getParenEnd (0);
+                while (m.find()) {
                     // Get the stuff involved:
-                    String type = hrefOrAnchor.getParen(3);
+                    String type = m.group(3);
                     if (type.equalsIgnoreCase("name")) {
                         // We have an anchor, therefore refs to it are valid.
-                        String name = unescape(hrefOrAnchor.getParen(4));
+                        String name = unescape(m.group(4));
                         if (names.add(name)) {
-                            okurls.add(new URL(base, "#" + name));
+                            try {
+                                okurls.add(new URI(base.getScheme(), base.getUserInfo(), base.getHost(), base.getPort(), base.getPath(), base.getQuery(), /*fragment*/name));
+                            } catch (URISyntaxException e) {
+                                task.log(normalize(basepath, mappers) + findLocation(content, m.start(4)) + ": bad anchor name: " + e.getMessage(), Project.MSG_WARN);
+                            }
                         } else if (recurse == 1) {
-                            task.log(normalize(referrer, mappers) + ": duplicate anchor name: " + name, Project.MSG_WARN);
+                            task.log(normalize(basepath, mappers) + findLocation(content, m.start(4)) + ": duplicate anchor name: " + name, Project.MSG_WARN);
                         }
                     } else {
                         // A link to some other document: href=, src=.
                         if (others != null) {
-                            String otherbase = unescape(hrefOrAnchor.getParen (4));
-                            String otheranchor = unescape(hrefOrAnchor.getParen (5));
+                            String otherbase = unescape(m.group(4));
+                            String otheranchor = unescape(m.group(5));
                             if (!otherbase.startsWith("mailto:")) {
-                                URL o = new URL(base, (otheranchor == null) ? otherbase : otherbase + otheranchor);
-                                //task.log("href: " + o);
-                                others.add(o);
+                                String uri = (otheranchor == null) ? otherbase : otherbase + otheranchor;
+                                String location = findLocation(content, m.start(4));
+                                try {
+                                    URI o = base.resolve(new URI(uri));
+                                    //task.log("href: " + o);
+                                    if (!others.containsKey(o)) {
+                                        // Only keep location info for first reference.
+                                        others.put(o, location);
+                                    }
+                                } catch (URISyntaxException e) {
+                                    // Message should contain the URI.
+                                    task.log(normalize(basepath, mappers) + location + ": bad relative URI: " + e.getMessage(), Project.MSG_WARN);
+                                }
                             }
                         } // else we are only checking that this one has right anchors
                     }
@@ -192,17 +229,16 @@
             } else {
                 task.log("Not checking contents of " + base, Project.MSG_VERBOSE);
             }
-        } finally {
-            rd.close();
-        }
         if (! okurls.contains(u)) {
-            task.log(normalize(referrer, mappers) + ": broken link: " + u, Project.MSG_WARN);
+            task.log(normalize(referrer, mappers) + referrerLocation + ": broken link: " + u, Project.MSG_WARN);
         }
         if (others != null) {
-            Iterator it = others.iterator();
+            Iterator it = others.entrySet().iterator();
             while (it.hasNext()) {
-                URL other = (URL)it.next();
-                scan(task, u.getPath(), other, okurls, badurls, cleanurls, checkexternal, recurse == 1 ? 0 : 2, mappers);
+                Map.Entry entry = (Map.Entry)it.next();
+                URI other = (URI)entry.getKey();
+                String location = (String)entry.getValue();
+                scan(task, basepath, location, other, okurls, badurls, cleanurls, checkexternal, recurse == 1 ? 0 : 2, mappers);
             }
         }
     }
@@ -260,6 +296,21 @@
             pos = search + repl.length();
         }
         return text;
+    }
+    
+    private static String findLocation(CharSequence content, int pos) {
+        Matcher lbm = lineBreak.matcher(content);
+        int line = 0;
+        int col = 1;
+        while (lbm.find()) {
+            if (lbm.start() <= pos) {
+                line++;
+                col = pos - lbm.start() + 1;
+            } else {
+                break;
+            }
+        }
+        return ":" + line + ":" + col;
     }
     
 }
Index: openide/build.xml
===================================================================
RCS file: /cvs/openide/build.xml,v
retrieving revision 1.137.2.1
diff -u -r1.137.2.1 build.xml
--- openide/build.xml	18 Aug 2003 14:02:23 -0000	1.137.2.1
+++ openide/build.xml	11 Nov 2003 14:16:19 -0000
@@ -589,8 +589,10 @@
 </echo>
   </target>
 
-  <target name="javadoc" depends="init,open-apis-check-timestamps,open-apis-maybe-skip" if="open-apis-force-rebuild"
-          description="Create Open API documentation.">
+  <target name="javadoc" depends="javadoc-plain,export-interfaces" if="open-apis-force-rebuild"
+          description="Create Open API documentation." />
+
+  <target name="javadoc-plain" depends="init,open-apis-check-timestamps,open-apis-maybe-skip" if="open-apis-force-rebuild">
     <taskdef name="checklinks" classname="org.netbeans.nbbuild.CheckLinks">
       <classpath>
         <pathelement location="../nbbuild/nbantext.jar"/>
@@ -734,6 +736,35 @@
     <zip zipfile="javadoc/OpenAPIs.zip" basedir="javadoc/OpenAPIs"/>
   </target>
 
+  <target name="export-interfaces" depends="javadoc-plain" if="export.interfaces" >
+  	<!-- is there just because the openide APIs are not separated and do not use javadoctools -->
+    <taskdef name="arch" classname="org.netbeans.nbbuild.Arch">
+      <classpath>
+        <pathelement location="../nbbuild/nbantext.jar"/>
+        <fileset dir="../libs/external">
+          <include name="xerces*.jar"/>
+        </fileset>
+      </classpath>
+    </taskdef>
+    
+    <!-- Warn about incorrect question version, but do not make build fail: -->
+    <property name="arch.warn" value="true"/>
+    <property name="arch.target" value="OpenAPIs/arch" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-modules.xml" output="${export.interfaces}/openide-modules.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-datasystems.xml" output="${export.interfaces}/openide-datasystems.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-dialogs.xml" output="${export.interfaces}/openide-dialogs.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-lookup.xml" output="${export.interfaces}/openide-lookup.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-filesystems.xml" output="${export.interfaces}/openide-filesystems.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-nodes.xml" output="${export.interfaces}/openide-nodes.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-explorer.xml" output="${export.interfaces}/openide-explorer.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-actions.xml" output="${export.interfaces}/openide-actions.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-windowsystem.xml" output="${export.interfaces}/openide-windowsystem.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-utilities.xml" output="${export.interfaces}/openide-utilities.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-editor.xml" output="${export.interfaces}/openide-editor.html" />
+    <arch xsl="../nbbuild/javadoctools/exportInterfaces.xsl" answers="arch/arch-openide-propertysheet.xml" output="${export.interfaces}/openide-propertysheet.html" />
+    
+  </target>
+  
   <target name="apis-tidy" description="Run the Tidy HTML checker on API prose documents.">
     <apply parallel="true" failonerror="true" executable="tidy">
       <fileset dir="api/doc">
Index: editor/build.xml
===================================================================
RCS file: /cvs/editor/build.xml,v
retrieving revision 1.36
diff -u -r1.36 build.xml
--- editor/build.xml	14 Feb 2003 08:48:24 -0000	1.36
+++ editor/build.xml	5 Nov 2003 15:32:45 -0000
@@ -107,39 +107,32 @@
     <delete dir="Info"/>
   </target>
 
+  <path id="cp">
+    <pathelement location="src" />
+    <pathelement location="libsrc"/>
+    <pathelement location="../openide/openide-13javac-workaround.jar"/>
+    <pathelement location="../openide/netbeans/lib/openide.jar"/>
+    <pathelement location="../openide/loaders/netbeans/lib/openide-loaders.jar"/>
+  </path>
+
   <target name="javadoc" description="Build editor module API documentation.">
-    <tstamp/>
-    <property name="apis-footer" value="&lt;font size=-2 color=gray&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/font&gt;"/>
-    <echo message="Build editor module API documentation..."/>
-    <mkdir dir="javadoc"/>
-    <javadoc destdir="javadoc"
-             packagenames="org.netbeans.editor,org.netbeans.editor.ext,org.netbeans.editor.ext.html,org.netbeans.editor.ext.java,org.netbeans.editor.ext.plain,org.netbeans.editor.ext.html.dtd,org.netbeans.modules.editor,org.netbeans.modules.editor.html,org.netbeans.modules.editor.java,org.netbeans.modules.editor.options,org.netbeans.modules.editor.plain"
-             doctitle="NetBeans editor module APIs"
-             windowtitle="NetBeans editor module APIs"
-             bottom="${apis-footer}"
-             use="true"
-             splitindex="true"
-             author="false"
-             version="false"
-             maxmemory="384m"
-    >
-      <sourcepath>
-        <pathelement location="libsrc"/>
-        <pathelement location="src"/>
-      </sourcepath>
-      <classpath>
-        <pathelement location="../core/netbeans/lib/core.jar"/>
-        <pathelement location="libsrc"/>
-	<pathelement location="../openide/openide-13javac-workaround.jar"/>
-        <fileset dir="../openide/netbeans/lib">
-          <include name="openide*.jar" />
-        </fileset>
-        <fileset dir="../core/external">
-          <include name="regexp*.jar"/>
-          <include name="xml-apis*.jar"/>
-        </fileset>
-      </classpath>
-    </javadoc>    
+     <selector id="editor_javadoc_files" >
+       <or>
+         <filename name="src/**/*.java" />
+         <filename name="libsrc/**/*.java" />
+       </or>
+     </selector>
+
+    <ant dir="../nbbuild/javadoctools" antfile="template.xml" target="javadoc" inheritRefs="true">
+        <property name="javadoc.base" location="."/>
+        <property name="javadoc.name" value="EditorAPI"/>
+        <property name="javadoc.title" value="Editor module API"/>
+		<property name="javadoc.packages" value="org.netbeans.editor,org.netbeans.editor.ext,org.netbeans.editor.ext.html,org.netbeans.editor.ext.java,org.netbeans.editor.ext.plain,org.netbeans.editor.ext.html.dtd,org.netbeans.modules.editor,org.netbeans.modules.editor.html,org.netbeans.modules.editor.java,org.netbeans.modules.editor.options,org.netbeans.modules.editor.plain"/>
+        <property name="javadoc.classpath" refid="cp"/>
+        <property name="javadoc.src" value="../../editor"/>
+        <property name="javadoc.files" value="editor_javadoc_files" />
+        <property name="javadoc.arch" location="arch/arch-editor.xml"/>
+    </ant>
   </target>
 
 </project>

Index: autoupdate/build.xml
===================================================================
RCS file: /cvs/autoupdate/build.xml,v
retrieving revision 1.40
diff -u -r1.40 build.xml
--- autoupdate/build.xml	14 Feb 2003 08:48:28 -0000	1.40
+++ autoupdate/build.xml	3 Nov 2003 15:22:08 -0000
@@ -22,29 +22,22 @@
   <taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" classpath="../nbbuild/nbantext.jar"/>
   <taskdef name="locjar" classname="org.netbeans.nbbuild.LocalizedJar" classpath="../nbbuild/nbantext.jar"/>
   <taskdef name="genlist" classname="org.netbeans.nbbuild.MakeListOfNBM" classpath="../nbbuild/nbantext.jar"/>
-
-  <path id="xml-apis-cp">
-    <fileset dir="../core/external">
-      <include name="xml-apis*.jar"/>
-    </fileset>
+  
+  <path id="cp">
+    <pathelement location="../openide/openide-13javac-workaround.jar"/>
+    <pathelement location="../openide/netbeans/lib/openide.jar"/>
+    <pathelement location="libsrc"/>
+    <pathelement location="../core/netbeans/lib/core.jar"/>
+    <!-- src must be on classpath, otherwise AspectJ compiler (ajc) wouldn't compile -->
+    <!-- commenting out for now, readd if required: -jglick
+    <pathelement location="src" />
+    -->
   </path>
 
   <target name="compile">
-    <javac srcdir="libsrc" destdir="libsrc" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
-      <classpath refid="xml-apis-cp"/>
-    </javac>
+    <javac srcdir="libsrc" destdir="libsrc" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}"/>
     <javac srcdir="src" destdir="src" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
-      <classpath>
-        <pathelement location="../openide/openide-13javac-workaround.jar"/>
-        <pathelement location="../openide/netbeans/lib/openide.jar"/>
-        <pathelement location="libsrc"/>
-	<pathelement location="../core/netbeans/lib/core.jar"/>
-        <path refid="xml-apis-cp"/>
-        <!-- src must be on classpath, otherwise AspectJ compiler (ajc) wouldn't compile -->
-        <!-- commenting out for now, readd if required: -jglick
-        <pathelement location="src" />
-        -->
-      </classpath>
+      <classpath refid="cp" />
     </javac>
   </target>
 
@@ -101,35 +94,15 @@
   </target>
 
   <target name="javadoc" description="Build autoupdate module API documentation.">
-    <tstamp/>
-    <property name="apis-footer" value="&lt;font size=-2 color=gray&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/font&gt;"/>
-    <echo message="Build autoupdate module API documentation..."/>
-    <mkdir dir="javadoc"/>
-    <javadoc destdir="javadoc"
-             packagenames="org.netbeans.updater,org.netbeans.modules.autoupdate"
-             doctitle="NetBeans autoupdate module APIs"
-             windowtitle="NetBeans autoupdate module APIs"
-             bottom="${apis-footer}"
-             use="true"
-             splitindex="true"
-             author="false"
-             version="false"
-             maxmemory="384m"
-    >
-      <sourcepath>
-        <pathelement location="src"/>
-        <pathelement location="libsrc"/>
-      </sourcepath>
-      <classpath>
-        <!-- this classpath probably should be the same as for compilation -->
-        <pathelement location="../openide/openide-13javac-workaround.jar"/>
-        <pathelement location="libsrc"/>
-        <fileset dir="../openide/netbeans/lib">
-          <include name="openide*.jar" />
-        </fileset>
-        <path refid="xml-apis-cp"/>
-      </classpath>
-    </javadoc>    
+        <ant dir="../nbbuild/javadoctools" antfile="template.xml" target="javadoc">
+            <property name="javadoc.base" location="."/>
+            <property name="javadoc.name" value="AutoUpdateAPI"/>
+            <property name="javadoc.title" value="Auto Update API"/>
+            <property name="javadoc.packages" value=""/>
+            <property name="javadoc.classpath" refid="cp"/>
+            <property name="javadoc.arch" location="arch/arch-autoupdate.xml"/>
+<!--            <property name="javadoc.docfiles" location="api/doc"/> -->
+        </ant>
   </target>
 
 </project>
Index: nbbuild/build.xml
===================================================================
RCS file: /cvs/nbbuild/build.xml,v
retrieving revision 1.293.2.11
diff -u -r1.293.2.11 build.xml
--- nbbuild/build.xml	22 May 2003 18:44:55 -0000	1.293.2.11
+++ nbbuild/build.xml	3 Nov 2003 15:22:11 -0000
@@ -768,13 +768,40 @@
 
   <!-- build javadoc for selected modules -->
   <target name="build-javadoc" depends="merge">
+      <mkdir dir="modules_exported_interfaces" />
+      <property name="export.interfaces" location="modules_exported_interfaces" />
+      
       <!-- build javadoc for supported APIs -->
       <for-each startdir=".." target="javadoc" locations="${fixedmodules}"/>
       <!-- build javadoc for unsupported APIs -->
       <for-each startdir=".." target="javadoc" locations="${modules}"/>
       <taskdef name="simplemerge" classname="org.netbeans.nbbuild.SimpleMerge" classpath="nbantext.jar"/>
       <simplemerge topdir=".." subdir="javadoc" dest="modules_javadoc" modules="${fixedmodules}"/>
-      <simplemerge topdir=".." subdir="javadoc" dest="modules_javadoc/UnsupportedAPIs" modules="${modules}"/>
+      <simplemerge topdir=".." subdir="javadoc" dest="modules_javadoc" modules="${modules}"/>
+      
+      
+      <echo file="modules_exported_interfaces/header.gen" >&lt;?xml version="1.0" encoding="UTF-8"?&gt;
+&lt;apis&gt;
+</echo>
+      
+      <echo file="modules_exported_interfaces/footer.gen" >
+        &lt;/apis&gt;
+      </echo>
+      
+      <concat destfile="modules_javadoc/index.xml" >
+          <fileset dir="modules_exported_interfaces" includes="header.gen" />
+          <fileset dir="modules_exported_interfaces" includes="*" excludes="*.gen" />
+          <fileset dir="modules_exported_interfaces" includes="footer.gen" />
+      </concat>
+      
+      <style 
+        in="modules_javadoc/index.xml" 
+        out="modules_javadoc/index.html" 
+        style="javadoctools/export2html.xsl"
+      />
+      
+      <delete dir="modules_exported_interfaces" />
+      
   </target>
 
   <target name="build-messaging" depends="init">
Index: nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd,v
retrieving revision 1.3.6.1
diff -u -r1.3.6.1 Arch.dtd
--- nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd	22 Apr 2003 14:35:28 -0000	1.3.6.1
+++ nbbuild/antsrc/org/netbeans/nbbuild/Arch.dtd	3 Nov 2003 15:22:11 -0000
@@ -80,6 +80,7 @@
 <!ELEMENT question (#PCDATA | %inline; | hint)* >
 <!ATTLIST question
           id CDATA #REQUIRED
+          when CDATA #IMPLIED
 >
 
 <!ELEMENT hint %Flow; >
Index: nbbuild/antsrc/org/netbeans/nbbuild/Arch.java
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/Arch.java,v
retrieving revision 1.15.2.1
diff -u -r1.15.2.1 Arch.java
--- nbbuild/antsrc/org/netbeans/nbbuild/Arch.java	22 Apr 2003 14:35:28 -0000	1.15.2.1
+++ nbbuild/antsrc/org/netbeans/nbbuild/Arch.java	3 Nov 2003 15:22:11 -0000
@@ -167,11 +167,7 @@
             
             if (!removeRevisionTags (answersVersion).equals (removeRevisionTags (questionsVersion))) {
                 String msg = questionsFile.getAbsolutePath() + ": answers were created for questions version \"" + answersVersion + "\" but current version of questions is \"" + questionsVersion + "\"";
-                if ("true".equals (this.getProject().getProperty("arch.warn"))) {
-                    log (msg, Project.MSG_WARN);
-                } else {
-                    throw new BuildException (msg);
-                }
+                log (msg, Project.MSG_WARN);
             }
         }
         
Index: nbbuild/javadoctools/export2html.xsl
===================================================================
RCS file: nbbuild/javadoctools/export2html.xsl
diff -N nbbuild/javadoctools/export2html.xsl
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ nbbuild/javadoctools/export2html.xsl	3 Nov 2003 15:22:11 -0000
@@ -0,0 +1,304 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+                Sun Public License Notice
+
+The contents of this file are subject to the Sun Public License
+Version 1.0 (the "License"). You may not use this file except in
+compliance with the License. A copy of the License is available at
+http://www.sun.com/
+
+The Original Code is NetBeans. The Initial Developer of the Original
+Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
+Microsystems, Inc. All Rights Reserved.
+-->
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+    <xsl:output method="html"/>
+
+    <!-- unique key over all groups of apis -->
+    <xsl:key match="//api[@type='export']" name="apiGroups" use="@group" />
+    
+    <xsl:template match="/apis" >
+        <html>
+        <head>
+            <!-- projects.netbeans.org -->
+           <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
+           <title>NetBeans API List</title>
+            <link rel="stylesheet" href="http://www.netbeans.org/netbeans.css" type="text/css"/>
+
+          <link REL="icon" href="http://www.netbeans.org/favicon.ico" type="image/ico" />
+          <link REL="shortcut icon" href="http://www.netbeans.org/favicon.ico" />
+
+        </head>
+
+        <body>
+
+        <center><h1>NetBeans API List</h1></center>
+
+        This document provides a list of <em>NetBeans APIs</em> with a short description
+        of what they are used for, and a table describing different types of interfaces
+        (see <a href="http://openide.netbeans.org/tutorial/api-design.html#api">What is
+        an API?</a> to understand why we list DTDs, file formats, etc.) and with
+        a stability category (see <a
+        href="http://openide.netbeans.org/tutorial/api-design.html#life">API
+        life-cycle</a> for a list of possible categories and their descriptions).
+        The aim is to provide as detailed a definition of NetBeans module 
+        external interfaces as possible and give other developers a chance to decide
+        whether they want to depend on a particular API or not.
+        <p/>
+        To get the API of your module listed here, see the documentation for the 
+        Javadoc building
+        <a href="http://openide.netbeans.org/tutorial/api.html">infrastructure</a>.
+
+        <hr/>
+        <xsl:call-template name="list-modules" />
+        <hr/>
+        <xsl:apply-templates />
+        
+        </body>
+        </html>
+       
+    </xsl:template>
+    
+    <xsl:template name="list-modules">
+        <h2>Content</h2>
+        <ul>
+            <xsl:for-each select="/apis/module" >
+            	<xsl:sort select="@name" />
+                <xsl:choose>
+                    <xsl:when test="api" >
+                       <li>
+                           <a href="#def-api-{@name}"><xsl:value-of select="@name"/></a> -
+                            <!-- XXX the following is crap; e.g. messes up descs of Dialogs API, I/O API, ... -->
+                            <!-- Should use e.g.:
+                            <answer id="arch-what">
+                                <span class="summary">This API does such-and-such.</span>
+                                It also does some other less important stuff.
+                            </answer>
+                            -->
+                          <xsl:comment>Begin of first sentenece</xsl:comment>
+                          <xsl:apply-templates mode="first-sentence" select="description" />
+                          <xsl:comment>End of first sentenece</xsl:comment>.
+                        </li>
+                    </xsl:when>
+                    <xsl:otherwise>
+                            <!-- will be covered later -->
+                    </xsl:otherwise>
+                </xsl:choose>
+            </xsl:for-each>
+            <xsl:for-each select="/apis/module" >
+                <xsl:sort select="api" order="descending" />
+            	<xsl:sort select="@name" />
+                <xsl:choose>
+                    <xsl:when test="api" >
+                            <!-- covered before -->
+                    </xsl:when>
+                    <xsl:otherwise>
+                        <li>
+                            <xsl:variable name="where" select="substring-before(@target, '/')"/>
+                            <b><a href="{$where}/index.html"><xsl:value-of select="$where"/></a></b>
+                            - no API description provided
+                            (see <a href="http://openide.netbeans.org/tutorial/api.html">how to do it</a>)
+                        </li>
+                    </xsl:otherwise>
+                </xsl:choose>
+             </xsl:for-each>
+        </ul>
+    </xsl:template>
+
+    <xsl:template match="module">
+            <xsl:variable name="interfaces" select="api[@type='export']" />
+            <xsl:variable name="module.name" select="@name" />
+            <xsl:variable name="arch.stylesheet" select="@stylesheet" />
+            <xsl:variable name="arch.overviewlink" select="@overviewlink" />
+            <xsl:variable name="arch.footer" select="@footer" />
+            <xsl:variable name="arch.target" select="@target" />
+
+            <xsl:if test="$interfaces">
+                <h3>
+
+                    <a name="def-api-{$module.name}"><xsl:value-of select="$module.name"/></a>
+                    
+                    (<a>
+                        <xsl:attribute name="href">
+                            <xsl:call-template name="filedirapi" >
+                                <xsl:with-param name="arch.target" select="$arch.target" />
+                            </xsl:call-template>
+                            <xsl:text>/index.html</xsl:text>
+                        </xsl:attribute>
+                        <xsl:text>javadoc</xsl:text>
+                    </a>,
+                    <a>
+                        <xsl:attribute name="href">
+                            <xsl:call-template name="filedirapi" >
+                                <xsl:with-param name="arch.target" select="$arch.target" />
+                            </xsl:call-template>
+                            <xsl:text>.zip</xsl:text>
+                        </xsl:attribute>
+                        <xsl:text>download</xsl:text>
+                    </a>)
+                </h3>
+
+                <div><xsl:apply-templates select="description"/></div>
+
+                <xsl:if test="deploy-dependencies">
+                    <div>
+                       <p><b>Usage:</b></p>
+                       <xsl:apply-templates select="deploy-dependencies"/>
+                    </div>
+                </xsl:if>
+
+                <p/>
+                <table border="3" cellpadding="6" width="90%">
+                    <thead>
+                        <th valign="bottom" width="30%"><b>Interface Name</b></th>
+                        <th valign="bottom" width="15%"><b>Stability Classification</b></th>
+                        <th valign="bottom" width="45%"><b>Specified in What Document?</b></th>
+                    </thead>
+
+                    <xsl:for-each select="$interfaces">
+                        <tr/>
+                        <xsl:if test="@group='java'" >
+                            <xsl:call-template name="api" />
+                        </xsl:if>
+                    </xsl:for-each>
+
+                    <xsl:for-each select="//api[generate-id() = generate-id(key('apiGroups', @group))]">
+                        <xsl:variable name="grp" select="@group" />
+                        <xsl:if test="$grp!='java'" >
+                            <xsl:variable name="apis" select="/apis" />
+                            <xsl:variable name="module" select="$apis/module[@name=$module.name]" />
+
+                            <xsl:variable name="allOfTheGroup" select="$module/api[@group=$grp]" />
+                            <xsl:if test="$allOfTheGroup">
+                                <tr/>
+                                <td>Set of <xsl:value-of select="$grp"/> APIs</td>
+                                <td>Individual</td>
+                                <td>
+                                    <a href="{$arch.target}#group-{$grp}">table with definitions</a>
+                                </td>
+                            </xsl:if>
+                        </xsl:if>
+                    </xsl:for-each>
+
+                </table>
+            </xsl:if>
+
+
+            <P/>
+
+    </xsl:template>
+
+    <xsl:template name="api">
+        <xsl:variable name="name" select="@name" />
+        <xsl:variable name="type" select="@type" />
+        <xsl:variable name="category" select="@category" />
+        <xsl:variable name="url" select="@url" />
+
+        <tbody>
+            <td>
+                <xsl:value-of select="$name"/>
+            </td>
+            <!--
+            <td>
+                <xsl:choose>
+                    <xsl:when test="$type='import'">Imported</xsl:when>
+                    <xsl:when test="$type='export'">Exported</xsl:when>
+                    <xsl:otherwise>WARNING: <xsl:value-of select="$type" /></xsl:otherwise>
+                </xsl:choose>
+            </td> -->
+            <td> <!-- stability category -->
+                <xsl:choose>
+                    <xsl:when test="$category='official'">Official</xsl:when>
+                    <xsl:when test="$category='stable'">Stable</xsl:when>
+                    <xsl:when test="$category='devel'">Under Development</xsl:when>
+                    <xsl:when test="$category='third'">Third party</xsl:when>
+                    <xsl:when test="$category='standard'">Standard</xsl:when>
+                    <xsl:when test="$category='friend'">Friend</xsl:when>
+                    <xsl:when test="$category='private'">Private</xsl:when>
+                    <xsl:when test="$category='deprecated'">Deprecated</xsl:when>
+                    <xsl:otherwise>
+                        <xsl:message>
+                            WARNING: <xsl:value-of select="$category"/>
+                        </xsl:message>
+                    </xsl:otherwise>
+                </xsl:choose>
+            </td>
+
+            <td> <!-- url -->
+                <a href="{$url}"><xsl:value-of select="$url"/></a>
+            </td>
+        </tbody>
+
+    </xsl:template>
+
+    <xsl:template match="api-ref">
+        <!-- simply bold the name, it link will likely be visible bellow -->
+        <b>
+            <xsl:value-of select="@name" />
+        </b>
+    </xsl:template>
+
+    <!-- extracts first part before slash from LoadersAPI/bleble.html or
+     and prints it or prints OpenAPIs as a fallback -->
+
+    <xsl:template name="filedirapi" >
+        <xsl:param name="arch.target" />
+    
+        <xsl:if test="substring-before($arch.target,'/')">
+            <xsl:value-of select="substring-before($arch.target,'/')" />
+        </xsl:if>
+        <xsl:if test="not (substring-before($arch.target,'/'))">
+            <xsl:text>OpenAPIs</xsl:text>
+        </xsl:if>
+    </xsl:template>
+
+
+    <!-- Format random HTML elements as is: -->
+    <xsl:template match="@*|node()">
+        <xsl:copy>
+            <xsl:apply-templates select="@*|node()"/>
+        </xsl:copy>
+    </xsl:template>
+
+    <!-- Gets the first sentence with HTML tags -->
+    
+    <xsl:template mode="first-sentence" match="api-ref">
+        <b><xsl:value-of select="@name" /></b><xsl:text> </xsl:text>
+    </xsl:template>
+
+    <xsl:template mode="first-sentence" match="node()">
+        <xsl:choose>
+            <xsl:when test="count(child::*) = 0" >
+                <xsl:variable name="first-sentence" select="substring-before(normalize-space(), '. ')" />
+                <xsl:variable name="first-dot" select="substring-before(normalize-space(), '.')" />
+                <xsl:choose>
+                    <xsl:when test="$first-sentence" >
+                        <xsl:value-of select="$first-sentence" />
+                        <!-- this trick starts comment which disables output produces after 
+                           Which means comments out everything after the .
+                           -->
+                        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
+                    </xsl:when>
+                    <xsl:when test="$first-dot" >
+                        <xsl:value-of select="$first-dot" />
+                        <!-- this trick starts comment which disables output produces after 
+                           Which means comments out everything after the .
+                           -->
+                        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
+                    </xsl:when>
+                    <xsl:otherwise>
+                        <xsl:value-of select="." />
+                    </xsl:otherwise>
+                </xsl:choose>
+                <xsl:apply-templates mode="first-sentence" select="child::*"/>
+            </xsl:when>
+            <xsl:otherwise>
+                <xsl:apply-templates mode="first-sentence" select="node()"/>
+            </xsl:otherwise>
+        </xsl:choose>
+        
+    </xsl:template>
+    
+</xsl:stylesheet>
+
+
Index: nbbuild/javadoctools/exportInterfaces.xsl
===================================================================
RCS file: nbbuild/javadoctools/exportInterfaces.xsl
diff -N nbbuild/javadoctools/exportInterfaces.xsl
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ nbbuild/javadoctools/exportInterfaces.xsl	3 Nov 2003 15:22:11 -0000
@@ -0,0 +1,83 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+                Sun Public License Notice
+
+The contents of this file are subject to the Sun Public License
+Version 1.0 (the "License"). You may not use this file except in
+compliance with the License. A copy of the License is available at
+http://www.sun.com/
+
+The Original Code is NetBeans. The Initial Developer of the Original
+Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
+Microsystems, Inc. All Rights Reserved.
+-->
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+    <xsl:output method="xml" omit-xml-declaration="yes"/>
+    
+    <xsl:param name="arch.stylesheet"/>
+    <xsl:param name="arch.overviewlink"/>
+    <xsl:param name="arch.footer"/>
+    <xsl:param name="arch.target"/>
+
+    <xsl:template match="/">
+        <xsl:variable name="interfaces" select="//api[@type='export']" />
+
+        <module name="{api-answers/@module}"
+                target="{$arch.target}"
+                stylesheet="{$arch.stylesheet}"
+                overviewlink="{$arch.overviewlink}"
+                footer="{$arch.footer}">
+            
+            <description>
+                <xsl:apply-templates select="api-answers/answer[@id='arch-what']/node()" mode="description"/>
+            </description>
+
+            <xsl:variable name="deploy-dependencies" select="api-answers/answer[@id='deploy-dependencies']"/>
+            <xsl:if test="$deploy-dependencies">
+                <deploy-dependencies>
+                    <xsl:apply-templates select="$deploy-dependencies/node()"/>
+                </deploy-dependencies>
+            </xsl:if>
+
+            <xsl:for-each select="$interfaces">
+                <xsl:call-template name="api" >
+                    <xsl:with-param name="group" select="@group" />
+                    <xsl:with-param name="type" select="@type" />
+                </xsl:call-template>
+            </xsl:for-each>
+
+        </module>
+    </xsl:template>
+
+    <xsl:template name="api">
+        <xsl:param name="group" />
+        <xsl:param name="type" />
+    
+        <xsl:variable name="name" select="@name" />
+        <xsl:variable name="category" select="@category" />
+        <xsl:variable name="url" select="@url" />
+
+        <api name="{$name}" type="{$type}" category="{$category}">
+          <xsl:if test="string-length($url)>0"><xsl:attribute name="url"><xsl:value-of select="$url" /></xsl:attribute>
+          </xsl:if>
+          <xsl:choose >
+            <xsl:when test="$group"><xsl:attribute name="group"><xsl:value-of select="$group" /></xsl:attribute></xsl:when>
+            <xsl:otherwise><xsl:attribute name="group">java</xsl:attribute></xsl:otherwise>
+          </xsl:choose>
+
+          <xsl:apply-templates />
+        </api>
+    </xsl:template>
+     
+    <xsl:template match="api" mode="description">
+        <api-ref name="{@name}"/>
+    </xsl:template>  
+    
+    <!-- Format random HTML elements as is: -->
+    <xsl:template match="@*|node()">
+       <xsl:copy  >
+          <xsl:apply-templates select="@*|node()"/>
+       </xsl:copy>
+    </xsl:template>
+  
+</xsl:stylesheet> 
Index: nbbuild/javadoctools/template.xml
===================================================================
RCS file: /cvs/nbbuild/javadoctools/template.xml,v
retrieving revision 1.2.2.1
diff -u -r1.2.2.1 template.xml
--- nbbuild/javadoctools/template.xml	4 Mar 2003 03:48:29 -0000	1.2.2.1
+++ nbbuild/javadoctools/template.xml	3 Nov 2003 15:22:11 -0000
@@ -31,6 +31,8 @@
 ${javadoc.overview}   Overview HTML file; default a generic page
 ${javadoc.check.external.links}  set to "true" to check external HTTP links
 ${javadoc.header}     Special header text.
+${javadoc.manifest}   API module manifest file - permits @SPECIFICATION-VERSION@ in arch summary to be substituted
+${javadoc.web.root}   Base URL for online Javadoc for linking; default http://www.netbeans.org/download/dev/javadoc
 
 To call this script you MUST use the form of <ant> with the 'dir' attribute. This
 script expects that its basedir is the directory containing it. If you use only
@@ -43,8 +45,18 @@
     </target>
 
     <!-- javadoc -->
+    
+    <target name="copy-netbeans.css">
+        <!-- Note: this will indeed modify working sources if there is a change. -->
+        <!-- That is as desired: want an up-to-date copy of this file. -->
+        <!-- Note also that if www or testwww are not checked out, nothing happens; use CVS copy. -->
+        <copy file="../../testwww/www/netbeans.css" tofile="netbeans.css" failonerror="false"/>
+        <copy file="../../www/www/netbeans.css" tofile="netbeans.css" failonerror="false"/>
+        <copy file="../../testwww/www/nb_special.css" tofile="netbeans-lite.css" failonerror="false"/>
+        <copy file="../../www/www/nb_special.css" tofile="netbeans-lite.css" failonerror="false"/>
+    </target>
 
-    <target name="javadoc-init">
+    <target name="javadoc-init" depends="copy-netbeans.css">
         <!-- Output dir (will create ${javadoc.name}/ and ${javadoc.name}.zip beneath this): -->
         <property name="javadoc.out" location="${javadoc.base}/javadoc"/>
         <property name="javadoc.out.dir" location="${javadoc.out}/${javadoc.name}"/>
@@ -57,14 +69,21 @@
         <property name="javadoc.apichanges" location="apichanges-empty.xml"/>
         <property name="javadoc.arch" location="arch-empty.xml"/>
         <!-- Docs to link to: -->
-        <property name="javadoc.docs.jdk" value="http://java.sun.com/j2se/1.4.1/docs/api"/>
-        <property name="javadoc.docs.openide" value="http://www.netbeans.org/download/dev/javadoc/OpenAPIs"/>
-        <property name="javadoc.docs.openide/io" value="http://www.netbeans.org/download/dev/javadoc/InputOutputAPI"/>
-        <property name="javadoc.docs.openide/execution" value="http://www.netbeans.org/download/dev/javadoc/ExecutionAPI"/>
-        <property name="javadoc.docs.openide/compiler" value="http://www.netbeans.org/download/dev/javadoc/CompilerAPI"/>
-        <property name="javadoc.docs.openide/deprecated" value="http://www.netbeans.org/download/dev/javadoc/DeprecatedAPIs"/>
-        <property name="javadoc.docs.core/javahelp" value="http://www.netbeans.org/download/dev/javadoc/JavaHelpAPI"/>
-        <property name="javadoc.docs.java/api" value="http://www.netbeans.org/download/dev/javadoc/JavaSupportAPIs"/>
+        <property name="javadoc.docs.jdk" value="http://java.sun.com/j2se/1.4.2/docs/api"/>
+        <property name="javadoc.web.root" value="http://www.netbeans.org/download/dev/javadoc"/>
+        <property name="javadoc.docs.openide" value="${javadoc.web.root}/OpenAPIs"/>
+        <property name="javadoc.docs.openide/io" value="${javadoc.web.root}/InputOutputAPI"/>
+        <property name="javadoc.docs.openide/execution" value="${javadoc.web.root}/ExecutionAPI"/>
+        <property name="javadoc.docs.openide/compiler" value="${javadoc.web.root}/CompilerAPI"/>
+        <property name="javadoc.docs.openide/loaders" value="${javadoc.web.root}/LoadersAPI"/>
+        <property name="javadoc.docs.openide/deprecated" value="${javadoc.web.root}/DeprecatedAPIs"/>
+        <property name="javadoc.docs.core/javahelp" value="${javadoc.web.root}/JavaHelpAPI"/>
+        <property name="javadoc.docs.core/term" value="${javadoc.web.root}/UnsupportedAPIs/TerminalEmulatorAPI"/>
+        <property name="javadoc.docs.java/api" value="${javadoc.web.root}/JavaSupportAPIs"/>
+        <property name="javadoc.docs.java/srcmodel" value="${javadoc.web.root}/JavaHierarchyAPI"/>
+        <property name="javadoc.docs.openide/registry" value="${javadoc.web.root}/RegistryAPI"/>
+        <property name="javadoc.docs.openide/convertor" value="${javadoc.web.root}/ConvertorAPI"/>
+        <property name="javadoc.docs.openide/looks" value="${javadoc.web.root}/LooksAPI"/>
         <!-- add more here as needed... -->
         <property name="javadoc.css.dir" location="."/>
         <property name="javadoc.css.main" location="${javadoc.css.dir}/javadoc.css"/>
@@ -72,7 +91,7 @@
             <include name="*.css"/>
         </fileset>
         <property name="javadoc.check.external.links" value="false"/>
-        <property name="javadoc.header" value=""/>
+        <property name="javadoc.header" value="&amp;nbsp;"/>
         <mkdir dir="${javadoc.out.dir}"/>
     </target>
 
@@ -86,11 +105,23 @@
             <srcfiles dir=".">
                 <include name="apichanges.xsl"/>
             </srcfiles>
-            <!-- XXX Ant 1.5.1:
             <srcfiles file="${javadoc.apichanges}"/>
             <srcfiles file="${javadoc.arch}"/>
-            -->
         </uptodate>
+        <condition property="javadoc.should.not.be.generated" >
+            <or>
+                <isset property="javadoc.up.to.date" />
+                <not>
+                    <isset property="javadoc.packages" />
+                </not>
+                <equals arg1="${javadoc.packages}" arg2="" />
+            </or>
+        </condition>
+        <!--
+        <echo message="AAA: ${javadoc.should.not.be.generated}" />
+        <echo message="BBB: ${javadoc.up.to.date}" />
+        <echo message="CCC: ${javadoc.packages}" />
+        -->
     </target>
 
     <target name="javadoc-make-plain-title" unless="javadoc.main.page">
@@ -100,11 +131,15 @@
     <target name="javadoc-make-hyperlinked-title" if="javadoc.main.page">
         <property name="javadoc.hyperlinked.title" value='&lt;a href="@TOP@${javadoc.main.page}"&gt;${javadoc.title}&lt;/a&gt;'/>
     </target>
-    
-    <target name="javadoc-stage-main" depends="javadoc-init,javadoc-check-timestamps,javadoc-make-plain-title,javadoc-make-hyperlinked-title" unless="javadoc.up.to.date">
+
+    <target name="javadoc-stage-alternative" depends="javadoc-init,javadoc-check-timestamps" if="javadoc.should.not.be.generated" unless="javadoc.up.to.date" >
+        <!-- if no packages are specified, this is used to generate index.html from the overview page -->
+        <copy file="${javadoc.overview}" tofile="${javadoc.out.dir}/index.html" />
+    </target>
+    <target name="javadoc-stage-main" depends="javadoc-init,javadoc-check-timestamps,javadoc-make-plain-title,javadoc-make-hyperlinked-title" unless="javadoc.should.not.be.generated">
         <tstamp/>
         <property name="javadoc.footer" value='&lt;span class="footnote"&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/span&gt;'/>
-        <javadoc author="false" destdir="${javadoc.out.dir}" packagenames="${javadoc.packages}" stylesheetfile="${javadoc.css.main}" windowtitle="NetBeans ${javadoc.title}" overview="${javadoc.overview}" splitindex="true" use="true" version="false">
+        <javadoc source="1.4" author="false" destdir="${javadoc.out.dir}" packagenames="${javadoc.packages}" stylesheetfile="${javadoc.css.main}" windowtitle="NetBeans ${javadoc.title}" overview="${javadoc.overview}" splitindex="true" use="true" version="false">
             <sourcepath>
                 <pathelement location="${javadoc.docfiles}"/>
                 <pathelement location="${javadoc.src}"/>
@@ -119,12 +154,17 @@
             <link href="${javadoc.docs.openide/io}" offline="true" packagelistloc="../../openide/io/javadoc/InputOutputAPI"/>
             <link href="${javadoc.docs.openide/execution}" offline="true" packagelistloc="../../openide/execution/javadoc/ExecutionAPI"/>
             <link href="${javadoc.docs.openide/compiler}" offline="true" packagelistloc="../../openide/compiler/javadoc/CompilerAPI"/>
+            <link href="${javadoc.docs.openide/loaders}" offline="true" packagelistloc="../../openide/loaders/javadoc/LoadersAPI"/>
             <link href="${javadoc.docs.core/javahelp}" offline="true" packagelistloc="../../core/javahelp/javadoc/JavaHelpAPI"/>
+            <link href="${javadoc.docs.core/term}" offline="true" packagelistloc="../../core/term/javadoc/TerminalEmulatorAPI"/>
             <link href="${javadoc.docs.java/api}" offline="true" packagelistloc="../../java/api/javadoc/JavaSupportAPIs"/>
+            <link href="${javadoc.docs.java/srcmodel}" offline="true" packagelistloc="../../java/srcmodel/javadoc/JavaHierarchyAPI"/>
+            <link href="${javadoc.docs.openide/registry}" offline="true" packagelistloc="../../openide/registry/javadoc/RegistryAPI"/>
+            <link href="${javadoc.docs.openide/convertor}" offline="true" packagelistloc="../../openide/convertor/javadoc/ConvertorAPI"/>
+            <link href="${javadoc.docs.openide/looks}" offline="true" packagelistloc="../../openide/looks/javadoc/LooksAPI"/>
             <doctitle>NetBeans ${javadoc.title}</doctitle>
             <header>${javadoc.header}</header>
             <bottom>${javadoc.footer}</bottom>
-            <!-- XXX in Ant 1.5.1 add: <tag name="beaninfo" scope="methods" description="Bean info:"/> -->
         </javadoc>
         <copy todir="${javadoc.out.dir}">
             <fileset refid="javadoc.css.files"/>
@@ -135,7 +175,7 @@
         <ant dir="../../libs/external" target="unscramble"/>
         <xmlvalidate file="${javadoc.apichanges}" failonerror="true"/>
         <style in="${javadoc.apichanges}" out="${javadoc.out.dir}/apichanges.html" style="apichanges.xsl">
-            <param name="javadoc-url-base" expression="http://www.netbeans.org/download/dev/javadoc/${javadoc.name}"/>
+            <param name="javadoc-url-base" expression="."/>
         </style>
     </target>
 
@@ -143,27 +183,69 @@
         <taskdef name="arch" classname="org.netbeans.nbbuild.Arch">
             <classpath>
                 <pathelement location="../nbantext.jar"/>
+                <fileset dir="../../libs/external">
+                    <include name="xerces*.jar"/>
+                </fileset>
             </classpath>
         </taskdef>
         <!-- Warn about incorrect question version, but do not make build fail: -->
         <property name="arch.warn" value="true"/>
         <arch answers="${javadoc.arch}" output="${javadoc.out.dir}/architecture-summary.html" stylesheet="prose.css" overviewlink="overview-summary.html" footer="@FOOTER@"/>
     </target>
+
+    <target name="arch-replace-init" if="javadoc.manifest">
+        <property file="${javadoc.manifest}"/>
+        <condition property="javadoc.manifest+export.interfaces">
+            <and>
+                <isset property="javadoc.manifest"/>
+                <isset property="export.interfaces"/>
+            </and>
+        </condition>
+    </target>
+
+    <target name="javadoc-stage-arch-replace" depends="javadoc-init,javadoc-check-timestamps,arch-replace-init" unless="javadoc.up.to.date" if="javadoc.manifest">
+        <replace file="${javadoc.out.dir}/architecture-summary.html" token="@SPECIFICATION-VERSION@" value="${OpenIDE-Module-Specification-Version}"/>
+    </target>
     
-    <target name="javadoc-stage-replace" depends="javadoc-stage-main,javadoc-stage-apichanges,javadoc-stage-arch" unless="javadoc.up.to.date">
+    <!-- XXX up-to-date check here should be independent: from ${javadoc.arch} to ${export.interfaces}/${javadoc.name} -->
+    <target name="javadoc-stage-export-interfaces" depends="javadoc-init,javadoc-check-timestamps" if="export.interfaces">
+        <taskdef name="arch" classname="org.netbeans.nbbuild.Arch">
+            <classpath>
+                <pathelement location="../nbantext.jar"/>
+                <fileset dir="../../libs/external">
+                    <include name="xerces*.jar"/>
+                </fileset>
+            </classpath>
+        </taskdef>
+        <!-- Warn about incorrect question version, but do not make build fail: -->
+        <property name="arch.warn" value="true"/>
+        <property name="arch.xsl" location="exportInterfaces.xsl" />
+        <property name="arch.target" value="${javadoc.name}" />
+        <arch answers="${javadoc.arch}" output="${export.interfaces}/architecture-summary.html" stylesheet="prose.css"/>
+        <move file="${export.interfaces}/architecture-summary.html" tofile="${export.interfaces}/${javadoc.name}" />
+    </target>
+    
+    <target name="javadoc-stage-export-interfaces-replace" depends="javadoc-init,javadoc-check-timestamps,arch-replace-init" unless="javadoc.up.to.date" if="javadoc.manifest+export.interfaces">
+        <replace file="${export.interfaces}/${javadoc.name}" token="@SPECIFICATION-VERSION@" value="${OpenIDE-Module-Specification-Version}"/>
+    </target>
+    
+    <target name="javadoc-stage-replace" depends="javadoc-stage-main,javadoc-stage-alternative,javadoc-stage-apichanges,javadoc-stage-arch,javadoc-stage-arch-replace,javadoc-stage-export-interfaces,javadoc-stage-export-interfaces-replace" unless="javadoc.up.to.date">
         <replace dir="${javadoc.out.dir}">
-            <include name="**/doc-files/*.html"/>
-            <include name="**/package-summary.html"/>
-            <include name="apichanges.html"/>
-            <include name="architecture-summary.html"/>
+            <include name="**/*.html"/>
             <replacefilter token="@JDK@" value="${javadoc.docs.jdk}"/>
             <replacefilter token="@OPENIDE@" value="${javadoc.docs.openide}"/>
             <replacefilter token="@OPENIDE/IO@" value="${javadoc.docs.openide/io}"/>
             <replacefilter token="@OPENIDE/EXECUTION@" value="${javadoc.docs.openide/execution}"/>
             <replacefilter token="@OPENIDE/COMPILER@" value="${javadoc.docs.openide/compiler}"/>
+            <replacefilter token="@OPENIDE/LOADERS@" value="${javadoc.docs.openide/loaders}"/>
             <replacefilter token="@OPENIDE/DEPRECATED@" value="${javadoc.docs.openide/deprecated}"/>
             <replacefilter token="@CORE/JAVAHELP@" value="${javadoc.docs.core/javahelp}"/>
+            <replacefilter token="@CORE/TERM@" value="${javadoc.docs.core/term}"/>
             <replacefilter token="@JAVA/API@" value="${javadoc.docs.java/api}"/>
+            <replacefilter token="@JAVA/SRCMODEL@" value="${javadoc.docs.java/srcmodel}"/>
+            <replacefilter token="@OPENIDE/REGISTRY@" value="${javadoc.docs.openide/registry}"/>
+            <replacefilter token="@OPENIDE/CONVERTOR@" value="${javadoc.docs.openide/convertor}"/>
+            <replacefilter token="@OPENIDE/LOOKS@" value="${javadoc.docs.openide/looks}"/>
             <replacefilter token="@FOOTER@" value="${javadoc.footer}"/>
         </replace>
         <replace dir="${javadoc.out.dir}" token="@TOP@" value="">
@@ -193,9 +275,6 @@
         <taskdef name="checklinks" classname="org.netbeans.nbbuild.CheckLinks">
             <classpath>
                 <pathelement location="../nbantext.jar"/>
-                <fileset dir="../../core/external">
-                    <include name="regexp*.jar"/>
-                </fileset>
             </classpath>
         </taskdef>
         <checklinks basedir="${javadoc.out.dir}" checkexternal="${javadoc.check.external.links}">
Index: CheckLinks.java
===================================================================
RCS file: /cvs/nbbuild/antsrc/org/netbeans/nbbuild/CheckLinks.java,v
retrieving revision 1.9
diff -u -r1.9 CheckLinks.java
--- CheckLinks.java	27 Feb 2003 23:39:57 -0000	1.9
+++ CheckLinks.java	5 Nov 2003 15:28:54 -0000
@@ -16,6 +16,7 @@
 import java.io.*;
 import java.net.*;
 import java.util.*;
+import java.util.regex.*;
 
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.FileScanner;
@@ -23,16 +24,14 @@
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.taskdefs.MatchingTask;
 
-import org.apache.regexp.*;
 import org.apache.tools.ant.types.Mapper;
 
-// [PENDING] would be nice to have line numbers reported in output;
-// not clear what the best way to do that is without introducing
-// overhead; maybe wrapper InputStream that counts lines?
-// [PENDING] checking external links needs to go thru HTTP proxy somehow
+// XXX in Ant 1.6, permit <xmlcatalog> entries to make checking of "external" links
+// work better in the case of cross-links between APIs
 
 /** Task to check for broken links in HTML.
  * Note that this is a matching task and you must give it a list of things to match.
+ * The Java VM's configured HTTP proxy will be used (${http.proxyHost} and ${http.proxyPort}).
  * @author Jesse Glick
  */
 public class CheckLinks extends MatchingTask {
@@ -72,44 +71,41 @@
         if (! checkexternal) message += " (external URLs will be skipped)";
         log (message);
         String[] files = scanner.getIncludedFiles ();
-        // Set of known-good URLs (including all anchored variants etc.).
-        Set okurls = new HashSet (1000); // Set<URL>
-        // Set of known-bad URLs.
-        Set badurls = new HashSet (100); // Set<URL>
-        // Set of parsed base HTML URLs known to have had their contents checked.
-        Set cleanurls = new HashSet(100); // Set<URL>
+        Set okurls = new HashSet (1000); // Set<URI>
+        Set badurls = new HashSet (100); // Set<URI>
+        Set cleanurls = new HashSet(100); // Set<URI>
         for (int i = 0; i < files.length; i++) {
             File file = new File (basedir, files[i]);
-            URL fileurl;
-            try {
-                fileurl = file.toURL ();
-            } catch (MalformedURLException mfue) {
-                throw new BuildException (mfue, location);
-            }
+            URI fileurl = file.toURI();
             log ("Scanning " + file, Project.MSG_VERBOSE);
             try {
-                scan(this, file.getAbsolutePath(), fileurl, okurls, badurls, cleanurls, checkexternal, 1, mappers);
+                scan(this, getLocation().toString(), "", fileurl, okurls, badurls, cleanurls, checkexternal, 1, mappers);
             } catch (IOException ioe) {
                 throw new BuildException ("Could not scan " + file + ": " + ioe, ioe, location);
             }
         }
     }
     
-    static RE hrefOrAnchor;
-    static {
-        try {
-            hrefOrAnchor = new RE("<(a|img)(\\s+shape=\"rect\")?\\s+(href|name|src)=\"([^\"#]*)(#[^\"]+)?\"(\\s+shape=\"rect\")?>");
-        } catch (RESyntaxException rese) {
-            throw new Error (rese.toString());
-        }
-        hrefOrAnchor.setMatchFlags (RE.MATCH_CASEINDEPENDENT);
-    }
+    private static Pattern hrefOrAnchor = Pattern.compile("<(a|img)(\\s+shape=\"rect\")?\\s+(href|name|src)=\"([^\"#]*)(#[^\"]+)?\"(\\s+shape=\"rect\")?>", Pattern.CASE_INSENSITIVE);
+    private static Pattern lineBreak = Pattern.compile("^", Pattern.MULTILINE);
     
-    // recurse:
-    // 0 - just check that it can be opened
-    // 1 - check also that any links from it can be opened
-    // 2 - recurse
-    public static void scan(Task task, String referrer, URL u, Set okurls, Set badurls, Set cleanurls, boolean checkexternal, int recurse, List mappers) throws IOException {
+    /**
+     * Scan for broken links.
+     * @param task an Ant task to associate with this
+     * @param referrer the referrer file path (or full URL if not file:)
+     * @param referrerLocation the location in the referrer, e.g. ":38:12", or "" if unavailable
+     * @param u the URI to check
+     * @param okurls a set of URIs known to be fully checked (including all anchored variants etc.)
+     * @param badurls a set of URIs known to be bogus
+     * @param cleanurls a set of (base) URIs known to have had their contents checked
+     * @param checkexternal if true, check external links (all protocols besides file:)
+     * @param recurse one of:
+     *                0 - just check that it can be opened;
+     *                1 - check also that any links from it can be opened;
+     *                2 - recurse
+     * @param mappers a list of Mappers to apply to get source files from HTML files
+     */
+    public static void scan(Task task, String referrer, String referrerLocation, URI u, Set okurls, Set badurls, Set cleanurls, boolean checkexternal, int recurse, List mappers) throws IOException {
         //task.log("scan: u=" + u + " referrer=" + referrer + " okurls=" + okurls + " badurls=" + badurls + " cleanurls=" + cleanurls + " recurse=" + recurse, Project.MSG_DEBUG);
         if (okurls.contains(u) && recurse == 0) {
             // Yes it is OK.
@@ -120,14 +116,27 @@
         if (i != -1) {
             b = b.substring(0, i);
         }
-        URL base = new URL(b);
-        String frag = u.getRef();
+        URI base;
+        try {
+            base = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), /*fragment*/null);
+        } catch (URISyntaxException e) {
+            throw new Error(e);
+        }
+        String frag = u.getFragment();
+        String basepath = base.toString();
+        if ("file".equals(base.getScheme())) {
+            try {
+                basepath = new File(base).getAbsolutePath();
+            } catch (IllegalArgumentException e) {
+                task.log(normalize(referrer, mappers) + referrerLocation + ": malformed URL: " + base + " (" + e.getLocalizedMessage() + ")", Project.MSG_WARN);
+            }
+        }
         //task.log("scan: base=" + base + " frag=" + frag, Project.MSG_DEBUG);
         if (badurls.contains(u) || badurls.contains(base)) {
-            task.log(normalize(referrer, mappers) + ": broken link (already reported): " + u, Project.MSG_WARN);
+            task.log(normalize(referrer, mappers) + referrerLocation + ": broken link (already reported): " + u, Project.MSG_WARN);
             return;
         }
-        if (! checkexternal && ! "file".equals(u.getProtocol())) {
+        if (! checkexternal && ! "file".equals(u.getScheme())) {
             task.log("Skipping external link: " + base, Project.MSG_VERBOSE);
             cleanurls.add(base);
             okurls.add(base);
@@ -135,56 +144,84 @@
             return;
         }
         task.log("Checking " + u + " (recursion level " + recurse + ")", Project.MSG_VERBOSE);
-        InputStream rd;
+        CharSequence content;
         String mimeType;
         try {
-            URLConnection conn = base.openConnection ();
+            // XXX for protocol 'file', could more efficiently use a memmapped char buffer
+            URLConnection conn = base.toURL().openConnection ();
             conn.connect ();
             mimeType = conn.getContentType ();
-            rd = conn.getInputStream ();
+            InputStream is = conn.getInputStream ();
+            String enc = conn.getContentEncoding();
+            if (enc == null) {
+                enc = "UTF-8";
+            }
+            try {
+                ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                int read;
+                byte[] buf = new byte[4096];
+                while ((read = is.read(buf)) != -1) {
+                    baos.write(buf, 0, read);
+                }
+                content = baos.toString(enc);
+            } finally {
+                is.close();
+            }
         } catch (IOException ioe) {
-            task.log(normalize(referrer, mappers) + ": broken link: " + base, Project.MSG_WARN);
+            task.log(normalize(referrer, mappers) + referrerLocation + ": broken link: " + base, Project.MSG_WARN);
+            task.log("Error: " + ioe, Project.MSG_VERBOSE);
             badurls.add(base);
             badurls.add(u);
             return;
         }
         okurls.add(base);
-        Set others = null; // Set<URL>
+        // map from other URIs (hrefs) to line/col info where they occur in this file (format: ":1:2")
+        Map others = null; // Map<URI, String>
         if (recurse > 0 && cleanurls.add(base)) {
-            others = new HashSet(100);
+            others = new HashMap(100);
         }
-        try {
             if (recurse == 0 && frag == null) {
                 // That is all we wanted to check.
                 return;
             }
             if ("text/html".equals(mimeType)) {
                 task.log("Parsing " + base, Project.MSG_VERBOSE);
-                CharacterIterator it = new StreamCharacterIterator (rd);
-                int idx = 0;
+                Matcher m = hrefOrAnchor.matcher(content);
                 Set names = new HashSet(100); // Set<String>
-                while (hrefOrAnchor.match (it, idx)) {
-                    // Advance match position past end of expression:
-                    idx = hrefOrAnchor.getParenEnd (0);
+                while (m.find()) {
                     // Get the stuff involved:
-                    String type = hrefOrAnchor.getParen(3);
+                    String type = m.group(3);
                     if (type.equalsIgnoreCase("name")) {
                         // We have an anchor, therefore refs to it are valid.
-                        String name = unescape(hrefOrAnchor.getParen(4));
+                        String name = unescape(m.group(4));
                         if (names.add(name)) {
-                            okurls.add(new URL(base, "#" + name));
+                            try {
+                                okurls.add(new URI(base.getScheme(), base.getUserInfo(), base.getHost(), base.getPort(), base.getPath(), base.getQuery(), /*fragment*/name));
+                            } catch (URISyntaxException e) {
+                                task.log(normalize(basepath, mappers) + findLocation(content, m.start(4)) + ": bad anchor name: " + e.getMessage(), Project.MSG_WARN);
+                            }
                         } else if (recurse == 1) {
-                            task.log(normalize(referrer, mappers) + ": duplicate anchor name: " + name, Project.MSG_WARN);
+                            task.log(normalize(basepath, mappers) + findLocation(content, m.start(4)) + ": duplicate anchor name: " + name, Project.MSG_WARN);
                         }
                     } else {
                         // A link to some other document: href=, src=.
                         if (others != null) {
-                            String otherbase = unescape(hrefOrAnchor.getParen (4));
-                            String otheranchor = unescape(hrefOrAnchor.getParen (5));
+                            String otherbase = unescape(m.group(4));
+                            String otheranchor = unescape(m.group(5));
                             if (!otherbase.startsWith("mailto:")) {
-                                URL o = new URL(base, (otheranchor == null) ? otherbase : otherbase + otheranchor);
-                                //task.log("href: " + o);
-                                others.add(o);
+                                String uri = (otheranchor == null) ? otherbase : otherbase + otheranchor;
+                                String location = findLocation(content, m.start(4));
+                                try {
+                                    URI o = base.resolve(new URI(uri));
+                                    //task.log("href: " + o);
+                                    if (!others.containsKey(o)) {
+                                        // Only keep location info for first reference.
+                                        others.put(o, location);
+                                    }
+                                } catch (URISyntaxException e) {
+                                    // Message should contain the URI.
+                                    task.log(normalize(basepath, mappers) + location + ": bad relative URI: " + e.getMessage(), Project.MSG_WARN);
+                                }
                             }
                         } // else we are only checking that this one has right anchors
                     }
@@ -192,17 +229,16 @@
             } else {
                 task.log("Not checking contents of " + base, Project.MSG_VERBOSE);
             }
-        } finally {
-            rd.close();
-        }
         if (! okurls.contains(u)) {
-            task.log(normalize(referrer, mappers) + ": broken link: " + u, Project.MSG_WARN);
+            task.log(normalize(referrer, mappers) + referrerLocation + ": broken link: " + u, Project.MSG_WARN);
         }
         if (others != null) {
-            Iterator it = others.iterator();
+            Iterator it = others.entrySet().iterator();
             while (it.hasNext()) {
-                URL other = (URL)it.next();
-                scan(task, u.getPath(), other, okurls, badurls, cleanurls, checkexternal, recurse == 1 ? 0 : 2, mappers);
+                Map.Entry entry = (Map.Entry)it.next();
+                URI other = (URI)entry.getKey();
+                String location = (String)entry.getValue();
+                scan(task, basepath, location, other, okurls, badurls, cleanurls, checkexternal, recurse == 1 ? 0 : 2, mappers);
             }
         }
     }
@@ -260,6 +296,21 @@
             pos = search + repl.length();
         }
         return text;
+    }
+    
+    private static String findLocation(CharSequence content, int pos) {
+        Matcher lbm = lineBreak.matcher(content);
+        int line = 0;
+        int col = 1;
+        while (lbm.find()) {
+            if (lbm.start() <= pos) {
+                line++;
+                col = pos - lbm.start() + 1;
+            } else {
+                break;
+            }
+        }
+        return ":" + line + ":" + col;
     }
     
 }
Index: openide/build.xml
===================================================================
RCS file: /cvs/openide/build.xml,v
retrieving revision 1.137.2.1
diff -u -r1.137.2.1 build.xml
--- openide/build.xml	18 Aug 2003 14:02:23 -0000	1.137.2.1
+++ openide/build.xml	3 Nov 2003 15:22:11 -0000
@@ -589,8 +589,10 @@
 </echo>
   </target>
 
-  <target name="javadoc" depends="init,open-apis-check-timestamps,open-apis-maybe-skip" if="open-apis-force-rebuild"
-          description="Create Open API documentation.">
+  <target name="javadoc" depends="javadoc-plain,export-interfaces" if="open-apis-force-rebuild"
+          description="Create Open API documentation." />
+
+  <target name="javadoc-plain" depends="init,open-apis-check-timestamps,open-apis-maybe-skip" if="open-apis-force-rebuild">
     <taskdef name="checklinks" classname="org.netbeans.nbbuild.CheckLinks">
       <classpath>
         <pathelement location="../nbbuild/nbantext.jar"/>
@@ -734,6 +736,36 @@
     <zip zipfile="javadoc/OpenAPIs.zip" basedir="javadoc/OpenAPIs"/>
   </target>
 
+  <target name="export-interfaces" depends="javadoc-plain" if="export.interfaces" >
+  	<!-- is there just because the openide APIs are not separated and do not use javadoctools -->
+    <taskdef name="arch" classname="org.netbeans.nbbuild.Arch">
+      <classpath>
+        <pathelement location="../nbbuild/nbantext.jar"/>
+        <fileset dir="../libs/external">
+          <include name="xerces*.jar"/>
+        </fileset>
+      </classpath>
+    </taskdef>
+    
+    <!-- Warn about incorrect question version, but do not make build fail: -->
+    <property name="arch.warn" value="true"/>
+    <property name="arch.xsl" location="../nbbuild/javadoctools/exportInterfaces.xsl" />
+    <property name="arch.target" value="OpenAPIs/arch" />
+    <arch answers="arch/arch-openide-modules.xml" output="${export.interfaces}/openide-modules.html" />
+    <arch answers="arch/arch-openide-datasystems.xml" output="${export.interfaces}/openide-datasystems.html" />
+    <arch answers="arch/arch-openide-dialogs.xml" output="${export.interfaces}/openide-dialogs.html" />
+    <arch answers="arch/arch-openide-lookup.xml" output="${export.interfaces}/openide-lookup.html" />
+    <arch answers="arch/arch-openide-filesystems.xml" output="${export.interfaces}/openide-filesystems.html" />
+    <arch answers="arch/arch-openide-nodes.xml" output="${export.interfaces}/openide-nodes.html" />
+    <arch answers="arch/arch-openide-explorer.xml" output="${export.interfaces}/openide-explorer.html" />
+    <arch answers="arch/arch-openide-actions.xml" output="${export.interfaces}/openide-actions.html" />
+    <arch answers="arch/arch-openide-windowsystem.xml" output="${export.interfaces}/openide-windowsystem.html" />
+    <arch answers="arch/arch-openide-utilities.xml" output="${export.interfaces}/openide-utilities.html" />
+    <arch answers="arch/arch-openide-editor.xml" output="${export.interfaces}/openide-editor.html" />
+    <arch answers="arch/arch-openide-propertysheet.xml" output="${export.interfaces}/openide-propertysheet.html" />
+    
+  </target>
+  
   <target name="apis-tidy" description="Run the Tidy HTML checker on API prose documents.">
     <apply parallel="true" failonerror="true" executable="tidy">
       <fileset dir="api/doc">
Index: editor/build.xml
===================================================================
RCS file: /cvs/editor/build.xml,v
retrieving revision 1.36
diff -u -r1.36 build.xml
--- editor/build.xml	14 Feb 2003 08:48:24 -0000	1.36
+++ editor/build.xml	5 Nov 2003 15:32:45 -0000
@@ -107,39 +107,32 @@
     <delete dir="Info"/>
   </target>
 
+  <path id="cp">
+    <pathelement location="src" />
+    <pathelement location="libsrc"/>
+    <pathelement location="../openide/openide-13javac-workaround.jar"/>
+    <pathelement location="../openide/netbeans/lib/openide.jar"/>
+    <pathelement location="../openide/loaders/netbeans/lib/openide-loaders.jar"/>
+  </path>
+
   <target name="javadoc" description="Build editor module API documentation.">
-    <tstamp/>
-    <property name="apis-footer" value="&lt;font size=-2 color=gray&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2003 Sun Microsystems, Inc. All rights reserved.&lt;/font&gt;"/>
-    <echo message="Build editor module API documentation..."/>
-    <mkdir dir="javadoc"/>
-    <javadoc destdir="javadoc"
-             packagenames="org.netbeans.editor,org.netbeans.editor.ext,org.netbeans.editor.ext.html,org.netbeans.editor.ext.java,org.netbeans.editor.ext.plain,org.netbeans.editor.ext.html.dtd,org.netbeans.modules.editor,org.netbeans.modules.editor.html,org.netbeans.modules.editor.java,org.netbeans.modules.editor.options,org.netbeans.modules.editor.plain"
-             doctitle="NetBeans editor module APIs"
-             windowtitle="NetBeans editor module APIs"
-             bottom="${apis-footer}"
-             use="true"
-             splitindex="true"
-             author="false"
-             version="false"
-             maxmemory="384m"
-    >
-      <sourcepath>
-        <pathelement location="libsrc"/>
-        <pathelement location="src"/>
-      </sourcepath>
-      <classpath>
-        <pathelement location="../core/netbeans/lib/core.jar"/>
-        <pathelement location="libsrc"/>
-	<pathelement location="../openide/openide-13javac-workaround.jar"/>
-        <fileset dir="../openide/netbeans/lib">
-          <include name="openide*.jar" />
-        </fileset>
-        <fileset dir="../core/external">
-          <include name="regexp*.jar"/>
-          <include name="xml-apis*.jar"/>
-        </fileset>
-      </classpath>
-    </javadoc>    
+     <selector id="editor_javadoc_files" >
+       <or>
+         <filename name="src/**/*.java" />
+         <filename name="libsrc/**/*.java" />
+       </or>
+     </selector>
+
+    <ant dir="../nbbuild/javadoctools" antfile="template.xml" target="javadoc" inheritRefs="true">
+        <property name="javadoc.base" location="."/>
+        <property name="javadoc.name" value="EditorAPI"/>
+        <property name="javadoc.title" value="Editor module API"/>
+		<property name="javadoc.packages" value="org.netbeans.editor,org.netbeans.editor.ext,org.netbeans.editor.ext.html,org.netbeans.editor.ext.java,org.netbeans.editor.ext.plain,org.netbeans.editor.ext.html.dtd,org.netbeans.modules.editor,org.netbeans.modules.editor.html,org.netbeans.modules.editor.java,org.netbeans.modules.editor.options,org.netbeans.modules.editor.plain"/>
+        <property name="javadoc.classpath" refid="cp"/>
+        <property name="javadoc.src" value="../../editor"/>
+        <property name="javadoc.files" value="editor_javadoc_files" />
+        <property name="javadoc.arch" location="arch/arch-editor.xml"/>
+    </ant>
   </target>
 
 </project>

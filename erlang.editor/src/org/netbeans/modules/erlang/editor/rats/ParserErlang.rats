/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

/*
 * Definition of Erlang Grammar.
 * 
 * @author Caoyuan Deng
 */
module org.netbeans.modules.erlang.editor.rats.ParserErlang;

import org.netbeans.modules.erlang.editor.rats.Character;
import org.netbeans.modules.erlang.editor.rats.Identifier;
import org.netbeans.modules.erlang.editor.rats.Keyword;
import org.netbeans.modules.erlang.editor.rats.Literal;
import org.netbeans.modules.erlang.editor.rats.Spacing;
import org.netbeans.modules.erlang.editor.rats.Symbol;

option withLocation;


public generic S = SKIP Form+ SKIP EOF ;

// Hacking for LL(k), We can not identify function and rule in current LL(k) parser,
// so just mix them in this definition:
generic Form =
  AttributeDeclaration STOP
/ FunctionDeclaration  STOP
;

// ---- Begin Attributes of Erlang

// Hacking: last ")" of define-attribute declaration is included in MacroBody
generic AttributeDeclaration =
  DefineAttribute     void:"(":s MacroName ( void:"(":s MacroParams? void:")":s )? "," MacroBody
/ ModuleAttribute     void:"(":s AtomId ( void:".":s AtomId )* ( void:",":s ModuleParams )? void:")":s
/ ExportAttribute     void:"(":s void:"[":s FunctionNames? void:"]":s void:")":s
/ ImportAttribute     void:"(":s AtomId ( void:".":s AtomId )* ( void:",":s void:"[":s FunctionNames? void:"]":s )? void:")":s
/ RecordAttribute     void:"(":s RecordName void:",":s void:"{":s RecordFieldNames void:"}":s void:")":s
/ IncludeAttribute    void:"(":s String void:")":s
/ IncludeLibAttribute void:"(":s String void:")":s
/ CompileAttribute    void:"(":s Exprs void:")":s
/ FileAttribute       void:"(":s String void:",":s Integer void:")":s
/ SpecAttribute       void:"(":s FunctionName void:"::":s TypeSig void:")":s
/ TypeAttribute       void:"(":s TypedAttrVal void:")":s
/ WildAttribute       ( void:"(":s WildAttributeContent? void:")":s )? ;


transient generic DefineAttribute     = "-define" ;
transient generic ModuleAttribute     = "-module" ;
transient generic ExportAttribute     = "-export" ;
transient generic ImportAttribute     = "-import" ;
transient generic RecordAttribute     = "-record" ;
transient generic IncludeAttribute    = "-include" ;
transient generic IncludeLibAttribute = "-include_lib" ;
transient generic CompileAttribute    = "-compile" ;
transient generic FileAttribute       = "-file" ;
transient generic SpecAttribute       = "-spec" ;
transient generic TypeAttribute       = "-type" ;
transient generic WildAttribute       = "-" AtomId ;

// Hacking for: Exprs | TypedAttrVal
transient generic WildAttributeContent =
  Expr ( ( void:",":s Expr )+
       / void:",":s TypedRecordFields
       / void:"::":s ( TypeSigs / TopType )?
       )?
;

generic ModuleParams = 
  void:"[":s void:"]":s
/ void:"[":s VarId ( void:",":s VarId )* void:"]":s
;

transient generic MacroName = AtomId / VarId ;
transient generic MacroParams = VarId ( void:",":s VarId )* ;
/* since '.' in string, for instance: "Inc. " can be regonized as STOP, we should consume Exprs first */
transient generic MacroBody = 
  Exprs void:")":s
/ ( !STOP _ )+ ;

transient generic RecordFieldNames = RecordFieldName ( void:",":s RecordFieldName )* ;
transient generic RecordFieldName  = AtomId ( void:"=":s Expr )? ( void:"::":s TopType )? ;

transient generic FunctionNames = FunctionName ( void:",":s FunctionName )* ;
transient generic FunctionName  = AtomId void:"/":s Integer ;

// ----- Begin Types

generic TypedAttrVal = 
  Expr void:"," :s  TypedRecordFields
/ Expr void:"::":s ( TypeSigs / TopType )?
;

transient generic TypedRecordFields = void:"{":s TypedExprs void:"}":s ;

transient generic TypedExprs = TypedExpr ( void:",":s TypedExpr )* ;
transient generic TypedExpr  = Expr ( void:"::":s TopType )? ;

transient generic TypeSigs = TypeSig ( void:";":s TypeSig )* ;
transient generic TypeSig =  FunType ( void:"when":k TypeGuards )? ;

transient generic TypeGuards = TypeGuard ( void:",":s TypeGuard )* ;
transient generic TypeGuard  = AtomId void:"(":s TopTypes void:")":s ;

transient generic TopTypes = TopType ( void:",":s TopType )* ;
transient generic TopType =
  TopType1
/ void:"(":s TopType1 void:")":s
;
transient generic TopType1 = Type ( void:"|":s Type )* ;

generic Type =
  VarId
/ AtomId ( void:"(":s TopTypes? void:")":s )?
/ void:"[":s TopType? ( void:",":s void:"..." )? void:"]":s
/ void:"{":s TopTypes? void:"}":s
/ void:"#":s AtomId void:"{":s FieldTypes? void:"}":s
/ BinaryType
/ IntType ( void:".." IntType )?
/ void:"fun":k void:"(":s FunType? void:")":s
;

transient generic IntType = ( "-":s )? Integer ;

generic FunType =
  "(" "." "." "." ")" void:"->":s TopType
/ void:"(":s ArgTypes? void:")":s void:"->":s TopType
;

transient generic ArgTypes = ArgType ( void:",":s ArgType )* ;
generic ArgType =
  VarId void:"::":s TopType
/ TopType
;

transient generic FieldTypes = FieldType ( void:",":s FieldType )* ;
transient generic FieldType  = AtomId void:"::":s TopType ;

generic BinaryType = 
  void:"<<":s void:">>":s
/ void:"<<":s BinBaseType ( void:",":s BinUnitType )? void:">>":s
/ void:"<<":s BinUnitType void:">>":s
;
transient generic BinBaseType = VarId void:":":s Integer ;
transient generic BinUnitType = VarId void:":":s VarId void:"*":s Integer ;

// ----- Begin Functions and Rules of Erlang

transient generic FunctionDeclaration = FunctionClauses ;
transient generic FunctionClauses = FunctionClause ( void:";":s FunctionClause )* ;
transient generic FunctionClause  = AtomId void:"(":s Exprs? void:")":s ClauseGuard? FunctionRuleClauseBody ;
transient generic FunctionRuleClauseBody = ClauseBody / RuleClauseBody ;

transient generic ClauseGuard = void:"when":k Guard ;
transient generic ClauseBody  = void:"->":s Exprs ;
transient generic RuleClauseBody = void:":-":s ListComprehensionExprs ;

// ----- Begin Terms of Erlang

generic List = 
  void:"[":s void:"]":s
/ void:"[":s Expr ( void:",":s Expr )* ListTail? void:"]":s
/ void:"[":s Expr void:"||":s ListComprehensionExprs void:"]":s
;
transient generic ListTail = void:"|":s Expr;
transient generic ListComprehensionExprs = ListComprehensionExpr ( void:",":s ListComprehensionExpr )* ;
// Hacking for LL(k), we can not write:
// ListComprehensionExpr = Expr ["<-" Expr]
//                       | Binary "<=" Expr];
// since Binary also belongs to Expr
transient generic ListComprehensionExpr = Expr ( void:"<-":s Expr / void:"<=":s Expr )? ;

// Hacking for LL(k), we can not write:
// Binary = "<<" ">>"
//        | "<<" BinElement ("," BinElement)* ">>"
//        | "<<" "<<" BinElement ("," BinElement)* ">>"  "||" ListComprehensionExprs ">>";
// since "<<" BinElement ("," BinElement)* ">>" also begins with BitExpr -> PrimaryExpr -> Binary
generic Binary = 
  void:"<<":s void:">>":s
/ void:"<<":s BinElement ( void:",":s BinElement )* void:">>":s
/ void:"<<":s BinElement  void:"||":s ListComprehensionExprs void:">>":s
;
transient generic BinElement = BitExpr OptBitSizeExpr? OptBitTypeList? ;
generic BitExpr =
  PrimaryExpr
/ PrefixOp PrimaryExpr
;
transient generic OptBitSizeExpr = void:":":s BitSizeExpr ;
transient generic OptBitTypeList = void:"/":s BitTypeList ;
transient generic BitTypeList = BitType ( void:"-":s BitType )* ;
transient generic BitType = AtomId ( void:":":s Integer )? ;
transient generic BitSizeExpr = PrimaryExpr ;

transient generic Tuple = void:"{":s Exprs? void:"}":s ;

// ----- Begin Expressions of Erlang

transient generic Exprs = Expr ( void:",":s Expr )* ;

generic Expr =
  void:"catch":k Expr
/ MatchSendExpr
;

transient generic MatchSendExpr = OrelseExpr ( void:"=":s MatchSendExpr / void:"!":s MatchSendExpr )? ;

transient generic OrelseExpr = AndalsoExpr ( void:"orelse":k OrelseExpr )? ;

transient generic AndalsoExpr = CompExpr ( void:"andalso":k AndalsoExpr )? ;

transient generic CompExpr = ListOpExpr CompOp_ListOpExpr? ;
transient generic CompOp_ListOpExpr = CompOp ListOpExpr ;

transient generic ListOpExpr = AddExpr ListOp_ListOpExpr? ;
transient generic ListOp_ListOpExpr = ListOp ListOpExpr ;

transient generic AddExpr = MultExpr AddOp_MultExpr* ;
transient generic AddOp_MultExpr = AddOp MultExpr ;

transient generic MultExpr = PrefixExpr MultOp_PrefixExpr* ;
transient generic MultOp_PrefixExpr = MultOp PrefixExpr ;

generic PrefixExpr =
  FunctionCallRecordRemoteExpr
/ PrefixOp FunctionCallRecordRemoteExpr
;

generic FunctionCallRecordRemoteExpr =
  FunctionCallExpr
/ RecordExpr;
//| RemoteExpr;

// Hacking for LL(k), FunctionCallExpr should be RemoteExpr "(" [Exprs] ")" only:
transient generic FunctionCallExpr = RemoteExpr ( void:"(":s Exprs? void:")":s )? ;

transient generic RemoteExpr = RecordFieldExpr ( void:":":s PrimaryExpr )? ;

// Hacking for LL(k), "PrimaryExpr RecordExpr" actually should be "RecordExpr":
generic RecordFieldExpr = 
  PrimaryExpr ( RecordExpr / ( void:".":s AtomId )+ )?
/ ( void:".":s AtomId )+
;

transient generic RecordExpr = void:"#":s RecordName ( void:".":s AtomId / void:"{":s RecordFields? void:"}":s )? ;
generic RecordName = AtomId / MacroId ;
transient generic RecordFields = RecordField ( void:",":s RecordField )* ;
generic RecordField = 
  AtomId void:"=":s Expr
/ VarId  void:"=":s Expr
;

/* Should always put FloatingPointLiteral before IntegerLiteral */
generic PrimaryExpr =
  Atom
/ Var
/ Float
/ Integer
/ Char
/ String String*
/ Tuple
/ List
/ Binary
/ BlockExpr
/ IfExpr
/ CaseExpr
/ ReceiveExpr
/ FunExpr
/ QueryExpr
/ ParenthesizedExpr
/ TryExpr
/ MacroExpr
;

transient generic MacroExpr = MacroId ( void:"(":s Exprs? void:")":s )? ;

transient generic ParenthesizedExpr = void:"(":s Expr void:")":s ;

transient generic BlockExpr = void:"begin":k Exprs void:"end":k ;

transient generic IfExpr    = void:"if":k IfClauses void:"end":k ;
transient generic IfClauses = IfClause ( void:";":s IfClause )* ;
transient generic IfClause  = Guard ClauseBody ;

transient generic CaseExpr  = void:"case":k Expr void:"of":k CrClauses void:"end":k ;
transient generic CrClauses = CrClause ( void:";":s CrClause )* ;
transient generic CrClause  = Expr ClauseGuard? ClauseBody ;

/* @Note Repeated element can have only one production, otherwise will throw error: unable to deduce value,
 * That's why an extra Expr_ClauseBody
 */
generic ReceiveExpr =
  void:"receive":k CrClauses ( void:"after":k Expr_ClauseBody )? void:"end":k
/ void:"receive":k             void:"after":k Expr_ClauseBody    void:"end":k
;
transient generic Expr_ClauseBody = Expr ClauseBody ;

generic FunExpr = 
  void:"fun":k ( AtomId / MacroId ) ( void:":":s ( AtomId / MacroId ) )? void:"/":s Integer
/ void:"fun":k FunClauses void:"end":k
;
transient generic FunClauses = FunClause ( void:";":s FunClause )* ;
transient generic FunClause  = void:"(":s Exprs? void:")":s ClauseGuard? ClauseBody ;

transient generic TryExpr = void:"try":k Exprs ( void:"of":k CrClauses )? TryCatch ;
generic TryCatch =
  void:"catch":k TryClauses ( void:"after":k Exprs )? void:"end":k
/ void:"after":k Exprs void:"end":k
;
transient generic TryClauses = TryClause ( void:";":s TryClause )* ;
// Hacking for LL(k), which should like?:
// TryClause = Expr [ClauseGuard] ClauseBody |
//             <AtomId> ":" Expr [ClauseGuard] ClauseBody |
//             <VarId>  ":" Expr [ClauseGuard] ClauseBody;
generic TryClause = Expr ( void:":":s Expr )? ClauseGuard? ClauseBody ;
//generic TryClause =
//  AtomId void:":":s Expr ClauseGuard? ClauseBody
/// VarId  void:":":s Expr ClauseGuard? ClauseBody
/// Expr ClauseGuard? ClauseBody
//;


transient generic QueryExpr = void:"query":k void:"[":s Expr void:"||":s ListComprehensionExprs void:"]":s void:"end":k ;

transient generic Guard = Exprs (void:";":s Exprs)* ;

generic PrefixOp =
  "+"   :s
/ "-"   :s
/ "bnot":k
/ "not" :k
;

generic MultOp =
  "/"   :s
/ "*"   :s
/ "div" :k
/ "rem" :k
/ "band":k
/ "and" :k
;

generic AddOp =
  "+"   :s
/ "-"   :s
/ "bor" :k
/ "bxor":k
/ "bsl" :k
/ "bsr" :k
/ "or"  :k
/ "xor" :k
;

generic ListOp =
  "++":s
/ "--":s
;

generic CompOp =
  "==" :s
/ "/=" :s
/ "=<" :s
/ "<"  :s
/ ">=" :s
/ ">"  :s
/ "=:=":s
/ "=/=":s
;


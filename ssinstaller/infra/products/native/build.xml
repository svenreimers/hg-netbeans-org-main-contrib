<?xml version="1.0" encoding="UTF-8"?>
<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
  Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
  
  The contents of this file are subject to the terms of either the GNU General Public
  License Version 2 only ("GPL") or the Common Development and Distribution
  License("CDDL") (collectively, the "License"). You may not use this file except in
  compliance with the License. You can obtain a copy of the License at
  http://www.netbeans.org/cddl-gplv2.html or nbbuild/licenses/CDDL-GPL-2-CP. See the
  License for the specific language governing permissions and limitations under the
  License.  When distributing the software, include this License Header Notice in
  each file and include the License file at nbbuild/licenses/CDDL-GPL-2-CP.  Sun
  designates this particular file as subject to the "Classpath" exception as provided
  by Sun in the GPL Version 2 section of the License file that accompanied this code.
  If applicable, add the following below the License Header, with the fields enclosed
  by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  Contributor(s):
  
  The Original Software is NetBeans. The Initial Developer of the Original Software
  is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun Microsystems, Inc. All
  Rights Reserved.
  
  If you wish your version of this file to be governed by only the CDDL or only the
  GPL Version 2, indicate your decision by adding "[Contributor] elects to include
  this software in this distribution under the [CDDL or GPL Version 2] license." If
  you do not indicate a single choice of license, a recipient has the option to
  distribute your version of this file under either the CDDL, the GPL Version 2 or
  to extend the choice of license to its licensees as provided above. However, if you
  add GPL Version 2 code and therefore, elected the GPL Version 2 license, then the
  option applies only if the new code is made subject to such option by the copyright
  holder.
-->

<!--
  This is the build script for the [name] nbi product package.
    
  It inherits most of the functionality from the base script for building nbi 
  product packages, while providing this instance-specific values for several
  core properties. For more details on the values of these properties see
  the build.properties file.
-->
<project name="[name]-product" default="usage" basedir=".">
    <!-- import the properties that are specific to this environment -->
    <property file="${environment.properties}"/>
    
    <property file="${build.properties}"/>
    <!-- import the properties that are specific to this product package -->
    <property file="common.properties"/>
    
    <!-- import the base script for building product packages -->
    <import file="${common.dir}/product.xml" optional="false"/>
    
    <!-- ============================================================================
      Default
    ============================================================================= -->


<target name="-build" depends="-build-engine,.build">
<!--Added by Igor Nikiforov-->
        <taskdef 
            name="esizeof"
            classname="org.netbeans.installer.infra.build.ant.ExtendedSizeOf"
            classpath="${custom.tasks.cls}"/>
<!--End of addition-->

        <!-- init the required disk space -->
        <set property="product.disk.space" 
             value="${product.disk.space.modificator}"/>
        
        <!-- init several shorthands -->
        <set 
            property="product.logic.dir" 
            value="${package.dir}/${product.logic.path}"/>
        <set 
            property="product.data.dir" 
            value="${package.dir}/${product.data.path}"/>
        
        <!-- some necessary mkdirs -->
        <mkdir dir="${packaged.data.dir}"/>
        <mkdir dir="${downloads.cache.dir}"/>
        <mkdir dir="${product.logic.dir}"/>
        <mkdir dir="${product.data.dir}"/>
        
        <!-- fetch the configuration logic jars; the first jar is handled 
             separately, if the the ${build.nbproject} has been set to true - 
             we don't need to fetch it, as we ca just copy -->
        <if property="build.nbproject" value="true">
            <set 
                property="i" 
                value="1"/>
            <set 
                property="current.file" 
                value="${product.logic.dir}/${product.logic.file.name}"/>
            
            <copy 
                file="${nbproject.dist.dir}/${nbproject.dist.file.name}"
                tofile="${current.file}"/>
            
            <!-- sign the current jar file -->
	    <if property="jarsigner.enabled" value="true">
                <signjar jar="${current.file}" 
                         keystore="${jarsigner.keystore}"
                         storepass="${jarsigner.storepass}"
                         alias="${jarsigner.alias}"
                         maxmemory="${jarsigner.xmx}"/>
             </if>
            
            <!-- calculate the metadata for the file -->
            <sizeof file="${current.file}" property="product.logic.${i}.size"/>
            <md5 file="${current.file}" property="product.logic.${i}.md5"/>
            <set property="product.logic.${i}.correct.uri"
                 value="resource:${product.logic.path}/${product.logic.file.name}"/>
            
            <property 
                name="start.index" 
                value="2"/>
        </if>
        <property name="start.index" value="1"/>
        
        <for-each from="${start.index}" 
                  to="${product.logic.length}" 
                  property="i">
            <!-- set the properties relevant to the current file -->
            <set 
                property="current.uri" 
                source="product.logic.${i}.uri"/>
            <set 
                property="current.file" 
                value="${product.logic.dir}/${product.logic.file.name}"/>
            
            <get 
                src="${current.uri}" 
                dest="${current.file}" 
                usetimestamp="true"/>
            
            <!-- sign the current jar file -->
	    <if property="jarsigner.enabled" value="true">
                <signjar 
                    jar="${current.file}" 
                    keystore="${jarsigner.keystore}"
                    storepass="${jarsigner.storepass}"
                    alias="${jarsigner.alias}"
                    maxmemory="${jarsigner.xmx}"/>
            </if>
            
            <!-- calculate the metadata for the file -->
            <sizeof 
                file="${current.file}" 
                property="product.logic.${i}.size"/>
            <md5 
                file="${current.file}" 
                property="product.logic.${i}.md5"/>
            <set 
                property="product.logic.${i}.correct.uri"
                value="resource:${product.logic.path}/${product.logic.file.name}"/>
        </for-each>
        
        <!-- fetch and repackage installation data zips -->
	<echo message="The size: ${product.data.length} "/>
        <for-each from="1" to="${product.data.length}" property="i">
            <!-- define the path to the current working file and the temporary
                 directory which should be used for repackaging -->
            <echo message="The product: ${product.data.1.uri.solaris-x86} "/>
	    <if property="product.data.${i}.uri">
	    <set 
                property="current.uri" 
                source="product.data.${i}.uri"/>
	    </if>
	    <if property="product.data.${i}.uri.${product.platforms}">
	    <set 
                property="current.uri" 
                source="product.data.${i}.uri.${product.platforms}"/>
            </if>
            <uri-to-path 
                property="current.downloaded.path" 
                uri="${current.uri}"/>
            <set 
                property="current.zip" 
                source="product.data.${i}.zip"/>
            <set 
                property="current.file" 
                value="${product.data.dir}/${product.data.file.name}"/>
            <set 
                property="current.download" 
                value="${downloads.cache.dir}/${current.downloaded.path}"/>
            <set 
                property="current.temp.dir" 
                value="${work.dir}/temp"/>
            
            <set 
                property="current.packaged.data.file" 
                value="${product.packaged.data.file}"/>
            <set 
                property="current.packaged.data.properties.file" 
                value="${product.packaged.data.properties.file}"/>
            
            <condition property="do.package.data.${i}" value="true">
                <or>
                    <equals arg1="${package.data}" arg2="true"/>
                    <and>
                        <equals 
                            arg1="${package.data}" 
                            arg2="default"/>
                        <not>
                            <and>
                                <available 
                                    file="${current.packaged.data.file}"/>
                                <available 
                                    file="${current.packaged.data.properties.file}"/>
                            </and>
                        </not>
                    </and>
                </or>
            </condition>
            <condition property="do.package.data.${i}" value="false">
                <or>
                    <equals arg1="${package.data}" arg2="false"/>
                    <and>
                        <equals 
                            arg1="${package.data}" 
                            arg2="default"/>
                        <available 
                            file="${current.packaged.data.file}"/>
                        <available 
                            file="${current.packaged.data.properties.file}"/>
                    </and>
                </or>
            </condition>
            
            <!-- if the data needs to be packaged -->
            <if property="do.package.data.${i}" value="true">
                <dirname 
                    property="current.download.${i}.dir" 
                    file="${current.download}"/>
                <set 
                    property="current.download.dir"
                    source="current.download.${i}.dir"/>
                <mkdir 
                    dir="${current.download.dir}"/>
                
                <get 
                    src="${current.uri}" 
                    dest="${current.download}"
                    usetimestamp="true"/>
                
                <!-- extract the zip file to a temporary directory, if it's a 
                     zip file, or simply move it there if it is the data we 
                     need -->
                <mkdir 
                    dir="${current.temp.dir}"/>
                <if property="current.zip" value="true">
                    <n-unzip
                        src="${current.download}" 
                        dest="${current.temp.dir}"/>
                </if>
                <if property="current.zip" value="false">
                    <copy file="${current.download}"
                          todir="${current.temp.dir}"/>
                </if>
                
                <!-- call the pre-package hook, to allow derivative scripts to 
                     perform any required operations on the data if they 
                     like -->
                <antcall target="-pre-package">
                    <param name="i" value="${i}"/>
                    <param name="data.directory" value="${current.temp.dir}"/>
                </antcall>
                
                <!-- measure its size and add it to the required disk space -->
                <esizeof 
                    file="${current.temp.dir}" 
                    property="current.disk.space"/>
                <sum 
                    arg1="${product.disk.space}" 
                    arg2="${current.disk.space}" 
                    property="product.disk.space"/>
                
                <!-- repackage (pack200, jar) and build files list -->
                <package 
                    directory="${current.temp.dir}" 
                    file="${current.file}"/>
                
                <!-- if we need to release the packaged data - copy the file 
                     and the original size to the specified directory -->
                <if property="release.packaged.data" value="true">
                    <mkdir 
                        dir="${packaged.data.dir}"/>
                    
                    <copy file="${current.file}" 
                          tofile="${current.packaged.data.file}"/>
                    <echo 
                        message="product.data.${i}.size=${current.disk.space}" 
                        file="${current.packaged.data.properties.file}"/>
                </if>
                
                <!-- remove the temporary directory -->
                <delete dir="${current.temp.dir}"/>
            </if>
            
            <!-- if the data does not need to be packaged -->
            <if property="do.package.data.${i}" value="false">
                <copy 
                    file="${current.packaged.data.file}" 
                    tofile="${current.file}"/>                              
                
                <!-- fetch the real size data -->
                <property 
                    file="${current.packaged.data.properties.file}"/>
                
                <set 
                    property="current.disk.space" 
                    source="product.data.${i}.size"/>
                <sum 
                    arg1="${product.disk.space}" 
                    arg2="${current.disk.space}" 
                    property="product.disk.space"/>
            </if>

            <!-- Added by Igor Nikiforov -->
            <copy file="${current.file}" 
            	tofile="${packaged.data.dir.release}/${product.uid},${product.version},${product.platforms},${i}.jar"/>
            <!-- End of addition -->                 

            <!-- sign the resulting jar file -->
            <if property="jarsigner.enabled" value="true">
                <signjar 
                    jar="${current.file}" 
                    keystore="${jarsigner.keystore}"
                    storepass="${jarsigner.storepass}"
                    alias="${jarsigner.alias}"
                    maxmemory="${jarsigner.xmx}"/>
	    </if>
            
            <!-- calculate the metadata for the file -->
            <sizeof 
                file="${current.file}" 
                property="product.data.${i}.size"/>
            <md5 
                file="${current.file}" 
                property="product.data.${i}.md5"/>
            <set 
                property="product.data.${i}.correct.uri"
                value="resource:${product.data.path}/${product.data.file.name}"/>
        </for-each>
        
        <!-- fetch the icon -->
        <set 
            property="product.icon.file" 
            value="${package.dir}/${product.icon.path}"/>
        
        <copy 
            file="${product.icon}" 
            tofile="${product.icon.file}"/>
        <sizeof 
            file="${product.icon.file}" 
            property="product.icon.size"/>
        <md5 
            file="${product.icon.file}" 
            property="product.icon.md5"/>
        <set 
            property="product.icon.correct.uri" 
            value="${product.icon.uri}"/>
        
        <!-- load product's localizing bundle and generate descriptor -->
        <load-locales 
            basename="${product.bundle}" 
            list="product.locales.list"/>
        <product-descriptor 
            file="${package.dir}/${package.descriptor.path}"/>
        
        <!-- create the distributive jar file and sign it -->
        <set 
            property="product.dist.file" 
            value="${dist.dir}/${product.dist.file.name}"/>
        
        <jar basedir="${package.dir}"
             destfile="${product.dist.file}" 
             compress="true">
            <manifest>
                <attribute 
                    name="Product-Descriptor" 
                    value="${package.descriptor.path}"/>
            </manifest>
        </jar>
        <if property="jarsigner.enabled" value="true">
            <signjar 
                jar="${product.dist.file}" 
                keystore="${jarsigner.keystore}"
                storepass="${jarsigner.storepass}"
                alias="${jarsigner.alias}"
                maxmemory="${jarsigner.xmx}"/>
	</if>
    </target>
    <target name="build-all">
        <antcall target="build-platform">
            <param name="product.platforms" value="solaris-x86"/>
	    <param name="product.data.length" 
		    value="${product.data.length.solaris-x86}"/>
        </antcall>
        <antcall target="build-platform">
            <param name="product.platforms" value="solaris-sparc"/>
	    <param name="product.data.length" 
		    value="${product.data.length.solaris-sparc}"/>
        </antcall>
        <antcall target="build-platform">
            <param name="product.platforms" value="linux"/>
            <param name="product.data.length" value="${product.data.1.uri.linux}"/>
        </antcall>
    </target>

    <target name="release-all">
        <antcall target="release-platform">
            <param name="product.platforms" value="solaris-x86"/>
	    <param name="product.data.length" 
		    value="${product.data.length.solaris-x86}"/>
        </antcall>
        <antcall target="release-platform">
            <param name="product.platforms" value="solaris-sparc"/>
	    <param name="product.data.length" 
		    value="${product.data.length.solaris-sparc}"/>
        </antcall>
        <antcall target="release-platform">
            <param name="product.platforms" value="linux"/>
	    <param name="product.data.length" 
		    value="${product.data.length.linux}"/>
        </antcall>

    </target>

        <target name="clean-platform" depends="clean"/>
    
    <!--
      Cleans and builds the project for a given platform.
      
      This is an aggregation target, which does not contain any functionality,
      but defines dependencies on the 'clean', 'checkout' and 'build' targets.
      
      It expects that the caller will supply the 'product.platforms' parameter,
      which will be used in other operations.
    -->
    <target name="build-platform" depends="clean-platform,checkout,build"/>
    <target name="release-platform" depends="build-platform,release"/>

    <!--
      The default target. 
      
      Does nothing except printing the usage information.
    -->
    <target name="usage">
        <echo>
            In order to 'clean', 'checkout' and 'build' the group use the 
            'build-all' target. To 'clean', 'checkout', 'build' and 
            'release' - use 'release-all'.
            
            For more details, please see the source of this build script.
        </echo>
    </target>
</project>

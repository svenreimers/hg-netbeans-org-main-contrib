/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

// Effective Java, Item 4: Avoid creating duplicate objects
new java.lang.String($s) => $s :: $s instanceof java.lang.String;
new java.lang.Boolean($b) => java.lang.Boolean.valueOf($b);

// Effective Java, item 29: Minimize the scope of local variables
{ $p$; $t $v; $intervening$; $v = $e; $q$; } => { $p$; $intervening$; $t $v = $e; $q$; } :: !assignedIn($v, $intervening$);

// Eliminate unnecessary return assignment.
{ $p$; $t $v = $e; return $v; } => { $p$; return $e; }
{ $p$; $t $v; $intervening$; $q$; $v = $e; return $v; } => { $p$; $q$; return $e; } :: !assignedIn($v, $intervening$);

// Remove unnecessary null reference test and exception (let VM do it).
if($v == null) throw new java.lang.NullPointerException(); else $v.$m($args$) => $v.$m($args$);
if($v == null) throw new java.lang.NullPointerException(); else return $v.$m($args$) => return $v.$m($args$);

// Empty string checks using String.equals() are slower than String.length().
$s.equals("") => ($s.length() == 0) :: $s instanceof java.lang.String;
"".equals($s) => ($s != null && $s.length() == 0) :: $s instanceof java.lang.String;

// Calling String.toString() is redundant.
$s.toString() => $s :: $s instanceof java.lang.String;

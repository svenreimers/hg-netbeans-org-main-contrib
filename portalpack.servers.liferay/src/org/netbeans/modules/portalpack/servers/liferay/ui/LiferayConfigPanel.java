/*
  * The contents of this file are subject to the terms of the Common Development
  * and Distribution License (the License). You may not use this file except in
  * compliance with the License.
  *
  * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  * or http://www.netbeans.org/cddl.txt.
  *
  * When distributing Covered Code, include this CDDL Header Notice in each file
  * and include the License file at http://www.netbeans.org/cddl.txt.
  * If applicable, add the following below the CDDL Header, with the fields
  * enclosed by brackets [] replaced by your own identifying information:
  * "Portions Copyrighted [year] [name of copyright owner]"
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  * Microsystems, Inc. All Rights Reserved.
  */

package org.netbeans.modules.portalpack.servers.liferay.ui;

import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.util.DirectoryChooser;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import org.netbeans.modules.portalpack.servers.core.util.Util;
import org.netbeans.modules.portalpack.servers.liferay.common.LiferayConstants;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  Satya
 */
public class LiferayConfigPanel extends ConfigPanel implements DocumentListener{
    
    private String psVersion;
    /** Creates new form LifeRayConfigPanel */
    public LiferayConfigPanel(String psVersion) {
        this.psVersion = psVersion;
        initComponents();
        initData();
        
        portalUri.getDocument().addDocumentListener(this);
        //adminConsoleUriTf.getDocument().addDocumentListener(this);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        portalUri = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        homeLabel = new javax.swing.JLabel();
        homeTf = new javax.swing.JTextField();
        homeChooseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        hostTf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        portletUriTf = new javax.swing.JTextField();

        setFont(new java.awt.Font("Tahoma", 1, 11));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(LiferayConfigPanel.class, "LBL_LIFERAY_PORTAL_SERVER")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText(org.openide.util.NbBundle.getMessage(LiferayConfigPanel.class, "LBL_PORTAL_URI")); // NOI18N

        homeLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        homeLabel.setText(org.openide.util.NbBundle.getMessage(LiferayConfigPanel.class, "LBL_LIFE_RAY_INSTALLATION_HOME")); // NOI18N

        homeTf.setEditable(false);
        homeTf.setEnabled(false);
        homeTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                homeTfFocusLost(evt);
            }
        });

        homeChooseButton.setText("...");
        homeChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeChooseButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText(org.openide.util.NbBundle.getMessage(LiferayConfigPanel.class, "LBL_HOST")); // NOI18N

        hostTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hostTfFocusLost(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setLabelFor(portletUriTf);
        jLabel6.setText(org.openide.util.NbBundle.getBundle(LiferayConfigPanel.class).getString("LBL_PORTLET_URI")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addContainerGap(579, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(169, 169, 169)
                .add(jLabel1)
                .addContainerGap(332, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(homeLabel)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, hostTf)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, homeTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(homeChooseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, portletUriTf)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, portalUri, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(homeLabel)
                    .add(homeChooseButton)
                    .add(homeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(hostTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(portalUri, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(portletUriTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void hostTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostTfFocusLost
// TODO add your handling code here:
        fireChangeEvent();
    }//GEN-LAST:event_hostTfFocusLost

    private void homeTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_homeTfFocusLost
// TODO add your handling code here:
        fireChangeEvent();
    }//GEN-LAST:event_homeTfFocusLost

    private boolean validatePCHome()
    {
        
        String dir = homeTf.getText();
        File homeDir = new File(dir);
        File portletPolicy = new File(homeDir,"config" + File.separator + "portlet-policy.xml");
        if(psVersion.equals(LiferayConstants.LR_1_0))
        {
            if(portletPolicy.exists())
            {
                setErrorMessage(NbBundle.getMessage(LiferayConfigPanel.class,"MSG_PC_2_0_HOME_NEED_PC_1_0_Home"));
                return false;
            }
        }
        File config = new File(homeDir,"config" + File.separator + "pcenv.conf");
        File lib = new File(homeDir,"lib");
        if(!config.exists() || !lib.exists())
        {           
            setErrorMessage(NbBundle.getMessage(LiferayConfigPanel.class,"MSG_INVALID_PC_HOME"));
            return false;
        }else{
            
            setErrorMessage("");
            return true;
        }
        
    }
    
    private void homeChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeChooseButtonActionPerformed
// TODO add your handling code here:
        DirectoryChooser chooser = new DirectoryChooser();
        chooser.open(System.getProperty("user.home"));
        String dir = chooser.getSelectedDir();
        if(dir != null && dir.trim().length() != 0)
            homeTf.setText(dir);
        fireChangeEvent();    
    }//GEN-LAST:event_homeChooseButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton homeChooseButton;
    private javax.swing.JLabel homeLabel;
    private javax.swing.JTextField homeTf;
    private javax.swing.JTextField hostTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField portalUri;
    private javax.swing.JTextField portletUriTf;
    // End of variables declaration//GEN-END:variables

    public void initData()
    {
       /* String[] instances = InstanceProperties.getInstanceList();
        for(int i=0;i<instances.length;i++)
        {
            instancesCombo.addItem(instances[i]);
        }*/
        
      ///  InstanceProperties intProps = InstanceProperties.getInstanceProperties(instances[1]);
        
      /// DeploymentFactoryManager.getInstance().getDisconnectedDeploymentManager("test").
       portalUri.setText("/portal");
//       adminConsoleUriTf.setText("/portletdriver/admin");
       portletUriTf.setText("/portal");
       hostTf.setText("localhost");
        
    }
    public void populateDataForCustomizer(PSConfigObject object) {
        
        //hostTf.setText(object.getHost());
        //portTf.setText(object.getPort());
        portalUri.setText(object.getPortalUri());
        homeTf.setText(object.getPSHome());
        hostTf.setText(object.getHost());
       // adminConsoleUriTf.setText(object.getProperty(LifeRayConstants.ADMIN_CONSOLE_URI));
        portletUriTf.setText(object.getProperty(LiferayConstants.PORTLET_URI));
        
        homeTf.setEnabled(false);
        hostTf.setEnabled(false);
        homeChooseButton.setEnabled(false);
        
    }

    public void read(org.openide.WizardDescriptor wizardDescriptor) {
        WizardPropertyReader reader = new WizardPropertyReader(wizardDescriptor);
        String domainDir = reader.getDomainDir();
        String pcHome = homeTf.getText();
        if(pcHome == null || pcHome.trim().length() == 0)
        {
            File pcHomeFile = new File(domainDir,"portlet-container");
            if(pcHomeFile.exists())
                homeTf.setText(pcHomeFile.getAbsolutePath());
        }
        
    }

    public void store(org.openide.WizardDescriptor d) {
             
        WizardPropertyReader wr = new WizardPropertyReader(d);                
        wr.setAdminUser("admin");
        wr.setAdminPassWord("adminadmin");
        wr.setPSHome(homeTf.getText());
        //wr.setPort(portTf.getText());
        //wr.setAdminPort(portTf.getText());
        wr.setRemote(false);
        wr.setPortalUri(portalUri.getText());
        wr.setHost(hostTf.getText());
//        wr.setProperty(LifeRayConstants.ADMIN_CONSOLE_URI,adminConsoleUriTf.getText());
        wr.setProperty(LiferayConstants.PORTLET_URI,portletUriTf.getText());
      //  wr.setPortalUri("/pcdriver");
    }

    public boolean validate(Object wizardDescriptor) {
        /*
        if(!validatePCHome())
            return false;
        
        if(!Util.isIp(hostTf.getText().trim()))
        {
            if(!Util.isHostValid(hostTf.getText().trim()))
            {
                setErrorMessage(NbBundle.getMessage(LifeRayConfigPanel.class,"MSG_NOT_A_VALID_HOST"));
                return false;
            }
        }
        
        if(portalUri.getText() == null || portalUri.getText().trim().length() == 0)
        {
            setErrorMessage(NbBundle.getMessage(LifeRayConfigPanel.class,"MSG_NOT_A_VALID_PORTAL_URI"));
            return false;
        }
        
        if(adminConsoleUriTf.getText() == null || adminConsoleUriTf.getText().trim().length() == 0)
        {
            setErrorMessage(NbBundle.getMessage(LifeRayConfigPanel.class,"MSG_NOT_A_VALID_ADMIN_URI"));
            return false;
        }

        if(portletUriTf.getText() == null || portletUriTf.getText().trim().length() == 0)
        {
            setErrorMessage(NbBundle.getMessage(LifeRayConfigPanel.class,"MSG_NOT_A_VALID_PORTLET_URI"));
            return false;
        }*/
        setErrorMessage("");
        return true;
    }

    public String getDescription() {
        return NbBundle.getMessage(LiferayConfigPanel.class, "DESC_LIFE_RAY");
    }

    public void insertUpdate(DocumentEvent e) {
        updateText();
    }

    public void removeUpdate(DocumentEvent e) {
        updateText();
    }

    public void changedUpdate(DocumentEvent e) {
        updateText();
    }
    
    public void updateText()
    {
        fireChangeEvent();
    }
    
}

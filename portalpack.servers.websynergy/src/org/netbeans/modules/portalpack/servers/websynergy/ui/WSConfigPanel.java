/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.portalpack.servers.websynergy.ui;

import org.netbeans.modules.portalpack.servers.websynergy.ui.*;
import java.io.File;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.portalpack.servers.core.WizardPropertyReader;
import org.netbeans.modules.portalpack.servers.core.api.ConfigPanel;
import org.netbeans.modules.portalpack.servers.core.api.PSStartServerInf;
import org.netbeans.modules.portalpack.servers.core.common.ServerConstants;
import org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.sunappserver.SunAppServerConstants;
import org.netbeans.modules.portalpack.servers.core.util.PSConfigObject;
import org.netbeans.modules.portalpack.servers.websynergy.common.LiferayConstants;
import org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.api.JEEServerLibrariesFactory;
import org.netbeans.modules.portalpack.servers.core.impl.j2eeservers.sunappserver.SunAppServerJEELibraries;
import org.netbeans.modules.portalpack.servers.websynergy.common.WSConstants;
import org.netbeans.modules.portalpack.servers.websynergy.impl.LiferayHelper;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  Satya
 */
public class WSConfigPanel extends ConfigPanel implements DocumentListener {

    private String psVersion;
    private int lrVersion = 1;
    private PSConfigObject psObject;
   
    /** Creates new form LifeRayConfigPanel */
    public WSConfigPanel(String psVersion) {
        this.psVersion = psVersion;
        initComponents();
        initData();

        portalUri.getDocument().addDocumentListener(this);
        autoDeployTf.getDocument().addDocumentListener(this);
        portalDepDirTf.getDocument().addDocumentListener(this);
    //adminConsoleUriTf.getDocument().addDocumentListener(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        portalUri = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        hostTf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        autoDeployTf = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        portalDepDirTf = new javax.swing.JTextField();
        portalDeployBrowseButton = new javax.swing.JButton();
        directoryDeploymentCB = new javax.swing.JCheckBox();
        getButton = new javax.swing.JButton();

        setFont(new java.awt.Font("Tahoma", 1, 11));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_WS_PORTAL_SERVER")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_PORTAL_URI")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_HOST")); // NOI18N

        hostTf.setEditable(false);
        hostTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hostTfFocusLost(evt);
            }
        });

        jLabel3.setLabelFor(autoDeployTf);
        jLabel3.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_Auto_Deploy_Dir")); // NOI18N

        browseButton.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_BrowseButton")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_Portal_Deploy_Dir")); // NOI18N

        portalDeployBrowseButton.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_BrowseButton")); // NOI18N
        portalDeployBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portalDeployBrowseButtonActionPerformed(evt);
            }
        });

        directoryDeploymentCB.setText(org.openide.util.NbBundle.getMessage(WSConfigPanel.class, "LBL_DIRECTORY_DEPLOYMENT")); // NOI18N

        getButton.setText("Get");
        getButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(hostTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .add(autoDeployTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .add(portalDepDirTf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(portalDeployBrowseButton, 0, 0, Short.MAX_VALUE)
                            .add(browseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(getButton))
                    .add(portalUri, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(directoryDeploymentCB, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap(325, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(60, 60, 60))
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );

        layout.linkSize(new java.awt.Component[] {browseButton, getButton, portalDeployBrowseButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel2)
                    .add(hostTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(portalUri, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(autoDeployTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel3))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(browseButton)
                        .add(getButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(portalDepDirTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(portalDeployBrowseButton)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(directoryDeploymentCB)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        browseButton.getAccessibleContext().setAccessibleDescription("null");
    }// </editor-fold>//GEN-END:initComponents

    private void hostTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostTfFocusLost
// TODO add your handling code here:
        fireChangeEvent();
    }//GEN-LAST:event_hostTfFocusLost

private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
// TODO add your handling code here:
    String autoDeployLoc = browseAutoDeployLocation();
    if (autoDeployLoc != null) {
        autoDeployTf.setText(autoDeployLoc);
    }
}//GEN-LAST:event_browseButtonActionPerformed

private void portalDeployBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portalDeployBrowseButtonActionPerformed
// TODO add your handling code here:
    String portalDeployDirLoc = browseAutoDeployLocation();
    if (portalDeployDirLoc != null) {
        portalDepDirTf.setText(portalDeployDirLoc);
    }
}//GEN-LAST:event_portalDeployBrowseButtonActionPerformed

private void getButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getButtonActionPerformed

    String autoDeployLoc = LiferayHelper.getAutoDeployDirectory(psObject, Boolean.TRUE);
    if (autoDeployLoc == null) {
        DialogDisplayer.getDefault().notify(
                   new NotifyDescriptor.Message(NbBundle.getMessage(
                   WSConfigPanel.class, "LBL_AUTO_DEPLOY_DIR_SERVER_NOT_RUNNING")));
        return;
    } else {
        autoDeployTf.setText(autoDeployLoc);
    }
}//GEN-LAST:event_getButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField autoDeployTf;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox directoryDeploymentCB;
    private javax.swing.JButton getButton;
    private javax.swing.JTextField hostTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField portalDepDirTf;
    private javax.swing.JButton portalDeployBrowseButton;
    private javax.swing.JTextField portalUri;
    // End of variables declaration//GEN-END:variables

    public void initData() {
        portalUri.setText("/");
        hostTf.setText("localhost");

    }

    public void populateDataForCustomizer(PSConfigObject object) {
        psObject = object;
        //hostTf.setText(object.getHost());
        //portTf.setText(object.getPort());
        portalUri.setText(object.getPortalUri());

        hostTf.setText(object.getHost());
        autoDeployTf.setText(object.getProperty(LiferayConstants.AUTO_DEPLOY_DIR));
        portalDepDirTf.setText(object.getProperty(LiferayConstants.LR_PORTAL_DEPLOY_DIR));

        hostTf.setEnabled(false);
        directoryDeploymentCB.setSelected(object.isDirectoryDeployment());
        //browseButton.setEnabled(false);
        
        String lv = object.getProperty(LiferayConstants.LR_VERSION);
        
        try{
            if(lv != null) {
                lrVersion = Integer.parseInt(lv);
            }
        }catch(Exception e) {
            
        }

    }

    public void read(org.openide.WizardDescriptor wizardDescriptor) {

        WizardPropertyReader reader = new WizardPropertyReader(wizardDescriptor);
       
        String domainDir = reader.getDomainDir();
        
        //for older websynergy (Before webspace 10 RR release)
        File webSynergyHomeFile = new File(domainDir, "websynergy");
        autoDeployTf.setText(webSynergyHomeFile.getAbsolutePath() +
                  File.separator + "deploy");      

        //Set portal app deploy dir
        String serverType = reader.getServerType();

        if (serverType.equals(ServerConstants.SUN_APP_SERVER_9)) {

            if (isWebSynergy(reader)) {
                
               String deployDir = JEEServerLibrariesFactory.getJEEServerLibraries(serverType).getWebAppInstallDirectory(reader)
                        + File.separator + WSConstants.WS_APPLICATION_NAME;
               portalDepDirTf.setText(deployDir);
               
               String portalKernel = JEEServerLibrariesFactory.getJEEServerLibraries(serverType).getPortalServerLibraryLocation(reader) +
                    File.separator + "portal-kernel.jar";
               lrVersion = getLiferayVersion(portalKernel);
               
               if(lrVersion > 5200) {
                    autoDeployTf.setText("");
                    autoDeployTf.setEnabled(false);
                    browseButton.setEnabled(false);
                    getButton.setEnabled(false);
                }
                
            }
        }
        
    }

    private boolean isWebSynergy(WizardPropertyReader reader) {

        String serverType = reader.getServerType();

        if (serverType.equals(ServerConstants.SUN_APP_SERVER_9)) {

            String deployDir = JEEServerLibrariesFactory.getJEEServerLibraries(serverType).getWebAppInstallDirectory(reader)
                        + File.separator + WSConstants.WS_APPLICATION_NAME;
            
            File webSynergyDepDir = new File(deployDir);          
            
            if (webSynergyDepDir.exists()) {

                return true;
            }
        }

        return false;
    }

    public void store(org.openide.WizardDescriptor d) {

        WizardPropertyReader wr = new WizardPropertyReader(d);
       /// wr.setAdminUser("admin");
       /// wr.setAdminPassWord("adminadmin");

        //wr.setPort(portTf.getText());
        //wr.setAdminPort(portTf.getText());

        wr.setRemote(false);
        wr.setPortalUri(portalUri.getText());
        wr.setHost(hostTf.getText());
        wr.setProperty(LiferayConstants.AUTO_DEPLOY_DIR, autoDeployTf.getText());
        wr.setProperty(LiferayConstants.LR_PORTAL_DEPLOY_DIR, portalDepDirTf.getText());
        wr.setDirectoryDeployment(directoryDeploymentCB.isSelected());
        
        //String gf_version = SunAppServerJEELibraries.getGlassFishVersion(wr.getServerHome());
        //wr.setProperty(SunAppServerConstants.GLASSFISH_VERSON, gf_version);
        
        wr.setProperty(LiferayConstants.LR_VERSION, String.valueOf(lrVersion));
        
        PortalEXTModifier.setDeveloperMode(wr.getProperty(LiferayConstants.LR_PORTAL_DEPLOY_DIR));
    }

    public boolean validate(Object wizardDescriptor) {
        if (wizardDescriptor == null) {
            return true;
        }
        WizardPropertyReader wr = new WizardPropertyReader(((WizardDescriptor) wizardDescriptor));
        
         File file = new File(JEEServerLibrariesFactory.getJEEServerLibraries(wr.getServerType()).getPortalServerLibraryLocation(wr)
                 + File.separator + "portal-service.jar");
         if (!file.exists()) {

                if (!isWebSynergy(wr)) {
                    setErrorMessage(NbBundle.getMessage(WSConfigPanel.class, "MSG_NO_WEBSYNERGY_INSTALLATION_FOUND"));
                    autoDeployTf.setText("");
                    return false;
                } else {
                }
         } 

        String autoDeployDir = autoDeployTf.getText();
        if (autoDeployDir == null || autoDeployDir.trim().length() == 0 && lrVersion <= 5200) {
            setErrorMessage(NbBundle.getMessage(WSConfigPanel.class, "MSG_INVALID_AUTODEPLOY_DIR"));
            return false;
        }
        
        String portalDeployDir = portalDepDirTf.getText();
        if (portalDeployDir == null || portalDeployDir.trim().length() == 0) {
            setErrorMessage(NbBundle.getMessage(WSConfigPanel.class, "MSG_INVALID_PORTALDEPLOY_DIR"));
            return false;
        }

        String portalUriString = portalUri.getText();
        if (portalUriString == null || portalUriString.trim().length() == 0) {
            setErrorMessage(NbBundle.getMessage(WSConfigPanel.class, "MSG_NOT_A_VALID_PORTAL_URI"));
            return false;
        }

        String host = hostTf.getText();
        if (host == null || host.trim().length() == 0) {
            setErrorMessage(NbBundle.getMessage(WSConfigPanel.class, "MSG_NOT_A_VALID_HOST"));
            return false;
        }

        setErrorMessage("");
        return true;
    }

    private String browseAutoDeployLocation() {
        String autoDeployLocation = null;
        JFileChooser chooser = getJFileChooser();
        int returnValue = chooser.showDialog(SwingUtilities.getWindowAncestor(this),
                NbBundle.getMessage(WSConfigPanel.class, "LBL_ChooserName")); //NOI18N

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            autoDeployLocation = chooser.getSelectedFile().getAbsolutePath();
        }
        return autoDeployLocation;
    }
    
    private JFileChooser getJFileChooser() {

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(NbBundle.getMessage(WSConfigPanel.class, "LBL_ChooserName")); //NOI18N

        chooser.setDialogType(JFileChooser.CUSTOM_DIALOG);

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setApproveButtonMnemonic("Choose_Button_Mnemonic".charAt(0)); //NOI18N

        chooser.setMultiSelectionEnabled(false);
        chooser.setApproveButtonToolTipText(NbBundle.getMessage(WSConfigPanel.class, "LBL_ChooserName")); //NOI18N

        chooser.getAccessibleContext().setAccessibleName(NbBundle.getMessage(WSConfigPanel.class, "LBL_ChooserName")); //NOI18N

        chooser.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(WSConfigPanel.class, "LBL_ChooserName")); //NOI18N

        // set the current directory
        String dir = System.getProperty("user.home");
        if (dir != null) {
            chooser.setSelectedFile(new File(dir));
        }
        return chooser;
    }

    public String getDescription() {
        return NbBundle.getMessage(WSConfigPanel.class, "DESC_WS");
    }
    
     private int getLiferayVersion(String portalKernelJar) {
        
        try{
            URLClassLoader loader = new URLClassLoader(
                    new URL[]{new File(portalKernelJar).toURI().toURL()});

            Class releaseClass = loader.loadClass("com.liferay.portal.kernel.util.ReleaseInfo");
            Method gV = releaseClass.getMethod("getBuildNumber");
            Integer version = (Integer)gV.invoke(null,null);
            return version.intValue();
        }catch(Exception e) {
            return 1;
        }           	
    }

    public void insertUpdate(DocumentEvent e) {
        updateText();
    }

    public void removeUpdate(DocumentEvent e) {
        updateText();
    }

    public void changedUpdate(DocumentEvent e) {
        updateText();
    }

    public void updateText() {
        fireChangeEvent();
    }
}

/*
 * AddFinderUI.java
 *
 * Created on October 10, 2008, 11:58 AM
 */

package org.netbeans.modules.portalpack.websynergy.servicebuilder.design.view.ui;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.netbeans.modules.portalpack.websynergy.servicebuilder.beans.Column;
import org.netbeans.modules.portalpack.websynergy.servicebuilder.beans.Entity;
import org.netbeans.modules.portalpack.websynergy.servicebuilder.beans.Finder;
import org.netbeans.modules.portalpack.websynergy.servicebuilder.beans.FinderColumn;

/**
 *
 * @author  satyaranjan
 */
public class AddFinderUI extends javax.swing.JDialog {

    private String[] COMPARATORS = {" ","=", "!=", "<", "<=", ">", ">=", "LIKE", "is"};
    
    private Entity entity;
    private Finder finder;
    private DefaultListModel availableModel;
    private DefaultListModel finderModel;
    private boolean ok;
    
    private String finderName;
    private String returnType;
    private List<FinderColumnData> finderColums;
    /** Creates new form AddFinderUI */
    public AddFinderUI(java.awt.Frame parent,Entity entity) {
        super(parent, true);
        this.entity = entity;
        initData();
        initComponents();
        enableDisableAndPopulateComponents();
        setLocation(parent.getX() + (parent.getWidth() - getWidth()) / 2, parent.getY() + (parent.getHeight() - getHeight()) / 2);
    }
    
    public AddFinderUI(java.awt.Frame parent,Entity entity, Finder finder) {
        super(parent, true);
        this.entity = entity;
        this.finder = finder;
        initData();
        initComponents();
        enableDisableAndPopulateComponents();
        setLocation(parent.getX() + (parent.getWidth() - getWidth()) / 2, parent.getY() + (parent.getHeight() - getHeight()) / 2);
    }
    
    private void enableDisableAndPopulateComponents() {
        if(finder == null){
            updateButton.setEnabled(false);
            addFinderButton.setEnabled(true);
        } else {
            
            finderNameTf.setText(finder.getName());
            returnTypeTf.setText(finder.getReturnType());
            finderNameTf.setEnabled(false);
            updateButton.setEnabled(true);
            addFinderButton.setEnabled(false);
        }
    }
    
    private void initData() {
        
        Column[] cols = entity.getColumn();
        
        availableModel = new DefaultListModel();
        finderModel = new DefaultListModel();
        
        for(Column col:cols) {
            availableModel.addElement(col.getName());
        }
        
        //means update mode.
        if(finder != null){
            
            FinderColumn[] finderColumns = finder.getFinderColumn();
            for(FinderColumn finderCol:finderColumns) {
                
                String name = finderCol.getName();
                availableModel.removeElement(name);
                boolean caseSensitive = true? finderCol.getCaseSensitive() != null 
                                              && finderCol.getCaseSensitive().equals("true"):false;
                FinderColumnData colData = 
                        new FinderColumnData((String)name, finderCol.getComparator(), caseSensitive);
                finderModel.addElement(colData);
                
            }
            
        } else {
            
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        finderNameTf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        returnTypeTf = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableColsList = new javax.swing.JList(availableModel);
        jScrollPane2 = new javax.swing.JScrollPane();
        finderColsList = new javax.swing.JList(finderModel);
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addColumnButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        propertiesButton = new javax.swing.JButton();
        addFinderButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.title")); // NOI18N

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.jLabel1.text")); // NOI18N

        finderNameTf.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.finderNameTf.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.jLabel6.text")); // NOI18N

        returnTypeTf.setText("Collection");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel6))
                .add(43, 43, 43)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(returnTypeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(finderNameTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(finderNameTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel6)
                    .add(returnTypeTf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setViewportView(availableColsList);

        jScrollPane2.setViewportView(finderColsList);

        jLabel4.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.jLabel5.text")); // NOI18N

        addColumnButton.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.addColumnButton.text")); // NOI18N
        addColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColumnButtonActionPerformed(evt);
            }
        });

        removeButton.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        propertiesButton.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.propertiesButton.text")); // NOI18N
        propertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(propertiesButton)
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, addColumnButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, removeButton))))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                        .add(177, 177, 177)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {addColumnButton, propertiesButton, removeButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.linkSize(new java.awt.Component[] {jScrollPane1, jScrollPane2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                .add(22, 22, 22))
            .add(jPanel2Layout.createSequentialGroup()
                .add(94, 94, 94)
                .add(addColumnButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(propertiesButton)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        addFinderButton.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.addFinderButton.text")); // NOI18N
        addFinderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFinderButtonActionPerformed(evt);
            }
        });

        closeButton.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.closeButton.text")); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        updateButton.setText(org.openide.util.NbBundle.getMessage(AddFinderUI.class, "AddFinderUI.updateButton.text")); // NOI18N
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(layout.createSequentialGroup()
                            .add(addFinderButton)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(updateButton)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(closeButton))
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {addFinderButton, closeButton, updateButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(closeButton)
                    .add(addFinderButton)
                    .add(updateButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public String getFinderName() {
        return finderName;
    }

    public String getReturnType() {
        return returnType;
    }
    
    public List<FinderColumnData> getFinderColumns() {
        return finderColums;
    }
    
    public boolean isOK() {
        return ok;
    }
    
private void addColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColumnButtonActionPerformed
// TODO ok your handling code here:
    Object[] values = (Object []) availableColsList.getSelectedValues();
    for(Object v:values){
        //String colName = availableColsList.remove
        availableModel.removeElement(v);
        FinderColumnData colData = new FinderColumnData((String)v, "", false);
        finderModel.addElement(colData);
    }
}//GEN-LAST:event_addColumnButtonActionPerformed

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
// TODO ok your handling code here:
    Object[] values = (Object []) finderColsList.getSelectedValues();
    for(Object v:values){
        //String colName = availableColsList.remove
       
        finderModel.removeElement(v);
        
        availableModel.addElement(((FinderColumnData)v).getName());
    }
}//GEN-LAST:event_removeButtonActionPerformed

private void addFinderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFinderButtonActionPerformed
// TODO ok your handling code here:
    ok = true;
    finderName = finderNameTf.getText();
    returnType = returnTypeTf.getText();
    
    finderColums = new ArrayList();
    Enumeration en = finderModel.elements();
    while(en.hasMoreElements()) {
        
        finderColums.add((FinderColumnData)en.nextElement());
    }
    
    dispose();
}//GEN-LAST:event_addFinderButtonActionPerformed

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
// TODO ok your handling code here:
    ok = false;
    dispose();
}//GEN-LAST:event_closeButtonActionPerformed

private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesButtonActionPerformed
// TODO ok your handling code here:
    Object v = finderColsList.getSelectedValue();
    if(v == null)
        return;
    FinderColumnDetail dtl = new FinderColumnDetail(this,(FinderColumnData)v);
    dtl.setVisible(true);
    if(!dtl.isSuccess())
        return;
    ((FinderColumnData)v).setComparator(dtl.getComparator());
    ((FinderColumnData)v).setCaseSensitive(dtl.isCaseSensitive());
}//GEN-LAST:event_propertiesButtonActionPerformed

private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
// TODO ok your handling code here:
    ok = true;
    finderName = finderNameTf.getText();
    returnType = returnTypeTf.getText();
    
    finderColums = new ArrayList();
    Enumeration en = finderModel.elements();
    while(en.hasMoreElements()) {
        
        finderColums.add((FinderColumnData)en.nextElement());
    }
    
    dispose();
}//GEN-LAST:event_updateButtonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColumnButton;
    private javax.swing.JButton addFinderButton;
    private javax.swing.JList availableColsList;
    private javax.swing.JButton closeButton;
    private javax.swing.JList finderColsList;
    private javax.swing.JTextField finderNameTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton propertiesButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField returnTypeTf;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    public class CustomListCellRenderer implements ListCellRenderer {

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            
            if(isSelected) {
                
                ListPanel lp = new ListPanel((String)value);
                return lp;
            } else {
                return new JLabel((String)value);
            }
        }
    }
    
    
}

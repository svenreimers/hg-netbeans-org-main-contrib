/*
 * ControlPanel.java
 *
 * Created on May 17, 2007, 2:20 PM
 */

package org.netbeans.modules.editor.bracesmatching;

import javax.swing.text.JTextComponent;

/**
 *
 * @author  vita
 */
public class ControlPanel extends javax.swing.JPanel {
    
    private static String [][] SEARCH_DIRECTIONS = new String [][] {
        new String [] { MasterMatcher.D_BACKWARD, "Backward Only" }, //NOI18N
        new String [] { MasterMatcher.D_BACKWARD_PREFERRED, "Backward Preferred" }, //NOI18N
        new String [] { MasterMatcher.D_FORWARD, "Forward Only" }, //NOI18N
        new String [] { MasterMatcher.D_FORWARD_PREFERRED, "Forward Preferred" }, //NOI18N
    };
    
    private JTextComponent component;
    
    /** Creates new form ControlPanel */
    public ControlPanel(JTextComponent component) {
        this.component = component;
        
        initComponents();
        
        this.backwardLookahead.setText(getBwdLookahead(component));
        this.forwardLookahead.setText(getFwdLookahead(component));
        this.searchDirection.setSelectedItem(getSearchDirection(component));
        this.showAmbiguousOrigins.setSelected(getShowAmbiguousOrigins(component));
    }

    public void applyChanges() {
        setBwdLookahead(component, backwardLookahead.getText());
        setFwdLookahead(component, forwardLookahead.getText());
        setSearchDirection(component, (String)searchDirection.getSelectedItem());
        setShowAmbiguousOrigins(component, showAmbiguousOrigins.isSelected());
    }
    
    private static String getBwdLookahead(JTextComponent component) {
        Object value = component.getClientProperty(MasterMatcher.PROP_MAX_BACKWARD_LOOKAHEAD);
        return value == null ? "" : value.toString();
    }

    private static void setBwdLookahead(JTextComponent component, String value) {
        if (value == null || value.trim().length() == 0) {
            component.putClientProperty(MasterMatcher.PROP_MAX_BACKWARD_LOOKAHEAD, null);
        } else {
            component.putClientProperty(MasterMatcher.PROP_MAX_BACKWARD_LOOKAHEAD, value);
        }
    }
    
    private static String getFwdLookahead(JTextComponent component) {
        Object value = component.getClientProperty(MasterMatcher.PROP_MAX_FORWARD_LOOKAHEAD);
        return value == null ? "" : value.toString();
    }

    private static void setFwdLookahead(JTextComponent component, String value) {
        if (value == null || value.trim().length() == 0) {
            component.putClientProperty(MasterMatcher.PROP_MAX_FORWARD_LOOKAHEAD, null);
        } else {
            component.putClientProperty(MasterMatcher.PROP_MAX_FORWARD_LOOKAHEAD, value);
        }
    }
    
    private static String getSearchDirection(JTextComponent component) {
        Object value = component.getClientProperty(MasterMatcher.PROP_ALLOWED_SEARCH_DIRECTION);
        if (value != null) {
            String s = value.toString();
            for (String [] pair : SEARCH_DIRECTIONS) {
                if (pair[0].equals(s)) {
                    return pair[1];
                }
            }
        }
        return "";
    }

    private static void setSearchDirection(JTextComponent component, String value) {
        String s = null;
        if (value != null) {
            for (String [] pair : SEARCH_DIRECTIONS) {
                if (pair[1].equals(value)) {
                    s = pair[0];
                    break;
                }
            }
        }
        component.putClientProperty(MasterMatcher.PROP_ALLOWED_SEARCH_DIRECTION, s);
    }

    private static boolean getShowAmbiguousOrigins(JTextComponent component) {
        Object value = component.getClientProperty(MasterMatcher.PROP_SHOW_AMBIGUOUS_ORIGINS);
        return value == null ? false : Boolean.valueOf(value.toString()).booleanValue();
    }

    private static void setShowAmbiguousOrigins(JTextComponent component, boolean value) {
        component.putClientProperty(MasterMatcher.PROP_SHOW_AMBIGUOUS_ORIGINS, value);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        backwardLookahead = new javax.swing.JTextField();
        forwardLookahead = new javax.swing.JTextField();
        searchDirection = new javax.swing.JComboBox();
        showAmbiguousOrigins = new javax.swing.JCheckBox();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "jLabel4.text")); // NOI18N

        backwardLookahead.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "backwardLookahead.text")); // NOI18N

        forwardLookahead.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "forwardLookahead.text")); // NOI18N

        searchDirection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Backward Only", "Backward Preferred", "Forward Only", "Forward Preferred" }));

        showAmbiguousOrigins.setText(org.openide.util.NbBundle.getMessage(ControlPanel.class, "jCheckBox1.text")); // NOI18N
        showAmbiguousOrigins.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        showAmbiguousOrigins.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backwardLookahead, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(forwardLookahead, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchDirection, 0, 181, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(showAmbiguousOrigins, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(backwardLookahead, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(forwardLookahead, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(searchDirection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(showAmbiguousOrigins))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField backwardLookahead;
    private javax.swing.JTextField forwardLookahead;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JComboBox searchDirection;
    private javax.swing.JCheckBox showAmbiguousOrigins;
    // End of variables declaration//GEN-END:variables
    
}

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.docbook.project.wizard;

import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.validation.api.Problem;
import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.Validator;
import org.netbeans.validation.api.builtin.Validators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.ValidationUI;
import org.openide.WizardDescriptor;

/**
 *
 * @author  Tim Boudreau
 */
public class ProjectOutlinePanel extends javax.swing.JPanel implements ValidationUI, Validator<String> {
    private ValidationGroup grp = ValidationGroup.create(this);
    public ProjectOutlinePanel() {
        initComponents();
        Font f = UIManager.getFont ("controlFont");
        if (f != null) {
            instructions.setFont (f);
        }
        grp.add(outline, Validators.REQUIRE_NON_EMPTY_STRING.forString(true), this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        instructions = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outline = new javax.swing.JTextArea();
        splitBox = new javax.swing.JCheckBox();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        instructions.setBackground(javax.swing.UIManager.getDefaults().getColor("control"));
        instructions.setColumns(20);
        instructions.setFont(getFont());
        instructions.setLineWrap(true);
        instructions.setRows(5);
        instructions.setText(org.openide.util.NbBundle.getMessage(ProjectOutlinePanel.class, "ProjectOutlinePanel.instructions.text")); // NOI18N
        instructions.setWrapStyleWord(true);
        jScrollPane1.setViewportView(instructions);

        outline.setColumns(20);
        outline.setRows(5);
        jScrollPane2.setViewportView(outline);

        splitBox.setText(org.openide.util.NbBundle.getMessage(ProjectOutlinePanel.class, "ProjectOutlinePanel.splitBox.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                    .add(splitBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 253, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(splitBox)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    WizardDescriptorAdapter adap;
    public void load (final WizardDescriptor wiz) {
        adap = new WizardDescriptorAdapter(wiz);
        grp.modifyComponents(new Runnable() {
            public void run() {
                boolean split = Boolean.TRUE.equals(wiz.getProperty("split")); //NOI18N
                splitBox.setSelected(split);
                String outl = (String) wiz.getProperty("outline"); //NOI18N
                if (outl != null) {
                    outline.setText(outl);
                }
            }
        });
    }

    public void save (WizardDescriptor wiz) {
        wiz.putProperty("split", splitBox.isSelected()); //NOI18N
        wiz.putProperty ("outline", outline.getText()); //NOI18N
    }

    public boolean check() {
        return grp.validateAll() == null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea instructions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea outline;
    private javax.swing.JCheckBox splitBox;
    // End of variables declaration//GEN-END:variables

    public void clearProblem() {
        if (adap != null) {
            adap.clearProblem();
        }
        if (cl != null) {
            cl.stateChanged (new ChangeEvent(this));
        }
    }

    public void setProblem(Problem prblm) {
        if (adap != null) {
            adap.setProblem(prblm);
        }
        if (cl != null) {
            cl.stateChanged (new ChangeEvent(this));
        }
    }

    private ChangeListener cl;
    void addChangeListener (ChangeListener cl) {
        this.cl = cl;
    }

    public boolean validate(Problems prblms, String compName, String model) {
        String[] split = model.split("\n");
        List<String> list = Arrays.asList(split);
        Set <String> set = new HashSet<String>(list);
        if (set.size() != list.size()) {
            list = new ArrayList<String>(list);
            for (String s : set) {
                list.remove(s);
            }
            prblms.add("Duplicate entries '" + list + "'");
            return false;
        }
        return true;
    }
    
}
